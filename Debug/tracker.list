
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006630  08006630  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006638  08006638  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000098  080066d8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  080066d8  000210b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d37  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140a  00000000  00000000  00024df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00026208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bd92  00000000  00000000  000287e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003155  00000000  00000000  0003457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000376cf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003f50  00000000  00000000  00037720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006410 	.word	0x08006410

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08006410 	.word	0x08006410

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_ldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d115      	bne.n	800028c <__aeabi_ldivmod+0x30>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d113      	bne.n	800028c <__aeabi_ldivmod+0x30>
 8000264:	2900      	cmp	r1, #0
 8000266:	db06      	blt.n	8000276 <__aeabi_ldivmod+0x1a>
 8000268:	dc01      	bgt.n	800026e <__aeabi_ldivmod+0x12>
 800026a:	2800      	cmp	r0, #0
 800026c:	d006      	beq.n	800027c <__aeabi_ldivmod+0x20>
 800026e:	2000      	movs	r0, #0
 8000270:	43c0      	mvns	r0, r0
 8000272:	0841      	lsrs	r1, r0, #1
 8000274:	e002      	b.n	800027c <__aeabi_ldivmod+0x20>
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	0609      	lsls	r1, r1, #24
 800027a:	2000      	movs	r0, #0
 800027c:	b407      	push	{r0, r1, r2}
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <__aeabi_ldivmod+0x2c>)
 8000280:	a101      	add	r1, pc, #4	; (adr r1, 8000288 <__aeabi_ldivmod+0x2c>)
 8000282:	1840      	adds	r0, r0, r1
 8000284:	9002      	str	r0, [sp, #8]
 8000286:	bd03      	pop	{r0, r1, pc}
 8000288:	ffffffd1 	.word	0xffffffd1
 800028c:	b403      	push	{r0, r1}
 800028e:	4668      	mov	r0, sp
 8000290:	b501      	push	{r0, lr}
 8000292:	9802      	ldr	r0, [sp, #8]
 8000294:	f000 f93e 	bl	8000514 <__gnu_ldivmod_helper>
 8000298:	9b01      	ldr	r3, [sp, #4]
 800029a:	469e      	mov	lr, r3
 800029c:	b002      	add	sp, #8
 800029e:	bc0c      	pop	{r2, r3}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_uldivmod>:
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d111      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d10f      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_uldivmod+0xe>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uldivmod+0x16>
 80002b4:	2100      	movs	r1, #0
 80002b6:	43c9      	mvns	r1, r1
 80002b8:	0008      	movs	r0, r1
 80002ba:	b407      	push	{r0, r1, r2}
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__aeabi_uldivmod+0x24>)
 80002be:	a102      	add	r1, pc, #8	; (adr r1, 80002c8 <__aeabi_uldivmod+0x24>)
 80002c0:	1840      	adds	r0, r0, r1
 80002c2:	9002      	str	r0, [sp, #8]
 80002c4:	bd03      	pop	{r0, r1, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	ffffff91 	.word	0xffffff91
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f852 	bl	800037c <__udivmoddi4>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_lmul>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	46ce      	mov	lr, r9
 80002e8:	4647      	mov	r7, r8
 80002ea:	b580      	push	{r7, lr}
 80002ec:	0007      	movs	r7, r0
 80002ee:	4699      	mov	r9, r3
 80002f0:	0c3b      	lsrs	r3, r7, #16
 80002f2:	469c      	mov	ip, r3
 80002f4:	0413      	lsls	r3, r2, #16
 80002f6:	0c1b      	lsrs	r3, r3, #16
 80002f8:	001d      	movs	r5, r3
 80002fa:	000e      	movs	r6, r1
 80002fc:	4661      	mov	r1, ip
 80002fe:	0400      	lsls	r0, r0, #16
 8000300:	0c14      	lsrs	r4, r2, #16
 8000302:	0c00      	lsrs	r0, r0, #16
 8000304:	4345      	muls	r5, r0
 8000306:	434b      	muls	r3, r1
 8000308:	4360      	muls	r0, r4
 800030a:	4361      	muls	r1, r4
 800030c:	18c0      	adds	r0, r0, r3
 800030e:	0c2c      	lsrs	r4, r5, #16
 8000310:	1820      	adds	r0, r4, r0
 8000312:	468c      	mov	ip, r1
 8000314:	4283      	cmp	r3, r0
 8000316:	d903      	bls.n	8000320 <__aeabi_lmul+0x3c>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	025b      	lsls	r3, r3, #9
 800031c:	4698      	mov	r8, r3
 800031e:	44c4      	add	ip, r8
 8000320:	4649      	mov	r1, r9
 8000322:	4379      	muls	r1, r7
 8000324:	4372      	muls	r2, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	4463      	add	r3, ip
 800032a:	042d      	lsls	r5, r5, #16
 800032c:	0c2d      	lsrs	r5, r5, #16
 800032e:	18c9      	adds	r1, r1, r3
 8000330:	0400      	lsls	r0, r0, #16
 8000332:	1940      	adds	r0, r0, r5
 8000334:	1889      	adds	r1, r1, r2
 8000336:	bcc0      	pop	{r6, r7}
 8000338:	46b9      	mov	r9, r7
 800033a:	46b0      	mov	r8, r6
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)

08000340 <__aeabi_d2uiz>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2200      	movs	r2, #0
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <__aeabi_d2uiz+0x38>)
 8000346:	0004      	movs	r4, r0
 8000348:	000d      	movs	r5, r1
 800034a:	f001 faa7 	bl	800189c <__aeabi_dcmpge>
 800034e:	2800      	cmp	r0, #0
 8000350:	d104      	bne.n	800035c <__aeabi_d2uiz+0x1c>
 8000352:	0020      	movs	r0, r4
 8000354:	0029      	movs	r1, r5
 8000356:	f001 f9ef 	bl	8001738 <__aeabi_d2iz>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <__aeabi_d2uiz+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	0020      	movs	r0, r4
 8000362:	0029      	movs	r1, r5
 8000364:	f000 fe56 	bl	8001014 <__aeabi_dsub>
 8000368:	f001 f9e6 	bl	8001738 <__aeabi_d2iz>
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	061b      	lsls	r3, r3, #24
 8000370:	469c      	mov	ip, r3
 8000372:	4460      	add	r0, ip
 8000374:	e7f1      	b.n	800035a <__aeabi_d2uiz+0x1a>
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	41e00000 	.word	0x41e00000

0800037c <__udivmoddi4>:
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	4657      	mov	r7, sl
 8000380:	464e      	mov	r6, r9
 8000382:	4645      	mov	r5, r8
 8000384:	46de      	mov	lr, fp
 8000386:	b5e0      	push	{r5, r6, r7, lr}
 8000388:	0004      	movs	r4, r0
 800038a:	000d      	movs	r5, r1
 800038c:	4692      	mov	sl, r2
 800038e:	4699      	mov	r9, r3
 8000390:	b083      	sub	sp, #12
 8000392:	428b      	cmp	r3, r1
 8000394:	d830      	bhi.n	80003f8 <__udivmoddi4+0x7c>
 8000396:	d02d      	beq.n	80003f4 <__udivmoddi4+0x78>
 8000398:	4649      	mov	r1, r9
 800039a:	4650      	mov	r0, sl
 800039c:	f001 faa6 	bl	80018ec <__clzdi2>
 80003a0:	0029      	movs	r1, r5
 80003a2:	0006      	movs	r6, r0
 80003a4:	0020      	movs	r0, r4
 80003a6:	f001 faa1 	bl	80018ec <__clzdi2>
 80003aa:	1a33      	subs	r3, r6, r0
 80003ac:	4698      	mov	r8, r3
 80003ae:	3b20      	subs	r3, #32
 80003b0:	469b      	mov	fp, r3
 80003b2:	d433      	bmi.n	800041c <__udivmoddi4+0xa0>
 80003b4:	465a      	mov	r2, fp
 80003b6:	4653      	mov	r3, sl
 80003b8:	4093      	lsls	r3, r2
 80003ba:	4642      	mov	r2, r8
 80003bc:	001f      	movs	r7, r3
 80003be:	4653      	mov	r3, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001e      	movs	r6, r3
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d83a      	bhi.n	800043e <__udivmoddi4+0xc2>
 80003c8:	42af      	cmp	r7, r5
 80003ca:	d100      	bne.n	80003ce <__udivmoddi4+0x52>
 80003cc:	e078      	b.n	80004c0 <__udivmoddi4+0x144>
 80003ce:	465b      	mov	r3, fp
 80003d0:	1ba4      	subs	r4, r4, r6
 80003d2:	41bd      	sbcs	r5, r7
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	da00      	bge.n	80003da <__udivmoddi4+0x5e>
 80003d8:	e075      	b.n	80004c6 <__udivmoddi4+0x14a>
 80003da:	2200      	movs	r2, #0
 80003dc:	2300      	movs	r3, #0
 80003de:	9200      	str	r2, [sp, #0]
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	2301      	movs	r3, #1
 80003e4:	465a      	mov	r2, fp
 80003e6:	4093      	lsls	r3, r2
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	2301      	movs	r3, #1
 80003ec:	4642      	mov	r2, r8
 80003ee:	4093      	lsls	r3, r2
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	e028      	b.n	8000446 <__udivmoddi4+0xca>
 80003f4:	4282      	cmp	r2, r0
 80003f6:	d9cf      	bls.n	8000398 <__udivmoddi4+0x1c>
 80003f8:	2200      	movs	r2, #0
 80003fa:	2300      	movs	r3, #0
 80003fc:	9200      	str	r2, [sp, #0]
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <__udivmoddi4+0x8e>
 8000406:	601c      	str	r4, [r3, #0]
 8000408:	605d      	str	r5, [r3, #4]
 800040a:	9800      	ldr	r0, [sp, #0]
 800040c:	9901      	ldr	r1, [sp, #4]
 800040e:	b003      	add	sp, #12
 8000410:	bcf0      	pop	{r4, r5, r6, r7}
 8000412:	46bb      	mov	fp, r7
 8000414:	46b2      	mov	sl, r6
 8000416:	46a9      	mov	r9, r5
 8000418:	46a0      	mov	r8, r4
 800041a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	4652      	mov	r2, sl
 8000424:	40da      	lsrs	r2, r3
 8000426:	4641      	mov	r1, r8
 8000428:	0013      	movs	r3, r2
 800042a:	464a      	mov	r2, r9
 800042c:	408a      	lsls	r2, r1
 800042e:	0017      	movs	r7, r2
 8000430:	4642      	mov	r2, r8
 8000432:	431f      	orrs	r7, r3
 8000434:	4653      	mov	r3, sl
 8000436:	4093      	lsls	r3, r2
 8000438:	001e      	movs	r6, r3
 800043a:	42af      	cmp	r7, r5
 800043c:	d9c4      	bls.n	80003c8 <__udivmoddi4+0x4c>
 800043e:	2200      	movs	r2, #0
 8000440:	2300      	movs	r3, #0
 8000442:	9200      	str	r2, [sp, #0]
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	4643      	mov	r3, r8
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0d9      	beq.n	8000400 <__udivmoddi4+0x84>
 800044c:	07fb      	lsls	r3, r7, #31
 800044e:	0872      	lsrs	r2, r6, #1
 8000450:	431a      	orrs	r2, r3
 8000452:	4646      	mov	r6, r8
 8000454:	087b      	lsrs	r3, r7, #1
 8000456:	e00e      	b.n	8000476 <__udivmoddi4+0xfa>
 8000458:	42ab      	cmp	r3, r5
 800045a:	d101      	bne.n	8000460 <__udivmoddi4+0xe4>
 800045c:	42a2      	cmp	r2, r4
 800045e:	d80c      	bhi.n	800047a <__udivmoddi4+0xfe>
 8000460:	1aa4      	subs	r4, r4, r2
 8000462:	419d      	sbcs	r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	1924      	adds	r4, r4, r4
 8000468:	416d      	adcs	r5, r5
 800046a:	2100      	movs	r1, #0
 800046c:	3e01      	subs	r6, #1
 800046e:	1824      	adds	r4, r4, r0
 8000470:	414d      	adcs	r5, r1
 8000472:	2e00      	cmp	r6, #0
 8000474:	d006      	beq.n	8000484 <__udivmoddi4+0x108>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d9ee      	bls.n	8000458 <__udivmoddi4+0xdc>
 800047a:	3e01      	subs	r6, #1
 800047c:	1924      	adds	r4, r4, r4
 800047e:	416d      	adcs	r5, r5
 8000480:	2e00      	cmp	r6, #0
 8000482:	d1f8      	bne.n	8000476 <__udivmoddi4+0xfa>
 8000484:	9800      	ldr	r0, [sp, #0]
 8000486:	9901      	ldr	r1, [sp, #4]
 8000488:	465b      	mov	r3, fp
 800048a:	1900      	adds	r0, r0, r4
 800048c:	4169      	adcs	r1, r5
 800048e:	2b00      	cmp	r3, #0
 8000490:	db24      	blt.n	80004dc <__udivmoddi4+0x160>
 8000492:	002b      	movs	r3, r5
 8000494:	465a      	mov	r2, fp
 8000496:	4644      	mov	r4, r8
 8000498:	40d3      	lsrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	db2a      	blt.n	80004fe <__udivmoddi4+0x182>
 80004a8:	0026      	movs	r6, r4
 80004aa:	409e      	lsls	r6, r3
 80004ac:	0033      	movs	r3, r6
 80004ae:	0026      	movs	r6, r4
 80004b0:	4647      	mov	r7, r8
 80004b2:	40be      	lsls	r6, r7
 80004b4:	0032      	movs	r2, r6
 80004b6:	1a80      	subs	r0, r0, r2
 80004b8:	4199      	sbcs	r1, r3
 80004ba:	9000      	str	r0, [sp, #0]
 80004bc:	9101      	str	r1, [sp, #4]
 80004be:	e79f      	b.n	8000400 <__udivmoddi4+0x84>
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d8bc      	bhi.n	800043e <__udivmoddi4+0xc2>
 80004c4:	e783      	b.n	80003ce <__udivmoddi4+0x52>
 80004c6:	4642      	mov	r2, r8
 80004c8:	2320      	movs	r3, #32
 80004ca:	2100      	movs	r1, #0
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	2200      	movs	r2, #0
 80004d0:	9100      	str	r1, [sp, #0]
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	40da      	lsrs	r2, r3
 80004d8:	9201      	str	r2, [sp, #4]
 80004da:	e786      	b.n	80003ea <__udivmoddi4+0x6e>
 80004dc:	4642      	mov	r2, r8
 80004de:	2320      	movs	r3, #32
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	002a      	movs	r2, r5
 80004e4:	4646      	mov	r6, r8
 80004e6:	409a      	lsls	r2, r3
 80004e8:	0023      	movs	r3, r4
 80004ea:	40f3      	lsrs	r3, r6
 80004ec:	4644      	mov	r4, r8
 80004ee:	4313      	orrs	r3, r2
 80004f0:	002a      	movs	r2, r5
 80004f2:	40e2      	lsrs	r2, r4
 80004f4:	001c      	movs	r4, r3
 80004f6:	465b      	mov	r3, fp
 80004f8:	0015      	movs	r5, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dad4      	bge.n	80004a8 <__udivmoddi4+0x12c>
 80004fe:	4642      	mov	r2, r8
 8000500:	002f      	movs	r7, r5
 8000502:	2320      	movs	r3, #32
 8000504:	0026      	movs	r6, r4
 8000506:	4097      	lsls	r7, r2
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	40de      	lsrs	r6, r3
 800050c:	003b      	movs	r3, r7
 800050e:	4333      	orrs	r3, r6
 8000510:	e7cd      	b.n	80004ae <__udivmoddi4+0x132>
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__gnu_ldivmod_helper>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	46ce      	mov	lr, r9
 8000518:	4647      	mov	r7, r8
 800051a:	b580      	push	{r7, lr}
 800051c:	4691      	mov	r9, r2
 800051e:	4698      	mov	r8, r3
 8000520:	0004      	movs	r4, r0
 8000522:	000d      	movs	r5, r1
 8000524:	f001 f9ee 	bl	8001904 <__divdi3>
 8000528:	0007      	movs	r7, r0
 800052a:	000e      	movs	r6, r1
 800052c:	0002      	movs	r2, r0
 800052e:	000b      	movs	r3, r1
 8000530:	4648      	mov	r0, r9
 8000532:	4641      	mov	r1, r8
 8000534:	f7ff fed6 	bl	80002e4 <__aeabi_lmul>
 8000538:	1a24      	subs	r4, r4, r0
 800053a:	418d      	sbcs	r5, r1
 800053c:	9b08      	ldr	r3, [sp, #32]
 800053e:	0038      	movs	r0, r7
 8000540:	0031      	movs	r1, r6
 8000542:	601c      	str	r4, [r3, #0]
 8000544:	605d      	str	r5, [r3, #4]
 8000546:	bcc0      	pop	{r6, r7}
 8000548:	46b9      	mov	r9, r7
 800054a:	46b0      	mov	r8, r6
 800054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)

08000550 <__aeabi_ddiv>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	4657      	mov	r7, sl
 8000554:	464e      	mov	r6, r9
 8000556:	4645      	mov	r5, r8
 8000558:	46de      	mov	lr, fp
 800055a:	b5e0      	push	{r5, r6, r7, lr}
 800055c:	4681      	mov	r9, r0
 800055e:	0005      	movs	r5, r0
 8000560:	030c      	lsls	r4, r1, #12
 8000562:	0048      	lsls	r0, r1, #1
 8000564:	4692      	mov	sl, r2
 8000566:	001f      	movs	r7, r3
 8000568:	b085      	sub	sp, #20
 800056a:	0b24      	lsrs	r4, r4, #12
 800056c:	0d40      	lsrs	r0, r0, #21
 800056e:	0fce      	lsrs	r6, r1, #31
 8000570:	2800      	cmp	r0, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_ddiv+0x26>
 8000574:	e156      	b.n	8000824 <__aeabi_ddiv+0x2d4>
 8000576:	4bd4      	ldr	r3, [pc, #848]	; (80008c8 <__aeabi_ddiv+0x378>)
 8000578:	4298      	cmp	r0, r3
 800057a:	d100      	bne.n	800057e <__aeabi_ddiv+0x2e>
 800057c:	e172      	b.n	8000864 <__aeabi_ddiv+0x314>
 800057e:	0f6b      	lsrs	r3, r5, #29
 8000580:	00e4      	lsls	r4, r4, #3
 8000582:	431c      	orrs	r4, r3
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	041b      	lsls	r3, r3, #16
 8000588:	4323      	orrs	r3, r4
 800058a:	4698      	mov	r8, r3
 800058c:	4bcf      	ldr	r3, [pc, #828]	; (80008cc <__aeabi_ddiv+0x37c>)
 800058e:	00ed      	lsls	r5, r5, #3
 8000590:	469b      	mov	fp, r3
 8000592:	2300      	movs	r3, #0
 8000594:	4699      	mov	r9, r3
 8000596:	4483      	add	fp, r0
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	033c      	lsls	r4, r7, #12
 800059c:	007b      	lsls	r3, r7, #1
 800059e:	4650      	mov	r0, sl
 80005a0:	0b24      	lsrs	r4, r4, #12
 80005a2:	0d5b      	lsrs	r3, r3, #21
 80005a4:	0fff      	lsrs	r7, r7, #31
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_ddiv+0x5c>
 80005aa:	e11f      	b.n	80007ec <__aeabi_ddiv+0x29c>
 80005ac:	4ac6      	ldr	r2, [pc, #792]	; (80008c8 <__aeabi_ddiv+0x378>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d100      	bne.n	80005b4 <__aeabi_ddiv+0x64>
 80005b2:	e162      	b.n	800087a <__aeabi_ddiv+0x32a>
 80005b4:	49c5      	ldr	r1, [pc, #788]	; (80008cc <__aeabi_ddiv+0x37c>)
 80005b6:	0f42      	lsrs	r2, r0, #29
 80005b8:	468c      	mov	ip, r1
 80005ba:	00e4      	lsls	r4, r4, #3
 80005bc:	4659      	mov	r1, fp
 80005be:	4314      	orrs	r4, r2
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	4463      	add	r3, ip
 80005c4:	0412      	lsls	r2, r2, #16
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	4314      	orrs	r4, r2
 80005ca:	469b      	mov	fp, r3
 80005cc:	00c2      	lsls	r2, r0, #3
 80005ce:	2000      	movs	r0, #0
 80005d0:	0033      	movs	r3, r6
 80005d2:	407b      	eors	r3, r7
 80005d4:	469a      	mov	sl, r3
 80005d6:	464b      	mov	r3, r9
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d827      	bhi.n	800062c <__aeabi_ddiv+0xdc>
 80005dc:	49bc      	ldr	r1, [pc, #752]	; (80008d0 <__aeabi_ddiv+0x380>)
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	58cb      	ldr	r3, [r1, r3]
 80005e2:	469f      	mov	pc, r3
 80005e4:	46b2      	mov	sl, r6
 80005e6:	9b00      	ldr	r3, [sp, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d016      	beq.n	800061a <__aeabi_ddiv+0xca>
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d100      	bne.n	80005f2 <__aeabi_ddiv+0xa2>
 80005f0:	e28e      	b.n	8000b10 <__aeabi_ddiv+0x5c0>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d000      	beq.n	80005f8 <__aeabi_ddiv+0xa8>
 80005f6:	e0d9      	b.n	80007ac <__aeabi_ddiv+0x25c>
 80005f8:	2300      	movs	r3, #0
 80005fa:	2400      	movs	r4, #0
 80005fc:	2500      	movs	r5, #0
 80005fe:	4652      	mov	r2, sl
 8000600:	051b      	lsls	r3, r3, #20
 8000602:	4323      	orrs	r3, r4
 8000604:	07d2      	lsls	r2, r2, #31
 8000606:	4313      	orrs	r3, r2
 8000608:	0028      	movs	r0, r5
 800060a:	0019      	movs	r1, r3
 800060c:	b005      	add	sp, #20
 800060e:	bcf0      	pop	{r4, r5, r6, r7}
 8000610:	46bb      	mov	fp, r7
 8000612:	46b2      	mov	sl, r6
 8000614:	46a9      	mov	r9, r5
 8000616:	46a0      	mov	r8, r4
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	2400      	movs	r4, #0
 800061c:	2500      	movs	r5, #0
 800061e:	4baa      	ldr	r3, [pc, #680]	; (80008c8 <__aeabi_ddiv+0x378>)
 8000620:	e7ed      	b.n	80005fe <__aeabi_ddiv+0xae>
 8000622:	46ba      	mov	sl, r7
 8000624:	46a0      	mov	r8, r4
 8000626:	0015      	movs	r5, r2
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	e7dc      	b.n	80005e6 <__aeabi_ddiv+0x96>
 800062c:	4544      	cmp	r4, r8
 800062e:	d200      	bcs.n	8000632 <__aeabi_ddiv+0xe2>
 8000630:	e1c7      	b.n	80009c2 <__aeabi_ddiv+0x472>
 8000632:	d100      	bne.n	8000636 <__aeabi_ddiv+0xe6>
 8000634:	e1c2      	b.n	80009bc <__aeabi_ddiv+0x46c>
 8000636:	2301      	movs	r3, #1
 8000638:	425b      	negs	r3, r3
 800063a:	469c      	mov	ip, r3
 800063c:	002e      	movs	r6, r5
 800063e:	4640      	mov	r0, r8
 8000640:	2500      	movs	r5, #0
 8000642:	44e3      	add	fp, ip
 8000644:	0223      	lsls	r3, r4, #8
 8000646:	0e14      	lsrs	r4, r2, #24
 8000648:	431c      	orrs	r4, r3
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	4699      	mov	r9, r3
 800064e:	0423      	lsls	r3, r4, #16
 8000650:	0c1f      	lsrs	r7, r3, #16
 8000652:	0212      	lsls	r2, r2, #8
 8000654:	4649      	mov	r1, r9
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	9701      	str	r7, [sp, #4]
 800065a:	f7ff fdf9 	bl	8000250 <__aeabi_uidivmod>
 800065e:	0002      	movs	r2, r0
 8000660:	437a      	muls	r2, r7
 8000662:	040b      	lsls	r3, r1, #16
 8000664:	0c31      	lsrs	r1, r6, #16
 8000666:	4680      	mov	r8, r0
 8000668:	4319      	orrs	r1, r3
 800066a:	428a      	cmp	r2, r1
 800066c:	d907      	bls.n	800067e <__aeabi_ddiv+0x12e>
 800066e:	2301      	movs	r3, #1
 8000670:	425b      	negs	r3, r3
 8000672:	469c      	mov	ip, r3
 8000674:	1909      	adds	r1, r1, r4
 8000676:	44e0      	add	r8, ip
 8000678:	428c      	cmp	r4, r1
 800067a:	d800      	bhi.n	800067e <__aeabi_ddiv+0x12e>
 800067c:	e207      	b.n	8000a8e <__aeabi_ddiv+0x53e>
 800067e:	1a88      	subs	r0, r1, r2
 8000680:	4649      	mov	r1, r9
 8000682:	f7ff fde5 	bl	8000250 <__aeabi_uidivmod>
 8000686:	0409      	lsls	r1, r1, #16
 8000688:	468c      	mov	ip, r1
 800068a:	0431      	lsls	r1, r6, #16
 800068c:	4666      	mov	r6, ip
 800068e:	9a01      	ldr	r2, [sp, #4]
 8000690:	0c09      	lsrs	r1, r1, #16
 8000692:	4342      	muls	r2, r0
 8000694:	0003      	movs	r3, r0
 8000696:	4331      	orrs	r1, r6
 8000698:	428a      	cmp	r2, r1
 800069a:	d904      	bls.n	80006a6 <__aeabi_ddiv+0x156>
 800069c:	1909      	adds	r1, r1, r4
 800069e:	3b01      	subs	r3, #1
 80006a0:	428c      	cmp	r4, r1
 80006a2:	d800      	bhi.n	80006a6 <__aeabi_ddiv+0x156>
 80006a4:	e1ed      	b.n	8000a82 <__aeabi_ddiv+0x532>
 80006a6:	1a88      	subs	r0, r1, r2
 80006a8:	4642      	mov	r2, r8
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	431a      	orrs	r2, r3
 80006ae:	4690      	mov	r8, r2
 80006b0:	4641      	mov	r1, r8
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	040e      	lsls	r6, r1, #16
 80006b6:	0c1b      	lsrs	r3, r3, #16
 80006b8:	001f      	movs	r7, r3
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	9b00      	ldr	r3, [sp, #0]
 80006be:	0c36      	lsrs	r6, r6, #16
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	0c19      	lsrs	r1, r3, #16
 80006c4:	000b      	movs	r3, r1
 80006c6:	4373      	muls	r3, r6
 80006c8:	0c12      	lsrs	r2, r2, #16
 80006ca:	437e      	muls	r6, r7
 80006cc:	9103      	str	r1, [sp, #12]
 80006ce:	4351      	muls	r1, r2
 80006d0:	437a      	muls	r2, r7
 80006d2:	0c1f      	lsrs	r7, r3, #16
 80006d4:	46bc      	mov	ip, r7
 80006d6:	1876      	adds	r6, r6, r1
 80006d8:	4466      	add	r6, ip
 80006da:	42b1      	cmp	r1, r6
 80006dc:	d903      	bls.n	80006e6 <__aeabi_ddiv+0x196>
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0249      	lsls	r1, r1, #9
 80006e2:	468c      	mov	ip, r1
 80006e4:	4462      	add	r2, ip
 80006e6:	0c31      	lsrs	r1, r6, #16
 80006e8:	188a      	adds	r2, r1, r2
 80006ea:	0431      	lsls	r1, r6, #16
 80006ec:	041e      	lsls	r6, r3, #16
 80006ee:	0c36      	lsrs	r6, r6, #16
 80006f0:	198e      	adds	r6, r1, r6
 80006f2:	4290      	cmp	r0, r2
 80006f4:	d302      	bcc.n	80006fc <__aeabi_ddiv+0x1ac>
 80006f6:	d112      	bne.n	800071e <__aeabi_ddiv+0x1ce>
 80006f8:	42b5      	cmp	r5, r6
 80006fa:	d210      	bcs.n	800071e <__aeabi_ddiv+0x1ce>
 80006fc:	4643      	mov	r3, r8
 80006fe:	1e59      	subs	r1, r3, #1
 8000700:	9b00      	ldr	r3, [sp, #0]
 8000702:	469c      	mov	ip, r3
 8000704:	4465      	add	r5, ip
 8000706:	001f      	movs	r7, r3
 8000708:	429d      	cmp	r5, r3
 800070a:	419b      	sbcs	r3, r3
 800070c:	425b      	negs	r3, r3
 800070e:	191b      	adds	r3, r3, r4
 8000710:	18c0      	adds	r0, r0, r3
 8000712:	4284      	cmp	r4, r0
 8000714:	d200      	bcs.n	8000718 <__aeabi_ddiv+0x1c8>
 8000716:	e1a0      	b.n	8000a5a <__aeabi_ddiv+0x50a>
 8000718:	d100      	bne.n	800071c <__aeabi_ddiv+0x1cc>
 800071a:	e19b      	b.n	8000a54 <__aeabi_ddiv+0x504>
 800071c:	4688      	mov	r8, r1
 800071e:	1bae      	subs	r6, r5, r6
 8000720:	42b5      	cmp	r5, r6
 8000722:	41ad      	sbcs	r5, r5
 8000724:	1a80      	subs	r0, r0, r2
 8000726:	426d      	negs	r5, r5
 8000728:	1b40      	subs	r0, r0, r5
 800072a:	4284      	cmp	r4, r0
 800072c:	d100      	bne.n	8000730 <__aeabi_ddiv+0x1e0>
 800072e:	e1d5      	b.n	8000adc <__aeabi_ddiv+0x58c>
 8000730:	4649      	mov	r1, r9
 8000732:	f7ff fd8d 	bl	8000250 <__aeabi_uidivmod>
 8000736:	9a01      	ldr	r2, [sp, #4]
 8000738:	040b      	lsls	r3, r1, #16
 800073a:	4342      	muls	r2, r0
 800073c:	0c31      	lsrs	r1, r6, #16
 800073e:	0005      	movs	r5, r0
 8000740:	4319      	orrs	r1, r3
 8000742:	428a      	cmp	r2, r1
 8000744:	d900      	bls.n	8000748 <__aeabi_ddiv+0x1f8>
 8000746:	e16c      	b.n	8000a22 <__aeabi_ddiv+0x4d2>
 8000748:	1a88      	subs	r0, r1, r2
 800074a:	4649      	mov	r1, r9
 800074c:	f7ff fd80 	bl	8000250 <__aeabi_uidivmod>
 8000750:	9a01      	ldr	r2, [sp, #4]
 8000752:	0436      	lsls	r6, r6, #16
 8000754:	4342      	muls	r2, r0
 8000756:	0409      	lsls	r1, r1, #16
 8000758:	0c36      	lsrs	r6, r6, #16
 800075a:	0003      	movs	r3, r0
 800075c:	430e      	orrs	r6, r1
 800075e:	42b2      	cmp	r2, r6
 8000760:	d900      	bls.n	8000764 <__aeabi_ddiv+0x214>
 8000762:	e153      	b.n	8000a0c <__aeabi_ddiv+0x4bc>
 8000764:	9803      	ldr	r0, [sp, #12]
 8000766:	1ab6      	subs	r6, r6, r2
 8000768:	0002      	movs	r2, r0
 800076a:	042d      	lsls	r5, r5, #16
 800076c:	431d      	orrs	r5, r3
 800076e:	9f02      	ldr	r7, [sp, #8]
 8000770:	042b      	lsls	r3, r5, #16
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	435a      	muls	r2, r3
 8000776:	437b      	muls	r3, r7
 8000778:	469c      	mov	ip, r3
 800077a:	0c29      	lsrs	r1, r5, #16
 800077c:	4348      	muls	r0, r1
 800077e:	0c13      	lsrs	r3, r2, #16
 8000780:	4484      	add	ip, r0
 8000782:	4463      	add	r3, ip
 8000784:	4379      	muls	r1, r7
 8000786:	4298      	cmp	r0, r3
 8000788:	d903      	bls.n	8000792 <__aeabi_ddiv+0x242>
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	0240      	lsls	r0, r0, #9
 800078e:	4684      	mov	ip, r0
 8000790:	4461      	add	r1, ip
 8000792:	0c18      	lsrs	r0, r3, #16
 8000794:	0412      	lsls	r2, r2, #16
 8000796:	041b      	lsls	r3, r3, #16
 8000798:	0c12      	lsrs	r2, r2, #16
 800079a:	1841      	adds	r1, r0, r1
 800079c:	189b      	adds	r3, r3, r2
 800079e:	428e      	cmp	r6, r1
 80007a0:	d200      	bcs.n	80007a4 <__aeabi_ddiv+0x254>
 80007a2:	e0ff      	b.n	80009a4 <__aeabi_ddiv+0x454>
 80007a4:	d100      	bne.n	80007a8 <__aeabi_ddiv+0x258>
 80007a6:	e0fa      	b.n	800099e <__aeabi_ddiv+0x44e>
 80007a8:	2301      	movs	r3, #1
 80007aa:	431d      	orrs	r5, r3
 80007ac:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <__aeabi_ddiv+0x384>)
 80007ae:	445a      	add	r2, fp
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_ddiv+0x266>
 80007b4:	e0aa      	b.n	800090c <__aeabi_ddiv+0x3bc>
 80007b6:	076b      	lsls	r3, r5, #29
 80007b8:	d000      	beq.n	80007bc <__aeabi_ddiv+0x26c>
 80007ba:	e13d      	b.n	8000a38 <__aeabi_ddiv+0x4e8>
 80007bc:	08ed      	lsrs	r5, r5, #3
 80007be:	4643      	mov	r3, r8
 80007c0:	01db      	lsls	r3, r3, #7
 80007c2:	d506      	bpl.n	80007d2 <__aeabi_ddiv+0x282>
 80007c4:	4642      	mov	r2, r8
 80007c6:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <__aeabi_ddiv+0x388>)
 80007c8:	401a      	ands	r2, r3
 80007ca:	4690      	mov	r8, r2
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	00d2      	lsls	r2, r2, #3
 80007d0:	445a      	add	r2, fp
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <__aeabi_ddiv+0x38c>)
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dd00      	ble.n	80007da <__aeabi_ddiv+0x28a>
 80007d8:	e71f      	b.n	800061a <__aeabi_ddiv+0xca>
 80007da:	4643      	mov	r3, r8
 80007dc:	075b      	lsls	r3, r3, #29
 80007de:	431d      	orrs	r5, r3
 80007e0:	4643      	mov	r3, r8
 80007e2:	0552      	lsls	r2, r2, #21
 80007e4:	025c      	lsls	r4, r3, #9
 80007e6:	0b24      	lsrs	r4, r4, #12
 80007e8:	0d53      	lsrs	r3, r2, #21
 80007ea:	e708      	b.n	80005fe <__aeabi_ddiv+0xae>
 80007ec:	4652      	mov	r2, sl
 80007ee:	4322      	orrs	r2, r4
 80007f0:	d100      	bne.n	80007f4 <__aeabi_ddiv+0x2a4>
 80007f2:	e07b      	b.n	80008ec <__aeabi_ddiv+0x39c>
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_ddiv+0x2aa>
 80007f8:	e0fa      	b.n	80009f0 <__aeabi_ddiv+0x4a0>
 80007fa:	0020      	movs	r0, r4
 80007fc:	f001 f858 	bl	80018b0 <__clzsi2>
 8000800:	0002      	movs	r2, r0
 8000802:	3a0b      	subs	r2, #11
 8000804:	231d      	movs	r3, #29
 8000806:	0001      	movs	r1, r0
 8000808:	1a9b      	subs	r3, r3, r2
 800080a:	4652      	mov	r2, sl
 800080c:	3908      	subs	r1, #8
 800080e:	40da      	lsrs	r2, r3
 8000810:	408c      	lsls	r4, r1
 8000812:	4314      	orrs	r4, r2
 8000814:	4652      	mov	r2, sl
 8000816:	408a      	lsls	r2, r1
 8000818:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <__aeabi_ddiv+0x390>)
 800081a:	4458      	add	r0, fp
 800081c:	469b      	mov	fp, r3
 800081e:	4483      	add	fp, r0
 8000820:	2000      	movs	r0, #0
 8000822:	e6d5      	b.n	80005d0 <__aeabi_ddiv+0x80>
 8000824:	464b      	mov	r3, r9
 8000826:	4323      	orrs	r3, r4
 8000828:	4698      	mov	r8, r3
 800082a:	d044      	beq.n	80008b6 <__aeabi_ddiv+0x366>
 800082c:	2c00      	cmp	r4, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_ddiv+0x2e2>
 8000830:	e0ce      	b.n	80009d0 <__aeabi_ddiv+0x480>
 8000832:	0020      	movs	r0, r4
 8000834:	f001 f83c 	bl	80018b0 <__clzsi2>
 8000838:	0001      	movs	r1, r0
 800083a:	0002      	movs	r2, r0
 800083c:	390b      	subs	r1, #11
 800083e:	231d      	movs	r3, #29
 8000840:	1a5b      	subs	r3, r3, r1
 8000842:	4649      	mov	r1, r9
 8000844:	0010      	movs	r0, r2
 8000846:	40d9      	lsrs	r1, r3
 8000848:	3808      	subs	r0, #8
 800084a:	4084      	lsls	r4, r0
 800084c:	000b      	movs	r3, r1
 800084e:	464d      	mov	r5, r9
 8000850:	4323      	orrs	r3, r4
 8000852:	4698      	mov	r8, r3
 8000854:	4085      	lsls	r5, r0
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <__aeabi_ddiv+0x394>)
 8000858:	1a83      	subs	r3, r0, r2
 800085a:	469b      	mov	fp, r3
 800085c:	2300      	movs	r3, #0
 800085e:	4699      	mov	r9, r3
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	e69a      	b.n	800059a <__aeabi_ddiv+0x4a>
 8000864:	464b      	mov	r3, r9
 8000866:	4323      	orrs	r3, r4
 8000868:	4698      	mov	r8, r3
 800086a:	d11d      	bne.n	80008a8 <__aeabi_ddiv+0x358>
 800086c:	2308      	movs	r3, #8
 800086e:	4699      	mov	r9, r3
 8000870:	3b06      	subs	r3, #6
 8000872:	2500      	movs	r5, #0
 8000874:	4683      	mov	fp, r0
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	e68f      	b.n	800059a <__aeabi_ddiv+0x4a>
 800087a:	4652      	mov	r2, sl
 800087c:	4322      	orrs	r2, r4
 800087e:	d109      	bne.n	8000894 <__aeabi_ddiv+0x344>
 8000880:	2302      	movs	r3, #2
 8000882:	4649      	mov	r1, r9
 8000884:	4319      	orrs	r1, r3
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <__aeabi_ddiv+0x398>)
 8000888:	4689      	mov	r9, r1
 800088a:	469c      	mov	ip, r3
 800088c:	2400      	movs	r4, #0
 800088e:	2002      	movs	r0, #2
 8000890:	44e3      	add	fp, ip
 8000892:	e69d      	b.n	80005d0 <__aeabi_ddiv+0x80>
 8000894:	2303      	movs	r3, #3
 8000896:	464a      	mov	r2, r9
 8000898:	431a      	orrs	r2, r3
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <__aeabi_ddiv+0x398>)
 800089c:	4691      	mov	r9, r2
 800089e:	469c      	mov	ip, r3
 80008a0:	4652      	mov	r2, sl
 80008a2:	2003      	movs	r0, #3
 80008a4:	44e3      	add	fp, ip
 80008a6:	e693      	b.n	80005d0 <__aeabi_ddiv+0x80>
 80008a8:	230c      	movs	r3, #12
 80008aa:	4699      	mov	r9, r3
 80008ac:	3b09      	subs	r3, #9
 80008ae:	46a0      	mov	r8, r4
 80008b0:	4683      	mov	fp, r0
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	e671      	b.n	800059a <__aeabi_ddiv+0x4a>
 80008b6:	2304      	movs	r3, #4
 80008b8:	4699      	mov	r9, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	469b      	mov	fp, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	2500      	movs	r5, #0
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	e669      	b.n	800059a <__aeabi_ddiv+0x4a>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	000007ff 	.word	0x000007ff
 80008cc:	fffffc01 	.word	0xfffffc01
 80008d0:	08006428 	.word	0x08006428
 80008d4:	000003ff 	.word	0x000003ff
 80008d8:	feffffff 	.word	0xfeffffff
 80008dc:	000007fe 	.word	0x000007fe
 80008e0:	000003f3 	.word	0x000003f3
 80008e4:	fffffc0d 	.word	0xfffffc0d
 80008e8:	fffff801 	.word	0xfffff801
 80008ec:	4649      	mov	r1, r9
 80008ee:	2301      	movs	r3, #1
 80008f0:	4319      	orrs	r1, r3
 80008f2:	4689      	mov	r9, r1
 80008f4:	2400      	movs	r4, #0
 80008f6:	2001      	movs	r0, #1
 80008f8:	e66a      	b.n	80005d0 <__aeabi_ddiv+0x80>
 80008fa:	2300      	movs	r3, #0
 80008fc:	2480      	movs	r4, #128	; 0x80
 80008fe:	469a      	mov	sl, r3
 8000900:	2500      	movs	r5, #0
 8000902:	4b8a      	ldr	r3, [pc, #552]	; (8000b2c <__aeabi_ddiv+0x5dc>)
 8000904:	0324      	lsls	r4, r4, #12
 8000906:	e67a      	b.n	80005fe <__aeabi_ddiv+0xae>
 8000908:	2501      	movs	r5, #1
 800090a:	426d      	negs	r5, r5
 800090c:	2301      	movs	r3, #1
 800090e:	1a9b      	subs	r3, r3, r2
 8000910:	2b38      	cmp	r3, #56	; 0x38
 8000912:	dd00      	ble.n	8000916 <__aeabi_ddiv+0x3c6>
 8000914:	e670      	b.n	80005f8 <__aeabi_ddiv+0xa8>
 8000916:	2b1f      	cmp	r3, #31
 8000918:	dc00      	bgt.n	800091c <__aeabi_ddiv+0x3cc>
 800091a:	e0bf      	b.n	8000a9c <__aeabi_ddiv+0x54c>
 800091c:	211f      	movs	r1, #31
 800091e:	4249      	negs	r1, r1
 8000920:	1a8a      	subs	r2, r1, r2
 8000922:	4641      	mov	r1, r8
 8000924:	40d1      	lsrs	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	2b20      	cmp	r3, #32
 800092a:	d004      	beq.n	8000936 <__aeabi_ddiv+0x3e6>
 800092c:	4641      	mov	r1, r8
 800092e:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <__aeabi_ddiv+0x5e0>)
 8000930:	445b      	add	r3, fp
 8000932:	4099      	lsls	r1, r3
 8000934:	430d      	orrs	r5, r1
 8000936:	1e6b      	subs	r3, r5, #1
 8000938:	419d      	sbcs	r5, r3
 800093a:	2307      	movs	r3, #7
 800093c:	432a      	orrs	r2, r5
 800093e:	001d      	movs	r5, r3
 8000940:	2400      	movs	r4, #0
 8000942:	4015      	ands	r5, r2
 8000944:	4213      	tst	r3, r2
 8000946:	d100      	bne.n	800094a <__aeabi_ddiv+0x3fa>
 8000948:	e0d4      	b.n	8000af4 <__aeabi_ddiv+0x5a4>
 800094a:	210f      	movs	r1, #15
 800094c:	2300      	movs	r3, #0
 800094e:	4011      	ands	r1, r2
 8000950:	2904      	cmp	r1, #4
 8000952:	d100      	bne.n	8000956 <__aeabi_ddiv+0x406>
 8000954:	e0cb      	b.n	8000aee <__aeabi_ddiv+0x59e>
 8000956:	1d11      	adds	r1, r2, #4
 8000958:	4291      	cmp	r1, r2
 800095a:	4192      	sbcs	r2, r2
 800095c:	4252      	negs	r2, r2
 800095e:	189b      	adds	r3, r3, r2
 8000960:	000a      	movs	r2, r1
 8000962:	0219      	lsls	r1, r3, #8
 8000964:	d400      	bmi.n	8000968 <__aeabi_ddiv+0x418>
 8000966:	e0c2      	b.n	8000aee <__aeabi_ddiv+0x59e>
 8000968:	2301      	movs	r3, #1
 800096a:	2400      	movs	r4, #0
 800096c:	2500      	movs	r5, #0
 800096e:	e646      	b.n	80005fe <__aeabi_ddiv+0xae>
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	4641      	mov	r1, r8
 8000974:	031b      	lsls	r3, r3, #12
 8000976:	4219      	tst	r1, r3
 8000978:	d008      	beq.n	800098c <__aeabi_ddiv+0x43c>
 800097a:	421c      	tst	r4, r3
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x43c>
 800097e:	431c      	orrs	r4, r3
 8000980:	0324      	lsls	r4, r4, #12
 8000982:	46ba      	mov	sl, r7
 8000984:	0015      	movs	r5, r2
 8000986:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <__aeabi_ddiv+0x5dc>)
 8000988:	0b24      	lsrs	r4, r4, #12
 800098a:	e638      	b.n	80005fe <__aeabi_ddiv+0xae>
 800098c:	2480      	movs	r4, #128	; 0x80
 800098e:	4643      	mov	r3, r8
 8000990:	0324      	lsls	r4, r4, #12
 8000992:	431c      	orrs	r4, r3
 8000994:	0324      	lsls	r4, r4, #12
 8000996:	46b2      	mov	sl, r6
 8000998:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <__aeabi_ddiv+0x5dc>)
 800099a:	0b24      	lsrs	r4, r4, #12
 800099c:	e62f      	b.n	80005fe <__aeabi_ddiv+0xae>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_ddiv+0x454>
 80009a2:	e703      	b.n	80007ac <__aeabi_ddiv+0x25c>
 80009a4:	19a6      	adds	r6, r4, r6
 80009a6:	1e68      	subs	r0, r5, #1
 80009a8:	42a6      	cmp	r6, r4
 80009aa:	d200      	bcs.n	80009ae <__aeabi_ddiv+0x45e>
 80009ac:	e08d      	b.n	8000aca <__aeabi_ddiv+0x57a>
 80009ae:	428e      	cmp	r6, r1
 80009b0:	d200      	bcs.n	80009b4 <__aeabi_ddiv+0x464>
 80009b2:	e0a3      	b.n	8000afc <__aeabi_ddiv+0x5ac>
 80009b4:	d100      	bne.n	80009b8 <__aeabi_ddiv+0x468>
 80009b6:	e0b3      	b.n	8000b20 <__aeabi_ddiv+0x5d0>
 80009b8:	0005      	movs	r5, r0
 80009ba:	e6f5      	b.n	80007a8 <__aeabi_ddiv+0x258>
 80009bc:	42aa      	cmp	r2, r5
 80009be:	d900      	bls.n	80009c2 <__aeabi_ddiv+0x472>
 80009c0:	e639      	b.n	8000636 <__aeabi_ddiv+0xe6>
 80009c2:	4643      	mov	r3, r8
 80009c4:	07de      	lsls	r6, r3, #31
 80009c6:	0858      	lsrs	r0, r3, #1
 80009c8:	086b      	lsrs	r3, r5, #1
 80009ca:	431e      	orrs	r6, r3
 80009cc:	07ed      	lsls	r5, r5, #31
 80009ce:	e639      	b.n	8000644 <__aeabi_ddiv+0xf4>
 80009d0:	4648      	mov	r0, r9
 80009d2:	f000 ff6d 	bl	80018b0 <__clzsi2>
 80009d6:	0001      	movs	r1, r0
 80009d8:	0002      	movs	r2, r0
 80009da:	3115      	adds	r1, #21
 80009dc:	3220      	adds	r2, #32
 80009de:	291c      	cmp	r1, #28
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_ddiv+0x494>
 80009e2:	e72c      	b.n	800083e <__aeabi_ddiv+0x2ee>
 80009e4:	464b      	mov	r3, r9
 80009e6:	3808      	subs	r0, #8
 80009e8:	4083      	lsls	r3, r0
 80009ea:	2500      	movs	r5, #0
 80009ec:	4698      	mov	r8, r3
 80009ee:	e732      	b.n	8000856 <__aeabi_ddiv+0x306>
 80009f0:	f000 ff5e 	bl	80018b0 <__clzsi2>
 80009f4:	0003      	movs	r3, r0
 80009f6:	001a      	movs	r2, r3
 80009f8:	3215      	adds	r2, #21
 80009fa:	3020      	adds	r0, #32
 80009fc:	2a1c      	cmp	r2, #28
 80009fe:	dc00      	bgt.n	8000a02 <__aeabi_ddiv+0x4b2>
 8000a00:	e700      	b.n	8000804 <__aeabi_ddiv+0x2b4>
 8000a02:	4654      	mov	r4, sl
 8000a04:	3b08      	subs	r3, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	409c      	lsls	r4, r3
 8000a0a:	e705      	b.n	8000818 <__aeabi_ddiv+0x2c8>
 8000a0c:	1936      	adds	r6, r6, r4
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	42b4      	cmp	r4, r6
 8000a12:	d900      	bls.n	8000a16 <__aeabi_ddiv+0x4c6>
 8000a14:	e6a6      	b.n	8000764 <__aeabi_ddiv+0x214>
 8000a16:	42b2      	cmp	r2, r6
 8000a18:	d800      	bhi.n	8000a1c <__aeabi_ddiv+0x4cc>
 8000a1a:	e6a3      	b.n	8000764 <__aeabi_ddiv+0x214>
 8000a1c:	1e83      	subs	r3, r0, #2
 8000a1e:	1936      	adds	r6, r6, r4
 8000a20:	e6a0      	b.n	8000764 <__aeabi_ddiv+0x214>
 8000a22:	1909      	adds	r1, r1, r4
 8000a24:	3d01      	subs	r5, #1
 8000a26:	428c      	cmp	r4, r1
 8000a28:	d900      	bls.n	8000a2c <__aeabi_ddiv+0x4dc>
 8000a2a:	e68d      	b.n	8000748 <__aeabi_ddiv+0x1f8>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	d800      	bhi.n	8000a32 <__aeabi_ddiv+0x4e2>
 8000a30:	e68a      	b.n	8000748 <__aeabi_ddiv+0x1f8>
 8000a32:	1e85      	subs	r5, r0, #2
 8000a34:	1909      	adds	r1, r1, r4
 8000a36:	e687      	b.n	8000748 <__aeabi_ddiv+0x1f8>
 8000a38:	230f      	movs	r3, #15
 8000a3a:	402b      	ands	r3, r5
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_ddiv+0x4f2>
 8000a40:	e6bc      	b.n	80007bc <__aeabi_ddiv+0x26c>
 8000a42:	2305      	movs	r3, #5
 8000a44:	425b      	negs	r3, r3
 8000a46:	42ab      	cmp	r3, r5
 8000a48:	419b      	sbcs	r3, r3
 8000a4a:	3504      	adds	r5, #4
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	08ed      	lsrs	r5, r5, #3
 8000a50:	4498      	add	r8, r3
 8000a52:	e6b4      	b.n	80007be <__aeabi_ddiv+0x26e>
 8000a54:	42af      	cmp	r7, r5
 8000a56:	d900      	bls.n	8000a5a <__aeabi_ddiv+0x50a>
 8000a58:	e660      	b.n	800071c <__aeabi_ddiv+0x1cc>
 8000a5a:	4282      	cmp	r2, r0
 8000a5c:	d804      	bhi.n	8000a68 <__aeabi_ddiv+0x518>
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_ddiv+0x512>
 8000a60:	e65c      	b.n	800071c <__aeabi_ddiv+0x1cc>
 8000a62:	42ae      	cmp	r6, r5
 8000a64:	d800      	bhi.n	8000a68 <__aeabi_ddiv+0x518>
 8000a66:	e659      	b.n	800071c <__aeabi_ddiv+0x1cc>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	9b00      	ldr	r3, [sp, #0]
 8000a70:	44e0      	add	r8, ip
 8000a72:	469c      	mov	ip, r3
 8000a74:	4465      	add	r5, ip
 8000a76:	429d      	cmp	r5, r3
 8000a78:	419b      	sbcs	r3, r3
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	191b      	adds	r3, r3, r4
 8000a7e:	18c0      	adds	r0, r0, r3
 8000a80:	e64d      	b.n	800071e <__aeabi_ddiv+0x1ce>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	d800      	bhi.n	8000a88 <__aeabi_ddiv+0x538>
 8000a86:	e60e      	b.n	80006a6 <__aeabi_ddiv+0x156>
 8000a88:	1e83      	subs	r3, r0, #2
 8000a8a:	1909      	adds	r1, r1, r4
 8000a8c:	e60b      	b.n	80006a6 <__aeabi_ddiv+0x156>
 8000a8e:	428a      	cmp	r2, r1
 8000a90:	d800      	bhi.n	8000a94 <__aeabi_ddiv+0x544>
 8000a92:	e5f4      	b.n	800067e <__aeabi_ddiv+0x12e>
 8000a94:	1e83      	subs	r3, r0, #2
 8000a96:	4698      	mov	r8, r3
 8000a98:	1909      	adds	r1, r1, r4
 8000a9a:	e5f0      	b.n	800067e <__aeabi_ddiv+0x12e>
 8000a9c:	4925      	ldr	r1, [pc, #148]	; (8000b34 <__aeabi_ddiv+0x5e4>)
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	4459      	add	r1, fp
 8000aa2:	408d      	lsls	r5, r1
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	408a      	lsls	r2, r1
 8000aa8:	1e69      	subs	r1, r5, #1
 8000aaa:	418d      	sbcs	r5, r1
 8000aac:	4641      	mov	r1, r8
 8000aae:	40d8      	lsrs	r0, r3
 8000ab0:	40d9      	lsrs	r1, r3
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	432a      	orrs	r2, r5
 8000ab6:	000b      	movs	r3, r1
 8000ab8:	0751      	lsls	r1, r2, #29
 8000aba:	d100      	bne.n	8000abe <__aeabi_ddiv+0x56e>
 8000abc:	e751      	b.n	8000962 <__aeabi_ddiv+0x412>
 8000abe:	210f      	movs	r1, #15
 8000ac0:	4011      	ands	r1, r2
 8000ac2:	2904      	cmp	r1, #4
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_ddiv+0x578>
 8000ac6:	e746      	b.n	8000956 <__aeabi_ddiv+0x406>
 8000ac8:	e74b      	b.n	8000962 <__aeabi_ddiv+0x412>
 8000aca:	0005      	movs	r5, r0
 8000acc:	428e      	cmp	r6, r1
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_ddiv+0x582>
 8000ad0:	e66a      	b.n	80007a8 <__aeabi_ddiv+0x258>
 8000ad2:	9a00      	ldr	r2, [sp, #0]
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d000      	beq.n	8000ada <__aeabi_ddiv+0x58a>
 8000ad8:	e666      	b.n	80007a8 <__aeabi_ddiv+0x258>
 8000ada:	e667      	b.n	80007ac <__aeabi_ddiv+0x25c>
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <__aeabi_ddiv+0x5e8>)
 8000ade:	445a      	add	r2, fp
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_ddiv+0x596>
 8000ae4:	e710      	b.n	8000908 <__aeabi_ddiv+0x3b8>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2500      	movs	r5, #0
 8000aea:	4498      	add	r8, r3
 8000aec:	e667      	b.n	80007be <__aeabi_ddiv+0x26e>
 8000aee:	075d      	lsls	r5, r3, #29
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	0b1c      	lsrs	r4, r3, #12
 8000af4:	08d2      	lsrs	r2, r2, #3
 8000af6:	2300      	movs	r3, #0
 8000af8:	4315      	orrs	r5, r2
 8000afa:	e580      	b.n	80005fe <__aeabi_ddiv+0xae>
 8000afc:	9800      	ldr	r0, [sp, #0]
 8000afe:	3d02      	subs	r5, #2
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	4282      	cmp	r2, r0
 8000b04:	41bf      	sbcs	r7, r7
 8000b06:	427f      	negs	r7, r7
 8000b08:	193c      	adds	r4, r7, r4
 8000b0a:	1936      	adds	r6, r6, r4
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	e7dd      	b.n	8000acc <__aeabi_ddiv+0x57c>
 8000b10:	2480      	movs	r4, #128	; 0x80
 8000b12:	4643      	mov	r3, r8
 8000b14:	0324      	lsls	r4, r4, #12
 8000b16:	431c      	orrs	r4, r3
 8000b18:	0324      	lsls	r4, r4, #12
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__aeabi_ddiv+0x5dc>)
 8000b1c:	0b24      	lsrs	r4, r4, #12
 8000b1e:	e56e      	b.n	80005fe <__aeabi_ddiv+0xae>
 8000b20:	9a00      	ldr	r2, [sp, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ea      	bcc.n	8000afc <__aeabi_ddiv+0x5ac>
 8000b26:	0005      	movs	r5, r0
 8000b28:	e7d3      	b.n	8000ad2 <__aeabi_ddiv+0x582>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	000007ff 	.word	0x000007ff
 8000b30:	0000043e 	.word	0x0000043e
 8000b34:	0000041e 	.word	0x0000041e
 8000b38:	000003ff 	.word	0x000003ff

08000b3c <__aeabi_dmul>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	4657      	mov	r7, sl
 8000b40:	464e      	mov	r6, r9
 8000b42:	4645      	mov	r5, r8
 8000b44:	46de      	mov	lr, fp
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	4698      	mov	r8, r3
 8000b4a:	030c      	lsls	r4, r1, #12
 8000b4c:	004b      	lsls	r3, r1, #1
 8000b4e:	0006      	movs	r6, r0
 8000b50:	4692      	mov	sl, r2
 8000b52:	b087      	sub	sp, #28
 8000b54:	0b24      	lsrs	r4, r4, #12
 8000b56:	0d5b      	lsrs	r3, r3, #21
 8000b58:	0fcf      	lsrs	r7, r1, #31
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dmul+0x24>
 8000b5e:	e15c      	b.n	8000e1a <__aeabi_dmul+0x2de>
 8000b60:	4ad9      	ldr	r2, [pc, #868]	; (8000ec8 <__aeabi_dmul+0x38c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dmul+0x2c>
 8000b66:	e175      	b.n	8000e54 <__aeabi_dmul+0x318>
 8000b68:	0f42      	lsrs	r2, r0, #29
 8000b6a:	00e4      	lsls	r4, r4, #3
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	0412      	lsls	r2, r2, #16
 8000b72:	4314      	orrs	r4, r2
 8000b74:	4ad5      	ldr	r2, [pc, #852]	; (8000ecc <__aeabi_dmul+0x390>)
 8000b76:	00c5      	lsls	r5, r0, #3
 8000b78:	4694      	mov	ip, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4699      	mov	r9, r3
 8000b82:	469b      	mov	fp, r3
 8000b84:	4643      	mov	r3, r8
 8000b86:	4642      	mov	r2, r8
 8000b88:	031e      	lsls	r6, r3, #12
 8000b8a:	0fd2      	lsrs	r2, r2, #31
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4650      	mov	r0, sl
 8000b90:	4690      	mov	r8, r2
 8000b92:	0b36      	lsrs	r6, r6, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dmul+0x5e>
 8000b98:	e120      	b.n	8000ddc <__aeabi_dmul+0x2a0>
 8000b9a:	4acb      	ldr	r2, [pc, #812]	; (8000ec8 <__aeabi_dmul+0x38c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dmul+0x66>
 8000ba0:	e162      	b.n	8000e68 <__aeabi_dmul+0x32c>
 8000ba2:	49ca      	ldr	r1, [pc, #808]	; (8000ecc <__aeabi_dmul+0x390>)
 8000ba4:	0f42      	lsrs	r2, r0, #29
 8000ba6:	468c      	mov	ip, r1
 8000ba8:	9900      	ldr	r1, [sp, #0]
 8000baa:	4463      	add	r3, ip
 8000bac:	00f6      	lsls	r6, r6, #3
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4316      	orrs	r6, r2
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	449c      	add	ip, r3
 8000bb6:	0412      	lsls	r2, r2, #16
 8000bb8:	4663      	mov	r3, ip
 8000bba:	4316      	orrs	r6, r2
 8000bbc:	00c2      	lsls	r2, r0, #3
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	9900      	ldr	r1, [sp, #0]
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	3101      	adds	r1, #1
 8000bc8:	468c      	mov	ip, r1
 8000bca:	4649      	mov	r1, r9
 8000bcc:	407b      	eors	r3, r7
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	290f      	cmp	r1, #15
 8000bd2:	d826      	bhi.n	8000c22 <__aeabi_dmul+0xe6>
 8000bd4:	4bbe      	ldr	r3, [pc, #760]	; (8000ed0 <__aeabi_dmul+0x394>)
 8000bd6:	0089      	lsls	r1, r1, #2
 8000bd8:	5859      	ldr	r1, [r3, r1]
 8000bda:	468f      	mov	pc, r1
 8000bdc:	4643      	mov	r3, r8
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	0034      	movs	r4, r6
 8000be2:	0015      	movs	r5, r2
 8000be4:	4683      	mov	fp, r0
 8000be6:	465b      	mov	r3, fp
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d016      	beq.n	8000c1a <__aeabi_dmul+0xde>
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dmul+0xb6>
 8000bf0:	e203      	b.n	8000ffa <__aeabi_dmul+0x4be>
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dmul+0xbc>
 8000bf6:	e0cd      	b.n	8000d94 <__aeabi_dmul+0x258>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2400      	movs	r4, #0
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	0512      	lsls	r2, r2, #20
 8000c02:	4322      	orrs	r2, r4
 8000c04:	07db      	lsls	r3, r3, #31
 8000c06:	431a      	orrs	r2, r3
 8000c08:	0028      	movs	r0, r5
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	b007      	add	sp, #28
 8000c0e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c10:	46bb      	mov	fp, r7
 8000c12:	46b2      	mov	sl, r6
 8000c14:	46a9      	mov	r9, r5
 8000c16:	46a0      	mov	r8, r4
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	4aaa      	ldr	r2, [pc, #680]	; (8000ec8 <__aeabi_dmul+0x38c>)
 8000c20:	e7ed      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000c22:	0c28      	lsrs	r0, r5, #16
 8000c24:	042d      	lsls	r5, r5, #16
 8000c26:	0c2d      	lsrs	r5, r5, #16
 8000c28:	002b      	movs	r3, r5
 8000c2a:	0c11      	lsrs	r1, r2, #16
 8000c2c:	0412      	lsls	r2, r2, #16
 8000c2e:	0c12      	lsrs	r2, r2, #16
 8000c30:	4353      	muls	r3, r2
 8000c32:	4698      	mov	r8, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	002f      	movs	r7, r5
 8000c38:	4343      	muls	r3, r0
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	434f      	muls	r7, r1
 8000c3e:	444f      	add	r7, r9
 8000c40:	46bb      	mov	fp, r7
 8000c42:	4647      	mov	r7, r8
 8000c44:	000b      	movs	r3, r1
 8000c46:	0c3f      	lsrs	r7, r7, #16
 8000c48:	46ba      	mov	sl, r7
 8000c4a:	4343      	muls	r3, r0
 8000c4c:	44da      	add	sl, fp
 8000c4e:	9302      	str	r3, [sp, #8]
 8000c50:	45d1      	cmp	r9, sl
 8000c52:	d904      	bls.n	8000c5e <__aeabi_dmul+0x122>
 8000c54:	2780      	movs	r7, #128	; 0x80
 8000c56:	027f      	lsls	r7, r7, #9
 8000c58:	46b9      	mov	r9, r7
 8000c5a:	444b      	add	r3, r9
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	4653      	mov	r3, sl
 8000c60:	0c1b      	lsrs	r3, r3, #16
 8000c62:	469b      	mov	fp, r3
 8000c64:	4653      	mov	r3, sl
 8000c66:	041f      	lsls	r7, r3, #16
 8000c68:	4643      	mov	r3, r8
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	0c1b      	lsrs	r3, r3, #16
 8000c6e:	4698      	mov	r8, r3
 8000c70:	003b      	movs	r3, r7
 8000c72:	4443      	add	r3, r8
 8000c74:	9304      	str	r3, [sp, #16]
 8000c76:	0c33      	lsrs	r3, r6, #16
 8000c78:	0436      	lsls	r6, r6, #16
 8000c7a:	0c36      	lsrs	r6, r6, #16
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	0033      	movs	r3, r6
 8000c80:	4343      	muls	r3, r0
 8000c82:	4699      	mov	r9, r3
 8000c84:	4643      	mov	r3, r8
 8000c86:	4343      	muls	r3, r0
 8000c88:	002f      	movs	r7, r5
 8000c8a:	469a      	mov	sl, r3
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	4377      	muls	r7, r6
 8000c90:	435d      	muls	r5, r3
 8000c92:	0c38      	lsrs	r0, r7, #16
 8000c94:	444d      	add	r5, r9
 8000c96:	1945      	adds	r5, r0, r5
 8000c98:	45a9      	cmp	r9, r5
 8000c9a:	d903      	bls.n	8000ca4 <__aeabi_dmul+0x168>
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	4699      	mov	r9, r3
 8000ca2:	44ca      	add	sl, r9
 8000ca4:	043f      	lsls	r7, r7, #16
 8000ca6:	0c28      	lsrs	r0, r5, #16
 8000ca8:	0c3f      	lsrs	r7, r7, #16
 8000caa:	042d      	lsls	r5, r5, #16
 8000cac:	19ed      	adds	r5, r5, r7
 8000cae:	0c27      	lsrs	r7, r4, #16
 8000cb0:	0424      	lsls	r4, r4, #16
 8000cb2:	0c24      	lsrs	r4, r4, #16
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	4350      	muls	r0, r2
 8000cba:	437a      	muls	r2, r7
 8000cbc:	4691      	mov	r9, r2
 8000cbe:	003a      	movs	r2, r7
 8000cc0:	4453      	add	r3, sl
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	0c03      	lsrs	r3, r0, #16
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	434a      	muls	r2, r1
 8000cca:	4361      	muls	r1, r4
 8000ccc:	4449      	add	r1, r9
 8000cce:	4451      	add	r1, sl
 8000cd0:	44ab      	add	fp, r5
 8000cd2:	4589      	cmp	r9, r1
 8000cd4:	d903      	bls.n	8000cde <__aeabi_dmul+0x1a2>
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	025b      	lsls	r3, r3, #9
 8000cda:	4699      	mov	r9, r3
 8000cdc:	444a      	add	r2, r9
 8000cde:	0400      	lsls	r0, r0, #16
 8000ce0:	0c0b      	lsrs	r3, r1, #16
 8000ce2:	0c00      	lsrs	r0, r0, #16
 8000ce4:	0409      	lsls	r1, r1, #16
 8000ce6:	1809      	adds	r1, r1, r0
 8000ce8:	0020      	movs	r0, r4
 8000cea:	4699      	mov	r9, r3
 8000cec:	4643      	mov	r3, r8
 8000cee:	4370      	muls	r0, r6
 8000cf0:	435c      	muls	r4, r3
 8000cf2:	437e      	muls	r6, r7
 8000cf4:	435f      	muls	r7, r3
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	19a4      	adds	r4, r4, r6
 8000cfc:	4444      	add	r4, r8
 8000cfe:	444a      	add	r2, r9
 8000d00:	9703      	str	r7, [sp, #12]
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d904      	bls.n	8000d10 <__aeabi_dmul+0x1d4>
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	025b      	lsls	r3, r3, #9
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	4447      	add	r7, r8
 8000d0e:	9703      	str	r7, [sp, #12]
 8000d10:	0423      	lsls	r3, r4, #16
 8000d12:	9e02      	ldr	r6, [sp, #8]
 8000d14:	469a      	mov	sl, r3
 8000d16:	9b05      	ldr	r3, [sp, #20]
 8000d18:	445e      	add	r6, fp
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	42ae      	cmp	r6, r5
 8000d1e:	41ad      	sbcs	r5, r5
 8000d20:	1876      	adds	r6, r6, r1
 8000d22:	428e      	cmp	r6, r1
 8000d24:	4189      	sbcs	r1, r1
 8000d26:	0400      	lsls	r0, r0, #16
 8000d28:	0c00      	lsrs	r0, r0, #16
 8000d2a:	4450      	add	r0, sl
 8000d2c:	4440      	add	r0, r8
 8000d2e:	426d      	negs	r5, r5
 8000d30:	1947      	adds	r7, r0, r5
 8000d32:	46b8      	mov	r8, r7
 8000d34:	4693      	mov	fp, r2
 8000d36:	4249      	negs	r1, r1
 8000d38:	4689      	mov	r9, r1
 8000d3a:	44c3      	add	fp, r8
 8000d3c:	44d9      	add	r9, fp
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	4180      	sbcs	r0, r0
 8000d42:	45a8      	cmp	r8, r5
 8000d44:	41ad      	sbcs	r5, r5
 8000d46:	4593      	cmp	fp, r2
 8000d48:	4192      	sbcs	r2, r2
 8000d4a:	4589      	cmp	r9, r1
 8000d4c:	4189      	sbcs	r1, r1
 8000d4e:	426d      	negs	r5, r5
 8000d50:	4240      	negs	r0, r0
 8000d52:	4328      	orrs	r0, r5
 8000d54:	0c24      	lsrs	r4, r4, #16
 8000d56:	4252      	negs	r2, r2
 8000d58:	4249      	negs	r1, r1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	9b03      	ldr	r3, [sp, #12]
 8000d5e:	1900      	adds	r0, r0, r4
 8000d60:	1880      	adds	r0, r0, r2
 8000d62:	18c7      	adds	r7, r0, r3
 8000d64:	464b      	mov	r3, r9
 8000d66:	0ddc      	lsrs	r4, r3, #23
 8000d68:	9b04      	ldr	r3, [sp, #16]
 8000d6a:	0275      	lsls	r5, r6, #9
 8000d6c:	431d      	orrs	r5, r3
 8000d6e:	1e6a      	subs	r2, r5, #1
 8000d70:	4195      	sbcs	r5, r2
 8000d72:	464b      	mov	r3, r9
 8000d74:	0df6      	lsrs	r6, r6, #23
 8000d76:	027f      	lsls	r7, r7, #9
 8000d78:	4335      	orrs	r5, r6
 8000d7a:	025a      	lsls	r2, r3, #9
 8000d7c:	433c      	orrs	r4, r7
 8000d7e:	4315      	orrs	r5, r2
 8000d80:	01fb      	lsls	r3, r7, #7
 8000d82:	d400      	bmi.n	8000d86 <__aeabi_dmul+0x24a>
 8000d84:	e11c      	b.n	8000fc0 <__aeabi_dmul+0x484>
 8000d86:	2101      	movs	r1, #1
 8000d88:	086a      	lsrs	r2, r5, #1
 8000d8a:	400d      	ands	r5, r1
 8000d8c:	4315      	orrs	r5, r2
 8000d8e:	07e2      	lsls	r2, r4, #31
 8000d90:	4315      	orrs	r5, r2
 8000d92:	0864      	lsrs	r4, r4, #1
 8000d94:	494f      	ldr	r1, [pc, #316]	; (8000ed4 <__aeabi_dmul+0x398>)
 8000d96:	4461      	add	r1, ip
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_dmul+0x262>
 8000d9c:	e0b0      	b.n	8000f00 <__aeabi_dmul+0x3c4>
 8000d9e:	076b      	lsls	r3, r5, #29
 8000da0:	d009      	beq.n	8000db6 <__aeabi_dmul+0x27a>
 8000da2:	220f      	movs	r2, #15
 8000da4:	402a      	ands	r2, r5
 8000da6:	2a04      	cmp	r2, #4
 8000da8:	d005      	beq.n	8000db6 <__aeabi_dmul+0x27a>
 8000daa:	1d2a      	adds	r2, r5, #4
 8000dac:	42aa      	cmp	r2, r5
 8000dae:	41ad      	sbcs	r5, r5
 8000db0:	426d      	negs	r5, r5
 8000db2:	1964      	adds	r4, r4, r5
 8000db4:	0015      	movs	r5, r2
 8000db6:	01e3      	lsls	r3, r4, #7
 8000db8:	d504      	bpl.n	8000dc4 <__aeabi_dmul+0x288>
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	4a46      	ldr	r2, [pc, #280]	; (8000ed8 <__aeabi_dmul+0x39c>)
 8000dbe:	00c9      	lsls	r1, r1, #3
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	4a45      	ldr	r2, [pc, #276]	; (8000edc <__aeabi_dmul+0x3a0>)
 8000dc6:	4291      	cmp	r1, r2
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dmul+0x290>
 8000dca:	e726      	b.n	8000c1a <__aeabi_dmul+0xde>
 8000dcc:	0762      	lsls	r2, r4, #29
 8000dce:	08ed      	lsrs	r5, r5, #3
 8000dd0:	0264      	lsls	r4, r4, #9
 8000dd2:	0549      	lsls	r1, r1, #21
 8000dd4:	4315      	orrs	r5, r2
 8000dd6:	0b24      	lsrs	r4, r4, #12
 8000dd8:	0d4a      	lsrs	r2, r1, #21
 8000dda:	e710      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000ddc:	4652      	mov	r2, sl
 8000dde:	4332      	orrs	r2, r6
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dmul+0x2a8>
 8000de2:	e07f      	b.n	8000ee4 <__aeabi_dmul+0x3a8>
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_dmul+0x2ae>
 8000de8:	e0dc      	b.n	8000fa4 <__aeabi_dmul+0x468>
 8000dea:	0030      	movs	r0, r6
 8000dec:	f000 fd60 	bl	80018b0 <__clzsi2>
 8000df0:	0002      	movs	r2, r0
 8000df2:	3a0b      	subs	r2, #11
 8000df4:	231d      	movs	r3, #29
 8000df6:	0001      	movs	r1, r0
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	3908      	subs	r1, #8
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	408e      	lsls	r6, r1
 8000e02:	4316      	orrs	r6, r2
 8000e04:	4652      	mov	r2, sl
 8000e06:	408a      	lsls	r2, r1
 8000e08:	9b00      	ldr	r3, [sp, #0]
 8000e0a:	4935      	ldr	r1, [pc, #212]	; (8000ee0 <__aeabi_dmul+0x3a4>)
 8000e0c:	1a18      	subs	r0, r3, r0
 8000e0e:	0003      	movs	r3, r0
 8000e10:	468c      	mov	ip, r1
 8000e12:	4463      	add	r3, ip
 8000e14:	2000      	movs	r0, #0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	e6d3      	b.n	8000bc2 <__aeabi_dmul+0x86>
 8000e1a:	0025      	movs	r5, r4
 8000e1c:	4305      	orrs	r5, r0
 8000e1e:	d04a      	beq.n	8000eb6 <__aeabi_dmul+0x37a>
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dmul+0x2ea>
 8000e24:	e0b0      	b.n	8000f88 <__aeabi_dmul+0x44c>
 8000e26:	0020      	movs	r0, r4
 8000e28:	f000 fd42 	bl	80018b0 <__clzsi2>
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	0002      	movs	r2, r0
 8000e30:	390b      	subs	r1, #11
 8000e32:	231d      	movs	r3, #29
 8000e34:	0010      	movs	r0, r2
 8000e36:	1a5b      	subs	r3, r3, r1
 8000e38:	0031      	movs	r1, r6
 8000e3a:	0035      	movs	r5, r6
 8000e3c:	3808      	subs	r0, #8
 8000e3e:	4084      	lsls	r4, r0
 8000e40:	40d9      	lsrs	r1, r3
 8000e42:	4085      	lsls	r5, r0
 8000e44:	430c      	orrs	r4, r1
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <__aeabi_dmul+0x3a4>)
 8000e48:	1a83      	subs	r3, r0, r2
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4699      	mov	r9, r3
 8000e50:	469b      	mov	fp, r3
 8000e52:	e697      	b.n	8000b84 <__aeabi_dmul+0x48>
 8000e54:	0005      	movs	r5, r0
 8000e56:	4325      	orrs	r5, r4
 8000e58:	d126      	bne.n	8000ea8 <__aeabi_dmul+0x36c>
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2302      	movs	r3, #2
 8000e60:	2400      	movs	r4, #0
 8000e62:	4691      	mov	r9, r2
 8000e64:	469b      	mov	fp, r3
 8000e66:	e68d      	b.n	8000b84 <__aeabi_dmul+0x48>
 8000e68:	4652      	mov	r2, sl
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	4332      	orrs	r2, r6
 8000e6e:	d110      	bne.n	8000e92 <__aeabi_dmul+0x356>
 8000e70:	4915      	ldr	r1, [pc, #84]	; (8000ec8 <__aeabi_dmul+0x38c>)
 8000e72:	2600      	movs	r6, #0
 8000e74:	468c      	mov	ip, r1
 8000e76:	4463      	add	r3, ip
 8000e78:	4649      	mov	r1, r9
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	4319      	orrs	r1, r3
 8000e80:	4689      	mov	r9, r1
 8000e82:	2002      	movs	r0, #2
 8000e84:	e69d      	b.n	8000bc2 <__aeabi_dmul+0x86>
 8000e86:	465b      	mov	r3, fp
 8000e88:	9701      	str	r7, [sp, #4]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_dmul+0x354>
 8000e8e:	e6ad      	b.n	8000bec <__aeabi_dmul+0xb0>
 8000e90:	e6c3      	b.n	8000c1a <__aeabi_dmul+0xde>
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <__aeabi_dmul+0x38c>)
 8000e94:	2003      	movs	r0, #3
 8000e96:	4694      	mov	ip, r2
 8000e98:	4463      	add	r3, ip
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	4691      	mov	r9, r2
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	e68c      	b.n	8000bc2 <__aeabi_dmul+0x86>
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2303      	movs	r3, #3
 8000eae:	0005      	movs	r5, r0
 8000eb0:	4691      	mov	r9, r2
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	e666      	b.n	8000b84 <__aeabi_dmul+0x48>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	4699      	mov	r9, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	469b      	mov	fp, r3
 8000ec4:	e65e      	b.n	8000b84 <__aeabi_dmul+0x48>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	fffffc01 	.word	0xfffffc01
 8000ed0:	08006468 	.word	0x08006468
 8000ed4:	000003ff 	.word	0x000003ff
 8000ed8:	feffffff 	.word	0xfeffffff
 8000edc:	000007fe 	.word	0x000007fe
 8000ee0:	fffffc0d 	.word	0xfffffc0d
 8000ee4:	4649      	mov	r1, r9
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4319      	orrs	r1, r3
 8000eea:	4689      	mov	r9, r1
 8000eec:	2600      	movs	r6, #0
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e667      	b.n	8000bc2 <__aeabi_dmul+0x86>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2480      	movs	r4, #128	; 0x80
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	4a43      	ldr	r2, [pc, #268]	; (8001008 <__aeabi_dmul+0x4cc>)
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	0324      	lsls	r4, r4, #12
 8000efe:	e67e      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000f00:	2001      	movs	r0, #1
 8000f02:	1a40      	subs	r0, r0, r1
 8000f04:	2838      	cmp	r0, #56	; 0x38
 8000f06:	dd00      	ble.n	8000f0a <__aeabi_dmul+0x3ce>
 8000f08:	e676      	b.n	8000bf8 <__aeabi_dmul+0xbc>
 8000f0a:	281f      	cmp	r0, #31
 8000f0c:	dd5b      	ble.n	8000fc6 <__aeabi_dmul+0x48a>
 8000f0e:	221f      	movs	r2, #31
 8000f10:	0023      	movs	r3, r4
 8000f12:	4252      	negs	r2, r2
 8000f14:	1a51      	subs	r1, r2, r1
 8000f16:	40cb      	lsrs	r3, r1
 8000f18:	0019      	movs	r1, r3
 8000f1a:	2820      	cmp	r0, #32
 8000f1c:	d003      	beq.n	8000f26 <__aeabi_dmul+0x3ea>
 8000f1e:	4a3b      	ldr	r2, [pc, #236]	; (800100c <__aeabi_dmul+0x4d0>)
 8000f20:	4462      	add	r2, ip
 8000f22:	4094      	lsls	r4, r2
 8000f24:	4325      	orrs	r5, r4
 8000f26:	1e6a      	subs	r2, r5, #1
 8000f28:	4195      	sbcs	r5, r2
 8000f2a:	002a      	movs	r2, r5
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	2107      	movs	r1, #7
 8000f30:	000d      	movs	r5, r1
 8000f32:	2400      	movs	r4, #0
 8000f34:	4015      	ands	r5, r2
 8000f36:	4211      	tst	r1, r2
 8000f38:	d05b      	beq.n	8000ff2 <__aeabi_dmul+0x4b6>
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	4011      	ands	r1, r2
 8000f40:	2904      	cmp	r1, #4
 8000f42:	d053      	beq.n	8000fec <__aeabi_dmul+0x4b0>
 8000f44:	1d11      	adds	r1, r2, #4
 8000f46:	4291      	cmp	r1, r2
 8000f48:	4192      	sbcs	r2, r2
 8000f4a:	4252      	negs	r2, r2
 8000f4c:	18a4      	adds	r4, r4, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	0223      	lsls	r3, r4, #8
 8000f52:	d54b      	bpl.n	8000fec <__aeabi_dmul+0x4b0>
 8000f54:	2201      	movs	r2, #1
 8000f56:	2400      	movs	r4, #0
 8000f58:	2500      	movs	r5, #0
 8000f5a:	e650      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	421c      	tst	r4, r3
 8000f62:	d009      	beq.n	8000f78 <__aeabi_dmul+0x43c>
 8000f64:	421e      	tst	r6, r3
 8000f66:	d107      	bne.n	8000f78 <__aeabi_dmul+0x43c>
 8000f68:	4333      	orrs	r3, r6
 8000f6a:	031c      	lsls	r4, r3, #12
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	0015      	movs	r5, r2
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <__aeabi_dmul+0x4cc>)
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	e642      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0312      	lsls	r2, r2, #12
 8000f7c:	4314      	orrs	r4, r2
 8000f7e:	0324      	lsls	r4, r4, #12
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <__aeabi_dmul+0x4cc>)
 8000f82:	0b24      	lsrs	r4, r4, #12
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	e63a      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000f88:	f000 fc92 	bl	80018b0 <__clzsi2>
 8000f8c:	0001      	movs	r1, r0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	3115      	adds	r1, #21
 8000f92:	3220      	adds	r2, #32
 8000f94:	291c      	cmp	r1, #28
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_dmul+0x45e>
 8000f98:	e74b      	b.n	8000e32 <__aeabi_dmul+0x2f6>
 8000f9a:	0034      	movs	r4, r6
 8000f9c:	3808      	subs	r0, #8
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	4084      	lsls	r4, r0
 8000fa2:	e750      	b.n	8000e46 <__aeabi_dmul+0x30a>
 8000fa4:	f000 fc84 	bl	80018b0 <__clzsi2>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	001a      	movs	r2, r3
 8000fac:	3215      	adds	r2, #21
 8000fae:	3020      	adds	r0, #32
 8000fb0:	2a1c      	cmp	r2, #28
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dmul+0x47a>
 8000fb4:	e71e      	b.n	8000df4 <__aeabi_dmul+0x2b8>
 8000fb6:	4656      	mov	r6, sl
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	409e      	lsls	r6, r3
 8000fbe:	e723      	b.n	8000e08 <__aeabi_dmul+0x2cc>
 8000fc0:	9b00      	ldr	r3, [sp, #0]
 8000fc2:	469c      	mov	ip, r3
 8000fc4:	e6e6      	b.n	8000d94 <__aeabi_dmul+0x258>
 8000fc6:	4912      	ldr	r1, [pc, #72]	; (8001010 <__aeabi_dmul+0x4d4>)
 8000fc8:	0022      	movs	r2, r4
 8000fca:	4461      	add	r1, ip
 8000fcc:	002e      	movs	r6, r5
 8000fce:	408d      	lsls	r5, r1
 8000fd0:	408a      	lsls	r2, r1
 8000fd2:	40c6      	lsrs	r6, r0
 8000fd4:	1e69      	subs	r1, r5, #1
 8000fd6:	418d      	sbcs	r5, r1
 8000fd8:	4332      	orrs	r2, r6
 8000fda:	432a      	orrs	r2, r5
 8000fdc:	40c4      	lsrs	r4, r0
 8000fde:	0753      	lsls	r3, r2, #29
 8000fe0:	d0b6      	beq.n	8000f50 <__aeabi_dmul+0x414>
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	4011      	ands	r1, r2
 8000fe6:	2904      	cmp	r1, #4
 8000fe8:	d1ac      	bne.n	8000f44 <__aeabi_dmul+0x408>
 8000fea:	e7b1      	b.n	8000f50 <__aeabi_dmul+0x414>
 8000fec:	0765      	lsls	r5, r4, #29
 8000fee:	0264      	lsls	r4, r4, #9
 8000ff0:	0b24      	lsrs	r4, r4, #12
 8000ff2:	08d2      	lsrs	r2, r2, #3
 8000ff4:	4315      	orrs	r5, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	e601      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0312      	lsls	r2, r2, #12
 8000ffe:	4314      	orrs	r4, r2
 8001000:	0324      	lsls	r4, r4, #12
 8001002:	4a01      	ldr	r2, [pc, #4]	; (8001008 <__aeabi_dmul+0x4cc>)
 8001004:	0b24      	lsrs	r4, r4, #12
 8001006:	e5fa      	b.n	8000bfe <__aeabi_dmul+0xc2>
 8001008:	000007ff 	.word	0x000007ff
 800100c:	0000043e 	.word	0x0000043e
 8001010:	0000041e 	.word	0x0000041e

08001014 <__aeabi_dsub>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	4657      	mov	r7, sl
 8001018:	464e      	mov	r6, r9
 800101a:	4645      	mov	r5, r8
 800101c:	46de      	mov	lr, fp
 800101e:	b5e0      	push	{r5, r6, r7, lr}
 8001020:	001e      	movs	r6, r3
 8001022:	0017      	movs	r7, r2
 8001024:	004a      	lsls	r2, r1, #1
 8001026:	030b      	lsls	r3, r1, #12
 8001028:	0d52      	lsrs	r2, r2, #21
 800102a:	0a5b      	lsrs	r3, r3, #9
 800102c:	4690      	mov	r8, r2
 800102e:	0f42      	lsrs	r2, r0, #29
 8001030:	431a      	orrs	r2, r3
 8001032:	0fcd      	lsrs	r5, r1, #31
 8001034:	4ccd      	ldr	r4, [pc, #820]	; (800136c <__aeabi_dsub+0x358>)
 8001036:	0331      	lsls	r1, r6, #12
 8001038:	00c3      	lsls	r3, r0, #3
 800103a:	4694      	mov	ip, r2
 800103c:	0070      	lsls	r0, r6, #1
 800103e:	0f7a      	lsrs	r2, r7, #29
 8001040:	0a49      	lsrs	r1, r1, #9
 8001042:	00ff      	lsls	r7, r7, #3
 8001044:	469a      	mov	sl, r3
 8001046:	46b9      	mov	r9, r7
 8001048:	0d40      	lsrs	r0, r0, #21
 800104a:	0ff6      	lsrs	r6, r6, #31
 800104c:	4311      	orrs	r1, r2
 800104e:	42a0      	cmp	r0, r4
 8001050:	d100      	bne.n	8001054 <__aeabi_dsub+0x40>
 8001052:	e0b1      	b.n	80011b8 <__aeabi_dsub+0x1a4>
 8001054:	2201      	movs	r2, #1
 8001056:	4056      	eors	r6, r2
 8001058:	46b3      	mov	fp, r6
 800105a:	42b5      	cmp	r5, r6
 800105c:	d100      	bne.n	8001060 <__aeabi_dsub+0x4c>
 800105e:	e088      	b.n	8001172 <__aeabi_dsub+0x15e>
 8001060:	4642      	mov	r2, r8
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	2a00      	cmp	r2, #0
 8001066:	dc00      	bgt.n	800106a <__aeabi_dsub+0x56>
 8001068:	e0ae      	b.n	80011c8 <__aeabi_dsub+0x1b4>
 800106a:	2800      	cmp	r0, #0
 800106c:	d100      	bne.n	8001070 <__aeabi_dsub+0x5c>
 800106e:	e0c1      	b.n	80011f4 <__aeabi_dsub+0x1e0>
 8001070:	48be      	ldr	r0, [pc, #760]	; (800136c <__aeabi_dsub+0x358>)
 8001072:	4580      	cmp	r8, r0
 8001074:	d100      	bne.n	8001078 <__aeabi_dsub+0x64>
 8001076:	e151      	b.n	800131c <__aeabi_dsub+0x308>
 8001078:	2080      	movs	r0, #128	; 0x80
 800107a:	0400      	lsls	r0, r0, #16
 800107c:	4301      	orrs	r1, r0
 800107e:	2a38      	cmp	r2, #56	; 0x38
 8001080:	dd00      	ble.n	8001084 <__aeabi_dsub+0x70>
 8001082:	e17b      	b.n	800137c <__aeabi_dsub+0x368>
 8001084:	2a1f      	cmp	r2, #31
 8001086:	dd00      	ble.n	800108a <__aeabi_dsub+0x76>
 8001088:	e1ee      	b.n	8001468 <__aeabi_dsub+0x454>
 800108a:	2020      	movs	r0, #32
 800108c:	003e      	movs	r6, r7
 800108e:	1a80      	subs	r0, r0, r2
 8001090:	000c      	movs	r4, r1
 8001092:	40d6      	lsrs	r6, r2
 8001094:	40d1      	lsrs	r1, r2
 8001096:	4087      	lsls	r7, r0
 8001098:	4662      	mov	r2, ip
 800109a:	4084      	lsls	r4, r0
 800109c:	1a52      	subs	r2, r2, r1
 800109e:	1e78      	subs	r0, r7, #1
 80010a0:	4187      	sbcs	r7, r0
 80010a2:	4694      	mov	ip, r2
 80010a4:	4334      	orrs	r4, r6
 80010a6:	4327      	orrs	r7, r4
 80010a8:	1bdc      	subs	r4, r3, r7
 80010aa:	42a3      	cmp	r3, r4
 80010ac:	419b      	sbcs	r3, r3
 80010ae:	4662      	mov	r2, ip
 80010b0:	425b      	negs	r3, r3
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4699      	mov	r9, r3
 80010b6:	464b      	mov	r3, r9
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	d400      	bmi.n	80010be <__aeabi_dsub+0xaa>
 80010bc:	e118      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 80010be:	464b      	mov	r3, r9
 80010c0:	0258      	lsls	r0, r3, #9
 80010c2:	0a43      	lsrs	r3, r0, #9
 80010c4:	4699      	mov	r9, r3
 80010c6:	464b      	mov	r3, r9
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0xba>
 80010cc:	e137      	b.n	800133e <__aeabi_dsub+0x32a>
 80010ce:	4648      	mov	r0, r9
 80010d0:	f000 fbee 	bl	80018b0 <__clzsi2>
 80010d4:	0001      	movs	r1, r0
 80010d6:	3908      	subs	r1, #8
 80010d8:	2320      	movs	r3, #32
 80010da:	0022      	movs	r2, r4
 80010dc:	4648      	mov	r0, r9
 80010de:	1a5b      	subs	r3, r3, r1
 80010e0:	40da      	lsrs	r2, r3
 80010e2:	4088      	lsls	r0, r1
 80010e4:	408c      	lsls	r4, r1
 80010e6:	4643      	mov	r3, r8
 80010e8:	4310      	orrs	r0, r2
 80010ea:	4588      	cmp	r8, r1
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_dsub+0xdc>
 80010ee:	e136      	b.n	800135e <__aeabi_dsub+0x34a>
 80010f0:	1ac9      	subs	r1, r1, r3
 80010f2:	1c4b      	adds	r3, r1, #1
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	dd00      	ble.n	80010fa <__aeabi_dsub+0xe6>
 80010f8:	e0ea      	b.n	80012d0 <__aeabi_dsub+0x2bc>
 80010fa:	2220      	movs	r2, #32
 80010fc:	0026      	movs	r6, r4
 80010fe:	1ad2      	subs	r2, r2, r3
 8001100:	0001      	movs	r1, r0
 8001102:	4094      	lsls	r4, r2
 8001104:	40de      	lsrs	r6, r3
 8001106:	40d8      	lsrs	r0, r3
 8001108:	2300      	movs	r3, #0
 800110a:	4091      	lsls	r1, r2
 800110c:	1e62      	subs	r2, r4, #1
 800110e:	4194      	sbcs	r4, r2
 8001110:	4681      	mov	r9, r0
 8001112:	4698      	mov	r8, r3
 8001114:	4331      	orrs	r1, r6
 8001116:	430c      	orrs	r4, r1
 8001118:	0763      	lsls	r3, r4, #29
 800111a:	d009      	beq.n	8001130 <__aeabi_dsub+0x11c>
 800111c:	230f      	movs	r3, #15
 800111e:	4023      	ands	r3, r4
 8001120:	2b04      	cmp	r3, #4
 8001122:	d005      	beq.n	8001130 <__aeabi_dsub+0x11c>
 8001124:	1d23      	adds	r3, r4, #4
 8001126:	42a3      	cmp	r3, r4
 8001128:	41a4      	sbcs	r4, r4
 800112a:	4264      	negs	r4, r4
 800112c:	44a1      	add	r9, r4
 800112e:	001c      	movs	r4, r3
 8001130:	464b      	mov	r3, r9
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	d400      	bmi.n	8001138 <__aeabi_dsub+0x124>
 8001136:	e0de      	b.n	80012f6 <__aeabi_dsub+0x2e2>
 8001138:	4641      	mov	r1, r8
 800113a:	4b8c      	ldr	r3, [pc, #560]	; (800136c <__aeabi_dsub+0x358>)
 800113c:	3101      	adds	r1, #1
 800113e:	4299      	cmp	r1, r3
 8001140:	d100      	bne.n	8001144 <__aeabi_dsub+0x130>
 8001142:	e0e7      	b.n	8001314 <__aeabi_dsub+0x300>
 8001144:	464b      	mov	r3, r9
 8001146:	488a      	ldr	r0, [pc, #552]	; (8001370 <__aeabi_dsub+0x35c>)
 8001148:	08e4      	lsrs	r4, r4, #3
 800114a:	4003      	ands	r3, r0
 800114c:	0018      	movs	r0, r3
 800114e:	0549      	lsls	r1, r1, #21
 8001150:	075b      	lsls	r3, r3, #29
 8001152:	0240      	lsls	r0, r0, #9
 8001154:	4323      	orrs	r3, r4
 8001156:	0d4a      	lsrs	r2, r1, #21
 8001158:	0b04      	lsrs	r4, r0, #12
 800115a:	0512      	lsls	r2, r2, #20
 800115c:	07ed      	lsls	r5, r5, #31
 800115e:	4322      	orrs	r2, r4
 8001160:	432a      	orrs	r2, r5
 8001162:	0018      	movs	r0, r3
 8001164:	0011      	movs	r1, r2
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001172:	4642      	mov	r2, r8
 8001174:	1a12      	subs	r2, r2, r0
 8001176:	2a00      	cmp	r2, #0
 8001178:	dd52      	ble.n	8001220 <__aeabi_dsub+0x20c>
 800117a:	2800      	cmp	r0, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dsub+0x16c>
 800117e:	e09c      	b.n	80012ba <__aeabi_dsub+0x2a6>
 8001180:	45a0      	cmp	r8, r4
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0x172>
 8001184:	e0ca      	b.n	800131c <__aeabi_dsub+0x308>
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	0400      	lsls	r0, r0, #16
 800118a:	4301      	orrs	r1, r0
 800118c:	2a38      	cmp	r2, #56	; 0x38
 800118e:	dd00      	ble.n	8001192 <__aeabi_dsub+0x17e>
 8001190:	e149      	b.n	8001426 <__aeabi_dsub+0x412>
 8001192:	2a1f      	cmp	r2, #31
 8001194:	dc00      	bgt.n	8001198 <__aeabi_dsub+0x184>
 8001196:	e197      	b.n	80014c8 <__aeabi_dsub+0x4b4>
 8001198:	0010      	movs	r0, r2
 800119a:	000e      	movs	r6, r1
 800119c:	3820      	subs	r0, #32
 800119e:	40c6      	lsrs	r6, r0
 80011a0:	2a20      	cmp	r2, #32
 80011a2:	d004      	beq.n	80011ae <__aeabi_dsub+0x19a>
 80011a4:	2040      	movs	r0, #64	; 0x40
 80011a6:	1a82      	subs	r2, r0, r2
 80011a8:	4091      	lsls	r1, r2
 80011aa:	430f      	orrs	r7, r1
 80011ac:	46b9      	mov	r9, r7
 80011ae:	464c      	mov	r4, r9
 80011b0:	1e62      	subs	r2, r4, #1
 80011b2:	4194      	sbcs	r4, r2
 80011b4:	4334      	orrs	r4, r6
 80011b6:	e13a      	b.n	800142e <__aeabi_dsub+0x41a>
 80011b8:	000a      	movs	r2, r1
 80011ba:	433a      	orrs	r2, r7
 80011bc:	d028      	beq.n	8001210 <__aeabi_dsub+0x1fc>
 80011be:	46b3      	mov	fp, r6
 80011c0:	42b5      	cmp	r5, r6
 80011c2:	d02b      	beq.n	800121c <__aeabi_dsub+0x208>
 80011c4:	4a6b      	ldr	r2, [pc, #428]	; (8001374 <__aeabi_dsub+0x360>)
 80011c6:	4442      	add	r2, r8
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d05d      	beq.n	8001288 <__aeabi_dsub+0x274>
 80011cc:	4642      	mov	r2, r8
 80011ce:	4644      	mov	r4, r8
 80011d0:	1a82      	subs	r2, r0, r2
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d000      	beq.n	80011d8 <__aeabi_dsub+0x1c4>
 80011d6:	e0f5      	b.n	80013c4 <__aeabi_dsub+0x3b0>
 80011d8:	4665      	mov	r5, ip
 80011da:	431d      	orrs	r5, r3
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dsub+0x1cc>
 80011de:	e19c      	b.n	800151a <__aeabi_dsub+0x506>
 80011e0:	1e55      	subs	r5, r2, #1
 80011e2:	2a01      	cmp	r2, #1
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dsub+0x1d4>
 80011e6:	e1fb      	b.n	80015e0 <__aeabi_dsub+0x5cc>
 80011e8:	4c60      	ldr	r4, [pc, #384]	; (800136c <__aeabi_dsub+0x358>)
 80011ea:	42a2      	cmp	r2, r4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dsub+0x1dc>
 80011ee:	e1bd      	b.n	800156c <__aeabi_dsub+0x558>
 80011f0:	002a      	movs	r2, r5
 80011f2:	e0f0      	b.n	80013d6 <__aeabi_dsub+0x3c2>
 80011f4:	0008      	movs	r0, r1
 80011f6:	4338      	orrs	r0, r7
 80011f8:	d100      	bne.n	80011fc <__aeabi_dsub+0x1e8>
 80011fa:	e0c3      	b.n	8001384 <__aeabi_dsub+0x370>
 80011fc:	1e50      	subs	r0, r2, #1
 80011fe:	2a01      	cmp	r2, #1
 8001200:	d100      	bne.n	8001204 <__aeabi_dsub+0x1f0>
 8001202:	e1a8      	b.n	8001556 <__aeabi_dsub+0x542>
 8001204:	4c59      	ldr	r4, [pc, #356]	; (800136c <__aeabi_dsub+0x358>)
 8001206:	42a2      	cmp	r2, r4
 8001208:	d100      	bne.n	800120c <__aeabi_dsub+0x1f8>
 800120a:	e087      	b.n	800131c <__aeabi_dsub+0x308>
 800120c:	0002      	movs	r2, r0
 800120e:	e736      	b.n	800107e <__aeabi_dsub+0x6a>
 8001210:	2201      	movs	r2, #1
 8001212:	4056      	eors	r6, r2
 8001214:	46b3      	mov	fp, r6
 8001216:	42b5      	cmp	r5, r6
 8001218:	d000      	beq.n	800121c <__aeabi_dsub+0x208>
 800121a:	e721      	b.n	8001060 <__aeabi_dsub+0x4c>
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <__aeabi_dsub+0x360>)
 800121e:	4442      	add	r2, r8
 8001220:	2a00      	cmp	r2, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x212>
 8001224:	e0b5      	b.n	8001392 <__aeabi_dsub+0x37e>
 8001226:	4642      	mov	r2, r8
 8001228:	4644      	mov	r4, r8
 800122a:	1a82      	subs	r2, r0, r2
 800122c:	2c00      	cmp	r4, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_dsub+0x21e>
 8001230:	e138      	b.n	80014a4 <__aeabi_dsub+0x490>
 8001232:	4e4e      	ldr	r6, [pc, #312]	; (800136c <__aeabi_dsub+0x358>)
 8001234:	42b0      	cmp	r0, r6
 8001236:	d100      	bne.n	800123a <__aeabi_dsub+0x226>
 8001238:	e1de      	b.n	80015f8 <__aeabi_dsub+0x5e4>
 800123a:	2680      	movs	r6, #128	; 0x80
 800123c:	4664      	mov	r4, ip
 800123e:	0436      	lsls	r6, r6, #16
 8001240:	4334      	orrs	r4, r6
 8001242:	46a4      	mov	ip, r4
 8001244:	2a38      	cmp	r2, #56	; 0x38
 8001246:	dd00      	ble.n	800124a <__aeabi_dsub+0x236>
 8001248:	e196      	b.n	8001578 <__aeabi_dsub+0x564>
 800124a:	2a1f      	cmp	r2, #31
 800124c:	dd00      	ble.n	8001250 <__aeabi_dsub+0x23c>
 800124e:	e224      	b.n	800169a <__aeabi_dsub+0x686>
 8001250:	2620      	movs	r6, #32
 8001252:	1ab4      	subs	r4, r6, r2
 8001254:	46a2      	mov	sl, r4
 8001256:	4664      	mov	r4, ip
 8001258:	4656      	mov	r6, sl
 800125a:	40b4      	lsls	r4, r6
 800125c:	46a1      	mov	r9, r4
 800125e:	001c      	movs	r4, r3
 8001260:	464e      	mov	r6, r9
 8001262:	40d4      	lsrs	r4, r2
 8001264:	4326      	orrs	r6, r4
 8001266:	0034      	movs	r4, r6
 8001268:	4656      	mov	r6, sl
 800126a:	40b3      	lsls	r3, r6
 800126c:	1e5e      	subs	r6, r3, #1
 800126e:	41b3      	sbcs	r3, r6
 8001270:	431c      	orrs	r4, r3
 8001272:	4663      	mov	r3, ip
 8001274:	40d3      	lsrs	r3, r2
 8001276:	18c9      	adds	r1, r1, r3
 8001278:	19e4      	adds	r4, r4, r7
 800127a:	42bc      	cmp	r4, r7
 800127c:	41bf      	sbcs	r7, r7
 800127e:	427f      	negs	r7, r7
 8001280:	46b9      	mov	r9, r7
 8001282:	4680      	mov	r8, r0
 8001284:	4489      	add	r9, r1
 8001286:	e0d8      	b.n	800143a <__aeabi_dsub+0x426>
 8001288:	4640      	mov	r0, r8
 800128a:	4c3b      	ldr	r4, [pc, #236]	; (8001378 <__aeabi_dsub+0x364>)
 800128c:	3001      	adds	r0, #1
 800128e:	4220      	tst	r0, r4
 8001290:	d000      	beq.n	8001294 <__aeabi_dsub+0x280>
 8001292:	e0b4      	b.n	80013fe <__aeabi_dsub+0x3ea>
 8001294:	4640      	mov	r0, r8
 8001296:	2800      	cmp	r0, #0
 8001298:	d000      	beq.n	800129c <__aeabi_dsub+0x288>
 800129a:	e144      	b.n	8001526 <__aeabi_dsub+0x512>
 800129c:	4660      	mov	r0, ip
 800129e:	4318      	orrs	r0, r3
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x290>
 80012a2:	e190      	b.n	80015c6 <__aeabi_dsub+0x5b2>
 80012a4:	0008      	movs	r0, r1
 80012a6:	4338      	orrs	r0, r7
 80012a8:	d000      	beq.n	80012ac <__aeabi_dsub+0x298>
 80012aa:	e1aa      	b.n	8001602 <__aeabi_dsub+0x5ee>
 80012ac:	4661      	mov	r1, ip
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	0749      	lsls	r1, r1, #29
 80012b2:	430b      	orrs	r3, r1
 80012b4:	4661      	mov	r1, ip
 80012b6:	08cc      	lsrs	r4, r1, #3
 80012b8:	e027      	b.n	800130a <__aeabi_dsub+0x2f6>
 80012ba:	0008      	movs	r0, r1
 80012bc:	4338      	orrs	r0, r7
 80012be:	d061      	beq.n	8001384 <__aeabi_dsub+0x370>
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dsub+0x2b4>
 80012c6:	e139      	b.n	800153c <__aeabi_dsub+0x528>
 80012c8:	42a2      	cmp	r2, r4
 80012ca:	d027      	beq.n	800131c <__aeabi_dsub+0x308>
 80012cc:	0002      	movs	r2, r0
 80012ce:	e75d      	b.n	800118c <__aeabi_dsub+0x178>
 80012d0:	0002      	movs	r2, r0
 80012d2:	391f      	subs	r1, #31
 80012d4:	40ca      	lsrs	r2, r1
 80012d6:	0011      	movs	r1, r2
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d003      	beq.n	80012e4 <__aeabi_dsub+0x2d0>
 80012dc:	2240      	movs	r2, #64	; 0x40
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4098      	lsls	r0, r3
 80012e2:	4304      	orrs	r4, r0
 80012e4:	1e63      	subs	r3, r4, #1
 80012e6:	419c      	sbcs	r4, r3
 80012e8:	2300      	movs	r3, #0
 80012ea:	4699      	mov	r9, r3
 80012ec:	4698      	mov	r8, r3
 80012ee:	430c      	orrs	r4, r1
 80012f0:	0763      	lsls	r3, r4, #29
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dsub+0x2e2>
 80012f4:	e712      	b.n	800111c <__aeabi_dsub+0x108>
 80012f6:	464b      	mov	r3, r9
 80012f8:	464a      	mov	r2, r9
 80012fa:	08e4      	lsrs	r4, r4, #3
 80012fc:	075b      	lsls	r3, r3, #29
 80012fe:	4323      	orrs	r3, r4
 8001300:	08d4      	lsrs	r4, r2, #3
 8001302:	4642      	mov	r2, r8
 8001304:	4919      	ldr	r1, [pc, #100]	; (800136c <__aeabi_dsub+0x358>)
 8001306:	428a      	cmp	r2, r1
 8001308:	d00e      	beq.n	8001328 <__aeabi_dsub+0x314>
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	0552      	lsls	r2, r2, #21
 800130e:	0b24      	lsrs	r4, r4, #12
 8001310:	0d52      	lsrs	r2, r2, #21
 8001312:	e722      	b.n	800115a <__aeabi_dsub+0x146>
 8001314:	000a      	movs	r2, r1
 8001316:	2400      	movs	r4, #0
 8001318:	2300      	movs	r3, #0
 800131a:	e71e      	b.n	800115a <__aeabi_dsub+0x146>
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	4662      	mov	r2, ip
 8001320:	0752      	lsls	r2, r2, #29
 8001322:	4313      	orrs	r3, r2
 8001324:	4662      	mov	r2, ip
 8001326:	08d4      	lsrs	r4, r2, #3
 8001328:	001a      	movs	r2, r3
 800132a:	4322      	orrs	r2, r4
 800132c:	d100      	bne.n	8001330 <__aeabi_dsub+0x31c>
 800132e:	e1fc      	b.n	800172a <__aeabi_dsub+0x716>
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	0312      	lsls	r2, r2, #12
 8001334:	4314      	orrs	r4, r2
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <__aeabi_dsub+0x358>)
 800133a:	0b24      	lsrs	r4, r4, #12
 800133c:	e70d      	b.n	800115a <__aeabi_dsub+0x146>
 800133e:	0020      	movs	r0, r4
 8001340:	f000 fab6 	bl	80018b0 <__clzsi2>
 8001344:	0001      	movs	r1, r0
 8001346:	3118      	adds	r1, #24
 8001348:	291f      	cmp	r1, #31
 800134a:	dc00      	bgt.n	800134e <__aeabi_dsub+0x33a>
 800134c:	e6c4      	b.n	80010d8 <__aeabi_dsub+0xc4>
 800134e:	3808      	subs	r0, #8
 8001350:	4084      	lsls	r4, r0
 8001352:	4643      	mov	r3, r8
 8001354:	0020      	movs	r0, r4
 8001356:	2400      	movs	r4, #0
 8001358:	4588      	cmp	r8, r1
 800135a:	dc00      	bgt.n	800135e <__aeabi_dsub+0x34a>
 800135c:	e6c8      	b.n	80010f0 <__aeabi_dsub+0xdc>
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__aeabi_dsub+0x35c>)
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	4010      	ands	r0, r2
 8001364:	4698      	mov	r8, r3
 8001366:	4681      	mov	r9, r0
 8001368:	e6d6      	b.n	8001118 <__aeabi_dsub+0x104>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff
 8001370:	ff7fffff 	.word	0xff7fffff
 8001374:	fffff801 	.word	0xfffff801
 8001378:	000007fe 	.word	0x000007fe
 800137c:	430f      	orrs	r7, r1
 800137e:	1e7a      	subs	r2, r7, #1
 8001380:	4197      	sbcs	r7, r2
 8001382:	e691      	b.n	80010a8 <__aeabi_dsub+0x94>
 8001384:	4661      	mov	r1, ip
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	0749      	lsls	r1, r1, #29
 800138a:	430b      	orrs	r3, r1
 800138c:	4661      	mov	r1, ip
 800138e:	08cc      	lsrs	r4, r1, #3
 8001390:	e7b8      	b.n	8001304 <__aeabi_dsub+0x2f0>
 8001392:	4640      	mov	r0, r8
 8001394:	4cd3      	ldr	r4, [pc, #844]	; (80016e4 <__aeabi_dsub+0x6d0>)
 8001396:	3001      	adds	r0, #1
 8001398:	4220      	tst	r0, r4
 800139a:	d000      	beq.n	800139e <__aeabi_dsub+0x38a>
 800139c:	e0a2      	b.n	80014e4 <__aeabi_dsub+0x4d0>
 800139e:	4640      	mov	r0, r8
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dsub+0x392>
 80013a4:	e101      	b.n	80015aa <__aeabi_dsub+0x596>
 80013a6:	4660      	mov	r0, ip
 80013a8:	4318      	orrs	r0, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dsub+0x39a>
 80013ac:	e15e      	b.n	800166c <__aeabi_dsub+0x658>
 80013ae:	0008      	movs	r0, r1
 80013b0:	4338      	orrs	r0, r7
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dsub+0x3a2>
 80013b4:	e15f      	b.n	8001676 <__aeabi_dsub+0x662>
 80013b6:	4661      	mov	r1, ip
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	0749      	lsls	r1, r1, #29
 80013bc:	430b      	orrs	r3, r1
 80013be:	4661      	mov	r1, ip
 80013c0:	08cc      	lsrs	r4, r1, #3
 80013c2:	e7a2      	b.n	800130a <__aeabi_dsub+0x2f6>
 80013c4:	4dc8      	ldr	r5, [pc, #800]	; (80016e8 <__aeabi_dsub+0x6d4>)
 80013c6:	42a8      	cmp	r0, r5
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x3b8>
 80013ca:	e0cf      	b.n	800156c <__aeabi_dsub+0x558>
 80013cc:	2580      	movs	r5, #128	; 0x80
 80013ce:	4664      	mov	r4, ip
 80013d0:	042d      	lsls	r5, r5, #16
 80013d2:	432c      	orrs	r4, r5
 80013d4:	46a4      	mov	ip, r4
 80013d6:	2a38      	cmp	r2, #56	; 0x38
 80013d8:	dc56      	bgt.n	8001488 <__aeabi_dsub+0x474>
 80013da:	2a1f      	cmp	r2, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dsub+0x3cc>
 80013de:	e0d1      	b.n	8001584 <__aeabi_dsub+0x570>
 80013e0:	2520      	movs	r5, #32
 80013e2:	001e      	movs	r6, r3
 80013e4:	1aad      	subs	r5, r5, r2
 80013e6:	4664      	mov	r4, ip
 80013e8:	40ab      	lsls	r3, r5
 80013ea:	40ac      	lsls	r4, r5
 80013ec:	40d6      	lsrs	r6, r2
 80013ee:	1e5d      	subs	r5, r3, #1
 80013f0:	41ab      	sbcs	r3, r5
 80013f2:	4334      	orrs	r4, r6
 80013f4:	4323      	orrs	r3, r4
 80013f6:	4664      	mov	r4, ip
 80013f8:	40d4      	lsrs	r4, r2
 80013fa:	1b09      	subs	r1, r1, r4
 80013fc:	e049      	b.n	8001492 <__aeabi_dsub+0x47e>
 80013fe:	4660      	mov	r0, ip
 8001400:	1bdc      	subs	r4, r3, r7
 8001402:	1a46      	subs	r6, r0, r1
 8001404:	42a3      	cmp	r3, r4
 8001406:	4180      	sbcs	r0, r0
 8001408:	4240      	negs	r0, r0
 800140a:	4681      	mov	r9, r0
 800140c:	0030      	movs	r0, r6
 800140e:	464e      	mov	r6, r9
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	4681      	mov	r9, r0
 8001414:	0200      	lsls	r0, r0, #8
 8001416:	d476      	bmi.n	8001506 <__aeabi_dsub+0x4f2>
 8001418:	464b      	mov	r3, r9
 800141a:	4323      	orrs	r3, r4
 800141c:	d000      	beq.n	8001420 <__aeabi_dsub+0x40c>
 800141e:	e652      	b.n	80010c6 <__aeabi_dsub+0xb2>
 8001420:	2400      	movs	r4, #0
 8001422:	2500      	movs	r5, #0
 8001424:	e771      	b.n	800130a <__aeabi_dsub+0x2f6>
 8001426:	4339      	orrs	r1, r7
 8001428:	000c      	movs	r4, r1
 800142a:	1e62      	subs	r2, r4, #1
 800142c:	4194      	sbcs	r4, r2
 800142e:	18e4      	adds	r4, r4, r3
 8001430:	429c      	cmp	r4, r3
 8001432:	419b      	sbcs	r3, r3
 8001434:	425b      	negs	r3, r3
 8001436:	4463      	add	r3, ip
 8001438:	4699      	mov	r9, r3
 800143a:	464b      	mov	r3, r9
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	d400      	bmi.n	8001442 <__aeabi_dsub+0x42e>
 8001440:	e756      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 8001442:	2301      	movs	r3, #1
 8001444:	469c      	mov	ip, r3
 8001446:	4ba8      	ldr	r3, [pc, #672]	; (80016e8 <__aeabi_dsub+0x6d4>)
 8001448:	44e0      	add	r8, ip
 800144a:	4598      	cmp	r8, r3
 800144c:	d038      	beq.n	80014c0 <__aeabi_dsub+0x4ac>
 800144e:	464b      	mov	r3, r9
 8001450:	48a6      	ldr	r0, [pc, #664]	; (80016ec <__aeabi_dsub+0x6d8>)
 8001452:	2201      	movs	r2, #1
 8001454:	4003      	ands	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	0863      	lsrs	r3, r4, #1
 800145a:	4014      	ands	r4, r2
 800145c:	431c      	orrs	r4, r3
 800145e:	07c3      	lsls	r3, r0, #31
 8001460:	431c      	orrs	r4, r3
 8001462:	0843      	lsrs	r3, r0, #1
 8001464:	4699      	mov	r9, r3
 8001466:	e657      	b.n	8001118 <__aeabi_dsub+0x104>
 8001468:	0010      	movs	r0, r2
 800146a:	000e      	movs	r6, r1
 800146c:	3820      	subs	r0, #32
 800146e:	40c6      	lsrs	r6, r0
 8001470:	2a20      	cmp	r2, #32
 8001472:	d004      	beq.n	800147e <__aeabi_dsub+0x46a>
 8001474:	2040      	movs	r0, #64	; 0x40
 8001476:	1a82      	subs	r2, r0, r2
 8001478:	4091      	lsls	r1, r2
 800147a:	430f      	orrs	r7, r1
 800147c:	46b9      	mov	r9, r7
 800147e:	464f      	mov	r7, r9
 8001480:	1e7a      	subs	r2, r7, #1
 8001482:	4197      	sbcs	r7, r2
 8001484:	4337      	orrs	r7, r6
 8001486:	e60f      	b.n	80010a8 <__aeabi_dsub+0x94>
 8001488:	4662      	mov	r2, ip
 800148a:	431a      	orrs	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	4193      	sbcs	r3, r2
 8001492:	1afc      	subs	r4, r7, r3
 8001494:	42a7      	cmp	r7, r4
 8001496:	41bf      	sbcs	r7, r7
 8001498:	427f      	negs	r7, r7
 800149a:	1bcb      	subs	r3, r1, r7
 800149c:	4699      	mov	r9, r3
 800149e:	465d      	mov	r5, fp
 80014a0:	4680      	mov	r8, r0
 80014a2:	e608      	b.n	80010b6 <__aeabi_dsub+0xa2>
 80014a4:	4666      	mov	r6, ip
 80014a6:	431e      	orrs	r6, r3
 80014a8:	d100      	bne.n	80014ac <__aeabi_dsub+0x498>
 80014aa:	e0be      	b.n	800162a <__aeabi_dsub+0x616>
 80014ac:	1e56      	subs	r6, r2, #1
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dsub+0x4a0>
 80014b2:	e109      	b.n	80016c8 <__aeabi_dsub+0x6b4>
 80014b4:	4c8c      	ldr	r4, [pc, #560]	; (80016e8 <__aeabi_dsub+0x6d4>)
 80014b6:	42a2      	cmp	r2, r4
 80014b8:	d100      	bne.n	80014bc <__aeabi_dsub+0x4a8>
 80014ba:	e119      	b.n	80016f0 <__aeabi_dsub+0x6dc>
 80014bc:	0032      	movs	r2, r6
 80014be:	e6c1      	b.n	8001244 <__aeabi_dsub+0x230>
 80014c0:	4642      	mov	r2, r8
 80014c2:	2400      	movs	r4, #0
 80014c4:	2300      	movs	r3, #0
 80014c6:	e648      	b.n	800115a <__aeabi_dsub+0x146>
 80014c8:	2020      	movs	r0, #32
 80014ca:	000c      	movs	r4, r1
 80014cc:	1a80      	subs	r0, r0, r2
 80014ce:	003e      	movs	r6, r7
 80014d0:	4087      	lsls	r7, r0
 80014d2:	4084      	lsls	r4, r0
 80014d4:	40d6      	lsrs	r6, r2
 80014d6:	1e78      	subs	r0, r7, #1
 80014d8:	4187      	sbcs	r7, r0
 80014da:	40d1      	lsrs	r1, r2
 80014dc:	4334      	orrs	r4, r6
 80014de:	433c      	orrs	r4, r7
 80014e0:	448c      	add	ip, r1
 80014e2:	e7a4      	b.n	800142e <__aeabi_dsub+0x41a>
 80014e4:	4a80      	ldr	r2, [pc, #512]	; (80016e8 <__aeabi_dsub+0x6d4>)
 80014e6:	4290      	cmp	r0, r2
 80014e8:	d100      	bne.n	80014ec <__aeabi_dsub+0x4d8>
 80014ea:	e0e9      	b.n	80016c0 <__aeabi_dsub+0x6ac>
 80014ec:	19df      	adds	r7, r3, r7
 80014ee:	429f      	cmp	r7, r3
 80014f0:	419b      	sbcs	r3, r3
 80014f2:	4461      	add	r1, ip
 80014f4:	425b      	negs	r3, r3
 80014f6:	18c9      	adds	r1, r1, r3
 80014f8:	07cc      	lsls	r4, r1, #31
 80014fa:	087f      	lsrs	r7, r7, #1
 80014fc:	084b      	lsrs	r3, r1, #1
 80014fe:	4699      	mov	r9, r3
 8001500:	4680      	mov	r8, r0
 8001502:	433c      	orrs	r4, r7
 8001504:	e6f4      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 8001506:	1afc      	subs	r4, r7, r3
 8001508:	42a7      	cmp	r7, r4
 800150a:	41bf      	sbcs	r7, r7
 800150c:	4663      	mov	r3, ip
 800150e:	427f      	negs	r7, r7
 8001510:	1ac9      	subs	r1, r1, r3
 8001512:	1bcb      	subs	r3, r1, r7
 8001514:	4699      	mov	r9, r3
 8001516:	465d      	mov	r5, fp
 8001518:	e5d5      	b.n	80010c6 <__aeabi_dsub+0xb2>
 800151a:	08ff      	lsrs	r7, r7, #3
 800151c:	074b      	lsls	r3, r1, #29
 800151e:	465d      	mov	r5, fp
 8001520:	433b      	orrs	r3, r7
 8001522:	08cc      	lsrs	r4, r1, #3
 8001524:	e6ee      	b.n	8001304 <__aeabi_dsub+0x2f0>
 8001526:	4662      	mov	r2, ip
 8001528:	431a      	orrs	r2, r3
 800152a:	d000      	beq.n	800152e <__aeabi_dsub+0x51a>
 800152c:	e082      	b.n	8001634 <__aeabi_dsub+0x620>
 800152e:	000b      	movs	r3, r1
 8001530:	433b      	orrs	r3, r7
 8001532:	d11b      	bne.n	800156c <__aeabi_dsub+0x558>
 8001534:	2480      	movs	r4, #128	; 0x80
 8001536:	2500      	movs	r5, #0
 8001538:	0324      	lsls	r4, r4, #12
 800153a:	e6f9      	b.n	8001330 <__aeabi_dsub+0x31c>
 800153c:	19dc      	adds	r4, r3, r7
 800153e:	429c      	cmp	r4, r3
 8001540:	419b      	sbcs	r3, r3
 8001542:	4461      	add	r1, ip
 8001544:	4689      	mov	r9, r1
 8001546:	425b      	negs	r3, r3
 8001548:	4499      	add	r9, r3
 800154a:	464b      	mov	r3, r9
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	d444      	bmi.n	80015da <__aeabi_dsub+0x5c6>
 8001550:	2301      	movs	r3, #1
 8001552:	4698      	mov	r8, r3
 8001554:	e6cc      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 8001556:	1bdc      	subs	r4, r3, r7
 8001558:	4662      	mov	r2, ip
 800155a:	42a3      	cmp	r3, r4
 800155c:	419b      	sbcs	r3, r3
 800155e:	1a51      	subs	r1, r2, r1
 8001560:	425b      	negs	r3, r3
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4699      	mov	r9, r3
 8001566:	2301      	movs	r3, #1
 8001568:	4698      	mov	r8, r3
 800156a:	e5a4      	b.n	80010b6 <__aeabi_dsub+0xa2>
 800156c:	08ff      	lsrs	r7, r7, #3
 800156e:	074b      	lsls	r3, r1, #29
 8001570:	465d      	mov	r5, fp
 8001572:	433b      	orrs	r3, r7
 8001574:	08cc      	lsrs	r4, r1, #3
 8001576:	e6d7      	b.n	8001328 <__aeabi_dsub+0x314>
 8001578:	4662      	mov	r2, ip
 800157a:	431a      	orrs	r2, r3
 800157c:	0014      	movs	r4, r2
 800157e:	1e63      	subs	r3, r4, #1
 8001580:	419c      	sbcs	r4, r3
 8001582:	e679      	b.n	8001278 <__aeabi_dsub+0x264>
 8001584:	0015      	movs	r5, r2
 8001586:	4664      	mov	r4, ip
 8001588:	3d20      	subs	r5, #32
 800158a:	40ec      	lsrs	r4, r5
 800158c:	46a0      	mov	r8, r4
 800158e:	2a20      	cmp	r2, #32
 8001590:	d005      	beq.n	800159e <__aeabi_dsub+0x58a>
 8001592:	2540      	movs	r5, #64	; 0x40
 8001594:	4664      	mov	r4, ip
 8001596:	1aaa      	subs	r2, r5, r2
 8001598:	4094      	lsls	r4, r2
 800159a:	4323      	orrs	r3, r4
 800159c:	469a      	mov	sl, r3
 800159e:	4654      	mov	r4, sl
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	4643      	mov	r3, r8
 80015a6:	4323      	orrs	r3, r4
 80015a8:	e773      	b.n	8001492 <__aeabi_dsub+0x47e>
 80015aa:	4662      	mov	r2, ip
 80015ac:	431a      	orrs	r2, r3
 80015ae:	d023      	beq.n	80015f8 <__aeabi_dsub+0x5e4>
 80015b0:	000a      	movs	r2, r1
 80015b2:	433a      	orrs	r2, r7
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dsub+0x5a4>
 80015b6:	e0a0      	b.n	80016fa <__aeabi_dsub+0x6e6>
 80015b8:	4662      	mov	r2, ip
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	0752      	lsls	r2, r2, #29
 80015be:	4313      	orrs	r3, r2
 80015c0:	4662      	mov	r2, ip
 80015c2:	08d4      	lsrs	r4, r2, #3
 80015c4:	e6b0      	b.n	8001328 <__aeabi_dsub+0x314>
 80015c6:	000b      	movs	r3, r1
 80015c8:	433b      	orrs	r3, r7
 80015ca:	d100      	bne.n	80015ce <__aeabi_dsub+0x5ba>
 80015cc:	e728      	b.n	8001420 <__aeabi_dsub+0x40c>
 80015ce:	08ff      	lsrs	r7, r7, #3
 80015d0:	074b      	lsls	r3, r1, #29
 80015d2:	465d      	mov	r5, fp
 80015d4:	433b      	orrs	r3, r7
 80015d6:	08cc      	lsrs	r4, r1, #3
 80015d8:	e697      	b.n	800130a <__aeabi_dsub+0x2f6>
 80015da:	2302      	movs	r3, #2
 80015dc:	4698      	mov	r8, r3
 80015de:	e736      	b.n	800144e <__aeabi_dsub+0x43a>
 80015e0:	1afc      	subs	r4, r7, r3
 80015e2:	42a7      	cmp	r7, r4
 80015e4:	41bf      	sbcs	r7, r7
 80015e6:	4663      	mov	r3, ip
 80015e8:	427f      	negs	r7, r7
 80015ea:	1ac9      	subs	r1, r1, r3
 80015ec:	1bcb      	subs	r3, r1, r7
 80015ee:	4699      	mov	r9, r3
 80015f0:	2301      	movs	r3, #1
 80015f2:	465d      	mov	r5, fp
 80015f4:	4698      	mov	r8, r3
 80015f6:	e55e      	b.n	80010b6 <__aeabi_dsub+0xa2>
 80015f8:	074b      	lsls	r3, r1, #29
 80015fa:	08ff      	lsrs	r7, r7, #3
 80015fc:	433b      	orrs	r3, r7
 80015fe:	08cc      	lsrs	r4, r1, #3
 8001600:	e692      	b.n	8001328 <__aeabi_dsub+0x314>
 8001602:	1bdc      	subs	r4, r3, r7
 8001604:	4660      	mov	r0, ip
 8001606:	42a3      	cmp	r3, r4
 8001608:	41b6      	sbcs	r6, r6
 800160a:	1a40      	subs	r0, r0, r1
 800160c:	4276      	negs	r6, r6
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	4681      	mov	r9, r0
 8001612:	0200      	lsls	r0, r0, #8
 8001614:	d560      	bpl.n	80016d8 <__aeabi_dsub+0x6c4>
 8001616:	1afc      	subs	r4, r7, r3
 8001618:	42a7      	cmp	r7, r4
 800161a:	41bf      	sbcs	r7, r7
 800161c:	4663      	mov	r3, ip
 800161e:	427f      	negs	r7, r7
 8001620:	1ac9      	subs	r1, r1, r3
 8001622:	1bcb      	subs	r3, r1, r7
 8001624:	4699      	mov	r9, r3
 8001626:	465d      	mov	r5, fp
 8001628:	e576      	b.n	8001118 <__aeabi_dsub+0x104>
 800162a:	08ff      	lsrs	r7, r7, #3
 800162c:	074b      	lsls	r3, r1, #29
 800162e:	433b      	orrs	r3, r7
 8001630:	08cc      	lsrs	r4, r1, #3
 8001632:	e667      	b.n	8001304 <__aeabi_dsub+0x2f0>
 8001634:	000a      	movs	r2, r1
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	433a      	orrs	r2, r7
 800163a:	d100      	bne.n	800163e <__aeabi_dsub+0x62a>
 800163c:	e66f      	b.n	800131e <__aeabi_dsub+0x30a>
 800163e:	4662      	mov	r2, ip
 8001640:	0752      	lsls	r2, r2, #29
 8001642:	4313      	orrs	r3, r2
 8001644:	4662      	mov	r2, ip
 8001646:	08d4      	lsrs	r4, r2, #3
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	0312      	lsls	r2, r2, #12
 800164c:	4214      	tst	r4, r2
 800164e:	d007      	beq.n	8001660 <__aeabi_dsub+0x64c>
 8001650:	08c8      	lsrs	r0, r1, #3
 8001652:	4210      	tst	r0, r2
 8001654:	d104      	bne.n	8001660 <__aeabi_dsub+0x64c>
 8001656:	465d      	mov	r5, fp
 8001658:	0004      	movs	r4, r0
 800165a:	08fb      	lsrs	r3, r7, #3
 800165c:	0749      	lsls	r1, r1, #29
 800165e:	430b      	orrs	r3, r1
 8001660:	0f5a      	lsrs	r2, r3, #29
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	0752      	lsls	r2, r2, #29
 8001668:	4313      	orrs	r3, r2
 800166a:	e65d      	b.n	8001328 <__aeabi_dsub+0x314>
 800166c:	074b      	lsls	r3, r1, #29
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	433b      	orrs	r3, r7
 8001672:	08cc      	lsrs	r4, r1, #3
 8001674:	e649      	b.n	800130a <__aeabi_dsub+0x2f6>
 8001676:	19dc      	adds	r4, r3, r7
 8001678:	429c      	cmp	r4, r3
 800167a:	419b      	sbcs	r3, r3
 800167c:	4461      	add	r1, ip
 800167e:	4689      	mov	r9, r1
 8001680:	425b      	negs	r3, r3
 8001682:	4499      	add	r9, r3
 8001684:	464b      	mov	r3, r9
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	d400      	bmi.n	800168c <__aeabi_dsub+0x678>
 800168a:	e631      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 800168c:	464a      	mov	r2, r9
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <__aeabi_dsub+0x6d8>)
 8001690:	401a      	ands	r2, r3
 8001692:	2301      	movs	r3, #1
 8001694:	4691      	mov	r9, r2
 8001696:	4698      	mov	r8, r3
 8001698:	e62a      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 800169a:	0016      	movs	r6, r2
 800169c:	4664      	mov	r4, ip
 800169e:	3e20      	subs	r6, #32
 80016a0:	40f4      	lsrs	r4, r6
 80016a2:	46a0      	mov	r8, r4
 80016a4:	2a20      	cmp	r2, #32
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dsub+0x6a0>
 80016a8:	2640      	movs	r6, #64	; 0x40
 80016aa:	4664      	mov	r4, ip
 80016ac:	1ab2      	subs	r2, r6, r2
 80016ae:	4094      	lsls	r4, r2
 80016b0:	4323      	orrs	r3, r4
 80016b2:	469a      	mov	sl, r3
 80016b4:	4654      	mov	r4, sl
 80016b6:	1e63      	subs	r3, r4, #1
 80016b8:	419c      	sbcs	r4, r3
 80016ba:	4643      	mov	r3, r8
 80016bc:	431c      	orrs	r4, r3
 80016be:	e5db      	b.n	8001278 <__aeabi_dsub+0x264>
 80016c0:	0002      	movs	r2, r0
 80016c2:	2400      	movs	r4, #0
 80016c4:	2300      	movs	r3, #0
 80016c6:	e548      	b.n	800115a <__aeabi_dsub+0x146>
 80016c8:	19dc      	adds	r4, r3, r7
 80016ca:	42bc      	cmp	r4, r7
 80016cc:	41bf      	sbcs	r7, r7
 80016ce:	4461      	add	r1, ip
 80016d0:	4689      	mov	r9, r1
 80016d2:	427f      	negs	r7, r7
 80016d4:	44b9      	add	r9, r7
 80016d6:	e738      	b.n	800154a <__aeabi_dsub+0x536>
 80016d8:	464b      	mov	r3, r9
 80016da:	4323      	orrs	r3, r4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x6cc>
 80016de:	e69f      	b.n	8001420 <__aeabi_dsub+0x40c>
 80016e0:	e606      	b.n	80012f0 <__aeabi_dsub+0x2dc>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	000007fe 	.word	0x000007fe
 80016e8:	000007ff 	.word	0x000007ff
 80016ec:	ff7fffff 	.word	0xff7fffff
 80016f0:	08ff      	lsrs	r7, r7, #3
 80016f2:	074b      	lsls	r3, r1, #29
 80016f4:	433b      	orrs	r3, r7
 80016f6:	08cc      	lsrs	r4, r1, #3
 80016f8:	e616      	b.n	8001328 <__aeabi_dsub+0x314>
 80016fa:	4662      	mov	r2, ip
 80016fc:	08db      	lsrs	r3, r3, #3
 80016fe:	0752      	lsls	r2, r2, #29
 8001700:	4313      	orrs	r3, r2
 8001702:	4662      	mov	r2, ip
 8001704:	08d4      	lsrs	r4, r2, #3
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0312      	lsls	r2, r2, #12
 800170a:	4214      	tst	r4, r2
 800170c:	d007      	beq.n	800171e <__aeabi_dsub+0x70a>
 800170e:	08c8      	lsrs	r0, r1, #3
 8001710:	4210      	tst	r0, r2
 8001712:	d104      	bne.n	800171e <__aeabi_dsub+0x70a>
 8001714:	465d      	mov	r5, fp
 8001716:	0004      	movs	r4, r0
 8001718:	08fb      	lsrs	r3, r7, #3
 800171a:	0749      	lsls	r1, r1, #29
 800171c:	430b      	orrs	r3, r1
 800171e:	0f5a      	lsrs	r2, r3, #29
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	0752      	lsls	r2, r2, #29
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	4313      	orrs	r3, r2
 8001728:	e5fe      	b.n	8001328 <__aeabi_dsub+0x314>
 800172a:	2300      	movs	r3, #0
 800172c:	4a01      	ldr	r2, [pc, #4]	; (8001734 <__aeabi_dsub+0x720>)
 800172e:	001c      	movs	r4, r3
 8001730:	e513      	b.n	800115a <__aeabi_dsub+0x146>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	000007ff 	.word	0x000007ff

08001738 <__aeabi_d2iz>:
 8001738:	000a      	movs	r2, r1
 800173a:	b530      	push	{r4, r5, lr}
 800173c:	4c13      	ldr	r4, [pc, #76]	; (800178c <__aeabi_d2iz+0x54>)
 800173e:	0053      	lsls	r3, r2, #1
 8001740:	0309      	lsls	r1, r1, #12
 8001742:	0005      	movs	r5, r0
 8001744:	0b09      	lsrs	r1, r1, #12
 8001746:	2000      	movs	r0, #0
 8001748:	0d5b      	lsrs	r3, r3, #21
 800174a:	0fd2      	lsrs	r2, r2, #31
 800174c:	42a3      	cmp	r3, r4
 800174e:	dd04      	ble.n	800175a <__aeabi_d2iz+0x22>
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <__aeabi_d2iz+0x58>)
 8001752:	4283      	cmp	r3, r0
 8001754:	dd02      	ble.n	800175c <__aeabi_d2iz+0x24>
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <__aeabi_d2iz+0x5c>)
 8001758:	18d0      	adds	r0, r2, r3
 800175a:	bd30      	pop	{r4, r5, pc}
 800175c:	2080      	movs	r0, #128	; 0x80
 800175e:	0340      	lsls	r0, r0, #13
 8001760:	4301      	orrs	r1, r0
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <__aeabi_d2iz+0x60>)
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	281f      	cmp	r0, #31
 8001768:	dd08      	ble.n	800177c <__aeabi_d2iz+0x44>
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <__aeabi_d2iz+0x64>)
 800176c:	1ac3      	subs	r3, r0, r3
 800176e:	40d9      	lsrs	r1, r3
 8001770:	000b      	movs	r3, r1
 8001772:	4258      	negs	r0, r3
 8001774:	2a00      	cmp	r2, #0
 8001776:	d1f0      	bne.n	800175a <__aeabi_d2iz+0x22>
 8001778:	0018      	movs	r0, r3
 800177a:	e7ee      	b.n	800175a <__aeabi_d2iz+0x22>
 800177c:	4c08      	ldr	r4, [pc, #32]	; (80017a0 <__aeabi_d2iz+0x68>)
 800177e:	40c5      	lsrs	r5, r0
 8001780:	46a4      	mov	ip, r4
 8001782:	4463      	add	r3, ip
 8001784:	4099      	lsls	r1, r3
 8001786:	000b      	movs	r3, r1
 8001788:	432b      	orrs	r3, r5
 800178a:	e7f2      	b.n	8001772 <__aeabi_d2iz+0x3a>
 800178c:	000003fe 	.word	0x000003fe
 8001790:	0000041d 	.word	0x0000041d
 8001794:	7fffffff 	.word	0x7fffffff
 8001798:	00000433 	.word	0x00000433
 800179c:	00000413 	.word	0x00000413
 80017a0:	fffffbed 	.word	0xfffffbed

080017a4 <__aeabi_f2d>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	0043      	lsls	r3, r0, #1
 80017a8:	0246      	lsls	r6, r0, #9
 80017aa:	0fc4      	lsrs	r4, r0, #31
 80017ac:	20fe      	movs	r0, #254	; 0xfe
 80017ae:	0e1b      	lsrs	r3, r3, #24
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	0a75      	lsrs	r5, r6, #9
 80017b4:	4208      	tst	r0, r1
 80017b6:	d00c      	beq.n	80017d2 <__aeabi_f2d+0x2e>
 80017b8:	22e0      	movs	r2, #224	; 0xe0
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4694      	mov	ip, r2
 80017be:	076d      	lsls	r5, r5, #29
 80017c0:	0b36      	lsrs	r6, r6, #12
 80017c2:	4463      	add	r3, ip
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	4333      	orrs	r3, r6
 80017c8:	07e4      	lsls	r4, r4, #31
 80017ca:	4323      	orrs	r3, r4
 80017cc:	0028      	movs	r0, r5
 80017ce:	0019      	movs	r1, r3
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d114      	bne.n	8001800 <__aeabi_f2d+0x5c>
 80017d6:	2d00      	cmp	r5, #0
 80017d8:	d01b      	beq.n	8001812 <__aeabi_f2d+0x6e>
 80017da:	0028      	movs	r0, r5
 80017dc:	f000 f868 	bl	80018b0 <__clzsi2>
 80017e0:	280a      	cmp	r0, #10
 80017e2:	dc1c      	bgt.n	800181e <__aeabi_f2d+0x7a>
 80017e4:	230b      	movs	r3, #11
 80017e6:	002e      	movs	r6, r5
 80017e8:	1a1b      	subs	r3, r3, r0
 80017ea:	40de      	lsrs	r6, r3
 80017ec:	0003      	movs	r3, r0
 80017ee:	3315      	adds	r3, #21
 80017f0:	409d      	lsls	r5, r3
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <__aeabi_f2d+0x88>)
 80017f4:	0336      	lsls	r6, r6, #12
 80017f6:	1a12      	subs	r2, r2, r0
 80017f8:	0552      	lsls	r2, r2, #21
 80017fa:	0b36      	lsrs	r6, r6, #12
 80017fc:	0d53      	lsrs	r3, r2, #21
 80017fe:	e7e1      	b.n	80017c4 <__aeabi_f2d+0x20>
 8001800:	2d00      	cmp	r5, #0
 8001802:	d009      	beq.n	8001818 <__aeabi_f2d+0x74>
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0b36      	lsrs	r6, r6, #12
 8001808:	0312      	lsls	r2, r2, #12
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <__aeabi_f2d+0x8c>)
 800180c:	076d      	lsls	r5, r5, #29
 800180e:	4316      	orrs	r6, r2
 8001810:	e7d8      	b.n	80017c4 <__aeabi_f2d+0x20>
 8001812:	2300      	movs	r3, #0
 8001814:	2600      	movs	r6, #0
 8001816:	e7d5      	b.n	80017c4 <__aeabi_f2d+0x20>
 8001818:	2600      	movs	r6, #0
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <__aeabi_f2d+0x8c>)
 800181c:	e7d2      	b.n	80017c4 <__aeabi_f2d+0x20>
 800181e:	0003      	movs	r3, r0
 8001820:	3b0b      	subs	r3, #11
 8001822:	409d      	lsls	r5, r3
 8001824:	002e      	movs	r6, r5
 8001826:	2500      	movs	r5, #0
 8001828:	e7e3      	b.n	80017f2 <__aeabi_f2d+0x4e>
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	00000389 	.word	0x00000389
 8001830:	000007ff 	.word	0x000007ff

08001834 <__aeabi_cdrcmple>:
 8001834:	4684      	mov	ip, r0
 8001836:	0010      	movs	r0, r2
 8001838:	4662      	mov	r2, ip
 800183a:	468c      	mov	ip, r1
 800183c:	0019      	movs	r1, r3
 800183e:	4663      	mov	r3, ip
 8001840:	e000      	b.n	8001844 <__aeabi_cdcmpeq>
 8001842:	46c0      	nop			; (mov r8, r8)

08001844 <__aeabi_cdcmpeq>:
 8001844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001846:	f000 f9eb 	bl	8001c20 <__ledf2>
 800184a:	2800      	cmp	r0, #0
 800184c:	d401      	bmi.n	8001852 <__aeabi_cdcmpeq+0xe>
 800184e:	2100      	movs	r1, #0
 8001850:	42c8      	cmn	r0, r1
 8001852:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001854 <__aeabi_dcmpeq>:
 8001854:	b510      	push	{r4, lr}
 8001856:	f000 f93b 	bl	8001ad0 <__eqdf2>
 800185a:	4240      	negs	r0, r0
 800185c:	3001      	adds	r0, #1
 800185e:	bd10      	pop	{r4, pc}

08001860 <__aeabi_dcmplt>:
 8001860:	b510      	push	{r4, lr}
 8001862:	f000 f9dd 	bl	8001c20 <__ledf2>
 8001866:	2800      	cmp	r0, #0
 8001868:	db01      	blt.n	800186e <__aeabi_dcmplt+0xe>
 800186a:	2000      	movs	r0, #0
 800186c:	bd10      	pop	{r4, pc}
 800186e:	2001      	movs	r0, #1
 8001870:	bd10      	pop	{r4, pc}
 8001872:	46c0      	nop			; (mov r8, r8)

08001874 <__aeabi_dcmple>:
 8001874:	b510      	push	{r4, lr}
 8001876:	f000 f9d3 	bl	8001c20 <__ledf2>
 800187a:	2800      	cmp	r0, #0
 800187c:	dd01      	ble.n	8001882 <__aeabi_dcmple+0xe>
 800187e:	2000      	movs	r0, #0
 8001880:	bd10      	pop	{r4, pc}
 8001882:	2001      	movs	r0, #1
 8001884:	bd10      	pop	{r4, pc}
 8001886:	46c0      	nop			; (mov r8, r8)

08001888 <__aeabi_dcmpgt>:
 8001888:	b510      	push	{r4, lr}
 800188a:	f000 f963 	bl	8001b54 <__gedf2>
 800188e:	2800      	cmp	r0, #0
 8001890:	dc01      	bgt.n	8001896 <__aeabi_dcmpgt+0xe>
 8001892:	2000      	movs	r0, #0
 8001894:	bd10      	pop	{r4, pc}
 8001896:	2001      	movs	r0, #1
 8001898:	bd10      	pop	{r4, pc}
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <__aeabi_dcmpge>:
 800189c:	b510      	push	{r4, lr}
 800189e:	f000 f959 	bl	8001b54 <__gedf2>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	da01      	bge.n	80018aa <__aeabi_dcmpge+0xe>
 80018a6:	2000      	movs	r0, #0
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	2001      	movs	r0, #1
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)

080018b0 <__clzsi2>:
 80018b0:	211c      	movs	r1, #28
 80018b2:	2301      	movs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d301      	bcc.n	80018be <__clzsi2+0xe>
 80018ba:	0c00      	lsrs	r0, r0, #16
 80018bc:	3910      	subs	r1, #16
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	4298      	cmp	r0, r3
 80018c2:	d301      	bcc.n	80018c8 <__clzsi2+0x18>
 80018c4:	0a00      	lsrs	r0, r0, #8
 80018c6:	3908      	subs	r1, #8
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d301      	bcc.n	80018d2 <__clzsi2+0x22>
 80018ce:	0900      	lsrs	r0, r0, #4
 80018d0:	3904      	subs	r1, #4
 80018d2:	a202      	add	r2, pc, #8	; (adr r2, 80018dc <__clzsi2+0x2c>)
 80018d4:	5c10      	ldrb	r0, [r2, r0]
 80018d6:	1840      	adds	r0, r0, r1
 80018d8:	4770      	bx	lr
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	02020304 	.word	0x02020304
 80018e0:	01010101 	.word	0x01010101
	...

080018ec <__clzdi2>:
 80018ec:	b510      	push	{r4, lr}
 80018ee:	2900      	cmp	r1, #0
 80018f0:	d103      	bne.n	80018fa <__clzdi2+0xe>
 80018f2:	f7ff ffdd 	bl	80018b0 <__clzsi2>
 80018f6:	3020      	adds	r0, #32
 80018f8:	e002      	b.n	8001900 <__clzdi2+0x14>
 80018fa:	0008      	movs	r0, r1
 80018fc:	f7ff ffd8 	bl	80018b0 <__clzsi2>
 8001900:	bd10      	pop	{r4, pc}
 8001902:	46c0      	nop			; (mov r8, r8)

08001904 <__divdi3>:
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4657      	mov	r7, sl
 8001908:	464e      	mov	r6, r9
 800190a:	4645      	mov	r5, r8
 800190c:	46de      	mov	lr, fp
 800190e:	b5e0      	push	{r5, r6, r7, lr}
 8001910:	000f      	movs	r7, r1
 8001912:	0019      	movs	r1, r3
 8001914:	2300      	movs	r3, #0
 8001916:	0006      	movs	r6, r0
 8001918:	4698      	mov	r8, r3
 800191a:	0010      	movs	r0, r2
 800191c:	b083      	sub	sp, #12
 800191e:	2f00      	cmp	r7, #0
 8001920:	da07      	bge.n	8001932 <__divdi3+0x2e>
 8001922:	0033      	movs	r3, r6
 8001924:	003c      	movs	r4, r7
 8001926:	2700      	movs	r7, #0
 8001928:	425e      	negs	r6, r3
 800192a:	41a7      	sbcs	r7, r4
 800192c:	2301      	movs	r3, #1
 800192e:	425b      	negs	r3, r3
 8001930:	4698      	mov	r8, r3
 8001932:	2900      	cmp	r1, #0
 8001934:	da07      	bge.n	8001946 <__divdi3+0x42>
 8001936:	4643      	mov	r3, r8
 8001938:	43db      	mvns	r3, r3
 800193a:	000c      	movs	r4, r1
 800193c:	4698      	mov	r8, r3
 800193e:	0003      	movs	r3, r0
 8001940:	2100      	movs	r1, #0
 8001942:	4258      	negs	r0, r3
 8001944:	41a1      	sbcs	r1, r4
 8001946:	0034      	movs	r4, r6
 8001948:	003d      	movs	r5, r7
 800194a:	4682      	mov	sl, r0
 800194c:	4689      	mov	r9, r1
 800194e:	42b9      	cmp	r1, r7
 8001950:	d86a      	bhi.n	8001a28 <__divdi3+0x124>
 8001952:	d067      	beq.n	8001a24 <__divdi3+0x120>
 8001954:	4649      	mov	r1, r9
 8001956:	4650      	mov	r0, sl
 8001958:	f7ff ffc8 	bl	80018ec <__clzdi2>
 800195c:	4683      	mov	fp, r0
 800195e:	0039      	movs	r1, r7
 8001960:	0030      	movs	r0, r6
 8001962:	f7ff ffc3 	bl	80018ec <__clzdi2>
 8001966:	465b      	mov	r3, fp
 8001968:	1a1b      	subs	r3, r3, r0
 800196a:	469c      	mov	ip, r3
 800196c:	3b20      	subs	r3, #32
 800196e:	469b      	mov	fp, r3
 8001970:	d46b      	bmi.n	8001a4a <__divdi3+0x146>
 8001972:	4658      	mov	r0, fp
 8001974:	4651      	mov	r1, sl
 8001976:	4081      	lsls	r1, r0
 8001978:	4660      	mov	r0, ip
 800197a:	000b      	movs	r3, r1
 800197c:	4651      	mov	r1, sl
 800197e:	4081      	lsls	r1, r0
 8001980:	000a      	movs	r2, r1
 8001982:	42bb      	cmp	r3, r7
 8001984:	d900      	bls.n	8001988 <__divdi3+0x84>
 8001986:	e072      	b.n	8001a6e <__divdi3+0x16a>
 8001988:	42bb      	cmp	r3, r7
 800198a:	d100      	bne.n	800198e <__divdi3+0x8a>
 800198c:	e079      	b.n	8001a82 <__divdi3+0x17e>
 800198e:	0034      	movs	r4, r6
 8001990:	003d      	movs	r5, r7
 8001992:	4659      	mov	r1, fp
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	419d      	sbcs	r5, r3
 8001998:	2900      	cmp	r1, #0
 800199a:	da00      	bge.n	800199e <__divdi3+0x9a>
 800199c:	e074      	b.n	8001a88 <__divdi3+0x184>
 800199e:	2100      	movs	r1, #0
 80019a0:	2000      	movs	r0, #0
 80019a2:	2601      	movs	r6, #1
 80019a4:	9000      	str	r0, [sp, #0]
 80019a6:	9101      	str	r1, [sp, #4]
 80019a8:	4659      	mov	r1, fp
 80019aa:	408e      	lsls	r6, r1
 80019ac:	9601      	str	r6, [sp, #4]
 80019ae:	4661      	mov	r1, ip
 80019b0:	2601      	movs	r6, #1
 80019b2:	408e      	lsls	r6, r1
 80019b4:	4661      	mov	r1, ip
 80019b6:	9600      	str	r6, [sp, #0]
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d05f      	beq.n	8001a7c <__divdi3+0x178>
 80019bc:	07d9      	lsls	r1, r3, #31
 80019be:	0856      	lsrs	r6, r2, #1
 80019c0:	430e      	orrs	r6, r1
 80019c2:	085f      	lsrs	r7, r3, #1
 80019c4:	4661      	mov	r1, ip
 80019c6:	2201      	movs	r2, #1
 80019c8:	2300      	movs	r3, #0
 80019ca:	e00c      	b.n	80019e6 <__divdi3+0xe2>
 80019cc:	42af      	cmp	r7, r5
 80019ce:	d101      	bne.n	80019d4 <__divdi3+0xd0>
 80019d0:	42a6      	cmp	r6, r4
 80019d2:	d80a      	bhi.n	80019ea <__divdi3+0xe6>
 80019d4:	1ba4      	subs	r4, r4, r6
 80019d6:	41bd      	sbcs	r5, r7
 80019d8:	1924      	adds	r4, r4, r4
 80019da:	416d      	adcs	r5, r5
 80019dc:	3901      	subs	r1, #1
 80019de:	18a4      	adds	r4, r4, r2
 80019e0:	415d      	adcs	r5, r3
 80019e2:	2900      	cmp	r1, #0
 80019e4:	d006      	beq.n	80019f4 <__divdi3+0xf0>
 80019e6:	42af      	cmp	r7, r5
 80019e8:	d9f0      	bls.n	80019cc <__divdi3+0xc8>
 80019ea:	3901      	subs	r1, #1
 80019ec:	1924      	adds	r4, r4, r4
 80019ee:	416d      	adcs	r5, r5
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d1f8      	bne.n	80019e6 <__divdi3+0xe2>
 80019f4:	9800      	ldr	r0, [sp, #0]
 80019f6:	9901      	ldr	r1, [sp, #4]
 80019f8:	465b      	mov	r3, fp
 80019fa:	1900      	adds	r0, r0, r4
 80019fc:	4169      	adcs	r1, r5
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db4d      	blt.n	8001a9e <__divdi3+0x19a>
 8001a02:	002e      	movs	r6, r5
 8001a04:	002c      	movs	r4, r5
 8001a06:	40de      	lsrs	r6, r3
 8001a08:	4663      	mov	r3, ip
 8001a0a:	40dc      	lsrs	r4, r3
 8001a0c:	465b      	mov	r3, fp
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db55      	blt.n	8001abe <__divdi3+0x1ba>
 8001a12:	0034      	movs	r4, r6
 8001a14:	409c      	lsls	r4, r3
 8001a16:	0023      	movs	r3, r4
 8001a18:	4664      	mov	r4, ip
 8001a1a:	40a6      	lsls	r6, r4
 8001a1c:	0032      	movs	r2, r6
 8001a1e:	1a80      	subs	r0, r0, r2
 8001a20:	4199      	sbcs	r1, r3
 8001a22:	e003      	b.n	8001a2c <__divdi3+0x128>
 8001a24:	42b0      	cmp	r0, r6
 8001a26:	d995      	bls.n	8001954 <__divdi3+0x50>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <__divdi3+0x138>
 8001a32:	0003      	movs	r3, r0
 8001a34:	000c      	movs	r4, r1
 8001a36:	2100      	movs	r1, #0
 8001a38:	4258      	negs	r0, r3
 8001a3a:	41a1      	sbcs	r1, r4
 8001a3c:	b003      	add	sp, #12
 8001a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a40:	46bb      	mov	fp, r7
 8001a42:	46b2      	mov	sl, r6
 8001a44:	46a9      	mov	r9, r5
 8001a46:	46a0      	mov	r8, r4
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	4662      	mov	r2, ip
 8001a4c:	4648      	mov	r0, r9
 8001a4e:	2320      	movs	r3, #32
 8001a50:	4651      	mov	r1, sl
 8001a52:	4090      	lsls	r0, r2
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	40d9      	lsrs	r1, r3
 8001a58:	0003      	movs	r3, r0
 8001a5a:	9100      	str	r1, [sp, #0]
 8001a5c:	9900      	ldr	r1, [sp, #0]
 8001a5e:	4660      	mov	r0, ip
 8001a60:	430b      	orrs	r3, r1
 8001a62:	4651      	mov	r1, sl
 8001a64:	4081      	lsls	r1, r0
 8001a66:	000a      	movs	r2, r1
 8001a68:	42bb      	cmp	r3, r7
 8001a6a:	d800      	bhi.n	8001a6e <__divdi3+0x16a>
 8001a6c:	e78c      	b.n	8001988 <__divdi3+0x84>
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	9000      	str	r0, [sp, #0]
 8001a74:	9101      	str	r1, [sp, #4]
 8001a76:	4661      	mov	r1, ip
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	d19f      	bne.n	80019bc <__divdi3+0xb8>
 8001a7c:	9800      	ldr	r0, [sp, #0]
 8001a7e:	9901      	ldr	r1, [sp, #4]
 8001a80:	e7d4      	b.n	8001a2c <__divdi3+0x128>
 8001a82:	42b1      	cmp	r1, r6
 8001a84:	d8f3      	bhi.n	8001a6e <__divdi3+0x16a>
 8001a86:	e782      	b.n	800198e <__divdi3+0x8a>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	2620      	movs	r6, #32
 8001a8c:	2701      	movs	r7, #1
 8001a8e:	1a76      	subs	r6, r6, r1
 8001a90:	2000      	movs	r0, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	40f7      	lsrs	r7, r6
 8001a96:	9000      	str	r0, [sp, #0]
 8001a98:	9101      	str	r1, [sp, #4]
 8001a9a:	9701      	str	r7, [sp, #4]
 8001a9c:	e787      	b.n	80019ae <__divdi3+0xaa>
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	002a      	movs	r2, r5
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0026      	movs	r6, r4
 8001aaa:	0013      	movs	r3, r2
 8001aac:	4662      	mov	r2, ip
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	002c      	movs	r4, r5
 8001ab2:	431e      	orrs	r6, r3
 8001ab4:	4663      	mov	r3, ip
 8001ab6:	40dc      	lsrs	r4, r3
 8001ab8:	465b      	mov	r3, fp
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	daa9      	bge.n	8001a12 <__divdi3+0x10e>
 8001abe:	4662      	mov	r2, ip
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	0035      	movs	r5, r6
 8001ac4:	4094      	lsls	r4, r2
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	40dd      	lsrs	r5, r3
 8001aca:	0023      	movs	r3, r4
 8001acc:	432b      	orrs	r3, r5
 8001ace:	e7a3      	b.n	8001a18 <__divdi3+0x114>

08001ad0 <__eqdf2>:
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	464e      	mov	r6, r9
 8001ad4:	4645      	mov	r5, r8
 8001ad6:	46de      	mov	lr, fp
 8001ad8:	4657      	mov	r7, sl
 8001ada:	4690      	mov	r8, r2
 8001adc:	b5e0      	push	{r5, r6, r7, lr}
 8001ade:	0017      	movs	r7, r2
 8001ae0:	031a      	lsls	r2, r3, #12
 8001ae2:	0b12      	lsrs	r2, r2, #12
 8001ae4:	0005      	movs	r5, r0
 8001ae6:	4684      	mov	ip, r0
 8001ae8:	4819      	ldr	r0, [pc, #100]	; (8001b50 <__eqdf2+0x80>)
 8001aea:	030e      	lsls	r6, r1, #12
 8001aec:	004c      	lsls	r4, r1, #1
 8001aee:	4691      	mov	r9, r2
 8001af0:	005a      	lsls	r2, r3, #1
 8001af2:	0fdb      	lsrs	r3, r3, #31
 8001af4:	469b      	mov	fp, r3
 8001af6:	0b36      	lsrs	r6, r6, #12
 8001af8:	0d64      	lsrs	r4, r4, #21
 8001afa:	0fc9      	lsrs	r1, r1, #31
 8001afc:	0d52      	lsrs	r2, r2, #21
 8001afe:	4284      	cmp	r4, r0
 8001b00:	d019      	beq.n	8001b36 <__eqdf2+0x66>
 8001b02:	4282      	cmp	r2, r0
 8001b04:	d010      	beq.n	8001b28 <__eqdf2+0x58>
 8001b06:	2001      	movs	r0, #1
 8001b08:	4294      	cmp	r4, r2
 8001b0a:	d10e      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b0c:	454e      	cmp	r6, r9
 8001b0e:	d10c      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b10:	2001      	movs	r0, #1
 8001b12:	45c4      	cmp	ip, r8
 8001b14:	d109      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b16:	4559      	cmp	r1, fp
 8001b18:	d017      	beq.n	8001b4a <__eqdf2+0x7a>
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	d105      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b1e:	0030      	movs	r0, r6
 8001b20:	4328      	orrs	r0, r5
 8001b22:	1e43      	subs	r3, r0, #1
 8001b24:	4198      	sbcs	r0, r3
 8001b26:	e000      	b.n	8001b2a <__eqdf2+0x5a>
 8001b28:	2001      	movs	r0, #1
 8001b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	46b2      	mov	sl, r6
 8001b30:	46a9      	mov	r9, r5
 8001b32:	46a0      	mov	r8, r4
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b36:	0033      	movs	r3, r6
 8001b38:	2001      	movs	r0, #1
 8001b3a:	432b      	orrs	r3, r5
 8001b3c:	d1f5      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b3e:	42a2      	cmp	r2, r4
 8001b40:	d1f3      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b42:	464b      	mov	r3, r9
 8001b44:	433b      	orrs	r3, r7
 8001b46:	d1f0      	bne.n	8001b2a <__eqdf2+0x5a>
 8001b48:	e7e2      	b.n	8001b10 <__eqdf2+0x40>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e7ed      	b.n	8001b2a <__eqdf2+0x5a>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff

08001b54 <__gedf2>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	4647      	mov	r7, r8
 8001b58:	46ce      	mov	lr, r9
 8001b5a:	0004      	movs	r4, r0
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	0016      	movs	r6, r2
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	0b1b      	lsrs	r3, r3, #12
 8001b64:	4d2d      	ldr	r5, [pc, #180]	; (8001c1c <__gedf2+0xc8>)
 8001b66:	004a      	lsls	r2, r1, #1
 8001b68:	4699      	mov	r9, r3
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	0043      	lsls	r3, r0, #1
 8001b6e:	030f      	lsls	r7, r1, #12
 8001b70:	46a4      	mov	ip, r4
 8001b72:	46b0      	mov	r8, r6
 8001b74:	0b3f      	lsrs	r7, r7, #12
 8001b76:	0d52      	lsrs	r2, r2, #21
 8001b78:	0fc9      	lsrs	r1, r1, #31
 8001b7a:	0d5b      	lsrs	r3, r3, #21
 8001b7c:	0fc0      	lsrs	r0, r0, #31
 8001b7e:	42aa      	cmp	r2, r5
 8001b80:	d021      	beq.n	8001bc6 <__gedf2+0x72>
 8001b82:	42ab      	cmp	r3, r5
 8001b84:	d013      	beq.n	8001bae <__gedf2+0x5a>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d122      	bne.n	8001bd0 <__gedf2+0x7c>
 8001b8a:	433c      	orrs	r4, r7
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <__gedf2+0x42>
 8001b90:	464d      	mov	r5, r9
 8001b92:	432e      	orrs	r6, r5
 8001b94:	d022      	beq.n	8001bdc <__gedf2+0x88>
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	d010      	beq.n	8001bbc <__gedf2+0x68>
 8001b9a:	4281      	cmp	r1, r0
 8001b9c:	d022      	beq.n	8001be4 <__gedf2+0x90>
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	3901      	subs	r1, #1
 8001ba2:	4008      	ands	r0, r1
 8001ba4:	3801      	subs	r0, #1
 8001ba6:	bcc0      	pop	{r6, r7}
 8001ba8:	46b9      	mov	r9, r7
 8001baa:	46b0      	mov	r8, r6
 8001bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bae:	464d      	mov	r5, r9
 8001bb0:	432e      	orrs	r6, r5
 8001bb2:	d129      	bne.n	8001c08 <__gedf2+0xb4>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d1f0      	bne.n	8001b9a <__gedf2+0x46>
 8001bb8:	433c      	orrs	r4, r7
 8001bba:	d1ee      	bne.n	8001b9a <__gedf2+0x46>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1f2      	bne.n	8001ba6 <__gedf2+0x52>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	e7ef      	b.n	8001ba6 <__gedf2+0x52>
 8001bc6:	003d      	movs	r5, r7
 8001bc8:	4325      	orrs	r5, r4
 8001bca:	d11d      	bne.n	8001c08 <__gedf2+0xb4>
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d0ee      	beq.n	8001bae <__gedf2+0x5a>
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e2      	bne.n	8001b9a <__gedf2+0x46>
 8001bd4:	464c      	mov	r4, r9
 8001bd6:	4326      	orrs	r6, r4
 8001bd8:	d1df      	bne.n	8001b9a <__gedf2+0x46>
 8001bda:	e7e0      	b.n	8001b9e <__gedf2+0x4a>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	d0e1      	beq.n	8001ba6 <__gedf2+0x52>
 8001be2:	e7dc      	b.n	8001b9e <__gedf2+0x4a>
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dc0a      	bgt.n	8001bfe <__gedf2+0xaa>
 8001be8:	dbe8      	blt.n	8001bbc <__gedf2+0x68>
 8001bea:	454f      	cmp	r7, r9
 8001bec:	d8d7      	bhi.n	8001b9e <__gedf2+0x4a>
 8001bee:	d00e      	beq.n	8001c0e <__gedf2+0xba>
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	454f      	cmp	r7, r9
 8001bf4:	d2d7      	bcs.n	8001ba6 <__gedf2+0x52>
 8001bf6:	2900      	cmp	r1, #0
 8001bf8:	d0e2      	beq.n	8001bc0 <__gedf2+0x6c>
 8001bfa:	0008      	movs	r0, r1
 8001bfc:	e7d3      	b.n	8001ba6 <__gedf2+0x52>
 8001bfe:	4243      	negs	r3, r0
 8001c00:	4158      	adcs	r0, r3
 8001c02:	0040      	lsls	r0, r0, #1
 8001c04:	3801      	subs	r0, #1
 8001c06:	e7ce      	b.n	8001ba6 <__gedf2+0x52>
 8001c08:	2002      	movs	r0, #2
 8001c0a:	4240      	negs	r0, r0
 8001c0c:	e7cb      	b.n	8001ba6 <__gedf2+0x52>
 8001c0e:	45c4      	cmp	ip, r8
 8001c10:	d8c5      	bhi.n	8001b9e <__gedf2+0x4a>
 8001c12:	2000      	movs	r0, #0
 8001c14:	45c4      	cmp	ip, r8
 8001c16:	d2c6      	bcs.n	8001ba6 <__gedf2+0x52>
 8001c18:	e7ed      	b.n	8001bf6 <__gedf2+0xa2>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	000007ff 	.word	0x000007ff

08001c20 <__ledf2>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4647      	mov	r7, r8
 8001c24:	46ce      	mov	lr, r9
 8001c26:	0004      	movs	r4, r0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	0016      	movs	r6, r2
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	0b1b      	lsrs	r3, r3, #12
 8001c30:	4d2c      	ldr	r5, [pc, #176]	; (8001ce4 <__ledf2+0xc4>)
 8001c32:	004a      	lsls	r2, r1, #1
 8001c34:	4699      	mov	r9, r3
 8001c36:	b580      	push	{r7, lr}
 8001c38:	0043      	lsls	r3, r0, #1
 8001c3a:	030f      	lsls	r7, r1, #12
 8001c3c:	46a4      	mov	ip, r4
 8001c3e:	46b0      	mov	r8, r6
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d52      	lsrs	r2, r2, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	0d5b      	lsrs	r3, r3, #21
 8001c48:	0fc0      	lsrs	r0, r0, #31
 8001c4a:	42aa      	cmp	r2, r5
 8001c4c:	d00d      	beq.n	8001c6a <__ledf2+0x4a>
 8001c4e:	42ab      	cmp	r3, r5
 8001c50:	d010      	beq.n	8001c74 <__ledf2+0x54>
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d127      	bne.n	8001ca6 <__ledf2+0x86>
 8001c56:	433c      	orrs	r4, r7
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <__ledf2+0x60>
 8001c5c:	464d      	mov	r5, r9
 8001c5e:	432e      	orrs	r6, r5
 8001c60:	d10e      	bne.n	8001c80 <__ledf2+0x60>
 8001c62:	2000      	movs	r0, #0
 8001c64:	2c00      	cmp	r4, #0
 8001c66:	d015      	beq.n	8001c94 <__ledf2+0x74>
 8001c68:	e00e      	b.n	8001c88 <__ledf2+0x68>
 8001c6a:	003d      	movs	r5, r7
 8001c6c:	4325      	orrs	r5, r4
 8001c6e:	d110      	bne.n	8001c92 <__ledf2+0x72>
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d118      	bne.n	8001ca6 <__ledf2+0x86>
 8001c74:	464d      	mov	r5, r9
 8001c76:	432e      	orrs	r6, r5
 8001c78:	d10b      	bne.n	8001c92 <__ledf2+0x72>
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d102      	bne.n	8001c84 <__ledf2+0x64>
 8001c7e:	433c      	orrs	r4, r7
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d00b      	beq.n	8001c9c <__ledf2+0x7c>
 8001c84:	4281      	cmp	r1, r0
 8001c86:	d014      	beq.n	8001cb2 <__ledf2+0x92>
 8001c88:	2002      	movs	r0, #2
 8001c8a:	3901      	subs	r1, #1
 8001c8c:	4008      	ands	r0, r1
 8001c8e:	3801      	subs	r0, #1
 8001c90:	e000      	b.n	8001c94 <__ledf2+0x74>
 8001c92:	2002      	movs	r0, #2
 8001c94:	bcc0      	pop	{r6, r7}
 8001c96:	46b9      	mov	r9, r7
 8001c98:	46b0      	mov	r8, r6
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1f9      	bne.n	8001c94 <__ledf2+0x74>
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	e7f6      	b.n	8001c94 <__ledf2+0x74>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ec      	bne.n	8001c84 <__ledf2+0x64>
 8001caa:	464c      	mov	r4, r9
 8001cac:	4326      	orrs	r6, r4
 8001cae:	d1e9      	bne.n	8001c84 <__ledf2+0x64>
 8001cb0:	e7ea      	b.n	8001c88 <__ledf2+0x68>
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dd04      	ble.n	8001cc0 <__ledf2+0xa0>
 8001cb6:	4243      	negs	r3, r0
 8001cb8:	4158      	adcs	r0, r3
 8001cba:	0040      	lsls	r0, r0, #1
 8001cbc:	3801      	subs	r0, #1
 8001cbe:	e7e9      	b.n	8001c94 <__ledf2+0x74>
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbeb      	blt.n	8001c9c <__ledf2+0x7c>
 8001cc4:	454f      	cmp	r7, r9
 8001cc6:	d8df      	bhi.n	8001c88 <__ledf2+0x68>
 8001cc8:	d006      	beq.n	8001cd8 <__ledf2+0xb8>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	454f      	cmp	r7, r9
 8001cce:	d2e1      	bcs.n	8001c94 <__ledf2+0x74>
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d0e5      	beq.n	8001ca0 <__ledf2+0x80>
 8001cd4:	0008      	movs	r0, r1
 8001cd6:	e7dd      	b.n	8001c94 <__ledf2+0x74>
 8001cd8:	45c4      	cmp	ip, r8
 8001cda:	d8d5      	bhi.n	8001c88 <__ledf2+0x68>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	45c4      	cmp	ip, r8
 8001ce0:	d2d8      	bcs.n	8001c94 <__ledf2+0x74>
 8001ce2:	e7f5      	b.n	8001cd0 <__ledf2+0xb0>
 8001ce4:	000007ff 	.word	0x000007ff

08001ce8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <vApplicationGetIdleTaskMemory+0x10>)
 8001cea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <vApplicationGetIdleTaskMemory+0x14>)
 8001cee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001cf4:	4770      	bx	lr
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	200002b4 	.word	0x200002b4
 8001cfc:	200000b4 	.word	0x200000b4

08001d00 <MX_FREERTOS_Init>:
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
#endif
  /* USER CODE END RTOS_THREADS */

}
 8001d00:	4770      	bx	lr
	...

08001d04 <MX_GPIO_Init>:
/** Configure pins
     PA9   ------> I2C1_SCL
     PA10   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	2214      	movs	r2, #20
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	a805      	add	r0, sp, #20
 8001d0e:	f003 fac1 	bl	8005294 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2004      	movs	r0, #4
 8001d14:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d1a:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1c:	4301      	orrs	r1, r0
 8001d1e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PC0 PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	4002      	ands	r2, r0
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2c:	307c      	adds	r0, #124	; 0x7c
 8001d2e:	4301      	orrs	r1, r0
 8001d30:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2102      	movs	r1, #2
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d38:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3a:	4002      	ands	r2, r0
 8001d3c:	9202      	str	r2, [sp, #8]
 8001d3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d42:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	433a      	orrs	r2, r7
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	403a      	ands	r2, r7
 8001d4c:	9203      	str	r2, [sp, #12]
 8001d4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d52:	430a      	orrs	r2, r1
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d5e:	310e      	adds	r1, #14
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d62:	f000 fc21 	bl	80025a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d68:	a905      	add	r1, sp, #20
 8001d6a:	482b      	ldr	r0, [pc, #172]	; (8001e18 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f000 fb61 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d76:	a905      	add	r1, sp, #20
 8001d78:	4828      	ldr	r0, [pc, #160]	; (8001e1c <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d7a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d80:	f000 fb5a 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <MX_GPIO_Init+0x11c>)
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	0030      	movs	r0, r6
 8001d88:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 8001d8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f000 fb52 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d94:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	0030      	movs	r0, r6
 8001d98:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f000 fb49 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001da6:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	4f1e      	ldr	r7, [pc, #120]	; (8001e24 <MX_GPIO_Init+0x120>)
 8001daa:	a905      	add	r1, sp, #20
 8001dac:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f000 fb40 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001db8:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dbc:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f000 fb37 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dca:	23c0      	movs	r3, #192	; 0xc0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001dd8:	3b11      	subs	r3, #17
 8001dda:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f000 fb2a 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dea:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dee:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f000 fb1f 	bl	8002438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001dfa:	0022      	movs	r2, r4
 8001dfc:	0029      	movs	r1, r5
 8001dfe:	2007      	movs	r0, #7
 8001e00:	f000 fa9e 	bl	8002340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e04:	2007      	movs	r0, #7
 8001e06:	f000 fac5 	bl	8002394 <HAL_NVIC_EnableIRQ>

}
 8001e0a:	b00b      	add	sp, #44	; 0x2c
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	40021000 	.word	0x40021000
 8001e14:	0000e001 	.word	0x0000e001
 8001e18:	50000800 	.word	0x50000800
 8001e1c:	50001c00 	.word	0x50001c00
 8001e20:	00009903 	.word	0x00009903
 8001e24:	50000400 	.word	0x50000400

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2c:	2230      	movs	r2, #48	; 0x30
 8001e2e:	2100      	movs	r1, #0
 8001e30:	a80c      	add	r0, sp, #48	; 0x30
 8001e32:	f003 fa2f 	bl	8005294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e36:	2214      	movs	r2, #20
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4668      	mov	r0, sp
 8001e3c:	f003 fa2a 	bl	8005294 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	2218      	movs	r2, #24
 8001e42:	2100      	movs	r1, #0
 8001e44:	a805      	add	r0, sp, #20
 8001e46:	f003 fa25 	bl	8005294 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4a:	4919      	ldr	r1, [pc, #100]	; (8001eb0 <SystemClock_Config+0x88>)
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <SystemClock_Config+0x8c>)
 8001e4e:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e50:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	401a      	ands	r2, r3
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e5c:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001e5e:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e60:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e62:	3b0f      	subs	r3, #15
 8001e64:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e66:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001e68:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e6a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001e6c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e6e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f000 fbf4 	bl	800265c <HAL_RCC_OscConfig>
 8001e74:	1e01      	subs	r1, r0, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
 8001e7a:	e7fe      	b.n	8001e7a <SystemClock_Config+0x52>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e7e:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e80:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e82:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e84:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e86:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e88:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e8a:	f000 fe35 	bl	8002af8 <HAL_RCC_ClockConfig>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x6e>
 8001e92:	b672      	cpsid	i
 8001e94:	e7fe      	b.n	8001e94 <SystemClock_Config+0x6c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8001e96:	2306      	movs	r3, #6
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e98:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e9a:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8001e9e:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea0:	f000 ff38 	bl	8002d14 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x84>
 8001ea8:	b672      	cpsid	i
 8001eaa:	e7fe      	b.n	8001eaa <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
}
 8001eac:	b019      	add	sp, #100	; 0x64
 8001eae:	bd00      	pop	{pc}
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	ffffe7ff 	.word	0xffffe7ff

08001eb8 <main>:
{
 8001eb8:	b510      	push	{r4, lr}
  HAL_Init();
 8001eba:	f000 fa1b 	bl	80022f4 <HAL_Init>
  SystemClock_Config();
 8001ebe:	f7ff ffb3 	bl	8001e28 <SystemClock_Config>
  MX_GPIO_Init();
 8001ec2:	f7ff ff1f 	bl	8001d04 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001ec6:	f000 f93b 	bl	8002140 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001eca:	f000 f957 	bl	800217c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001ece:	f000 f813 	bl	8001ef8 <MX_SPI1_Init>
  init();
 8001ed2:	f002 fe63 	bl	8004b9c <init>
  MX_FREERTOS_Init();
 8001ed6:	f7ff ff13 	bl	8001d00 <MX_FREERTOS_Init>
  osKernelStart();
 8001eda:	f002 f8d0 	bl	800407e <osKernelStart>
 8001ede:	e7fe      	b.n	8001ede <main+0x26>

08001ee0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	6802      	ldr	r2, [r0, #0]
{
 8001ee4:	b510      	push	{r4, lr}
  if (htim->Instance == TIM2) {
 8001ee6:	05db      	lsls	r3, r3, #23
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001eec:	f000 fa16 	bl	800231c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef0:	bd10      	pop	{r4, pc}

08001ef2 <Error_Handler>:
 8001ef2:	b672      	cpsid	i
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x2>
	...

08001ef8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <MX_SPI1_Init+0x38>)
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_SPI1_Init+0x3c>)
{
 8001efc:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001efe:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f00:	2382      	movs	r3, #130	; 0x82
 8001f02:	005b      	lsls	r3, r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f04:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f06:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f08:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0a:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f10:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f12:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f16:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f18:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f1c:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001f20:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f22:	f001 f871 	bl	8003008 <HAL_SPI_Init>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d001      	beq.n	8001f2e <MX_SPI1_Init+0x36>
  {
    Error_Handler();
 8001f2a:	f7ff ffe2 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	20000300 	.word	0x20000300
 8001f34:	40013000 	.word	0x40013000

08001f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	2214      	movs	r2, #20
 8001f40:	2100      	movs	r1, #0
 8001f42:	a801      	add	r0, sp, #4
 8001f44:	f003 f9a6 	bl	8005294 <memset>
  if(spiHandle->Instance==SPI1)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_SPI_MspInit+0x60>)
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d120      	bne.n	8001f92 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_SPI_MspInit+0x64>)
 8001f54:	0152      	lsls	r2, r2, #5
 8001f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2403      	movs	r4, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	430a      	orrs	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f72:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	3bde      	subs	r3, #222	; 0xde
 8001f7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f000 fa5b 	bl	8002438 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8001f82:	2019      	movs	r0, #25
 8001f84:	2200      	movs	r2, #0
 8001f86:	0021      	movs	r1, r4
 8001f88:	f000 f9da 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f8c:	2019      	movs	r0, #25
 8001f8e:	f000 fa01 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f92:	b006      	add	sp, #24
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_MspInit+0x24>)
{
 8001fa4:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001fa8:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	430a      	orrs	r2, r1
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fb2:	0552      	lsls	r2, r2, #21
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001fb8:	2103      	movs	r1, #3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4240      	negs	r0, r0
 8001fbe:	f000 f9bf 	bl	8002340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b530      	push	{r4, r5, lr}

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001fca:	2401      	movs	r4, #1
{
 8001fcc:	b087      	sub	sp, #28
 8001fce:	0001      	movs	r1, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f9b4 	bl	8002340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd8:	200f      	movs	r0, #15
 8001fda:	f000 f9db 	bl	8002394 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_InitTick+0x60>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fe0:	4669      	mov	r1, sp
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe2:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fe4:	a801      	add	r0, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fea:	f000 fe73 	bl	8002cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fee:	f000 fe51 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	4d0d      	ldr	r5, [pc, #52]	; (800202c <HAL_InitTick+0x64>)
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	602b      	str	r3, [r5, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_InitTick+0x68>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ffc:	490d      	ldr	r1, [pc, #52]	; (8002034 <HAL_InitTick+0x6c>)
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ffe:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002000:	f7fe f8a0 	bl	8000144 <__udivsi3>
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002004:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002006:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002008:	6068      	str	r0, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800200a:	0028      	movs	r0, r5
  htim2.Init.ClockDivision = 0;
 800200c:	612b      	str	r3, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	60ab      	str	r3, [r5, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002010:	f001 fb83 	bl	800371a <HAL_TIM_Base_Init>
 8002014:	2800      	cmp	r0, #0
 8002016:	d103      	bne.n	8002020 <HAL_InitTick+0x58>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002018:	0028      	movs	r0, r5
 800201a:	f001 fba3 	bl	8003764 <HAL_TIM_Base_Start_IT>
 800201e:	0004      	movs	r4, r0
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002020:	0020      	movs	r0, r4
 8002022:	b007      	add	sp, #28
 8002024:	bd30      	pop	{r4, r5, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	20000358 	.word	0x20000358
 8002030:	000003e7 	.word	0x000003e7
 8002034:	000f4240 	.word	0x000f4240

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002038:	e7fe      	b.n	8002038 <NMI_Handler>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	e7fe      	b.n	800203a <HardFault_Handler>

0800203c <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800203c:	2080      	movs	r0, #128	; 0x80
{
 800203e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002040:	0040      	lsls	r0, r0, #1
 8002042:	f000 fab7 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002046:	2080      	movs	r0, #128	; 0x80
 8002048:	0080      	lsls	r0, r0, #2
 800204a:	f000 fab3 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800204e:	bd10      	pop	{r4, pc}

08002050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002050:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002052:	4802      	ldr	r0, [pc, #8]	; (800205c <TIM2_IRQHandler+0xc>)
 8002054:	f001 fbb0 	bl	80037b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002058:	bd10      	pop	{r4, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	20000358 	.word	0x20000358

08002060 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002060:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002062:	4802      	ldr	r0, [pc, #8]	; (800206c <SPI1_IRQHandler+0xc>)
 8002064:	f001 fa9a 	bl	800359c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000300 	.word	0x20000300

08002070 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002070:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002072:	4802      	ldr	r0, [pc, #8]	; (800207c <USART2_IRQHandler+0xc>)
 8002074:	f001 fc64 	bl	8003940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002078:	bd10      	pop	{r4, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	20000424 	.word	0x20000424

08002080 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8002080:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002082:	4802      	ldr	r0, [pc, #8]	; (800208c <LPUART1_IRQHandler+0xc>)
 8002084:	f001 fc5c 	bl	8003940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002088:	bd10      	pop	{r4, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	2000039c 	.word	0x2000039c

08002090 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002090:	2001      	movs	r0, #1
 8002092:	4770      	bx	lr

08002094 <_kill>:

int _kill(int pid, int sig)
{
 8002094:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002096:	f003 f8d3 	bl	8005240 <__errno>
 800209a:	2316      	movs	r3, #22
 800209c:	6003      	str	r3, [r0, #0]
	return -1;
 800209e:	2001      	movs	r0, #1
}
 80020a0:	4240      	negs	r0, r0
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_exit>:

void _exit (int status)
{
 80020a4:	b510      	push	{r4, lr}
	errno = EINVAL;
 80020a6:	f003 f8cb 	bl	8005240 <__errno>
 80020aa:	2316      	movs	r3, #22
 80020ac:	6003      	str	r3, [r0, #0]
 80020ae:	e7fe      	b.n	80020ae <_exit+0xa>

080020b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	000e      	movs	r6, r1
 80020b4:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2500      	movs	r5, #0
 80020b8:	42a5      	cmp	r5, r4
 80020ba:	db01      	blt.n	80020c0 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80020bc:	0020      	movs	r0, r4
 80020be:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80020c0:	e000      	b.n	80020c4 <_read+0x14>
 80020c2:	bf00      	nop
 80020c4:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	3501      	adds	r5, #1
 80020c8:	e7f6      	b.n	80020b8 <_read+0x8>

080020ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ca:	b570      	push	{r4, r5, r6, lr}
 80020cc:	000e      	movs	r6, r1
 80020ce:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2500      	movs	r5, #0
 80020d2:	42a5      	cmp	r5, r4
 80020d4:	db01      	blt.n	80020da <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80020d6:	0020      	movs	r0, r4
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80020da:	5d70      	ldrb	r0, [r6, r5]
 80020dc:	e000      	b.n	80020e0 <_write+0x16>
 80020de:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	3501      	adds	r5, #1
 80020e2:	e7f6      	b.n	80020d2 <_write+0x8>

080020e4 <_close>:

int _close(int file)
{
	return -1;
 80020e4:	2001      	movs	r0, #1
}
 80020e6:	4240      	negs	r0, r0
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	019b      	lsls	r3, r3, #6
	return 0;
}
 80020ee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80020f0:	604b      	str	r3, [r1, #4]
}
 80020f2:	4770      	bx	lr

080020f4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80020f4:	2001      	movs	r0, #1
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80020f8:	2000      	movs	r0, #0
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <_sbrk+0x30>)
 80020fe:	490c      	ldr	r1, [pc, #48]	; (8002130 <_sbrk+0x34>)
{
 8002100:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002102:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <_sbrk+0x38>)
{
 8002106:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002108:	6810      	ldr	r0, [r2, #0]
 800210a:	2800      	cmp	r0, #0
 800210c:	d101      	bne.n	8002112 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800210e:	480a      	ldr	r0, [pc, #40]	; (8002138 <_sbrk+0x3c>)
 8002110:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	6810      	ldr	r0, [r2, #0]
 8002114:	18c3      	adds	r3, r0, r3
 8002116:	428b      	cmp	r3, r1
 8002118:	d906      	bls.n	8002128 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800211a:	f003 f891 	bl	8005240 <__errno>
 800211e:	230c      	movs	r3, #12
 8002120:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002122:	2001      	movs	r0, #1
 8002124:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002126:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002128:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800212a:	e7fc      	b.n	8002126 <_sbrk+0x2a>
 800212c:	00000400 	.word	0x00000400
 8002130:	20002000 	.word	0x20002000
 8002134:	20000398 	.word	0x20000398
 8002138:	200010b8 	.word	0x200010b8

0800213c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	4770      	bx	lr
	...

08002140 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <MX_LPUART1_UART_Init+0x30>)
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_LPUART1_UART_Init+0x34>)
{
 8002144:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8002146:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_LPUART1_UART_Init+0x38>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800214a:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 209700;
 800214c:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002154:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002156:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002158:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800215a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215c:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215e:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002160:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002162:	f001 ff59 	bl	8004018 <HAL_UART_Init>
 8002166:	2800      	cmp	r0, #0
 8002168:	d001      	beq.n	800216e <MX_LPUART1_UART_Init+0x2e>
  {
    Error_Handler();
 800216a:	f7ff fec2 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800216e:	bd10      	pop	{r4, pc}
 8002170:	2000039c 	.word	0x2000039c
 8002174:	40004800 	.word	0x40004800
 8002178:	00033324 	.word	0x00033324

0800217c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <MX_USART2_UART_Init+0x30>)
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <MX_USART2_UART_Init+0x34>)
{
 8002180:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8002182:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002184:	2396      	movs	r3, #150	; 0x96
 8002186:	019b      	lsls	r3, r3, #6
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002188:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 800218a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800218e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002190:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002192:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002194:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800219e:	f001 ff3b 	bl	8004018 <HAL_UART_Init>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d001      	beq.n	80021aa <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 80021a6:	f7ff fea4 	bl	8001ef2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	20000424 	.word	0x20000424
 80021b0:	40004400 	.word	0x40004400

080021b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	0004      	movs	r4, r0
 80021b8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	2214      	movs	r2, #20
 80021bc:	2100      	movs	r1, #0
 80021be:	a803      	add	r0, sp, #12
 80021c0:	f003 f868 	bl	8005294 <memset>
  if(uartHandle->Instance==LPUART1)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_UART_MspInit+0xac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d123      	bne.n	8002214 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_UART_MspInit+0xb0>)
 80021d0:	02d2      	lsls	r2, r2, #11
 80021d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2403      	movs	r4, #3
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021d6:	430a      	orrs	r2, r1
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	2202      	movs	r2, #2
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	4822      	ldr	r0, [pc, #136]	; (8002268 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	4311      	orrs	r1, r2
 80021e2:	62d9      	str	r1, [r3, #44]	; 0x2c
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	4013      	ands	r3, r2
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80021f4:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80021f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f000 f91c 	bl	8002438 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 0);
 8002200:	201d      	movs	r0, #29
 8002202:	2200      	movs	r2, #0
 8002204:	0021      	movs	r1, r4
 8002206:	f000 f89b 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800220a:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800220c:	f000 f8c2 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002210:	b008      	add	sp, #32
 8002212:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <HAL_UART_MspInit+0xb8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d1fa      	bne.n	8002210 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_UART_MspInit+0xb0>)
 800221e:	0292      	lsls	r2, r2, #10
 8002220:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002224:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2403      	movs	r4, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	430a      	orrs	r2, r1
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	400b      	ands	r3, r1
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800223c:	230c      	movs	r3, #12
 800223e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	3b0a      	subs	r3, #10
 8002242:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002246:	3302      	adds	r3, #2
 8002248:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f000 f8f4 	bl	8002438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002250:	201c      	movs	r0, #28
 8002252:	2200      	movs	r2, #0
 8002254:	0021      	movs	r1, r4
 8002256:	f000 f873 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800225a:	201c      	movs	r0, #28
 800225c:	e7d6      	b.n	800220c <HAL_UART_MspInit+0x58>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40004800 	.word	0x40004800
 8002264:	40021000 	.word	0x40021000
 8002268:	50000400 	.word	0x50000400
 800226c:	40004400 	.word	0x40004400

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002270:	4813      	ldr	r0, [pc, #76]	; (80022c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002272:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002274:	f7ff ff62 	bl	800213c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002278:	4812      	ldr	r0, [pc, #72]	; (80022c4 <LoopForever+0x6>)
    LDR R1, [R0]
 800227a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800227c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <LoopForever+0xa>)
    CMP R1, R2
 8002280:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002282:	d105      	bne.n	8002290 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002284:	4811      	ldr	r0, [pc, #68]	; (80022cc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002286:	4912      	ldr	r1, [pc, #72]	; (80022d0 <LoopForever+0x12>)
    STR R1, [R0]
 8002288:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800228a:	4812      	ldr	r0, [pc, #72]	; (80022d4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800228c:	4912      	ldr	r1, [pc, #72]	; (80022d8 <LoopForever+0x1a>)
    STR R1, [R0]
 800228e:	6001      	str	r1, [r0, #0]

08002290 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	4812      	ldr	r0, [pc, #72]	; (80022dc <LoopForever+0x1e>)
  ldr r1, =_edata
 8002292:	4913      	ldr	r1, [pc, #76]	; (80022e0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <LoopForever+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80022a8:	4c10      	ldr	r4, [pc, #64]	; (80022ec <LoopForever+0x2e>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022b6:	f002 ffc9 	bl	800524c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7ff fdfd 	bl	8001eb8 <main>

080022be <LoopForever>:

LoopForever:
    b LoopForever
 80022be:	e7fe      	b.n	80022be <LoopForever>
   ldr   r0, =_estack
 80022c0:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80022c4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80022c8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80022cc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80022d0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80022d4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80022d8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80022e4:	08006640 	.word	0x08006640
  ldr r2, =_sbss
 80022e8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80022ec:	200010b4 	.word	0x200010b4

080022f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_IRQHandler>
	...

080022f4 <HAL_Init>:
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_Init+0x24>)
{
 80022f8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80022fa:	6811      	ldr	r1, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022fc:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80022fe:	430b      	orrs	r3, r1
 8002300:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	f7ff fe61 	bl	8001fc8 <HAL_InitTick>
 8002306:	1e04      	subs	r4, r0, #0
 8002308:	d103      	bne.n	8002312 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800230a:	f7ff fe49 	bl	8001fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800230e:	0020      	movs	r0, r4
 8002310:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002312:	2401      	movs	r4, #1
 8002314:	e7fb      	b.n	800230e <HAL_Init+0x1a>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800231c:	4a03      	ldr	r2, [pc, #12]	; (800232c <HAL_IncTick+0x10>)
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_IncTick+0x14>)
 8002320:	6811      	ldr	r1, [r2, #0]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	185b      	adds	r3, r3, r1
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	4770      	bx	lr
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	200004ac 	.word	0x200004ac
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002334:	4b01      	ldr	r3, [pc, #4]	; (800233c <HAL_GetTick+0x8>)
 8002336:	6818      	ldr	r0, [r3, #0]
}
 8002338:	4770      	bx	lr
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	200004ac 	.word	0x200004ac

08002340 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002340:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002342:	25ff      	movs	r5, #255	; 0xff
 8002344:	2403      	movs	r4, #3
 8002346:	002a      	movs	r2, r5
 8002348:	4004      	ands	r4, r0
 800234a:	00e4      	lsls	r4, r4, #3
 800234c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800234e:	0189      	lsls	r1, r1, #6
 8002350:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002352:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002354:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002356:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002358:	2800      	cmp	r0, #0
 800235a:	db0a      	blt.n	8002372 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235c:	24c0      	movs	r4, #192	; 0xc0
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_NVIC_SetPriority+0x4c>)
 8002360:	0880      	lsrs	r0, r0, #2
 8002362:	0080      	lsls	r0, r0, #2
 8002364:	18c0      	adds	r0, r0, r3
 8002366:	00a4      	lsls	r4, r4, #2
 8002368:	5903      	ldr	r3, [r0, r4]
 800236a:	401a      	ands	r2, r3
 800236c:	4311      	orrs	r1, r2
 800236e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002370:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002372:	200f      	movs	r0, #15
 8002374:	4003      	ands	r3, r0
 8002376:	3b08      	subs	r3, #8
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_NVIC_SetPriority+0x50>)
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	181b      	adds	r3, r3, r0
 8002380:	69d8      	ldr	r0, [r3, #28]
 8002382:	4002      	ands	r2, r0
 8002384:	4311      	orrs	r1, r2
 8002386:	61d9      	str	r1, [r3, #28]
 8002388:	e7f2      	b.n	8002370 <HAL_NVIC_SetPriority+0x30>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002394:	2800      	cmp	r0, #0
 8002396:	db05      	blt.n	80023a4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002398:	231f      	movs	r3, #31
 800239a:	4018      	ands	r0, r3
 800239c:	3b1e      	subs	r3, #30
 800239e:	4083      	lsls	r3, r0
 80023a0:	4a01      	ldr	r2, [pc, #4]	; (80023a8 <HAL_NVIC_EnableIRQ+0x14>)
 80023a2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023a4:	4770      	bx	lr
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	e000e100 	.word	0xe000e100

080023ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ac:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ae:	1d85      	adds	r5, r0, #6
 80023b0:	7feb      	ldrb	r3, [r5, #31]
 80023b2:	1d44      	adds	r4, r0, #5
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d005      	beq.n	80023c4 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b8:	2304      	movs	r3, #4
 80023ba:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	2300      	movs	r3, #0

    return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80023c0:	77e3      	strb	r3, [r4, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80023c2:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c4:	210e      	movs	r1, #14
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	438a      	bics	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80023ce:	2201      	movs	r2, #1
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	4391      	bics	r1, r2
 80023d4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023da:	201c      	movs	r0, #28
 80023dc:	4003      	ands	r3, r0
 80023de:	0010      	movs	r0, r2
 80023e0:	4098      	lsls	r0, r3
 80023e2:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80023e4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80023e6:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80023e8:	77e0      	strb	r0, [r4, #31]
    return status;
 80023ea:	e7ea      	b.n	80023c2 <HAL_DMA_Abort+0x16>

080023ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023ee:	1d84      	adds	r4, r0, #6
 80023f0:	7fe3      	ldrb	r3, [r4, #31]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	2304      	movs	r3, #4
 80023f8:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80023fa:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002400:	210e      	movs	r1, #14
 8002402:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002404:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	438a      	bics	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800240c:	2201      	movs	r2, #1
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	4391      	bics	r1, r2
 8002412:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002414:	231c      	movs	r3, #28
 8002416:	402b      	ands	r3, r5
 8002418:	0015      	movs	r5, r2
 800241a:	409d      	lsls	r5, r3
 800241c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800241e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002420:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002422:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002424:	2400      	movs	r4, #0
 8002426:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8002428:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800242c:	42a2      	cmp	r2, r4
 800242e:	d0e5      	beq.n	80023fc <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002430:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	0023      	movs	r3, r4
 8002434:	e7e2      	b.n	80023fc <HAL_DMA_Abort_IT+0x10>
	...

08002438 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002438:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_GPIO_Init+0x158>)
{
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800243c:	1882      	adds	r2, r0, r2
 800243e:	1e54      	subs	r4, r2, #1
 8002440:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8002442:	2300      	movs	r3, #0
{
 8002444:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002446:	3205      	adds	r2, #5
 8002448:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800244a:	680a      	ldr	r2, [r1, #0]
 800244c:	0014      	movs	r4, r2
 800244e:	40dc      	lsrs	r4, r3
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8002452:	b005      	add	sp, #20
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002456:	2701      	movs	r7, #1
 8002458:	003c      	movs	r4, r7
 800245a:	0015      	movs	r5, r2
 800245c:	409c      	lsls	r4, r3
 800245e:	4025      	ands	r5, r4
 8002460:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8002462:	4222      	tst	r2, r4
 8002464:	d100      	bne.n	8002468 <HAL_GPIO_Init+0x30>
 8002466:	e090      	b.n	800258a <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002468:	684a      	ldr	r2, [r1, #4]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	2203      	movs	r2, #3
 800246e:	9d00      	ldr	r5, [sp, #0]
 8002470:	4015      	ands	r5, r2
 8002472:	46ac      	mov	ip, r5
 8002474:	005d      	lsls	r5, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002476:	40aa      	lsls	r2, r5
 8002478:	43d2      	mvns	r2, r2
 800247a:	9202      	str	r2, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800247c:	4662      	mov	r2, ip
 800247e:	3a01      	subs	r2, #1
 8002480:	42ba      	cmp	r2, r7
 8002482:	d828      	bhi.n	80024d6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8002484:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002486:	9a02      	ldr	r2, [sp, #8]
 8002488:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248a:	68ca      	ldr	r2, [r1, #12]
 800248c:	40aa      	lsls	r2, r5
 800248e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8002490:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002492:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002494:	43a2      	bics	r2, r4
 8002496:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002498:	9a00      	ldr	r2, [sp, #0]
 800249a:	0912      	lsrs	r2, r2, #4
 800249c:	403a      	ands	r2, r7
 800249e:	409a      	lsls	r2, r3
 80024a0:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80024a2:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 80024a4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a6:	9a02      	ldr	r2, [sp, #8]
 80024a8:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024aa:	688a      	ldr	r2, [r1, #8]
 80024ac:	40aa      	lsls	r2, r5
 80024ae:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80024b0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	4662      	mov	r2, ip
 80024b4:	2a02      	cmp	r2, #2
 80024b6:	d111      	bne.n	80024dc <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024b8:	2407      	movs	r4, #7
 80024ba:	270f      	movs	r7, #15
 80024bc:	401c      	ands	r4, r3
 80024be:	00a4      	lsls	r4, r4, #2
 80024c0:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	1882      	adds	r2, r0, r2
 80024c8:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024ca:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024cc:	690f      	ldr	r7, [r1, #16]
 80024ce:	40a7      	lsls	r7, r4
 80024d0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80024d2:	6216      	str	r6, [r2, #32]
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d6:	4662      	mov	r2, ip
 80024d8:	2a03      	cmp	r2, #3
 80024da:	d1e3      	bne.n	80024a4 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80024dc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024de:	9c02      	ldr	r4, [sp, #8]
 80024e0:	4014      	ands	r4, r2
 80024e2:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	4664      	mov	r4, ip
 80024e6:	40ac      	lsls	r4, r5
 80024e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80024ea:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ec:	22c0      	movs	r2, #192	; 0xc0
 80024ee:	9c00      	ldr	r4, [sp, #0]
 80024f0:	0292      	lsls	r2, r2, #10
 80024f2:	4214      	tst	r4, r2
 80024f4:	d049      	beq.n	800258a <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	2701      	movs	r7, #1
 80024f8:	4c26      	ldr	r4, [pc, #152]	; (8002594 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024fa:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024fe:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002500:	433a      	orrs	r2, r7
 8002502:	6362      	str	r2, [r4, #52]	; 0x34
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	089c      	lsrs	r4, r3, #2
 8002508:	00a4      	lsls	r4, r4, #2
 800250a:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800250c:	220f      	movs	r2, #15
 800250e:	00ad      	lsls	r5, r5, #2
 8002510:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8002512:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002514:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002516:	22a0      	movs	r2, #160	; 0xa0
 8002518:	05d2      	lsls	r2, r2, #23
 800251a:	4694      	mov	ip, r2
 800251c:	2200      	movs	r2, #0
 800251e:	4560      	cmp	r0, ip
 8002520:	d009      	beq.n	8002536 <HAL_GPIO_Init+0xfe>
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_GPIO_Init+0x164>)
 8002524:	4694      	mov	ip, r2
 8002526:	003a      	movs	r2, r7
 8002528:	4560      	cmp	r0, ip
 800252a:	d004      	beq.n	8002536 <HAL_GPIO_Init+0xfe>
 800252c:	4f1c      	ldr	r7, [pc, #112]	; (80025a0 <HAL_GPIO_Init+0x168>)
 800252e:	1892      	adds	r2, r2, r2
 8002530:	42b8      	cmp	r0, r7
 8002532:	d000      	beq.n	8002536 <HAL_GPIO_Init+0xfe>
 8002534:	9a03      	ldr	r2, [sp, #12]
 8002536:	40aa      	lsls	r2, r5
 8002538:	4316      	orrs	r6, r2
        temp = EXTI->RTSR;
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 800253e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002540:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 8002542:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002544:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8002546:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002548:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	02ff      	lsls	r7, r7, #11
 800254c:	d401      	bmi.n	8002552 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800254e:	0035      	movs	r5, r6
 8002550:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002552:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002554:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8002556:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800255a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255c:	02bf      	lsls	r7, r7, #10
 800255e:	d401      	bmi.n	8002564 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8002560:	0035      	movs	r5, r6
 8002562:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8002564:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8002566:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002568:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800256c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	03bf      	lsls	r7, r7, #14
 8002570:	d401      	bmi.n	8002576 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8002572:	0035      	movs	r5, r6
 8002574:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002576:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8002578:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800257a:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800257e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	03ff      	lsls	r7, r7, #15
 8002582:	d401      	bmi.n	8002588 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8002584:	4025      	ands	r5, r4
 8002586:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002588:	6016      	str	r6, [r2, #0]
    position++;
 800258a:	3301      	adds	r3, #1
 800258c:	e75d      	b.n	800244a <HAL_GPIO_Init+0x12>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	afffe400 	.word	0xafffe400
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000
 800259c:	50000400 	.word	0x50000400
 80025a0:	50000800 	.word	0x50000800
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80025ae:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80025b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80025b2:	e7fc      	b.n	80025ae <HAL_GPIO_WritePin+0x6>

080025b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80025b6:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	4210      	tst	r0, r2
 80025bc:	d002      	beq.n	80025c4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	f002 fb3e 	bl	8004c40 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80025d0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80025d2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80025d4:	4022      	ands	r2, r4
 80025d6:	2a08      	cmp	r2, #8
 80025d8:	d031      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x72>
 80025da:	2a0c      	cmp	r2, #12
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x26>
 80025de:	2a04      	cmp	r2, #4
 80025e0:	d125      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025e2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025e6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80025e8:	17c0      	asrs	r0, r0, #31
 80025ea:	4018      	ands	r0, r3
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x80>)
 80025ee:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f2:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025f4:	4816      	ldr	r0, [pc, #88]	; (8002650 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f6:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025f8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025fc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fe:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002600:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002604:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4211      	tst	r1, r2
 8002608:	d009      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_RCC_GetSysClockFreq+0x88>)
 800260c:	2300      	movs	r3, #0
 800260e:	2100      	movs	r1, #0
 8002610:	f7fd fe68 	bl	80002e4 <__aeabi_lmul>
 8002614:	0022      	movs	r2, r4
 8002616:	2300      	movs	r3, #0
 8002618:	f7fd fe44 	bl	80002a4 <__aeabi_uldivmod>
 800261c:	e7e8      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2310      	movs	r3, #16
 8002622:	421a      	tst	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002628:	e7f0      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_RCC_GetSysClockFreq+0x80>)
 800262c:	e7ee      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800262e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002630:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002632:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002638:	3301      	adds	r3, #1
 800263a:	4098      	lsls	r0, r3
      break;
 800263c:	e7d8      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <HAL_RCC_GetSysClockFreq+0x88>)
 8002640:	e7d6      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x24>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40021000 	.word	0x40021000
 8002648:	ff48e500 	.word	0xff48e500
 800264c:	00f42400 	.word	0x00f42400
 8002650:	080064c0 	.word	0x080064c0
 8002654:	007a1200 	.word	0x007a1200
 8002658:	003d0900 	.word	0x003d0900

0800265c <HAL_RCC_OscConfig>:
{
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265e:	0005      	movs	r5, r0
 8002660:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002662:	2800      	cmp	r0, #0
 8002664:	d056      	beq.n	8002714 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002666:	230c      	movs	r3, #12
 8002668:	4cb6      	ldr	r4, [pc, #728]	; (8002944 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002670:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	025b      	lsls	r3, r3, #9
 8002676:	0019      	movs	r1, r3
 8002678:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	07d2      	lsls	r2, r2, #31
 800267c:	d43e      	bmi.n	80026fc <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	079b      	lsls	r3, r3, #30
 8002682:	d500      	bpl.n	8002686 <HAL_RCC_OscConfig+0x2a>
 8002684:	e087      	b.n	8002796 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	06db      	lsls	r3, r3, #27
 800268a:	d529      	bpl.n	80026e0 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268c:	2e00      	cmp	r6, #0
 800268e:	d000      	beq.n	8002692 <HAL_RCC_OscConfig+0x36>
 8002690:	e0e0      	b.n	8002854 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	059b      	lsls	r3, r3, #22
 8002696:	d502      	bpl.n	800269e <HAL_RCC_OscConfig+0x42>
 8002698:	69ab      	ldr	r3, [r5, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d03a      	beq.n	8002714 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	6862      	ldr	r2, [r4, #4]
 80026a0:	49a9      	ldr	r1, [pc, #676]	; (8002948 <HAL_RCC_OscConfig+0x2ec>)
 80026a2:	6a2b      	ldr	r3, [r5, #32]
 80026a4:	400a      	ands	r2, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	6861      	ldr	r1, [r4, #4]
 80026ac:	69ea      	ldr	r2, [r5, #28]
 80026ae:	0209      	lsls	r1, r1, #8
 80026b0:	0a09      	lsrs	r1, r1, #8
 80026b2:	0612      	lsls	r2, r2, #24
 80026b4:	430a      	orrs	r2, r1
 80026b6:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	0b5b      	lsrs	r3, r3, #13
 80026bc:	3301      	adds	r3, #1
 80026be:	0212      	lsls	r2, r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80026c4:	68e1      	ldr	r1, [r4, #12]
 80026c6:	060a      	lsls	r2, r1, #24
 80026c8:	49a0      	ldr	r1, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x2f0>)
 80026ca:	0f12      	lsrs	r2, r2, #28
 80026cc:	5c8a      	ldrb	r2, [r1, r2]
 80026ce:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026d0:	4a9f      	ldr	r2, [pc, #636]	; (8002950 <HAL_RCC_OscConfig+0x2f4>)
 80026d2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80026d4:	4b9f      	ldr	r3, [pc, #636]	; (8002954 <HAL_RCC_OscConfig+0x2f8>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f7ff fc76 	bl	8001fc8 <HAL_InitTick>
        if(status != HAL_OK)
 80026dc:	2800      	cmp	r0, #0
 80026de:	d130      	bne.n	8002742 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	071b      	lsls	r3, r3, #28
 80026e4:	d500      	bpl.n	80026e8 <HAL_RCC_OscConfig+0x8c>
 80026e6:	e0ec      	b.n	80028c2 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	075b      	lsls	r3, r3, #29
 80026ec:	d500      	bpl.n	80026f0 <HAL_RCC_OscConfig+0x94>
 80026ee:	e10e      	b.n	800290e <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d000      	beq.n	80026f8 <HAL_RCC_OscConfig+0x9c>
 80026f6:	e192      	b.n	8002a1e <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80026f8:	2000      	movs	r0, #0
 80026fa:	e022      	b.n	8002742 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	2e08      	cmp	r6, #8
 80026fe:	d003      	beq.n	8002708 <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002700:	2e0c      	cmp	r6, #12
 8002702:	d109      	bne.n	8002718 <HAL_RCC_OscConfig+0xbc>
 8002704:	2f00      	cmp	r7, #0
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	d5b7      	bpl.n	800267e <HAL_RCC_OscConfig+0x22>
 800270e:	686b      	ldr	r3, [r5, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1b4      	bne.n	800267e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	686a      	ldr	r2, [r5, #4]
 800271a:	428a      	cmp	r2, r1
 800271c:	d113      	bne.n	8002746 <HAL_RCC_OscConfig+0xea>
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002724:	f7ff fe06 	bl	8002334 <HAL_GetTick>
 8002728:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	0292      	lsls	r2, r2, #10
 8002730:	4213      	tst	r3, r2
 8002732:	d1a4      	bne.n	800267e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fdfe 	bl	8002334 <HAL_GetTick>
 8002738:	9b00      	ldr	r3, [sp, #0]
 800273a:	1ac0      	subs	r0, r0, r3
 800273c:	2864      	cmp	r0, #100	; 0x64
 800273e:	d9f4      	bls.n	800272a <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8002740:	2003      	movs	r0, #3
}
 8002742:	b005      	add	sp, #20
 8002744:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	21a0      	movs	r1, #160	; 0xa0
 8002748:	02c9      	lsls	r1, r1, #11
 800274a:	428a      	cmp	r2, r1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0xfe>
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	6821      	ldr	r1, [r4, #0]
 8002752:	02d2      	lsls	r2, r2, #11
 8002754:	430a      	orrs	r2, r1
 8002756:	6022      	str	r2, [r4, #0]
 8002758:	e7e1      	b.n	800271e <HAL_RCC_OscConfig+0xc2>
 800275a:	6821      	ldr	r1, [r4, #0]
 800275c:	487e      	ldr	r0, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x2fc>)
 800275e:	4001      	ands	r1, r0
 8002760:	6021      	str	r1, [r4, #0]
 8002762:	6821      	ldr	r1, [r4, #0]
 8002764:	400b      	ands	r3, r1
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	497c      	ldr	r1, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x300>)
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	400b      	ands	r3, r1
 8002770:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002772:	2a00      	cmp	r2, #0
 8002774:	d1d6      	bne.n	8002724 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8002776:	f7ff fddd 	bl	8002334 <HAL_GetTick>
 800277a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0292      	lsls	r2, r2, #10
 8002782:	4213      	tst	r3, r2
 8002784:	d100      	bne.n	8002788 <HAL_RCC_OscConfig+0x12c>
 8002786:	e77a      	b.n	800267e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fdd4 	bl	8002334 <HAL_GetTick>
 800278c:	9b00      	ldr	r3, [sp, #0]
 800278e:	1ac0      	subs	r0, r0, r3
 8002790:	2864      	cmp	r0, #100	; 0x64
 8002792:	d9f3      	bls.n	800277c <HAL_RCC_OscConfig+0x120>
 8002794:	e7d4      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002796:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002798:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800279a:	4213      	tst	r3, r2
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800279e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80027a0:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80027a2:	4311      	orrs	r1, r2
 80027a4:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a6:	2e04      	cmp	r6, #4
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027aa:	2e0c      	cmp	r6, #12
 80027ac:	d124      	bne.n	80027f8 <HAL_RCC_OscConfig+0x19c>
 80027ae:	2f00      	cmp	r7, #0
 80027b0:	d122      	bne.n	80027f8 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	0752      	lsls	r2, r2, #29
 80027b6:	d501      	bpl.n	80027bc <HAL_RCC_OscConfig+0x160>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ab      	beq.n	8002714 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	6861      	ldr	r1, [r4, #4]
 80027be:	692a      	ldr	r2, [r5, #16]
 80027c0:	4867      	ldr	r0, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x304>)
 80027c2:	0212      	lsls	r2, r2, #8
 80027c4:	4001      	ands	r1, r0
 80027c6:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027c8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027cc:	6822      	ldr	r2, [r4, #0]
 80027ce:	438a      	bics	r2, r1
 80027d0:	4313      	orrs	r3, r2
 80027d2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d4:	f7ff fefa 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 80027d8:	68e3      	ldr	r3, [r4, #12]
 80027da:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x2f0>)
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	0f1b      	lsrs	r3, r3, #28
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	40d8      	lsrs	r0, r3
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x2f4>)
 80027e6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80027e8:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x2f8>)
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	f7ff fbec 	bl	8001fc8 <HAL_InitTick>
      if(status != HAL_OK)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d100      	bne.n	80027f6 <HAL_RCC_OscConfig+0x19a>
 80027f4:	e747      	b.n	8002686 <HAL_RCC_OscConfig+0x2a>
 80027f6:	e7a4      	b.n	8002742 <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d019      	beq.n	8002830 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027fc:	2109      	movs	r1, #9
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	438a      	bics	r2, r1
 8002802:	4313      	orrs	r3, r2
 8002804:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002806:	f7ff fd95 	bl	8002334 <HAL_GetTick>
 800280a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280c:	2204      	movs	r2, #4
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	4213      	tst	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	692b      	ldr	r3, [r5, #16]
 8002818:	4951      	ldr	r1, [pc, #324]	; (8002960 <HAL_RCC_OscConfig+0x304>)
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	400a      	ands	r2, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	6063      	str	r3, [r4, #4]
 8002822:	e730      	b.n	8002686 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002824:	f7ff fd86 	bl	8002334 <HAL_GetTick>
 8002828:	1bc0      	subs	r0, r0, r7
 800282a:	2802      	cmp	r0, #2
 800282c:	d9ee      	bls.n	800280c <HAL_RCC_OscConfig+0x1b0>
 800282e:	e787      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8002830:	2201      	movs	r2, #1
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	4393      	bics	r3, r2
 8002836:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002838:	f7ff fd7c 	bl	8002334 <HAL_GetTick>
 800283c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800283e:	2204      	movs	r2, #4
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	4213      	tst	r3, r2
 8002844:	d100      	bne.n	8002848 <HAL_RCC_OscConfig+0x1ec>
 8002846:	e71e      	b.n	8002686 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff fd74 	bl	8002334 <HAL_GetTick>
 800284c:	1bc0      	subs	r0, r0, r7
 800284e:	2802      	cmp	r0, #2
 8002850:	d9f5      	bls.n	800283e <HAL_RCC_OscConfig+0x1e2>
 8002852:	e775      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002854:	69ab      	ldr	r3, [r5, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4313      	orrs	r3, r2
 8002862:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002864:	f7ff fd66 	bl	8002334 <HAL_GetTick>
 8002868:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4213      	tst	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x2ec>)
 8002878:	4013      	ands	r3, r2
 800287a:	6a2a      	ldr	r2, [r5, #32]
 800287c:	4313      	orrs	r3, r2
 800287e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	6862      	ldr	r2, [r4, #4]
 8002882:	69eb      	ldr	r3, [r5, #28]
 8002884:	0212      	lsls	r2, r2, #8
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	0a12      	lsrs	r2, r2, #8
 800288a:	4313      	orrs	r3, r2
 800288c:	6063      	str	r3, [r4, #4]
 800288e:	e727      	b.n	80026e0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002890:	f7ff fd50 	bl	8002334 <HAL_GetTick>
 8002894:	1bc0      	subs	r0, r0, r7
 8002896:	2802      	cmp	r0, #2
 8002898:	d9e7      	bls.n	800286a <HAL_RCC_OscConfig+0x20e>
 800289a:	e751      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_RCC_OscConfig+0x308>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028a4:	f7ff fd46 	bl	8002334 <HAL_GetTick>
 80028a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4213      	tst	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x25a>
 80028b4:	e714      	b.n	80026e0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b6:	f7ff fd3d 	bl	8002334 <HAL_GetTick>
 80028ba:	1bc0      	subs	r0, r0, r7
 80028bc:	2802      	cmp	r0, #2
 80028be:	d9f4      	bls.n	80028aa <HAL_RCC_OscConfig+0x24e>
 80028c0:	e73e      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c2:	696a      	ldr	r2, [r5, #20]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 80028ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80028cc:	4313      	orrs	r3, r2
 80028ce:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80028d0:	f7ff fd30 	bl	8002334 <HAL_GetTick>
 80028d4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028d6:	2202      	movs	r2, #2
 80028d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80028da:	4213      	tst	r3, r2
 80028dc:	d000      	beq.n	80028e0 <HAL_RCC_OscConfig+0x284>
 80028de:	e703      	b.n	80026e8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7ff fd28 	bl	8002334 <HAL_GetTick>
 80028e4:	1bc0      	subs	r0, r0, r7
 80028e6:	2802      	cmp	r0, #2
 80028e8:	d9f5      	bls.n	80028d6 <HAL_RCC_OscConfig+0x27a>
 80028ea:	e729      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 80028ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80028ee:	439a      	bics	r2, r3
 80028f0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80028f2:	f7ff fd1f 	bl	8002334 <HAL_GetTick>
 80028f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f8:	2202      	movs	r2, #2
 80028fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80028fc:	4213      	tst	r3, r2
 80028fe:	d100      	bne.n	8002902 <HAL_RCC_OscConfig+0x2a6>
 8002900:	e6f2      	b.n	80026e8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002902:	f7ff fd17 	bl	8002334 <HAL_GetTick>
 8002906:	1bc0      	subs	r0, r0, r7
 8002908:	2802      	cmp	r0, #2
 800290a:	d9f5      	bls.n	80028f8 <HAL_RCC_OscConfig+0x29c>
 800290c:	e718      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002910:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002914:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002916:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	421a      	tst	r2, r3
 800291a:	d104      	bne.n	8002926 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800291e:	4313      	orrs	r3, r2
 8002920:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	4f0f      	ldr	r7, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x30c>)
 800292a:	0052      	lsls	r2, r2, #1
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4213      	tst	r3, r2
 8002930:	d01c      	beq.n	800296c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	68ab      	ldr	r3, [r5, #8]
 8002936:	0052      	lsls	r2, r2, #1
 8002938:	4293      	cmp	r3, r2
 800293a:	d12b      	bne.n	8002994 <HAL_RCC_OscConfig+0x338>
 800293c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800293e:	4313      	orrs	r3, r2
 8002940:	6523      	str	r3, [r4, #80]	; 0x50
 8002942:	e04c      	b.n	80029de <HAL_RCC_OscConfig+0x382>
 8002944:	40021000 	.word	0x40021000
 8002948:	ffff1fff 	.word	0xffff1fff
 800294c:	080064a8 	.word	0x080064a8
 8002950:	20000000 	.word	0x20000000
 8002954:	20000008 	.word	0x20000008
 8002958:	fffeffff 	.word	0xfffeffff
 800295c:	fffbffff 	.word	0xfffbffff
 8002960:	ffffe0ff 	.word	0xffffe0ff
 8002964:	fffffeff 	.word	0xfffffeff
 8002968:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	0052      	lsls	r2, r2, #1
 8002972:	4313      	orrs	r3, r2
 8002974:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002976:	f7ff fcdd 	bl	8002334 <HAL_GetTick>
 800297a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	0052      	lsls	r2, r2, #1
 8002982:	4213      	tst	r3, r2
 8002984:	d1d5      	bne.n	8002932 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002986:	f7ff fcd5 	bl	8002334 <HAL_GetTick>
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	1ac0      	subs	r0, r0, r3
 800298e:	2864      	cmp	r0, #100	; 0x64
 8002990:	d9f4      	bls.n	800297c <HAL_RCC_OscConfig+0x320>
 8002992:	e6d5      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <HAL_RCC_OscConfig+0x36a>
 8002998:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800299a:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_RCC_OscConfig+0x484>)
 800299c:	4013      	ands	r3, r2
 800299e:	6523      	str	r3, [r4, #80]	; 0x50
 80029a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029a2:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_RCC_OscConfig+0x488>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80029a8:	f7ff fcc4 	bl	8002334 <HAL_GetTick>
 80029ac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4213      	tst	r3, r2
 80029b6:	d01a      	beq.n	80029ee <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff fcbc 	bl	8002334 <HAL_GetTick>
 80029bc:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x48c>)
 80029be:	1bc0      	subs	r0, r0, r7
 80029c0:	4298      	cmp	r0, r3
 80029c2:	d9f4      	bls.n	80029ae <HAL_RCC_OscConfig+0x352>
 80029c4:	e6bc      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	21a0      	movs	r1, #160	; 0xa0
 80029c8:	00c9      	lsls	r1, r1, #3
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3a4>
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6523      	str	r3, [r4, #80]	; 0x50
 80029d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029da:	431a      	orrs	r2, r3
 80029dc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80029de:	f7ff fca9 	bl	8002334 <HAL_GetTick>
 80029e2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	4213      	tst	r3, r2
 80029ec:	d010      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 80029ee:	9b00      	ldr	r3, [sp, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d000      	beq.n	80029f6 <HAL_RCC_OscConfig+0x39a>
 80029f4:	e67c      	b.n	80026f0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029f8:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <HAL_RCC_OscConfig+0x490>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80029fe:	e677      	b.n	80026f0 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a02:	4a37      	ldr	r2, [pc, #220]	; (8002ae0 <HAL_RCC_OscConfig+0x484>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	6523      	str	r3, [r4, #80]	; 0x50
 8002a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x488>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	e797      	b.n	8002940 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7ff fc90 	bl	8002334 <HAL_GetTick>
 8002a14:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x48c>)
 8002a16:	1bc0      	subs	r0, r0, r7
 8002a18:	4298      	cmp	r0, r3
 8002a1a:	d9e3      	bls.n	80029e4 <HAL_RCC_OscConfig+0x388>
 8002a1c:	e690      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1e:	2e0c      	cmp	r6, #12
 8002a20:	d043      	beq.n	8002aaa <HAL_RCC_OscConfig+0x44e>
 8002a22:	4a33      	ldr	r2, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x494>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d12e      	bne.n	8002a86 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8002a28:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a2a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a30:	f7ff fc80 	bl	8002334 <HAL_GetTick>
 8002a34:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a36:	04bf      	lsls	r7, r7, #18
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	423b      	tst	r3, r7
 8002a3c:	d11d      	bne.n	8002a7a <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002a42:	68e2      	ldr	r2, [r4, #12]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	492b      	ldr	r1, [pc, #172]	; (8002af4 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a48:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a50:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	045b      	lsls	r3, r3, #17
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a60:	f7ff fc68 	bl	8002334 <HAL_GetTick>
 8002a64:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	4233      	tst	r3, r6
 8002a6a:	d000      	beq.n	8002a6e <HAL_RCC_OscConfig+0x412>
 8002a6c:	e644      	b.n	80026f8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fc61 	bl	8002334 <HAL_GetTick>
 8002a72:	1b40      	subs	r0, r0, r5
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d9f6      	bls.n	8002a66 <HAL_RCC_OscConfig+0x40a>
 8002a78:	e662      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff fc5b 	bl	8002334 <HAL_GetTick>
 8002a7e:	1b80      	subs	r0, r0, r6
 8002a80:	2802      	cmp	r0, #2
 8002a82:	d9d9      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3dc>
 8002a84:	e65c      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 8002a86:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a88:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fc51 	bl	8002334 <HAL_GetTick>
 8002a92:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a94:	04b6      	lsls	r6, r6, #18
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	4233      	tst	r3, r6
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x442>
 8002a9c:	e62c      	b.n	80026f8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff fc49 	bl	8002334 <HAL_GetTick>
 8002aa2:	1b40      	subs	r0, r0, r5
 8002aa4:	2802      	cmp	r0, #2
 8002aa6:	d9f6      	bls.n	8002a96 <HAL_RCC_OscConfig+0x43a>
 8002aa8:	e64a      	b.n	8002740 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 8002aaa:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x456>
 8002ab0:	e647      	b.n	8002742 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002ab4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002ab8:	0252      	lsls	r2, r2, #9
 8002aba:	401a      	ands	r2, r3
 8002abc:	428a      	cmp	r2, r1
 8002abe:	d000      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x466>
 8002ac0:	e628      	b.n	8002714 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ac2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ac6:	0392      	lsls	r2, r2, #14
 8002ac8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	428a      	cmp	r2, r1
 8002acc:	d000      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x474>
 8002ace:	e621      	b.n	8002714 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ad0:	22c0      	movs	r2, #192	; 0xc0
 8002ad2:	0412      	lsls	r2, r2, #16
 8002ad4:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ad6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <HAL_RCC_OscConfig+0x482>
 8002adc:	e60c      	b.n	80026f8 <HAL_RCC_OscConfig+0x9c>
 8002ade:	e619      	b.n	8002714 <HAL_RCC_OscConfig+0xb8>
 8002ae0:	fffffeff 	.word	0xfffffeff
 8002ae4:	fffffbff 	.word	0xfffffbff
 8002ae8:	00001388 	.word	0x00001388
 8002aec:	efffffff 	.word	0xefffffff
 8002af0:	feffffff 	.word	0xfeffffff
 8002af4:	ff02ffff 	.word	0xff02ffff

08002af8 <HAL_RCC_ClockConfig>:
{
 8002af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002afa:	1e04      	subs	r4, r0, #0
 8002afc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
}
 8002b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	2501      	movs	r5, #1
 8002b06:	4e5b      	ldr	r6, [pc, #364]	; (8002c74 <HAL_RCC_ClockConfig+0x17c>)
 8002b08:	9a01      	ldr	r2, [sp, #4]
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	402b      	ands	r3, r5
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d331      	bcc.n	8002b76 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	0793      	lsls	r3, r2, #30
 8002b16:	d443      	bmi.n	8002ba0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b18:	07d3      	lsls	r3, r2, #31
 8002b1a:	d449      	bmi.n	8002bb0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	2501      	movs	r5, #1
 8002b1e:	6833      	ldr	r3, [r6, #0]
 8002b20:	9a01      	ldr	r2, [sp, #4]
 8002b22:	402b      	ands	r3, r5
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d909      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b28:	6833      	ldr	r3, [r6, #0]
 8002b2a:	43ab      	bics	r3, r5
 8002b2c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b2e:	f7ff fc01 	bl	8002334 <HAL_GetTick>
 8002b32:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b34:	6833      	ldr	r3, [r6, #0]
 8002b36:	422b      	tst	r3, r5
 8002b38:	d000      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x44>
 8002b3a:	e08c      	b.n	8002c56 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	4d4e      	ldr	r5, [pc, #312]	; (8002c78 <HAL_RCC_ClockConfig+0x180>)
 8002b40:	0753      	lsls	r3, r2, #29
 8002b42:	d500      	bpl.n	8002b46 <HAL_RCC_ClockConfig+0x4e>
 8002b44:	e08f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	0713      	lsls	r3, r2, #28
 8002b48:	d506      	bpl.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4a:	68e9      	ldr	r1, [r5, #12]
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_RCC_ClockConfig+0x184>)
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	400a      	ands	r2, r1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b58:	f7ff fd38 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002b5c:	68eb      	ldr	r3, [r5, #12]
 8002b5e:	4a48      	ldr	r2, [pc, #288]	; (8002c80 <HAL_RCC_ClockConfig+0x188>)
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	0f1b      	lsrs	r3, r3, #28
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	40d8      	lsrs	r0, r3
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_RCC_ClockConfig+0x18c>)
 8002b6a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCC_ClockConfig+0x190>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	f7ff fa2a 	bl	8001fc8 <HAL_InitTick>
 8002b74:	e7c5      	b.n	8002b02 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	6833      	ldr	r3, [r6, #0]
 8002b78:	9a01      	ldr	r2, [sp, #4]
 8002b7a:	43ab      	bics	r3, r5
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b80:	f7ff fbd8 	bl	8002334 <HAL_GetTick>
 8002b84:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	6833      	ldr	r3, [r6, #0]
 8002b88:	9a01      	ldr	r2, [sp, #4]
 8002b8a:	402b      	ands	r3, r5
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d0c0      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7ff fbd0 	bl	8002334 <HAL_GetTick>
 8002b94:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002b96:	1bc0      	subs	r0, r0, r7
 8002b98:	4298      	cmp	r0, r3
 8002b9a:	d9f4      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	e7b0      	b.n	8002b02 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	20f0      	movs	r0, #240	; 0xf0
 8002ba2:	4935      	ldr	r1, [pc, #212]	; (8002c78 <HAL_RCC_ClockConfig+0x180>)
 8002ba4:	68cb      	ldr	r3, [r1, #12]
 8002ba6:	4383      	bics	r3, r0
 8002ba8:	68a0      	ldr	r0, [r4, #8]
 8002baa:	4303      	orrs	r3, r0
 8002bac:	60cb      	str	r3, [r1, #12]
 8002bae:	e7b3      	b.n	8002b18 <HAL_RCC_ClockConfig+0x20>
 8002bb0:	4d31      	ldr	r5, [pc, #196]	; (8002c78 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	2a02      	cmp	r2, #2
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bba:	039b      	lsls	r3, r3, #14
 8002bbc:	d5a0      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	68eb      	ldr	r3, [r5, #12]
 8002bc2:	438b      	bics	r3, r1
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002bc8:	f7ff fbb4 	bl	8002334 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bcc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002bce:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d118      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	68eb      	ldr	r3, [r5, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d09e      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7ff fba9 	bl	8002334 <HAL_GetTick>
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002be4:	1bc0      	subs	r0, r0, r7
 8002be6:	4298      	cmp	r0, r3
 8002be8:	d9f4      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0xdc>
 8002bea:	e7d7      	b.n	8002b9c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bec:	2a03      	cmp	r2, #3
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	d4e4      	bmi.n	8002bbe <HAL_RCC_ClockConfig+0xc6>
 8002bf4:	e784      	b.n	8002b00 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bf6:	2a01      	cmp	r2, #1
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfa:	075b      	lsls	r3, r3, #29
 8002bfc:	d4df      	bmi.n	8002bbe <HAL_RCC_ClockConfig+0xc6>
 8002bfe:	e77f      	b.n	8002b00 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c00:	059b      	lsls	r3, r3, #22
 8002c02:	d4dc      	bmi.n	8002bbe <HAL_RCC_ClockConfig+0xc6>
 8002c04:	e77c      	b.n	8002b00 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d10b      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	68eb      	ldr	r3, [r5, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d083      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7ff fb8e 	bl	8002334 <HAL_GetTick>
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002c1a:	1bc0      	subs	r0, r0, r7
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d9f4      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x112>
 8002c20:	e7bc      	b.n	8002b9c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d011      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c26:	220c      	movs	r2, #12
 8002c28:	68eb      	ldr	r3, [r5, #12]
 8002c2a:	4213      	tst	r3, r2
 8002c2c:	d100      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x138>
 8002c2e:	e775      	b.n	8002b1c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7ff fb80 	bl	8002334 <HAL_GetTick>
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002c36:	1bc0      	subs	r0, r0, r7
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	d9f4      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x12e>
 8002c3c:	e7ae      	b.n	8002b9c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3e:	f7ff fb79 	bl	8002334 <HAL_GetTick>
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002c44:	1bc0      	subs	r0, r0, r7
 8002c46:	4298      	cmp	r0, r3
 8002c48:	d8a8      	bhi.n	8002b9c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	68eb      	ldr	r3, [r5, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d1f4      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x146>
 8002c54:	e762      	b.n	8002b1c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c56:	f7ff fb6d 	bl	8002334 <HAL_GetTick>
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_ClockConfig+0x194>)
 8002c5c:	1bc0      	subs	r0, r0, r7
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	d800      	bhi.n	8002c64 <HAL_RCC_ClockConfig+0x16c>
 8002c62:	e767      	b.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
 8002c64:	e79a      	b.n	8002b9c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c66:	68eb      	ldr	r3, [r5, #12]
 8002c68:	4909      	ldr	r1, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x198>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	68e1      	ldr	r1, [r4, #12]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	60eb      	str	r3, [r5, #12]
 8002c72:	e768      	b.n	8002b46 <HAL_RCC_ClockConfig+0x4e>
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	ffffc7ff 	.word	0xffffc7ff
 8002c80:	080064a8 	.word	0x080064a8
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	00001388 	.word	0x00001388
 8002c90:	fffff8ff 	.word	0xfffff8ff

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	055b      	lsls	r3, r3, #21
 8002c9c:	0f5b      	lsrs	r3, r3, #29
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ca2:	6810      	ldr	r0, [r2, #0]
 8002ca4:	40d8      	lsrs	r0, r3
}
 8002ca6:	4770      	bx	lr
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	080064b8 	.word	0x080064b8
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	049b      	lsls	r3, r3, #18
 8002cbc:	0f5b      	lsrs	r3, r3, #29
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002cc2:	6810      	ldr	r0, [r2, #0]
 8002cc4:	40d8      	lsrs	r0, r3
}
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	080064b8 	.word	0x080064b8
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd4:	230f      	movs	r3, #15
{
 8002cd6:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd8:	2403      	movs	r4, #3

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cda:	25e0      	movs	r5, #224	; 0xe0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cde:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce0:	68d3      	ldr	r3, [r2, #12]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce2:	00ed      	lsls	r5, r5, #3
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce4:	4023      	ands	r3, r4
 8002ce6:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ce8:	68d3      	ldr	r3, [r2, #12]
 8002cea:	34ed      	adds	r4, #237	; 0xed
 8002cec:	4023      	ands	r3, r4
 8002cee:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cf0:	68d4      	ldr	r4, [r2, #12]
 8002cf2:	402c      	ands	r4, r5
 8002cf4:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002cf6:	68d3      	ldr	r3, [r2, #12]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002cf8:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	402b      	ands	r3, r5
 8002cfe:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_GetClockConfig+0x3c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4013      	ands	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
}
 8002d08:	bd30      	pop	{r4, r5, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d14:	6803      	ldr	r3, [r0, #0]
{
 8002d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d18:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	d52c      	bpl.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002d20:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4c53      	ldr	r4, [pc, #332]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d24:	055b      	lsls	r3, r3, #21
 8002d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002d28:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	421a      	tst	r2, r3
 8002d2c:	d104      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d30:	4313      	orrs	r3, r2
 8002d32:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	2780      	movs	r7, #128	; 0x80
 8002d3a:	4e4e      	ldr	r6, [pc, #312]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3c:	007f      	lsls	r7, r7, #1
 8002d3e:	6833      	ldr	r3, [r6, #0]
 8002d40:	423b      	tst	r3, r7
 8002d42:	d040      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d44:	686b      	ldr	r3, [r5, #4]
 8002d46:	21c0      	movs	r1, #192	; 0xc0
 8002d48:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d4a:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d4c:	0389      	lsls	r1, r1, #14
 8002d4e:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d50:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d52:	4290      	cmp	r0, r2
 8002d54:	d148      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d56:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d58:	22c0      	movs	r2, #192	; 0xc0
 8002d5a:	0008      	movs	r0, r1
 8002d5c:	0292      	lsls	r2, r2, #10
 8002d5e:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d60:	4211      	tst	r1, r2
 8002d62:	d14c      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	d45e      	bmi.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d6a:	9b00      	ldr	r3, [sp, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d103      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d72:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d78:	682a      	ldr	r2, [r5, #0]
 8002d7a:	0793      	lsls	r3, r2, #30
 8002d7c:	d506      	bpl.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7e:	200c      	movs	r0, #12
 8002d80:	493b      	ldr	r1, [pc, #236]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d82:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d84:	4383      	bics	r3, r0
 8002d86:	68a8      	ldr	r0, [r5, #8]
 8002d88:	4303      	orrs	r3, r0
 8002d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8c:	0753      	lsls	r3, r2, #29
 8002d8e:	d506      	bpl.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d90:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d92:	483a      	ldr	r0, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d94:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d96:	4003      	ands	r3, r0
 8002d98:	68e8      	ldr	r0, [r5, #12]
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9e:	0713      	lsls	r3, r2, #28
 8002da0:	d506      	bpl.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da2:	4933      	ldr	r1, [pc, #204]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002da4:	4836      	ldr	r0, [pc, #216]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002da6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002da8:	4003      	ands	r3, r0
 8002daa:	6928      	ldr	r0, [r5, #16]
 8002dac:	4303      	orrs	r3, r0
 8002dae:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002db0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002db2:	0613      	lsls	r3, r2, #24
 8002db4:	d517      	bpl.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002db8:	4932      	ldr	r1, [pc, #200]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002dba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	6969      	ldr	r1, [r5, #20]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc4:	e00f      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	6833      	ldr	r3, [r6, #0]
 8002dc8:	433b      	orrs	r3, r7
 8002dca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002dcc:	f7ff fab2 	bl	8002334 <HAL_GetTick>
 8002dd0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	6833      	ldr	r3, [r6, #0]
 8002dd4:	423b      	tst	r3, r7
 8002dd6:	d1b5      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7ff faac 	bl	8002334 <HAL_GetTick>
 8002ddc:	9b01      	ldr	r3, [sp, #4]
 8002dde:	1ac0      	subs	r0, r0, r3
 8002de0:	2864      	cmp	r0, #100	; 0x64
 8002de2:	d9f6      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8002de4:	2003      	movs	r0, #3
}
 8002de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002de8:	22c0      	movs	r2, #192	; 0xc0
 8002dea:	0019      	movs	r1, r3
 8002dec:	0292      	lsls	r2, r2, #10
 8002dee:	4011      	ands	r1, r2
 8002df0:	4291      	cmp	r1, r2
 8002df2:	d1b0      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002df4:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002df8:	0392      	lsls	r2, r2, #14
 8002dfa:	d5ac      	bpl.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002dfc:	e7f3      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002dfe:	4013      	ands	r3, r2
 8002e00:	4283      	cmp	r3, r0
 8002e02:	d0af      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	069b      	lsls	r3, r3, #26
 8002e08:	d5af      	bpl.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002e10:	0312      	lsls	r2, r2, #12
 8002e12:	4302      	orrs	r2, r0
 8002e14:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x178>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e1c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1e:	4002      	ands	r2, r0
 8002e20:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002e22:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e24:	05cb      	lsls	r3, r1, #23
 8002e26:	d412      	bmi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e28:	6869      	ldr	r1, [r5, #4]
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	401a      	ands	r2, r3
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	4815      	ldr	r0, [pc, #84]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002e3a:	4003      	ands	r3, r0
 8002e3c:	20c0      	movs	r0, #192	; 0xc0
 8002e3e:	0380      	lsls	r0, r0, #14
 8002e40:	4001      	ands	r1, r0
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	6522      	str	r2, [r4, #80]	; 0x50
 8002e4c:	e78d      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8002e4e:	f7ff fa71 	bl	8002334 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e52:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002e54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e56:	00bf      	lsls	r7, r7, #2
 8002e58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e5a:	423b      	tst	r3, r7
 8002e5c:	d000      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e5e:	e781      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7ff fa68 	bl	8002334 <HAL_GetTick>
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002e66:	1b80      	subs	r0, r0, r6
 8002e68:	4298      	cmp	r0, r3
 8002e6a:	d9f5      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002e6c:	e7ba      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	efffffff 	.word	0xefffffff
 8002e7c:	fffff3ff 	.word	0xfffff3ff
 8002e80:	ffffcfff 	.word	0xffffcfff
 8002e84:	fff3ffff 	.word	0xfff3ffff
 8002e88:	fffcffff 	.word	0xfffcffff
 8002e8c:	fff7ffff 	.word	0xfff7ffff
 8002e90:	ffcfffff 	.word	0xffcfffff
 8002e94:	00001388 	.word	0x00001388

08002e98 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	001d      	movs	r5, r3
 8002e9c:	0017      	movs	r7, r2
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	000e      	movs	r6, r1
 8002ea2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea4:	f7ff fa46 	bl	8002334 <HAL_GetTick>
 8002ea8:	19ed      	adds	r5, r5, r7
 8002eaa:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002eac:	f7ff fa42 	bl	8002334 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8002eb2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	0d1b      	lsrs	r3, r3, #20
 8002eba:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ebc:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002ebe:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec0:	6893      	ldr	r3, [r2, #8]
 8002ec2:	4033      	ands	r3, r6
 8002ec4:	429e      	cmp	r6, r3
 8002ec6:	d001      	beq.n	8002ecc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e032      	b.n	8002f32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	1c7b      	adds	r3, r7, #1
 8002ece:	d0f7      	beq.n	8002ec0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed0:	f7ff fa30 	bl	8002334 <HAL_GetTick>
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	42a8      	cmp	r0, r5
 8002eda:	d32c      	bcc.n	8002f36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002edc:	21e0      	movs	r1, #224	; 0xe0
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	438a      	bics	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee6:	2282      	movs	r2, #130	; 0x82
 8002ee8:	6861      	ldr	r1, [r4, #4]
 8002eea:	0052      	lsls	r2, r2, #1
 8002eec:	4291      	cmp	r1, r2
 8002eee:	d10c      	bne.n	8002f0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	68a2      	ldr	r2, [r4, #8]
 8002ef4:	0209      	lsls	r1, r1, #8
 8002ef6:	428a      	cmp	r2, r1
 8002ef8:	d003      	beq.n	8002f02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	00c9      	lsls	r1, r1, #3
 8002efe:	428a      	cmp	r2, r1
 8002f00:	d103      	bne.n	8002f0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	438a      	bics	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f0e:	0189      	lsls	r1, r1, #6
 8002f10:	428a      	cmp	r2, r1
 8002f12:	d106      	bne.n	8002f22 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8002f18:	4001      	ands	r1, r0
 8002f1a:	6019      	str	r1, [r3, #0]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f22:	0023      	movs	r3, r4
 8002f24:	2201      	movs	r2, #1
 8002f26:	3351      	adds	r3, #81	; 0x51
 8002f28:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8002f2a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002f2c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002f2e:	3450      	adds	r4, #80	; 0x50
 8002f30:	7023      	strb	r3, [r4, #0]
}
 8002f32:	b005      	add	sp, #20
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002f36:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	4193      	sbcs	r3, r2
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	401d      	ands	r5, r3
      count--;
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	e7ba      	b.n	8002ebc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	ffffdfff 	.word	0xffffdfff

08002f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f54:	2282      	movs	r2, #130	; 0x82
{
 8002f56:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f58:	6840      	ldr	r0, [r0, #4]
 8002f5a:	0052      	lsls	r2, r2, #1
 8002f5c:	4290      	cmp	r0, r2
 8002f5e:	d11e      	bne.n	8002f9e <SPI_EndRxTransaction+0x4e>
 8002f60:	2080      	movs	r0, #128	; 0x80
 8002f62:	2580      	movs	r5, #128	; 0x80
 8002f64:	68a2      	ldr	r2, [r4, #8]
 8002f66:	0200      	lsls	r0, r0, #8
 8002f68:	00ed      	lsls	r5, r5, #3
 8002f6a:	4282      	cmp	r2, r0
 8002f6c:	d001      	beq.n	8002f72 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f6e:	42aa      	cmp	r2, r5
 8002f70:	d106      	bne.n	8002f80 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f72:	2740      	movs	r7, #64	; 0x40
 8002f74:	6826      	ldr	r6, [r4, #0]
 8002f76:	6830      	ldr	r0, [r6, #0]
 8002f78:	43b8      	bics	r0, r7
 8002f7a:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f7c:	42aa      	cmp	r2, r5
 8002f7e:	d00e      	beq.n	8002f9e <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f80:	000a      	movs	r2, r1
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0020      	movs	r0, r4
 8002f86:	f7ff ff87 	bl	8002e98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d101      	bne.n	8002f92 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002f8e:	2000      	movs	r0, #0
}
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	2320      	movs	r3, #32
 8002f94:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f9c:	e7f8      	b.n	8002f90 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9e:	000a      	movs	r2, r1
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	e7ef      	b.n	8002f84 <SPI_EndRxTransaction+0x34>

08002fa4 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <SPI_EndRxTxTransaction+0x5c>)
{
 8002fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fa8:	0004      	movs	r4, r0
 8002faa:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	4915      	ldr	r1, [pc, #84]	; (8003004 <SPI_EndRxTxTransaction+0x60>)
{
 8002fb0:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fb2:	f7fd f8c7 	bl	8000144 <__udivsi3>
 8002fb6:	23fa      	movs	r3, #250	; 0xfa
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4343      	muls	r3, r0
 8002fbc:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fbe:	2382      	movs	r3, #130	; 0x82
 8002fc0:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fc2:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4299      	cmp	r1, r3
 8002fc8:	d10d      	bne.n	8002fe6 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fca:	0033      	movs	r3, r6
 8002fcc:	002a      	movs	r2, r5
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	0020      	movs	r0, r4
 8002fd2:	f7ff ff61 	bl	8002e98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d00f      	beq.n	8002ffa <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fda:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002fdc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8002fe4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8002fe6:	9b01      	ldr	r3, [sp, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <SPI_EndRxTxTransaction+0x56>
      count--;
 8002fec:	9b01      	ldr	r3, [sp, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4213      	tst	r3, r2
 8002ff8:	d1f5      	bne.n	8002fe6 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e7f2      	b.n	8002fe4 <SPI_EndRxTxTransaction+0x40>
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	20000000 	.word	0x20000000
 8003004:	016e3600 	.word	0x016e3600

08003008 <HAL_SPI_Init>:
{
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800300e:	2c00      	cmp	r4, #0
 8003010:	d050      	beq.n	80030b4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d14e      	bne.n	80030b6 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003018:	2282      	movs	r2, #130	; 0x82
 800301a:	6861      	ldr	r1, [r4, #4]
 800301c:	0052      	lsls	r2, r2, #1
 800301e:	4291      	cmp	r1, r2
 8003020:	d000      	beq.n	8003024 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003022:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003024:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003026:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003028:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800302a:	3551      	adds	r5, #81	; 0x51
 800302c:	782b      	ldrb	r3, [r5, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003034:	0023      	movs	r3, r4
 8003036:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8003038:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800303a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800303c:	f7fe ff7c 	bl	8001f38 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003040:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8003042:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003044:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003046:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003048:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800304a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800304e:	4393      	bics	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003052:	2382      	movs	r3, #130	; 0x82
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4033      	ands	r3, r6
 8003058:	2684      	movs	r6, #132	; 0x84
 800305a:	0236      	lsls	r6, r6, #8
 800305c:	403e      	ands	r6, r7
 800305e:	4333      	orrs	r3, r6
 8003060:	2680      	movs	r6, #128	; 0x80
 8003062:	68e7      	ldr	r7, [r4, #12]
 8003064:	0136      	lsls	r6, r6, #4
 8003066:	403e      	ands	r6, r7
 8003068:	4333      	orrs	r3, r6
 800306a:	6926      	ldr	r6, [r4, #16]
 800306c:	69a2      	ldr	r2, [r4, #24]
 800306e:	4030      	ands	r0, r6
 8003070:	2601      	movs	r6, #1
 8003072:	4303      	orrs	r3, r0
 8003074:	6960      	ldr	r0, [r4, #20]
 8003076:	69e7      	ldr	r7, [r4, #28]
 8003078:	4030      	ands	r0, r6
 800307a:	4303      	orrs	r3, r0
 800307c:	2080      	movs	r0, #128	; 0x80
 800307e:	0080      	lsls	r0, r0, #2
 8003080:	4010      	ands	r0, r2
 8003082:	4303      	orrs	r3, r0
 8003084:	2038      	movs	r0, #56	; 0x38
 8003086:	4038      	ands	r0, r7
 8003088:	4303      	orrs	r3, r0
 800308a:	2080      	movs	r0, #128	; 0x80
 800308c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800308e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003090:	4038      	ands	r0, r7
 8003092:	4303      	orrs	r3, r0
 8003094:	2080      	movs	r0, #128	; 0x80
 8003096:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003098:	0180      	lsls	r0, r0, #6
 800309a:	4038      	ands	r0, r7
 800309c:	4303      	orrs	r3, r0
 800309e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030a0:	2304      	movs	r3, #4
 80030a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80030a4:	401a      	ands	r2, r3
 80030a6:	330c      	adds	r3, #12
 80030a8:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030aa:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030ac:	431a      	orrs	r2, r3
 80030ae:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030b0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030b2:	702e      	strb	r6, [r5, #0]
}
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	e7b2      	b.n	8003024 <HAL_SPI_Init+0x1c>
	...

080030c0 <HAL_SPI_Transmit_IT>:
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80030c2:	0004      	movs	r4, r0
 80030c4:	3450      	adds	r4, #80	; 0x50
 80030c6:	7825      	ldrb	r5, [r4, #0]
{
 80030c8:	0003      	movs	r3, r0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ca:	68c6      	ldr	r6, [r0, #12]
  __HAL_LOCK(hspi);
 80030cc:	2002      	movs	r0, #2
 80030ce:	2d01      	cmp	r5, #1
 80030d0:	d039      	beq.n	8003146 <HAL_SPI_Transmit_IT+0x86>
 80030d2:	2501      	movs	r5, #1
    errorcode = HAL_ERROR;
 80030d4:	0028      	movs	r0, r5
  __HAL_LOCK(hspi);
 80030d6:	7025      	strb	r5, [r4, #0]
  if ((pData == NULL) || (Size == 0U))
 80030d8:	2900      	cmp	r1, #0
 80030da:	d032      	beq.n	8003142 <HAL_SPI_Transmit_IT+0x82>
 80030dc:	2a00      	cmp	r2, #0
 80030de:	d030      	beq.n	8003142 <HAL_SPI_Transmit_IT+0x82>
  if (hspi->State != HAL_SPI_STATE_READY)
 80030e0:	001d      	movs	r5, r3
 80030e2:	3551      	adds	r5, #81	; 0x51
 80030e4:	782f      	ldrb	r7, [r5, #0]
    errorcode = HAL_BUSY;
 80030e6:	1800      	adds	r0, r0, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80030e8:	2f01      	cmp	r7, #1
 80030ea:	d12a      	bne.n	8003142 <HAL_SPI_Transmit_IT+0x82>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ec:	3001      	adds	r0, #1
 80030ee:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f0:	2000      	movs	r0, #0
  hspi->TxXferSize  = Size;
 80030f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f4:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f6:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030fa:	6398      	str	r0, [r3, #56]	; 0x38
    hspi->TxISR = SPI_TxISR_16BIT;
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_SPI_Transmit_IT+0x88>)
  hspi->RxXferSize  = 0U;
 80030fe:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003100:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003102:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003104:	4286      	cmp	r6, r0
 8003106:	d100      	bne.n	800310a <HAL_SPI_Transmit_IT+0x4a>
    hspi->TxISR = SPI_TxISR_8BIT;
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_SPI_Transmit_IT+0x8c>)
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_SPI_DISABLE(hspi);
 800310e:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0209      	lsls	r1, r1, #8
 8003114:	428b      	cmp	r3, r1
 8003116:	d108      	bne.n	800312a <HAL_SPI_Transmit_IT+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8003118:	2140      	movs	r1, #64	; 0x40
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	438b      	bics	r3, r1
 800311e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	6811      	ldr	r1, [r2, #0]
 8003124:	01db      	lsls	r3, r3, #7
 8003126:	430b      	orrs	r3, r1
 8003128:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800312a:	23a0      	movs	r3, #160	; 0xa0
 800312c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800312e:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003130:	430b      	orrs	r3, r1
 8003132:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003134:	2340      	movs	r3, #64	; 0x40
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	4219      	tst	r1, r3
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Transmit_IT+0x82>
    __HAL_SPI_ENABLE(hspi);
 800313c:	6811      	ldr	r1, [r2, #0]
 800313e:	430b      	orrs	r3, r1
 8003140:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003142:	2300      	movs	r3, #0
 8003144:	7023      	strb	r3, [r4, #0]
}
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003148:	08003375 	.word	0x08003375
 800314c:	08003351 	.word	0x08003351

08003150 <HAL_SPI_TransmitReceive_IT>:
{
 8003150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003152:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003154:	0025      	movs	r5, r4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003156:	68c0      	ldr	r0, [r0, #12]
  __HAL_LOCK(hspi);
 8003158:	3550      	adds	r5, #80	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800315a:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hspi);
 800315c:	782e      	ldrb	r6, [r5, #0]
 800315e:	2002      	movs	r0, #2
 8003160:	2e01      	cmp	r6, #1
 8003162:	d040      	beq.n	80031e6 <HAL_SPI_TransmitReceive_IT+0x96>
  tmp_state           = hspi->State;
 8003164:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8003166:	3801      	subs	r0, #1
 8003168:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 800316a:	3651      	adds	r6, #81	; 0x51
 800316c:	7830      	ldrb	r0, [r6, #0]
 800316e:	b2c7      	uxtb	r7, r0
 8003170:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003172:	2801      	cmp	r0, #1
 8003174:	d00d      	beq.n	8003192 <HAL_SPI_TransmitReceive_IT+0x42>
 8003176:	2082      	movs	r0, #130	; 0x82
 8003178:	0040      	lsls	r0, r0, #1
 800317a:	4684      	mov	ip, r0
 800317c:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 800317e:	3803      	subs	r0, #3
 8003180:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003182:	4567      	cmp	r7, ip
 8003184:	d12d      	bne.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003186:	68a7      	ldr	r7, [r4, #8]
 8003188:	2f00      	cmp	r7, #0
 800318a:	d12a      	bne.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
 800318c:	9f01      	ldr	r7, [sp, #4]
 800318e:	2f04      	cmp	r7, #4
 8003190:	d127      	bne.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
    errorcode = HAL_ERROR;
 8003192:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003194:	2900      	cmp	r1, #0
 8003196:	d024      	beq.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
 8003198:	2a00      	cmp	r2, #0
 800319a:	d022      	beq.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031a0:	7830      	ldrb	r0, [r6, #0]
 80031a2:	2804      	cmp	r0, #4
 80031a4:	d001      	beq.n	80031aa <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031a6:	2005      	movs	r0, #5
 80031a8:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031aa:	2000      	movs	r0, #0
  hspi->TxXferSize  = Size;
 80031ac:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
 80031b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031b2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 80031b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b6:	9b00      	ldr	r3, [sp, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031b8:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ba:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031bc:	4283      	cmp	r3, r0
 80031be:	d013      	beq.n	80031e8 <HAL_SPI_TransmitReceive_IT+0x98>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_SPI_TransmitReceive_IT+0xa0>)
 80031c2:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_SPI_TransmitReceive_IT+0xa4>)
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c6:	22e0      	movs	r2, #224	; 0xe0
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80031c8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ca:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031cc:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	4211      	tst	r1, r2
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_TransmitReceive_IT+0x92>
    __HAL_SPI_ENABLE(hspi);
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80031e2:	2300      	movs	r3, #0
 80031e4:	702b      	strb	r3, [r5, #0]
}
 80031e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_SPI_TransmitReceive_IT+0xa8>)
 80031ea:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_SPI_TransmitReceive_IT+0xac>)
 80031ee:	e7ea      	b.n	80031c6 <HAL_SPI_TransmitReceive_IT+0x76>
 80031f0:	0800356d 	.word	0x0800356d
 80031f4:	0800353d 	.word	0x0800353d
 80031f8:	08003509 	.word	0x08003509
 80031fc:	080034d5 	.word	0x080034d5

08003200 <HAL_SPI_Receive_IT>:
{
 8003200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003202:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8003204:	0002      	movs	r2, r0
 8003206:	3251      	adds	r2, #81	; 0x51
 8003208:	7815      	ldrb	r5, [r2, #0]
 800320a:	b2ec      	uxtb	r4, r5
 800320c:	2d01      	cmp	r5, #1
 800320e:	d14a      	bne.n	80032a6 <HAL_SPI_Receive_IT+0xa6>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003210:	6885      	ldr	r5, [r0, #8]
 8003212:	2d00      	cmp	r5, #0
 8003214:	d10c      	bne.n	8003230 <HAL_SPI_Receive_IT+0x30>
 8003216:	2682      	movs	r6, #130	; 0x82
 8003218:	6847      	ldr	r7, [r0, #4]
 800321a:	0076      	lsls	r6, r6, #1
 800321c:	42b7      	cmp	r7, r6
 800321e:	d107      	bne.n	8003230 <HAL_SPI_Receive_IT+0x30>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003220:	2404      	movs	r4, #4
 8003222:	7014      	strb	r4, [r2, #0]
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003224:	000a      	movs	r2, r1
 8003226:	f7ff ff93 	bl	8003150 <HAL_SPI_TransmitReceive_IT>
 800322a:	0004      	movs	r4, r0
}
 800322c:	0020      	movs	r0, r4
 800322e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8003230:	0007      	movs	r7, r0
 8003232:	3750      	adds	r7, #80	; 0x50
 8003234:	783e      	ldrb	r6, [r7, #0]
 8003236:	2e01      	cmp	r6, #1
 8003238:	d037      	beq.n	80032aa <HAL_SPI_Receive_IT+0xaa>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800323a:	68c6      	ldr	r6, [r0, #12]
 800323c:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hspi);
 800323e:	2601      	movs	r6, #1
 8003240:	703e      	strb	r6, [r7, #0]
  if ((pData == NULL) || (Size == 0U))
 8003242:	2900      	cmp	r1, #0
 8003244:	d02b      	beq.n	800329e <HAL_SPI_Receive_IT+0x9e>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d029      	beq.n	800329e <HAL_SPI_Receive_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800324a:	2404      	movs	r4, #4
 800324c:	7014      	strb	r4, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324e:	2200      	movs	r2, #0
 8003250:	6542      	str	r2, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003252:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->RxXferCount = Size;
 8003254:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8003256:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003258:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 800325a:	6442      	str	r2, [r0, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800325c:	9a01      	ldr	r2, [sp, #4]
  hspi->RxXferSize  = Size;
 800325e:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003260:	6381      	str	r1, [r0, #56]	; 0x38
    hspi->RxISR = SPI_RxISR_16BIT;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_SPI_Receive_IT+0xb0>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003264:	2a00      	cmp	r2, #0
 8003266:	d100      	bne.n	800326a <HAL_SPI_Receive_IT+0x6a>
    hspi->RxISR = SPI_RxISR_8BIT;
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_SPI_Receive_IT+0xb4>)
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	6403      	str	r3, [r0, #64]	; 0x40
 800326e:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8003270:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003272:	4295      	cmp	r5, r2
 8003274:	d107      	bne.n	8003286 <HAL_SPI_Receive_IT+0x86>
    __HAL_SPI_DISABLE(hspi);
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	438a      	bics	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	490d      	ldr	r1, [pc, #52]	; (80032b8 <HAL_SPI_Receive_IT+0xb8>)
 8003282:	400a      	ands	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003286:	2260      	movs	r2, #96	; 0x60
 8003288:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800328a:	2400      	movs	r4, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	4211      	tst	r1, r2
 8003296:	d102      	bne.n	800329e <HAL_SPI_Receive_IT+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800329e:	2200      	movs	r2, #0
 80032a0:	3050      	adds	r0, #80	; 0x50
 80032a2:	7002      	strb	r2, [r0, #0]
  return errorcode;
 80032a4:	e7c2      	b.n	800322c <HAL_SPI_Receive_IT+0x2c>
    errorcode = HAL_BUSY;
 80032a6:	2402      	movs	r4, #2
 80032a8:	e7f9      	b.n	800329e <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 80032aa:	2402      	movs	r4, #2
 80032ac:	e7be      	b.n	800322c <HAL_SPI_Receive_IT+0x2c>
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	08003413 	.word	0x08003413
 80032b4:	080033ef 	.word	0x080033ef
 80032b8:	ffffbfff 	.word	0xffffbfff

080032bc <HAL_SPI_ErrorCallback>:
 80032bc:	4770      	bx	lr
	...

080032c0 <SPI_CloseTx_ISR>:
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <SPI_CloseTx_ISR+0x88>)
{
 80032c2:	b513      	push	{r0, r1, r4, lr}
 80032c4:	0004      	movs	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80032c6:	4921      	ldr	r1, [pc, #132]	; (800334c <SPI_CloseTx_ISR+0x8c>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	f7fc ff3b 	bl	8000144 <__udivsi3>
 80032ce:	2364      	movs	r3, #100	; 0x64
 80032d0:	4343      	muls	r3, r0
 80032d2:	9300      	str	r3, [sp, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d4:	f7ff f82e 	bl	8002334 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80032da:	2002      	movs	r0, #2
 80032dc:	6823      	ldr	r3, [r4, #0]
    if (count == 0U)
 80032de:	9900      	ldr	r1, [sp, #0]
 80032e0:	2900      	cmp	r1, #0
 80032e2:	d126      	bne.n	8003332 <SPI_CloseTx_ISR+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032e6:	3120      	adds	r1, #32
 80032e8:	4301      	orrs	r1, r0
 80032ea:	6561      	str	r1, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80032ec:	20a0      	movs	r0, #160	; 0xa0
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	4381      	bics	r1, r0
 80032f2:	6059      	str	r1, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032f4:	0020      	movs	r0, r4
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	f7ff fe54 	bl	8002fa4 <SPI_EndRxTxTransaction>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d003      	beq.n	8003308 <SPI_CloseTx_ISR+0x48>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003300:	2320      	movs	r3, #32
 8003302:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003304:	4313      	orrs	r3, r2
 8003306:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003308:	68a3      	ldr	r3, [r4, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <SPI_CloseTx_ISR+0x5c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	9201      	str	r2, [sp, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800331c:	0023      	movs	r3, r4
 800331e:	2201      	movs	r2, #1
 8003320:	3351      	adds	r3, #81	; 0x51
 8003322:	701a      	strb	r2, [r3, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003324:	6d63      	ldr	r3, [r4, #84]	; 0x54
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003326:	0020      	movs	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <SPI_CloseTx_ISR+0x80>
    HAL_SPI_ErrorCallback(hspi);
 800332c:	f7ff ffc6 	bl	80032bc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003330:	bd13      	pop	{r0, r1, r4, pc}
    count--;
 8003332:	9900      	ldr	r1, [sp, #0]
 8003334:	3901      	subs	r1, #1
 8003336:	9100      	str	r1, [sp, #0]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	4201      	tst	r1, r0
 800333c:	d0cf      	beq.n	80032de <SPI_CloseTx_ISR+0x1e>
 800333e:	e7d5      	b.n	80032ec <SPI_CloseTx_ISR+0x2c>
    HAL_SPI_TxCpltCallback(hspi);
 8003340:	f001 fc5a 	bl	8004bf8 <HAL_SPI_TxCpltCallback>
}
 8003344:	e7f4      	b.n	8003330 <SPI_CloseTx_ISR+0x70>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000000 	.word	0x20000000
 800334c:	00005dc0 	.word	0x00005dc0

08003350 <SPI_TxISR_8BIT>:
{
 8003350:	b510      	push	{r4, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003352:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003354:	6802      	ldr	r2, [r0, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	7313      	strb	r3, [r2, #12]
  hspi->pTxBuffPtr++;
 800335a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800335c:	3301      	adds	r3, #1
 800335e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8003360:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003368:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <SPI_TxISR_8BIT+0x22>
    SPI_CloseTx_ISR(hspi);
 800336e:	f7ff ffa7 	bl	80032c0 <SPI_CloseTx_ISR>
}
 8003372:	bd10      	pop	{r4, pc}

08003374 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003374:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003376:	6802      	ldr	r2, [r0, #0]
 8003378:	8819      	ldrh	r1, [r3, #0]
{
 800337a:	b510      	push	{r4, lr}
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	3302      	adds	r3, #2
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337e:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003380:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8003382:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003384:	3b01      	subs	r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 800338a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <SPI_TxISR_16BIT+0x20>
    SPI_CloseTx_ISR(hspi);
 8003390:	f7ff ff96 	bl	80032c0 <SPI_CloseTx_ISR>
}
 8003394:	bd10      	pop	{r4, pc}

08003396 <SPI_CloseRx_ISR>:
{
 8003396:	b513      	push	{r0, r1, r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003398:	2160      	movs	r1, #96	; 0x60
 800339a:	6802      	ldr	r2, [r0, #0]
{
 800339c:	0004      	movs	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800339e:	6853      	ldr	r3, [r2, #4]
 80033a0:	438b      	bics	r3, r1
 80033a2:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80033a4:	f7fe ffc6 	bl	8002334 <HAL_GetTick>
 80033a8:	2164      	movs	r1, #100	; 0x64
 80033aa:	0002      	movs	r2, r0
 80033ac:	0020      	movs	r0, r4
 80033ae:	f7ff fdcf 	bl	8002f50 <SPI_EndRxTransaction>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d003      	beq.n	80033be <SPI_CloseRx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b6:	2320      	movs	r3, #32
 80033b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033ba:	4313      	orrs	r3, r2
 80033bc:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033be:	68a3      	ldr	r3, [r4, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <SPI_CloseRx_ISR+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80033d2:	0023      	movs	r3, r4
 80033d4:	2201      	movs	r2, #1
 80033d6:	3351      	adds	r3, #81	; 0x51
 80033d8:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80033da:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_SPI_RxCpltCallback(hspi);
 80033dc:	0020      	movs	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <SPI_CloseRx_ISR+0x52>
      HAL_SPI_RxCpltCallback(hspi);
 80033e2:	f001 fc29 	bl	8004c38 <HAL_SPI_RxCpltCallback>
}
 80033e6:	bd13      	pop	{r0, r1, r4, pc}
      HAL_SPI_ErrorCallback(hspi);
 80033e8:	f7ff ff68 	bl	80032bc <HAL_SPI_ErrorCallback>
}
 80033ec:	e7fb      	b.n	80033e6 <SPI_CloseRx_ISR+0x50>

080033ee <SPI_RxISR_8BIT>:
{
 80033ee:	b510      	push	{r4, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80033f0:	6803      	ldr	r3, [r0, #0]
 80033f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80033f4:	7b1b      	ldrb	r3, [r3, #12]
 80033f6:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr++;
 80033f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033fa:	3301      	adds	r3, #1
 80033fc:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80033fe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003400:	3b01      	subs	r3, #1
 8003402:	b29b      	uxth	r3, r3
 8003404:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003406:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <SPI_RxISR_8BIT+0x22>
    SPI_CloseRx_ISR(hspi);
 800340c:	f7ff ffc3 	bl	8003396 <SPI_CloseRx_ISR>
}
 8003410:	bd10      	pop	{r4, pc}

08003412 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003412:	6803      	ldr	r3, [r0, #0]
{
 8003414:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800341a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800341c:	3302      	adds	r3, #2
 800341e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8003420:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003422:	3b01      	subs	r3, #1
 8003424:	b29b      	uxth	r3, r3
 8003426:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003428:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <SPI_RxISR_16BIT+0x20>
    SPI_CloseRx_ISR(hspi);
 800342e:	f7ff ffb2 	bl	8003396 <SPI_CloseRx_ISR>
}
 8003432:	bd10      	pop	{r4, pc}

08003434 <SPI_CloseRxTx_ISR>:
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <SPI_CloseRxTx_ISR+0x98>)
{
 8003436:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003438:	4925      	ldr	r1, [pc, #148]	; (80034d0 <SPI_CloseRxTx_ISR+0x9c>)
{
 800343a:	0004      	movs	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	f7fc fe81 	bl	8000144 <__udivsi3>
 8003442:	2364      	movs	r3, #100	; 0x64
 8003444:	4343      	muls	r3, r0
 8003446:	9300      	str	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8003448:	f7fe ff74 	bl	8002334 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800344e:	2020      	movs	r0, #32
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	4381      	bics	r1, r0
 8003456:	6059      	str	r1, [r3, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003458:	381e      	subs	r0, #30
    if (count == 0U)
 800345a:	9900      	ldr	r1, [sp, #0]
 800345c:	2900      	cmp	r1, #0
 800345e:	d125      	bne.n	80034ac <SPI_CloseRxTx_ISR+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003460:	2320      	movs	r3, #32
 8003462:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003464:	430b      	orrs	r3, r1
 8003466:	6563      	str	r3, [r4, #84]	; 0x54
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003468:	2164      	movs	r1, #100	; 0x64
 800346a:	0020      	movs	r0, r4
 800346c:	f7ff fd9a 	bl	8002fa4 <SPI_EndRxTxTransaction>
 8003470:	2800      	cmp	r0, #0
 8003472:	d003      	beq.n	800347c <SPI_CloseRxTx_ISR+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003474:	2320      	movs	r3, #32
 8003476:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003478:	4313      	orrs	r3, r2
 800347a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <SPI_CloseRxTx_ISR+0x5c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	9201      	str	r2, [sp, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	9b01      	ldr	r3, [sp, #4]
 8003490:	0023      	movs	r3, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003492:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003494:	3351      	adds	r3, #81	; 0x51
 8003496:	2a00      	cmp	r2, #0
 8003498:	d112      	bne.n	80034c0 <SPI_CloseRxTx_ISR+0x8c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800349a:	7819      	ldrb	r1, [r3, #0]
 800349c:	3201      	adds	r2, #1
        HAL_SPI_RxCpltCallback(hspi);
 800349e:	0020      	movs	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80034a0:	701a      	strb	r2, [r3, #0]
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80034a2:	2904      	cmp	r1, #4
 80034a4:	d109      	bne.n	80034ba <SPI_CloseRxTx_ISR+0x86>
        HAL_SPI_RxCpltCallback(hspi);
 80034a6:	f001 fbc7 	bl	8004c38 <HAL_SPI_RxCpltCallback>
}
 80034aa:	bd13      	pop	{r0, r1, r4, pc}
    count--;
 80034ac:	9900      	ldr	r1, [sp, #0]
 80034ae:	3901      	subs	r1, #1
 80034b0:	9100      	str	r1, [sp, #0]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	4201      	tst	r1, r0
 80034b6:	d0d0      	beq.n	800345a <SPI_CloseRxTx_ISR+0x26>
 80034b8:	e7d6      	b.n	8003468 <SPI_CloseRxTx_ISR+0x34>
        HAL_SPI_TxRxCpltCallback(hspi);
 80034ba:	f001 fbb9 	bl	8004c30 <HAL_SPI_TxRxCpltCallback>
 80034be:	e7f4      	b.n	80034aa <SPI_CloseRxTx_ISR+0x76>
      hspi->State = HAL_SPI_STATE_READY;
 80034c0:	2201      	movs	r2, #1
      HAL_SPI_ErrorCallback(hspi);
 80034c2:	0020      	movs	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 80034c4:	701a      	strb	r2, [r3, #0]
      HAL_SPI_ErrorCallback(hspi);
 80034c6:	f7ff fef9 	bl	80032bc <HAL_SPI_ErrorCallback>
}
 80034ca:	e7ee      	b.n	80034aa <SPI_CloseRxTx_ISR+0x76>
 80034cc:	20000000 	.word	0x20000000
 80034d0:	00005dc0 	.word	0x00005dc0

080034d4 <SPI_2linesTxISR_8BIT>:
{
 80034d4:	b510      	push	{r4, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034d8:	6802      	ldr	r2, [r0, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	7313      	strb	r3, [r2, #12]
  hspi->pTxBuffPtr++;
 80034de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034e0:	3301      	adds	r3, #1
 80034e2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80034e4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80034ec:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <SPI_2linesTxISR_8BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	6802      	ldr	r2, [r0, #0]
 80034f6:	6853      	ldr	r3, [r2, #4]
 80034f8:	438b      	bics	r3, r1
 80034fa:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80034fc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <SPI_2linesTxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003502:	f7ff ff97 	bl	8003434 <SPI_CloseRxTx_ISR>
}
 8003506:	bd10      	pop	{r4, pc}

08003508 <SPI_2linesRxISR_8BIT>:
{
 8003508:	b510      	push	{r4, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800350a:	6803      	ldr	r3, [r0, #0]
 800350c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800350e:	7b1b      	ldrb	r3, [r3, #12]
 8003510:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr++;
 8003512:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003514:	3301      	adds	r3, #1
 8003516:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8003518:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800351a:	3b01      	subs	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003520:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <SPI_2linesRxISR_8BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003526:	2160      	movs	r1, #96	; 0x60
 8003528:	6802      	ldr	r2, [r0, #0]
 800352a:	6853      	ldr	r3, [r2, #4]
 800352c:	438b      	bics	r3, r1
 800352e:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003530:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003536:	f7ff ff7d 	bl	8003434 <SPI_CloseRxTx_ISR>
}
 800353a:	bd10      	pop	{r4, pc}

0800353c <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	8819      	ldrh	r1, [r3, #0]
{
 8003542:	b510      	push	{r4, lr}
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003544:	3302      	adds	r3, #2
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003546:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800354a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800354c:	3b01      	subs	r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003552:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <SPI_2linesTxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	6853      	ldr	r3, [r2, #4]
 800355c:	438b      	bics	r3, r1
 800355e:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003560:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <SPI_2linesTxISR_16BIT+0x2e>
      SPI_CloseRxTx_ISR(hspi);
 8003566:	f7ff ff65 	bl	8003434 <SPI_CloseRxTx_ISR>
}
 800356a:	bd10      	pop	{r4, pc}

0800356c <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800356c:	6802      	ldr	r2, [r0, #0]
 800356e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003570:	68d1      	ldr	r1, [r2, #12]
{
 8003572:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003574:	8019      	strh	r1, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003576:	3302      	adds	r3, #2
 8003578:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 800357a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003582:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <SPI_2linesRxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	6853      	ldr	r3, [r2, #4]
 800358c:	438b      	bics	r3, r1
 800358e:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003590:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <SPI_2linesRxISR_16BIT+0x2e>
      SPI_CloseRxTx_ISR(hspi);
 8003596:	f7ff ff4d 	bl	8003434 <SPI_CloseRxTx_ISR>
}
 800359a:	bd10      	pop	{r4, pc}

0800359c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800359c:	6803      	ldr	r3, [r0, #0]
{
 800359e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a0:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80035a2:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80035a4:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035a6:	2501      	movs	r5, #1
 80035a8:	0991      	lsrs	r1, r2, #6
 80035aa:	000f      	movs	r7, r1
{
 80035ac:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035ae:	402f      	ands	r7, r5
 80035b0:	4229      	tst	r1, r5
 80035b2:	d109      	bne.n	80035c8 <HAL_SPI_IRQHandler+0x2c>
 80035b4:	422a      	tst	r2, r5
 80035b6:	d007      	beq.n	80035c8 <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035b8:	0986      	lsrs	r6, r0, #6
 80035ba:	422e      	tst	r6, r5
 80035bc:	d004      	beq.n	80035c8 <HAL_SPI_IRQHandler+0x2c>
    hspi->RxISR(hspi);
 80035be:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hspi->TxISR(hspi);
 80035c0:	0020      	movs	r0, r4
 80035c2:	4798      	blx	r3
}
 80035c4:	b005      	add	sp, #20
 80035c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80035c8:	2501      	movs	r5, #1
 80035ca:	0796      	lsls	r6, r2, #30
 80035cc:	d504      	bpl.n	80035d8 <HAL_SPI_IRQHandler+0x3c>
 80035ce:	09c6      	lsrs	r6, r0, #7
 80035d0:	422e      	tst	r6, r5
 80035d2:	d001      	beq.n	80035d8 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80035d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035d6:	e7f3      	b.n	80035c0 <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035d8:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035da:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035dc:	4331      	orrs	r1, r6
 80035de:	0a12      	lsrs	r2, r2, #8
 80035e0:	402a      	ands	r2, r5
 80035e2:	4029      	ands	r1, r5
 80035e4:	4311      	orrs	r1, r2
 80035e6:	d0ed      	beq.n	80035c4 <HAL_SPI_IRQHandler+0x28>
 80035e8:	0941      	lsrs	r1, r0, #5
 80035ea:	4229      	tst	r1, r5
 80035ec:	d0ea      	beq.n	80035c4 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035ee:	2f00      	cmp	r7, #0
 80035f0:	d00f      	beq.n	8003612 <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80035f2:	0021      	movs	r1, r4
 80035f4:	3151      	adds	r1, #81	; 0x51
 80035f6:	7809      	ldrb	r1, [r1, #0]
 80035f8:	2903      	cmp	r1, #3
 80035fa:	d050      	beq.n	800369e <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80035fc:	2104      	movs	r1, #4
 80035fe:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003600:	4329      	orrs	r1, r5
 8003602:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003604:	2100      	movs	r1, #0
 8003606:	9100      	str	r1, [sp, #0]
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	9100      	str	r1, [sp, #0]
 800360c:	6899      	ldr	r1, [r3, #8]
 800360e:	9100      	str	r1, [sp, #0]
 8003610:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003612:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003614:	420e      	tst	r6, r1
 8003616:	d00b      	beq.n	8003630 <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003618:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800361a:	4329      	orrs	r1, r5
 800361c:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800361e:	2100      	movs	r1, #0
 8003620:	2540      	movs	r5, #64	; 0x40
 8003622:	9102      	str	r1, [sp, #8]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	9102      	str	r1, [sp, #8]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	43a9      	bics	r1, r5
 800362c:	6019      	str	r1, [r3, #0]
 800362e:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003630:	2a00      	cmp	r2, #0
 8003632:	d008      	beq.n	8003646 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003634:	2208      	movs	r2, #8
 8003636:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003638:	430a      	orrs	r2, r1
 800363a:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800363c:	2200      	movs	r2, #0
 800363e:	9203      	str	r2, [sp, #12]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	9203      	str	r2, [sp, #12]
 8003644:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003646:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003648:	2a00      	cmp	r2, #0
 800364a:	d0bb      	beq.n	80035c4 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800364c:	21e0      	movs	r1, #224	; 0xe0
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	438a      	bics	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003654:	0022      	movs	r2, r4
 8003656:	39df      	subs	r1, #223	; 0xdf
 8003658:	3251      	adds	r2, #81	; 0x51
 800365a:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800365c:	3102      	adds	r1, #2
 800365e:	4208      	tst	r0, r1
 8003660:	d025      	beq.n	80036ae <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003662:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003664:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003666:	438a      	bics	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800366a:	2800      	cmp	r0, #0
 800366c:	d009      	beq.n	8003682 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_SPI_IRQHandler+0x11c>)
 8003670:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003672:	f7fe febb 	bl	80023ec <HAL_DMA_Abort_IT>
 8003676:	2800      	cmp	r0, #0
 8003678:	d003      	beq.n	8003682 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800367e:	4313      	orrs	r3, r2
 8003680:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003682:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003684:	2800      	cmp	r0, #0
 8003686:	d09d      	beq.n	80035c4 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_SPI_IRQHandler+0x11c>)
 800368a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800368c:	f7fe feae 	bl	80023ec <HAL_DMA_Abort_IT>
 8003690:	2800      	cmp	r0, #0
 8003692:	d097      	beq.n	80035c4 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003694:	2340      	movs	r3, #64	; 0x40
 8003696:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003698:	4313      	orrs	r3, r2
 800369a:	6563      	str	r3, [r4, #84]	; 0x54
 800369c:	e792      	b.n	80035c4 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369e:	2200      	movs	r2, #0
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	9201      	str	r2, [sp, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	9b01      	ldr	r3, [sp, #4]
        return;
 80036ac:	e78a      	b.n	80035c4 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 80036ae:	0020      	movs	r0, r4
 80036b0:	f7ff fe04 	bl	80032bc <HAL_SPI_ErrorCallback>
 80036b4:	e786      	b.n	80035c4 <HAL_SPI_IRQHandler+0x28>
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	080036bd 	.word	0x080036bd

080036bc <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 80036bc:	2300      	movs	r3, #0
{
 80036be:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80036c2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80036c4:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80036c6:	f7ff fdf9 	bl	80032bc <HAL_SPI_ErrorCallback>
}
 80036ca:	bd10      	pop	{r4, pc}

080036cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	2280      	movs	r2, #128	; 0x80
{
 80036ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80036d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d2:	05d2      	lsls	r2, r2, #23
 80036d4:	4290      	cmp	r0, r2
 80036d6:	d002      	beq.n	80036de <TIM_Base_SetConfig+0x12>
 80036d8:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <TIM_Base_SetConfig+0x44>)
 80036da:	42a0      	cmp	r0, r4
 80036dc:	d10c      	bne.n	80036f8 <TIM_Base_SetConfig+0x2c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036de:	2470      	movs	r4, #112	; 0x70
 80036e0:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80036e2:	684c      	ldr	r4, [r1, #4]
 80036e4:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	4290      	cmp	r0, r2
 80036e8:	d002      	beq.n	80036f0 <TIM_Base_SetConfig+0x24>
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <TIM_Base_SetConfig+0x44>)
 80036ec:	4290      	cmp	r0, r2
 80036ee:	d103      	bne.n	80036f8 <TIM_Base_SetConfig+0x2c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f0:	4a08      	ldr	r2, [pc, #32]	; (8003714 <TIM_Base_SetConfig+0x48>)
 80036f2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f4:	68ca      	ldr	r2, [r1, #12]
 80036f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	4393      	bics	r3, r2
 80036fc:	690a      	ldr	r2, [r1, #16]
 80036fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003700:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003702:	688b      	ldr	r3, [r1, #8]
 8003704:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003706:	680b      	ldr	r3, [r1, #0]
 8003708:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370a:	2301      	movs	r3, #1
 800370c:	6143      	str	r3, [r0, #20]
}
 800370e:	bd10      	pop	{r4, pc}
 8003710:	40010800 	.word	0x40010800
 8003714:	fffffcff 	.word	0xfffffcff

08003718 <HAL_TIM_Base_MspInit>:
}
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_Base_Init>:
{
 800371a:	b570      	push	{r4, r5, r6, lr}
 800371c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800371e:	2001      	movs	r0, #1
  if (htim == NULL)
 8003720:	2c00      	cmp	r4, #0
 8003722:	d01d      	beq.n	8003760 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003724:	0025      	movs	r5, r4
 8003726:	3539      	adds	r5, #57	; 0x39
 8003728:	782b      	ldrb	r3, [r5, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003730:	0023      	movs	r3, r4
 8003732:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003734:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003736:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003738:	f7ff ffee 	bl	8003718 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	2302      	movs	r3, #2
 800373e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	1d21      	adds	r1, r4, #4
 8003744:	f7ff ffc2 	bl	80036cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	0022      	movs	r2, r4
 800374a:	2301      	movs	r3, #1
  return HAL_OK;
 800374c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374e:	323e      	adds	r2, #62	; 0x3e
 8003750:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	343d      	adds	r4, #61	; 0x3d
 8003754:	3a04      	subs	r2, #4
 8003756:	7013      	strb	r3, [r2, #0]
 8003758:	7053      	strb	r3, [r2, #1]
 800375a:	7093      	strb	r3, [r2, #2]
 800375c:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800375e:	702b      	strb	r3, [r5, #0]
}
 8003760:	bd70      	pop	{r4, r5, r6, pc}
	...

08003764 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003764:	0002      	movs	r2, r0
{
 8003766:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800376a:	3239      	adds	r2, #57	; 0x39
 800376c:	7811      	ldrb	r1, [r2, #0]
 800376e:	4281      	cmp	r1, r0
 8003770:	d116      	bne.n	80037a0 <HAL_TIM_Base_Start_IT+0x3c>
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	2102      	movs	r1, #2
 8003774:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	4302      	orrs	r2, r0
 800377c:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	05d2      	lsls	r2, r2, #23
 8003782:	4293      	cmp	r3, r2
 8003784:	d002      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x28>
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_TIM_Base_Start_IT+0x48>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10a      	bne.n	80037a2 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378c:	2107      	movs	r1, #7
 800378e:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003790:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003792:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	2a06      	cmp	r2, #6
 8003796:	d003      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x3c>
      __HAL_TIM_ENABLE(htim);
 8003798:	2201      	movs	r2, #1
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4310      	orrs	r0, r2
 80037a6:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e7f9      	b.n	80037a0 <HAL_TIM_Base_Start_IT+0x3c>
 80037ac:	40010800 	.word	0x40010800

080037b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_IC_CaptureCallback>:
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_TriggerCallback>:
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	2202      	movs	r2, #2
 80037ba:	6803      	ldr	r3, [r0, #0]
{
 80037bc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037be:	6919      	ldr	r1, [r3, #16]
{
 80037c0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c2:	4211      	tst	r1, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	4211      	tst	r1, r2
 80037ca:	d00a      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037cc:	3a05      	subs	r2, #5
 80037ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d0:	3204      	adds	r2, #4
 80037d2:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	079b      	lsls	r3, r3, #30
 80037d8:	d05e      	beq.n	8003898 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80037da:	f7ff ffea 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	2300      	movs	r3, #0
 80037e0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e2:	2204      	movs	r2, #4
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	6919      	ldr	r1, [r3, #16]
 80037e8:	4211      	tst	r1, r2
 80037ea:	d010      	beq.n	800380e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	4211      	tst	r1, r2
 80037f0:	d00d      	beq.n	800380e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f2:	3a09      	subs	r2, #9
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	3207      	adds	r2, #7
 80037f8:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	23c0      	movs	r3, #192	; 0xc0
 80037fe:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003802:	421a      	tst	r2, r3
 8003804:	d04e      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	f7ff ffd4 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	2300      	movs	r3, #0
 800380c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800380e:	2208      	movs	r2, #8
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	6919      	ldr	r1, [r3, #16]
 8003814:	4211      	tst	r1, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003818:	68d9      	ldr	r1, [r3, #12]
 800381a:	4211      	tst	r1, r2
 800381c:	d00b      	beq.n	8003836 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381e:	3a11      	subs	r2, #17
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003822:	320d      	adds	r2, #13
 8003824:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003826:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382a:	079b      	lsls	r3, r3, #30
 800382c:	d040      	beq.n	80038b0 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	f7ff ffc0 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	2300      	movs	r3, #0
 8003834:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003836:	2210      	movs	r2, #16
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	6919      	ldr	r1, [r3, #16]
 800383c:	4211      	tst	r1, r2
 800383e:	d010      	beq.n	8003862 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003840:	68d9      	ldr	r1, [r3, #12]
 8003842:	4211      	tst	r1, r2
 8003844:	d00d      	beq.n	8003862 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003846:	3a21      	subs	r2, #33	; 0x21
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	3219      	adds	r2, #25
 800384c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	23c0      	movs	r3, #192	; 0xc0
 8003852:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003854:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003856:	421a      	tst	r2, r3
 8003858:	d030      	beq.n	80038bc <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	f7ff ffaa 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	2300      	movs	r3, #0
 8003860:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003862:	2201      	movs	r2, #1
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6919      	ldr	r1, [r3, #16]
 8003868:	4211      	tst	r1, r2
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	4211      	tst	r1, r2
 8003870:	d004      	beq.n	800387c <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003872:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8003874:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003876:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003878:	f7fe fb32 	bl	8001ee0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	6919      	ldr	r1, [r3, #16]
 8003882:	4211      	tst	r1, r2
 8003884:	d007      	beq.n	8003896 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	4211      	tst	r1, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388c:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 800388e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003890:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003892:	f7ff ff90 	bl	80037b6 <HAL_TIM_TriggerCallback>
}
 8003896:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003898:	f7ff ff8a 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	0020      	movs	r0, r4
 800389e:	f7ff ff89 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038a2:	e79c      	b.n	80037de <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a4:	f7ff ff84 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	0020      	movs	r0, r4
 80038aa:	f7ff ff83 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038ae:	e7ac      	b.n	800380a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b0:	f7ff ff7e 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	0020      	movs	r0, r4
 80038b6:	f7ff ff7d 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038ba:	e7ba      	b.n	8003832 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038bc:	f7ff ff78 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	0020      	movs	r0, r4
 80038c2:	f7ff ff77 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038c6:	e7ca      	b.n	800385e <HAL_TIM_IRQHandler+0xa6>

080038c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ca:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	2201      	movs	r2, #1
 80038d0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d4:	6801      	ldr	r1, [r0, #0]
 80038d6:	4d12      	ldr	r5, [pc, #72]	; (8003920 <UART_EndRxTransfer+0x58>)
 80038d8:	680b      	ldr	r3, [r1, #0]
 80038da:	402b      	ands	r3, r5
 80038dc:	600b      	str	r3, [r1, #0]
 80038de:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	6801      	ldr	r1, [r0, #0]
 80038ec:	688b      	ldr	r3, [r1, #8]
 80038ee:	4393      	bics	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
 80038f2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10a      	bne.n	8003912 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003900:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	2410      	movs	r4, #16
 8003906:	6802      	ldr	r2, [r0, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	43a3      	bics	r3, r4
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003912:	2220      	movs	r2, #32
 8003914:	1d03      	adds	r3, r0, #4
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	2300      	movs	r3, #0
 800391a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800391c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800391e:	bd30      	pop	{r4, r5, pc}
 8003920:	fffffedf 	.word	0xfffffedf

08003924 <HAL_UART_TxCpltCallback>:
 8003924:	4770      	bx	lr

08003926 <HAL_UART_ErrorCallback>:
 8003926:	4770      	bx	lr

08003928 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003928:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	0002      	movs	r2, r0
{
 800392e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003930:	325a      	adds	r2, #90	; 0x5a
 8003932:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003934:	3a08      	subs	r2, #8
 8003936:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003938:	f7ff fff5 	bl	8003926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393c:	bd10      	pop	{r4, pc}

0800393e <HAL_UARTEx_RxEventCallback>:
}
 800393e:	4770      	bx	lr

08003940 <HAL_UART_IRQHandler>:
{
 8003940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003942:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003944:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003946:	4bab      	ldr	r3, [pc, #684]	; (8003bf4 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003948:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800394a:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800394c:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 800394e:	4219      	tst	r1, r3
 8003950:	d10b      	bne.n	800396a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003952:	2320      	movs	r3, #32
 8003954:	4219      	tst	r1, r3
 8003956:	d100      	bne.n	800395a <HAL_UART_IRQHandler+0x1a>
 8003958:	e080      	b.n	8003a5c <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800395a:	421e      	tst	r6, r3
 800395c:	d100      	bne.n	8003960 <HAL_UART_IRQHandler+0x20>
 800395e:	e07d      	b.n	8003a5c <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8003960:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 8003962:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003964:	2b00      	cmp	r3, #0
 8003966:	d16f      	bne.n	8003a48 <HAL_UART_IRQHandler+0x108>
 8003968:	e06f      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800396a:	2301      	movs	r3, #1
 800396c:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800396e:	4aa2      	ldr	r2, [pc, #648]	; (8003bf8 <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003970:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003972:	4032      	ands	r2, r6
 8003974:	433a      	orrs	r2, r7
 8003976:	d100      	bne.n	800397a <HAL_UART_IRQHandler+0x3a>
 8003978:	e070      	b.n	8003a5c <HAL_UART_IRQHandler+0x11c>
 800397a:	0025      	movs	r5, r4
 800397c:	3508      	adds	r5, #8
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800397e:	4219      	tst	r1, r3
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0x4e>
 8003982:	05f2      	lsls	r2, r6, #23
 8003984:	d503      	bpl.n	800398e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003986:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003988:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800398a:	4313      	orrs	r3, r2
 800398c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398e:	2302      	movs	r3, #2
 8003990:	4219      	tst	r1, r3
 8003992:	d006      	beq.n	80039a2 <HAL_UART_IRQHandler+0x62>
 8003994:	2f00      	cmp	r7, #0
 8003996:	d004      	beq.n	80039a2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003998:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800399c:	18db      	adds	r3, r3, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a2:	2304      	movs	r3, #4
 80039a4:	4219      	tst	r1, r3
 80039a6:	d006      	beq.n	80039b6 <HAL_UART_IRQHandler+0x76>
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d004      	beq.n	80039b6 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039ac:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ae:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80039b0:	3b02      	subs	r3, #2
 80039b2:	4313      	orrs	r3, r2
 80039b4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039b6:	2308      	movs	r3, #8
 80039b8:	4219      	tst	r1, r3
 80039ba:	d007      	beq.n	80039cc <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039bc:	2220      	movs	r2, #32
 80039be:	4032      	ands	r2, r6
 80039c0:	433a      	orrs	r2, r7
 80039c2:	d003      	beq.n	80039cc <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c4:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80039c8:	4313      	orrs	r3, r2
 80039ca:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	4219      	tst	r1, r3
 80039d2:	d006      	beq.n	80039e2 <HAL_UART_IRQHandler+0xa2>
 80039d4:	0172      	lsls	r2, r6, #5
 80039d6:	d504      	bpl.n	80039e2 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039da:	2320      	movs	r3, #32
 80039dc:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80039de:	4313      	orrs	r3, r2
 80039e0:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d030      	beq.n	8003a4a <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039e8:	2320      	movs	r3, #32
 80039ea:	4219      	tst	r1, r3
 80039ec:	d006      	beq.n	80039fc <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039ee:	421e      	tst	r6, r3
 80039f0:	d004      	beq.n	80039fc <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 80039f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 80039f8:	0020      	movs	r0, r4
 80039fa:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fc:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80039fe:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a00:	2740      	movs	r7, #64	; 0x40
 8003a02:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a04:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a06:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a08:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003a0a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a0c:	431e      	orrs	r6, r3
 8003a0e:	d021      	beq.n	8003a54 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8003a10:	f7ff ff5a 	bl	80038c8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	423b      	tst	r3, r7
 8003a1a:	d017      	beq.n	8003a4c <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	2301      	movs	r3, #1
 8003a22:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	43bb      	bics	r3, r7
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003a32:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a38:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_UART_IRQHandler+0x2bc>)
 8003a3a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3c:	f7fe fcd6 	bl	80023ec <HAL_DMA_Abort_IT>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a44:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a48:	4798      	blx	r3
}
 8003a4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f7ff ff6a 	bl	8003926 <HAL_UART_ErrorCallback>
 8003a52:	e7fa      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8003a54:	f7ff ff67 	bl	8003926 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	67ee      	str	r6, [r5, #124]	; 0x7c
 8003a5a:	e7f6      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d000      	beq.n	8003a64 <HAL_UART_IRQHandler+0x124>
 8003a62:	e09a      	b.n	8003b9a <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a64:	2210      	movs	r2, #16
 8003a66:	4211      	tst	r1, r2
 8003a68:	d100      	bne.n	8003a6c <HAL_UART_IRQHandler+0x12c>
 8003a6a:	e096      	b.n	8003b9a <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a6c:	4216      	tst	r6, r2
 8003a6e:	d100      	bne.n	8003a72 <HAL_UART_IRQHandler+0x132>
 8003a70:	e093      	b.n	8003b9a <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a72:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	6881      	ldr	r1, [r0, #8]
 8003a76:	2640      	movs	r6, #64	; 0x40
 8003a78:	000f      	movs	r7, r1
 8003a7a:	4037      	ands	r7, r6
 8003a7c:	4231      	tst	r1, r6
 8003a7e:	d053      	beq.n	8003b28 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a80:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003a82:	6808      	ldr	r0, [r1, #0]
 8003a84:	6841      	ldr	r1, [r0, #4]
 8003a86:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003a88:	2900      	cmp	r1, #0
 8003a8a:	d0de      	beq.n	8003a4a <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8c:	0025      	movs	r5, r4
 8003a8e:	3558      	adds	r5, #88	; 0x58
 8003a90:	882d      	ldrh	r5, [r5, #0]
 8003a92:	428d      	cmp	r5, r1
 8003a94:	d9d9      	bls.n	8003a4a <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8003a96:	0025      	movs	r5, r4
 8003a98:	355a      	adds	r5, #90	; 0x5a
 8003a9a:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a9c:	6801      	ldr	r1, [r0, #0]
 8003a9e:	2020      	movs	r0, #32
 8003aa0:	000d      	movs	r5, r1
 8003aa2:	4005      	ands	r5, r0
 8003aa4:	9501      	str	r5, [sp, #4]
 8003aa6:	4201      	tst	r1, r0
 8003aa8:	d130      	bne.n	8003b0c <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_UART_IRQHandler+0x2c0>)
 8003ab6:	6829      	ldr	r1, [r5, #0]
 8003ab8:	4011      	ands	r1, r2
 8003aba:	6029      	str	r1, [r5, #0]
 8003abc:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	6825      	ldr	r5, [r4, #0]
 8003aca:	68a9      	ldr	r1, [r5, #8]
 8003acc:	4399      	bics	r1, r3
 8003ace:	60a9      	str	r1, [r5, #8]
 8003ad0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003adc:	0021      	movs	r1, r4
 8003ade:	c980      	ldmia	r1!, {r7}
 8003ae0:	68bd      	ldr	r5, [r7, #8]
 8003ae2:	43b5      	bics	r5, r6
 8003ae4:	60bd      	str	r5, [r7, #8]
 8003ae6:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8003aec:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af8:	2210      	movs	r2, #16
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	4393      	bics	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
 8003b02:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b06:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003b08:	f7fe fc50 	bl	80023ac <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b0c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b0e:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b10:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b12:	0023      	movs	r3, r4
 8003b14:	3258      	adds	r2, #88	; 0x58
 8003b16:	335a      	adds	r3, #90	; 0x5a
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	8811      	ldrh	r1, [r2, #0]
 8003b1c:	1ac9      	subs	r1, r1, r3
 8003b1e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7ff ff0c 	bl	800393e <HAL_UARTEx_RxEventCallback>
 8003b26:	e790      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b28:	0025      	movs	r5, r4
 8003b2a:	355a      	adds	r5, #90	; 0x5a
 8003b2c:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8003b2e:	8829      	ldrh	r1, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b30:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8003b32:	2900      	cmp	r1, #0
 8003b34:	d100      	bne.n	8003b38 <HAL_UART_IRQHandler+0x1f8>
 8003b36:	e788      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b38:	0021      	movs	r1, r4
 8003b3a:	3158      	adds	r1, #88	; 0x58
 8003b3c:	8809      	ldrh	r1, [r1, #0]
 8003b3e:	1a09      	subs	r1, r1, r0
 8003b40:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003b42:	2900      	cmp	r1, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_UART_IRQHandler+0x208>
 8003b46:	e780      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b50:	6825      	ldr	r5, [r4, #0]
 8003b52:	4a2c      	ldr	r2, [pc, #176]	; (8003c04 <HAL_UART_IRQHandler+0x2c4>)
 8003b54:	6828      	ldr	r0, [r5, #0]
 8003b56:	4010      	ands	r0, r2
 8003b58:	6028      	str	r0, [r5, #0]
 8003b5a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b66:	0020      	movs	r0, r4
 8003b68:	c840      	ldmia	r0!, {r6}
 8003b6a:	68b5      	ldr	r5, [r6, #8]
 8003b6c:	439d      	bics	r5, r3
 8003b6e:	60b5      	str	r5, [r6, #8]
 8003b70:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8003b74:	2520      	movs	r5, #32
 8003b76:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8003b7a:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b80:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	3232      	adds	r2, #50	; 0x32
 8003b88:	6803      	ldr	r3, [r0, #0]
 8003b8a:	32ff      	adds	r2, #255	; 0xff
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	6003      	str	r3, [r0, #0]
 8003b90:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b94:	2302      	movs	r3, #2
 8003b96:	6663      	str	r3, [r4, #100]	; 0x64
 8003b98:	e7c2      	b.n	8003b20 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	035b      	lsls	r3, r3, #13
 8003b9e:	4219      	tst	r1, r3
 8003ba0:	d006      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x270>
 8003ba2:	026a      	lsls	r2, r5, #9
 8003ba4:	d504      	bpl.n	8003bb0 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ba6:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003ba8:	0020      	movs	r0, r4
 8003baa:	f000 fa67 	bl	800407c <HAL_UARTEx_WakeupCallback>
    return;
 8003bae:	e74c      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	4219      	tst	r1, r3
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bb6:	421e      	tst	r6, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 8003bba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003bbc:	e6d1      	b.n	8003962 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	4211      	tst	r1, r2
 8003bc2:	d100      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x286>
 8003bc4:	e741      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
 8003bc6:	4216      	tst	r6, r2
 8003bc8:	d100      	bne.n	8003bcc <HAL_UART_IRQHandler+0x28c>
 8003bca:	e73e      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bcc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	4393      	bics	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
 8003bde:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be2:	2320      	movs	r3, #32
 8003be4:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003be6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be8:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003bea:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8003bec:	f7ff fe9a 	bl	8003924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf0:	e72b      	b.n	8003a4a <HAL_UART_IRQHandler+0x10a>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	0000080f 	.word	0x0000080f
 8003bf8:	04000120 	.word	0x04000120
 8003bfc:	08003929 	.word	0x08003929
 8003c00:	fffffeff 	.word	0xfffffeff
 8003c04:	fffffedf 	.word	0xfffffedf

08003c08 <UART_SetConfig>:
{
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c0c:	6925      	ldr	r5, [r4, #16]
 8003c0e:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c10:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c12:	4329      	orrs	r1, r5
 8003c14:	6965      	ldr	r5, [r4, #20]
 8003c16:	69c3      	ldr	r3, [r0, #28]
 8003c18:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c1a:	6810      	ldr	r0, [r2, #0]
 8003c1c:	4d6a      	ldr	r5, [pc, #424]	; (8003dc8 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c1e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	4028      	ands	r0, r5
 8003c22:	4301      	orrs	r1, r0
 8003c24:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c26:	6851      	ldr	r1, [r2, #4]
 8003c28:	4868      	ldr	r0, [pc, #416]	; (8003dcc <UART_SetConfig+0x1c4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2a:	4d69      	ldr	r5, [pc, #420]	; (8003dd0 <UART_SetConfig+0x1c8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2c:	4001      	ands	r1, r0
 8003c2e:	68e0      	ldr	r0, [r4, #12]
 8003c30:	4301      	orrs	r1, r0
 8003c32:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c34:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c36:	42aa      	cmp	r2, r5
 8003c38:	d001      	beq.n	8003c3e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3e:	6891      	ldr	r1, [r2, #8]
 8003c40:	4e64      	ldr	r6, [pc, #400]	; (8003dd4 <UART_SetConfig+0x1cc>)
 8003c42:	4031      	ands	r1, r6
 8003c44:	4301      	orrs	r1, r0
 8003c46:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c48:	4963      	ldr	r1, [pc, #396]	; (8003dd8 <UART_SetConfig+0x1d0>)
 8003c4a:	428a      	cmp	r2, r1
 8003c4c:	d113      	bne.n	8003c76 <UART_SetConfig+0x6e>
 8003c4e:	200c      	movs	r0, #12
 8003c50:	4a62      	ldr	r2, [pc, #392]	; (8003ddc <UART_SetConfig+0x1d4>)
 8003c52:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003c54:	4001      	ands	r1, r0
 8003c56:	4862      	ldr	r0, [pc, #392]	; (8003de0 <UART_SetConfig+0x1d8>)
 8003c58:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	0209      	lsls	r1, r1, #8
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d000      	beq.n	8003c64 <UART_SetConfig+0x5c>
 8003c62:	e07f      	b.n	8003d64 <UART_SetConfig+0x15c>
    switch (clocksource)
 8003c64:	2808      	cmp	r0, #8
 8003c66:	d819      	bhi.n	8003c9c <UART_SetConfig+0x94>
 8003c68:	f7fc fa58 	bl	800011c <__gnu_thumb1_case_uqi>
 8003c6c:	18595651 	.word	0x18595651
 8003c70:	18181879 	.word	0x18181879
 8003c74:	63          	.byte	0x63
 8003c75:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c76:	42aa      	cmp	r2, r5
 8003c78:	d000      	beq.n	8003c7c <UART_SetConfig+0x74>
 8003c7a:	e09e      	b.n	8003dba <UART_SetConfig+0x1b2>
 8003c7c:	21c0      	movs	r1, #192	; 0xc0
 8003c7e:	2080      	movs	r0, #128	; 0x80
 8003c80:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <UART_SetConfig+0x1d4>)
 8003c82:	0109      	lsls	r1, r1, #4
 8003c84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c86:	0100      	lsls	r0, r0, #4
 8003c88:	400b      	ands	r3, r1
 8003c8a:	4283      	cmp	r3, r0
 8003c8c:	d016      	beq.n	8003cbc <UART_SetConfig+0xb4>
 8003c8e:	d807      	bhi.n	8003ca0 <UART_SetConfig+0x98>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <UART_SetConfig+0xa2>
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	00d2      	lsls	r2, r2, #3
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d035      	beq.n	8003d08 <UART_SetConfig+0x100>
    switch (clocksource)
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	e009      	b.n	8003cb4 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d1fb      	bne.n	8003c9c <UART_SetConfig+0x94>
 8003ca4:	2080      	movs	r0, #128	; 0x80
 8003ca6:	0200      	lsls	r0, r0, #8
 8003ca8:	e012      	b.n	8003cd0 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7fe fff3 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d10e      	bne.n	8003cd0 <UART_SetConfig+0xc8>
 8003cb2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003cb8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	6810      	ldr	r0, [r2, #0]
 8003cc0:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cc2:	4243      	negs	r3, r0
 8003cc4:	4158      	adcs	r0, r3
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <UART_SetConfig+0x1dc>)
 8003cc8:	4240      	negs	r0, r0
 8003cca:	4018      	ands	r0, r3
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <UART_SetConfig+0x1e0>)
 8003cce:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	435a      	muls	r2, r3
 8003cd6:	4282      	cmp	r2, r0
 8003cd8:	d8e0      	bhi.n	8003c9c <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cda:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cdc:	4282      	cmp	r2, r0
 8003cde:	d3dd      	bcc.n	8003c9c <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ce0:	2700      	movs	r7, #0
 8003ce2:	0e02      	lsrs	r2, r0, #24
 8003ce4:	0201      	lsls	r1, r0, #8
 8003ce6:	085e      	lsrs	r6, r3, #1
 8003ce8:	1989      	adds	r1, r1, r6
 8003cea:	417a      	adcs	r2, r7
 8003cec:	0008      	movs	r0, r1
 8003cee:	0011      	movs	r1, r2
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	003b      	movs	r3, r7
 8003cf4:	f7fc fad6 	bl	80002a4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf8:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <UART_SetConfig+0x1e4>)
 8003cfa:	18c2      	adds	r2, r0, r3
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <UART_SetConfig+0x1e8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d8cc      	bhi.n	8003c9c <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	60d8      	str	r0, [r3, #12]
 8003d06:	e7d4      	b.n	8003cb2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d08:	f7fe fc60 	bl	80025cc <HAL_RCC_GetSysClockFreq>
        break;
 8003d0c:	e7cf      	b.n	8003cae <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7fe ffc1 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003d14:	d0cd      	beq.n	8003cb2 <UART_SetConfig+0xaa>
 8003d16:	e00c      	b.n	8003d32 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe ffcc 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	e7f9      	b.n	8003d12 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d1e:	2310      	movs	r3, #16
 8003d20:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d22:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <UART_SetConfig+0x1e0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d24:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d26:	4243      	negs	r3, r0
 8003d28:	4158      	adcs	r0, r3
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <UART_SetConfig+0x1dc>)
 8003d2c:	4240      	negs	r0, r0
 8003d2e:	4003      	ands	r3, r0
 8003d30:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d32:	0058      	lsls	r0, r3, #1
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	6861      	ldr	r1, [r4, #4]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	18c0      	adds	r0, r0, r3
 8003d3c:	f7fc fa02 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d40:	0002      	movs	r2, r0
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <UART_SetConfig+0x1ec>)
 8003d44:	3a10      	subs	r2, #16
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d8a8      	bhi.n	8003c9c <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d4a:	230f      	movs	r3, #15
 8003d4c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d50:	439a      	bics	r2, r3
 8003d52:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d54:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003d56:	6822      	ldr	r2, [r4, #0]
 8003d58:	4318      	orrs	r0, r3
 8003d5a:	60d0      	str	r0, [r2, #12]
 8003d5c:	e7a9      	b.n	8003cb2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7fe fc35 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003d62:	e7d6      	b.n	8003d12 <UART_SetConfig+0x10a>
    switch (clocksource)
 8003d64:	2808      	cmp	r0, #8
 8003d66:	d899      	bhi.n	8003c9c <UART_SetConfig+0x94>
 8003d68:	f7fc f9ce 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003d6c:	980d0a05 	.word	0x980d0a05
 8003d70:	98989821 	.word	0x98989821
 8003d74:	24          	.byte	0x24
 8003d75:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d76:	f7fe ff8d 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d099      	beq.n	8003cb2 <UART_SetConfig+0xaa>
 8003d7e:	e00c      	b.n	8003d9a <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe ff98 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
        break;
 8003d84:	e7f9      	b.n	8003d7a <UART_SetConfig+0x172>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d86:	2310      	movs	r3, #16
 8003d88:	6810      	ldr	r0, [r2, #0]
 8003d8a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d8c:	4243      	negs	r3, r0
 8003d8e:	4158      	adcs	r0, r3
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <UART_SetConfig+0x1dc>)
 8003d92:	4240      	negs	r0, r0
 8003d94:	4018      	ands	r0, r3
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <UART_SetConfig+0x1e0>)
 8003d98:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d9a:	6863      	ldr	r3, [r4, #4]
 8003d9c:	6861      	ldr	r1, [r4, #4]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	1818      	adds	r0, r3, r0
 8003da2:	f7fc f9cf 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da6:	0002      	movs	r2, r0
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <UART_SetConfig+0x1ec>)
 8003daa:	3a10      	subs	r2, #16
 8003dac:	e7a7      	b.n	8003cfe <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 8003dae:	f7fe fc0d 	bl	80025cc <HAL_RCC_GetSysClockFreq>
        break;
 8003db2:	e7e2      	b.n	8003d7a <UART_SetConfig+0x172>
    switch (clocksource)
 8003db4:	2080      	movs	r0, #128	; 0x80
 8003db6:	0200      	lsls	r0, r0, #8
 8003db8:	e7ef      	b.n	8003d9a <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	0212      	lsls	r2, r2, #8
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <UART_SetConfig+0x1be>
 8003dc4:	e776      	b.n	8003cb4 <UART_SetConfig+0xac>
 8003dc6:	e769      	b.n	8003c9c <UART_SetConfig+0x94>
 8003dc8:	efff69f3 	.word	0xefff69f3
 8003dcc:	ffffcfff 	.word	0xffffcfff
 8003dd0:	40004800 	.word	0x40004800
 8003dd4:	fffff4ff 	.word	0xfffff4ff
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	080064c9 	.word	0x080064c9
 8003de4:	00b71b00 	.word	0x00b71b00
 8003de8:	003d0900 	.word	0x003d0900
 8003dec:	fffffd00 	.word	0xfffffd00
 8003df0:	000ffcff 	.word	0x000ffcff
 8003df4:	0000ffef 	.word	0x0000ffef

08003df8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003dfa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dfc:	07da      	lsls	r2, r3, #31
 8003dfe:	d506      	bpl.n	8003e0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e00:	6801      	ldr	r1, [r0, #0]
 8003e02:	4c28      	ldr	r4, [pc, #160]	; (8003ea4 <UART_AdvFeatureConfig+0xac>)
 8003e04:	684a      	ldr	r2, [r1, #4]
 8003e06:	4022      	ands	r2, r4
 8003e08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003e0a:	4322      	orrs	r2, r4
 8003e0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0e:	079a      	lsls	r2, r3, #30
 8003e10:	d506      	bpl.n	8003e20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e12:	6801      	ldr	r1, [r0, #0]
 8003e14:	4c24      	ldr	r4, [pc, #144]	; (8003ea8 <UART_AdvFeatureConfig+0xb0>)
 8003e16:	684a      	ldr	r2, [r1, #4]
 8003e18:	4022      	ands	r2, r4
 8003e1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003e1c:	4322      	orrs	r2, r4
 8003e1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e20:	075a      	lsls	r2, r3, #29
 8003e22:	d506      	bpl.n	8003e32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e24:	6801      	ldr	r1, [r0, #0]
 8003e26:	4c21      	ldr	r4, [pc, #132]	; (8003eac <UART_AdvFeatureConfig+0xb4>)
 8003e28:	684a      	ldr	r2, [r1, #4]
 8003e2a:	4022      	ands	r2, r4
 8003e2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003e2e:	4322      	orrs	r2, r4
 8003e30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e32:	071a      	lsls	r2, r3, #28
 8003e34:	d506      	bpl.n	8003e44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e36:	6801      	ldr	r1, [r0, #0]
 8003e38:	4c1d      	ldr	r4, [pc, #116]	; (8003eb0 <UART_AdvFeatureConfig+0xb8>)
 8003e3a:	684a      	ldr	r2, [r1, #4]
 8003e3c:	4022      	ands	r2, r4
 8003e3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003e40:	4322      	orrs	r2, r4
 8003e42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e44:	06da      	lsls	r2, r3, #27
 8003e46:	d506      	bpl.n	8003e56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e48:	6801      	ldr	r1, [r0, #0]
 8003e4a:	4c1a      	ldr	r4, [pc, #104]	; (8003eb4 <UART_AdvFeatureConfig+0xbc>)
 8003e4c:	688a      	ldr	r2, [r1, #8]
 8003e4e:	4022      	ands	r2, r4
 8003e50:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003e52:	4322      	orrs	r2, r4
 8003e54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	069a      	lsls	r2, r3, #26
 8003e58:	d506      	bpl.n	8003e68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e5a:	6801      	ldr	r1, [r0, #0]
 8003e5c:	4c16      	ldr	r4, [pc, #88]	; (8003eb8 <UART_AdvFeatureConfig+0xc0>)
 8003e5e:	688a      	ldr	r2, [r1, #8]
 8003e60:	4022      	ands	r2, r4
 8003e62:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003e64:	4322      	orrs	r2, r4
 8003e66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e68:	065a      	lsls	r2, r3, #25
 8003e6a:	d510      	bpl.n	8003e8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e6c:	6801      	ldr	r1, [r0, #0]
 8003e6e:	4d13      	ldr	r5, [pc, #76]	; (8003ebc <UART_AdvFeatureConfig+0xc4>)
 8003e70:	684a      	ldr	r2, [r1, #4]
 8003e72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e74:	402a      	ands	r2, r5
 8003e76:	4322      	orrs	r2, r4
 8003e78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	0352      	lsls	r2, r2, #13
 8003e7e:	4294      	cmp	r4, r2
 8003e80:	d105      	bne.n	8003e8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e82:	684a      	ldr	r2, [r1, #4]
 8003e84:	4c0e      	ldr	r4, [pc, #56]	; (8003ec0 <UART_AdvFeatureConfig+0xc8>)
 8003e86:	4022      	ands	r2, r4
 8003e88:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003e8a:	4322      	orrs	r2, r4
 8003e8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	d506      	bpl.n	8003ea0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e92:	6802      	ldr	r2, [r0, #0]
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <UART_AdvFeatureConfig+0xcc>)
 8003e96:	6853      	ldr	r3, [r2, #4]
 8003e98:	400b      	ands	r3, r1
 8003e9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6053      	str	r3, [r2, #4]
}
 8003ea0:	bd30      	pop	{r4, r5, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	fffdffff 	.word	0xfffdffff
 8003ea8:	fffeffff 	.word	0xfffeffff
 8003eac:	fffbffff 	.word	0xfffbffff
 8003eb0:	ffff7fff 	.word	0xffff7fff
 8003eb4:	ffffefff 	.word	0xffffefff
 8003eb8:	ffffdfff 	.word	0xffffdfff
 8003ebc:	ffefffff 	.word	0xffefffff
 8003ec0:	ff9fffff 	.word	0xff9fffff
 8003ec4:	fff7ffff 	.word	0xfff7ffff

08003ec8 <UART_WaitOnFlagUntilTimeout>:
{
 8003ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eca:	0004      	movs	r4, r0
 8003ecc:	000d      	movs	r5, r1
 8003ece:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ed0:	2608      	movs	r6, #8
{
 8003ed2:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	69d3      	ldr	r3, [r2, #28]
 8003ed8:	402b      	ands	r3, r5
 8003eda:	1b5b      	subs	r3, r3, r5
 8003edc:	4259      	negs	r1, r3
 8003ede:	414b      	adcs	r3, r1
 8003ee0:	42bb      	cmp	r3, r7
 8003ee2:	d001      	beq.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e021      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	9b08      	ldr	r3, [sp, #32]
 8003eea:	3301      	adds	r3, #1
 8003eec:	d0f3      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fa21 	bl	8002334 <HAL_GetTick>
 8003ef2:	9b00      	ldr	r3, [sp, #0]
 8003ef4:	1ac0      	subs	r0, r0, r3
 8003ef6:	9b08      	ldr	r3, [sp, #32]
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	d828      	bhi.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x86>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d026      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f00:	2104      	movs	r1, #4
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	420a      	tst	r2, r1
 8003f08:	d0e4      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	0011      	movs	r1, r2
 8003f0e:	4031      	ands	r1, r6
 8003f10:	9101      	str	r1, [sp, #4]
 8003f12:	4232      	tst	r2, r6
 8003f14:	d00b      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8003f16:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f18:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8003f1a:	f7ff fcd5 	bl	80038c8 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f1e:	0023      	movs	r3, r4
 8003f20:	3308      	adds	r3, #8
 8003f22:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8003f24:	2300      	movs	r3, #0
           return HAL_ERROR;
 8003f26:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8003f28:	3478      	adds	r4, #120	; 0x78
 8003f2a:	7023      	strb	r3, [r4, #0]
}
 8003f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	69d9      	ldr	r1, [r3, #28]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	4211      	tst	r1, r2
 8003f36:	d0cd      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f38:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f7ff fcc4 	bl	80038c8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f40:	0023      	movs	r3, r4
 8003f42:	2220      	movs	r2, #32
 8003f44:	3308      	adds	r3, #8
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	3478      	adds	r4, #120	; 0x78
 8003f4c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003f4e:	2003      	movs	r0, #3
 8003f50:	e7ec      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x64>
	...

08003f54 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	0003      	movs	r3, r0
{
 8003f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	2500      	movs	r5, #0
{
 8003f5a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003f60:	f7fe f9e8 	bl	8002334 <HAL_GetTick>
 8003f64:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f66:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f68:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3678      	adds	r6, #120	; 0x78
 8003f6e:	071b      	lsls	r3, r3, #28
 8003f70:	d51b      	bpl.n	8003faa <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	4b26      	ldr	r3, [pc, #152]	; (8004010 <UART_CheckIdleState+0xbc>)
 8003f76:	002a      	movs	r2, r5
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	0389      	lsls	r1, r1, #14
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f7ff ffa2 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 8003f84:	42a8      	cmp	r0, r5
 8003f86:	d010      	beq.n	8003faa <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f92:	2080      	movs	r0, #128	; 0x80
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	4383      	bics	r3, r0
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003fa4:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8003fa6:	2003      	movs	r0, #3
}
 8003fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003faa:	0025      	movs	r5, r4
 8003fac:	cd08      	ldmia	r5!, {r3}
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	075b      	lsls	r3, r3, #29
 8003fb2:	d525      	bpl.n	8004000 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <UART_CheckIdleState+0xbc>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	003b      	movs	r3, r7
 8003fc0:	03c9      	lsls	r1, r1, #15
 8003fc2:	f7ff ff81 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d01a      	beq.n	8004000 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd4:	6821      	ldr	r1, [r4, #0]
 8003fd6:	4f0f      	ldr	r7, [pc, #60]	; (8004014 <UART_CheckIdleState+0xc0>)
 8003fd8:	680b      	ldr	r3, [r1, #0]
 8003fda:	403b      	ands	r3, r7
 8003fdc:	600b      	str	r3, [r1, #0]
 8003fde:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	6821      	ldr	r1, [r4, #0]
 8003fec:	688b      	ldr	r3, [r1, #8]
 8003fee:	4393      	bics	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
 8003ff2:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	7033      	strb	r3, [r6, #0]
 8003ffe:	e7d2      	b.n	8003fa6 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004002:	2320      	movs	r3, #32
 8004004:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400a:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800400c:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 800400e:	e7cb      	b.n	8003fa8 <UART_CheckIdleState+0x54>
 8004010:	01ffffff 	.word	0x01ffffff
 8004014:	fffffedf 	.word	0xfffffedf

08004018 <HAL_UART_Init>:
{
 8004018:	b510      	push	{r4, lr}
 800401a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800401e:	2001      	movs	r0, #1
}
 8004020:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004028:	0002      	movs	r2, r0
 800402a:	3278      	adds	r2, #120	; 0x78
 800402c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800402e:	f7fe f8c1 	bl	80021b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004032:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004034:	2101      	movs	r1, #1
 8004036:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800403a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800403c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800403e:	438b      	bics	r3, r1
 8004040:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004042:	f7ff fde1 	bl	8003c08 <UART_SetConfig>
 8004046:	2801      	cmp	r0, #1
 8004048:	d0e9      	beq.n	800401e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004050:	0020      	movs	r0, r4
 8004052:	f7ff fed1 	bl	8003df8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	4907      	ldr	r1, [pc, #28]	; (8004078 <HAL_UART_Init+0x60>)
 800405a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800405c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004060:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	438a      	bics	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800406a:	2201      	movs	r2, #1
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004072:	f7ff ff6f 	bl	8003f54 <UART_CheckIdleState>
 8004076:	e7d3      	b.n	8004020 <HAL_UART_Init+0x8>
 8004078:	ffffb7ff 	.word	0xffffb7ff

0800407c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800407c:	4770      	bx	lr

0800407e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800407e:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8004080:	f000 faa2 	bl	80045c8 <vTaskStartScheduler>
  
  return osOK;
}
 8004084:	2000      	movs	r0, #0
 8004086:	bd10      	pop	{r4, pc}

08004088 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004088:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800408a:	2800      	cmp	r0, #0
 800408c:	d100      	bne.n	8004090 <osDelay+0x8>
 800408e:	3001      	adds	r0, #1
 8004090:	f000 fbba 	bl	8004808 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004094:	2000      	movs	r0, #0
 8004096:	bd10      	pop	{r4, pc}

08004098 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004098:	0003      	movs	r3, r0
 800409a:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800409c:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800409e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040a4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040a6:	4252      	negs	r2, r2
 80040a8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040aa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ac:	4770      	bx	lr

080040ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040b2:	4770      	bx	lr

080040b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80040b4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040b6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80040b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040ba:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040c0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80040c2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80040c4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80040c6:	3301      	adds	r3, #1
 80040c8:	6003      	str	r3, [r0, #0]
}
 80040ca:	4770      	bx	lr

080040cc <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040cc:	0002      	movs	r2, r0
{
 80040ce:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040d0:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040d2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80040d4:	1c63      	adds	r3, r4, #1
 80040d6:	d10a      	bne.n	80040ee <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 80040d8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040de:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80040e2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80040e4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80040e6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80040e8:	3301      	adds	r3, #1
 80040ea:	6003      	str	r3, [r0, #0]
}
 80040ec:	bd30      	pop	{r4, r5, pc}
 80040ee:	0013      	movs	r3, r2
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040f0:	6852      	ldr	r2, [r2, #4]
 80040f2:	6815      	ldr	r5, [r2, #0]
 80040f4:	42a5      	cmp	r5, r4
 80040f6:	d9fa      	bls.n	80040ee <vListInsert+0x22>
 80040f8:	e7ef      	b.n	80040da <vListInsert+0xe>

080040fa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040fa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040fc:	6841      	ldr	r1, [r0, #4]
 80040fe:	6882      	ldr	r2, [r0, #8]
 8004100:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004102:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	4281      	cmp	r1, r0
 8004108:	d100      	bne.n	800410c <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800410a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800410c:	2200      	movs	r2, #0
 800410e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	3a01      	subs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004116:	6818      	ldr	r0, [r3, #0]
}
 8004118:	4770      	bx	lr

0800411a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800411a:	b510      	push	{r4, lr}
 800411c:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800411e:	f000 fce1 	bl	8004ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004122:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004124:	f000 fcea 	bl	8004afc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004128:	4260      	negs	r0, r4
 800412a:	4160      	adcs	r0, r4

	return xReturn;
}
 800412c:	bd10      	pop	{r4, pc}

0800412e <prvUnlockQueue>:
{
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 8004132:	0026      	movs	r6, r4
 8004134:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 8004136:	f000 fcd5 	bl	8004ae4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800413a:	7835      	ldrb	r5, [r6, #0]
 800413c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413e:	2d00      	cmp	r5, #0
 8004140:	dc10      	bgt.n	8004164 <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 8004142:	23ff      	movs	r3, #255	; 0xff
 8004144:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 8004146:	0026      	movs	r6, r4
 8004148:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 800414a:	f000 fcd7 	bl	8004afc <vPortExitCritical>
	taskENTER_CRITICAL();
 800414e:	f000 fcc9 	bl	8004ae4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004152:	7835      	ldrb	r5, [r6, #0]
 8004154:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004156:	2d00      	cmp	r5, #0
 8004158:	dc11      	bgt.n	800417e <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800415a:	23ff      	movs	r3, #255	; 0xff
 800415c:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 800415e:	f000 fccd 	bl	8004afc <vPortExitCritical>
}
 8004162:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0eb      	beq.n	8004142 <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800416a:	0020      	movs	r0, r4
 800416c:	3024      	adds	r0, #36	; 0x24
 800416e:	f000 fbab 	bl	80048c8 <xTaskRemoveFromEventList>
 8004172:	2800      	cmp	r0, #0
 8004174:	d001      	beq.n	800417a <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 8004176:	f000 fc1f 	bl	80049b8 <vTaskMissedYield>
 800417a:	3d01      	subs	r5, #1
 800417c:	e7de      	b.n	800413c <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ea      	beq.n	800415a <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004184:	0020      	movs	r0, r4
 8004186:	3010      	adds	r0, #16
 8004188:	f000 fb9e 	bl	80048c8 <xTaskRemoveFromEventList>
 800418c:	2800      	cmp	r0, #0
 800418e:	d001      	beq.n	8004194 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8004190:	f000 fc12 	bl	80049b8 <vTaskMissedYield>
 8004194:	3d01      	subs	r5, #1
 8004196:	e7dd      	b.n	8004154 <prvUnlockQueue+0x26>

08004198 <xQueueGenericReset>:
{
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	0004      	movs	r4, r0
 800419c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800419e:	2800      	cmp	r0, #0
 80041a0:	d101      	bne.n	80041a6 <xQueueGenericReset+0xe>
 80041a2:	b672      	cpsid	i
 80041a4:	e7fe      	b.n	80041a4 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 80041a6:	f000 fc9d 	bl	8004ae4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041ae:	6822      	ldr	r2, [r4, #0]
 80041b0:	434b      	muls	r3, r1
 80041b2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b4:	1a5b      	subs	r3, r3, r1
 80041b6:	18d3      	adds	r3, r2, r3
 80041b8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041ba:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041bc:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041be:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041c0:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041c6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80041c8:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 80041ca:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 80041cc:	4285      	cmp	r5, r0
 80041ce:	d10e      	bne.n	80041ee <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	4283      	cmp	r3, r0
 80041d4:	d007      	beq.n	80041e6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d6:	0020      	movs	r0, r4
 80041d8:	3010      	adds	r0, #16
 80041da:	f000 fb75 	bl	80048c8 <xTaskRemoveFromEventList>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d001      	beq.n	80041e6 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 80041e2:	f000 fc73 	bl	8004acc <vPortYield>
	taskEXIT_CRITICAL();
 80041e6:	f000 fc89 	bl	8004afc <vPortExitCritical>
}
 80041ea:	2001      	movs	r0, #1
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041ee:	0020      	movs	r0, r4
 80041f0:	3010      	adds	r0, #16
 80041f2:	f7ff ff51 	bl	8004098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041f6:	0020      	movs	r0, r4
 80041f8:	3024      	adds	r0, #36	; 0x24
 80041fa:	f7ff ff4d 	bl	8004098 <vListInitialise>
 80041fe:	e7f2      	b.n	80041e6 <xQueueGenericReset+0x4e>

08004200 <xQueueGenericCreateStatic>:
	{
 8004200:	b513      	push	{r0, r1, r4, lr}
 8004202:	001c      	movs	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004204:	2800      	cmp	r0, #0
 8004206:	d101      	bne.n	800420c <xQueueGenericCreateStatic+0xc>
 8004208:	b672      	cpsid	i
 800420a:	e7fe      	b.n	800420a <xQueueGenericCreateStatic+0xa>
		configASSERT( pxStaticQueue != NULL );
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <xQueueGenericCreateStatic+0x14>
 8004210:	b672      	cpsid	i
 8004212:	e7fe      	b.n	8004212 <xQueueGenericCreateStatic+0x12>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004214:	2a00      	cmp	r2, #0
 8004216:	d003      	beq.n	8004220 <xQueueGenericCreateStatic+0x20>
 8004218:	2900      	cmp	r1, #0
 800421a:	d105      	bne.n	8004228 <xQueueGenericCreateStatic+0x28>
 800421c:	b672      	cpsid	i
 800421e:	e7fe      	b.n	800421e <xQueueGenericCreateStatic+0x1e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004220:	2900      	cmp	r1, #0
 8004222:	d001      	beq.n	8004228 <xQueueGenericCreateStatic+0x28>
 8004224:	b672      	cpsid	i
 8004226:	e7fe      	b.n	8004226 <xQueueGenericCreateStatic+0x26>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004228:	2348      	movs	r3, #72	; 0x48
 800422a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	2b48      	cmp	r3, #72	; 0x48
 8004230:	d001      	beq.n	8004236 <xQueueGenericCreateStatic+0x36>
 8004232:	b672      	cpsid	i
 8004234:	e7fe      	b.n	8004234 <xQueueGenericCreateStatic+0x34>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004236:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004238:	2900      	cmp	r1, #0
 800423a:	d100      	bne.n	800423e <xQueueGenericCreateStatic+0x3e>
 800423c:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 800423e:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004240:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004242:	0020      	movs	r0, r4
 8004244:	2101      	movs	r1, #1
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	f7ff ffa6 	bl	8004198 <xQueueGenericReset>
	}
 800424c:	0020      	movs	r0, r4
 800424e:	bd16      	pop	{r1, r2, r4, pc}

08004250 <xQueueGiveFromISR>:
{
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	0004      	movs	r4, r0
 8004254:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8004256:	2800      	cmp	r0, #0
 8004258:	d101      	bne.n	800425e <xQueueGiveFromISR+0xe>
 800425a:	b672      	cpsid	i
 800425c:	e7fe      	b.n	800425c <xQueueGiveFromISR+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 800425e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <xQueueGiveFromISR+0x18>
 8004264:	b672      	cpsid	i
 8004266:	e7fe      	b.n	8004266 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <xQueueGiveFromISR+0x28>
 800426e:	6883      	ldr	r3, [r0, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <xQueueGiveFromISR+0x28>
 8004274:	b672      	cpsid	i
 8004276:	e7fe      	b.n	8004276 <xQueueGiveFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004278:	f000 fc4e 	bl	8004b18 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800427c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800427e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004280:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 8004282:	2700      	movs	r7, #0
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004284:	4293      	cmp	r3, r2
 8004286:	d916      	bls.n	80042b6 <xQueueGiveFromISR+0x66>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004288:	0021      	movs	r1, r4
 800428a:	3145      	adds	r1, #69	; 0x45
 800428c:	780b      	ldrb	r3, [r1, #0]
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800428e:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004290:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004292:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	d113      	bne.n	80042c0 <xQueueGiveFromISR+0x70>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800429a:	42bb      	cmp	r3, r7
 800429c:	d101      	bne.n	80042a2 <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 800429e:	2701      	movs	r7, #1
 80042a0:	e009      	b.n	80042b6 <xQueueGiveFromISR+0x66>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a2:	0020      	movs	r0, r4
 80042a4:	3024      	adds	r0, #36	; 0x24
 80042a6:	f000 fb0f 	bl	80048c8 <xTaskRemoveFromEventList>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0f7      	beq.n	800429e <xQueueGiveFromISR+0x4e>
							if( pxHigherPriorityTaskWoken != NULL )
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	d0f5      	beq.n	800429e <xQueueGiveFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042b2:	2701      	movs	r7, #1
 80042b4:	602f      	str	r7, [r5, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80042b6:	0030      	movs	r0, r6
 80042b8:	f000 fc32 	bl	8004b20 <vClearInterruptMaskFromISR>
}
 80042bc:	0038      	movs	r0, r7
 80042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042c0:	3301      	adds	r3, #1
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	700b      	strb	r3, [r1, #0]
 80042c6:	e7ea      	b.n	800429e <xQueueGiveFromISR+0x4e>

080042c8 <xQueueSemaphoreTake>:
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b085      	sub	sp, #20
 80042cc:	1e04      	subs	r4, r0, #0
 80042ce:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80042d0:	d101      	bne.n	80042d6 <xQueueSemaphoreTake+0xe>
 80042d2:	b672      	cpsid	i
 80042d4:	e7fe      	b.n	80042d4 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 80042d6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80042d8:	2d00      	cmp	r5, #0
 80042da:	d001      	beq.n	80042e0 <xQueueSemaphoreTake+0x18>
 80042dc:	b672      	cpsid	i
 80042de:	e7fe      	b.n	80042de <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042e0:	f000 fb70 	bl	80049c4 <xTaskGetSchedulerState>
 80042e4:	1e06      	subs	r6, r0, #0
 80042e6:	d104      	bne.n	80042f2 <xQueueSemaphoreTake+0x2a>
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <xQueueSemaphoreTake+0x2c>
 80042ee:	b672      	cpsid	i
 80042f0:	e7fe      	b.n	80042f0 <xQueueSemaphoreTake+0x28>
 80042f2:	002e      	movs	r6, r5
 80042f4:	2701      	movs	r7, #1
 80042f6:	e03d      	b.n	8004374 <xQueueSemaphoreTake+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f8:	9d01      	ldr	r5, [sp, #4]
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	d103      	bne.n	8004306 <xQueueSemaphoreTake+0x3e>
					taskEXIT_CRITICAL();
 80042fe:	f000 fbfd 	bl	8004afc <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004302:	2000      	movs	r0, #0
 8004304:	e04b      	b.n	800439e <xQueueSemaphoreTake+0xd6>
				else if( xEntryTimeSet == pdFALSE )
 8004306:	2e00      	cmp	r6, #0
 8004308:	d102      	bne.n	8004310 <xQueueSemaphoreTake+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800430a:	a802      	add	r0, sp, #8
 800430c:	f000 fb18 	bl	8004940 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004310:	f000 fbf4 	bl	8004afc <vPortExitCritical>
		vTaskSuspendAll();
 8004314:	f000 f988 	bl	8004628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004318:	f000 fbe4 	bl	8004ae4 <vPortEnterCritical>
 800431c:	0022      	movs	r2, r4
 800431e:	3244      	adds	r2, #68	; 0x44
 8004320:	7813      	ldrb	r3, [r2, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	d101      	bne.n	800432c <xQueueSemaphoreTake+0x64>
 8004328:	2300      	movs	r3, #0
 800432a:	7013      	strb	r3, [r2, #0]
 800432c:	0022      	movs	r2, r4
 800432e:	3245      	adds	r2, #69	; 0x45
 8004330:	7813      	ldrb	r3, [r2, #0]
 8004332:	b25b      	sxtb	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	d101      	bne.n	800433c <xQueueSemaphoreTake+0x74>
 8004338:	2300      	movs	r3, #0
 800433a:	7013      	strb	r3, [r2, #0]
 800433c:	f000 fbde 	bl	8004afc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004340:	a901      	add	r1, sp, #4
 8004342:	a802      	add	r0, sp, #8
 8004344:	f000 fb08 	bl	8004958 <xTaskCheckForTimeOut>
 8004348:	2800      	cmp	r0, #0
 800434a:	d130      	bne.n	80043ae <xQueueSemaphoreTake+0xe6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800434c:	0020      	movs	r0, r4
 800434e:	f7ff fee4 	bl	800411a <prvIsQueueEmpty>
 8004352:	2800      	cmp	r0, #0
 8004354:	d025      	beq.n	80043a2 <xQueueSemaphoreTake+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004356:	0020      	movs	r0, r4
 8004358:	9901      	ldr	r1, [sp, #4]
 800435a:	3024      	adds	r0, #36	; 0x24
 800435c:	f000 faa2 	bl	80048a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004360:	0020      	movs	r0, r4
 8004362:	f7ff fee4 	bl	800412e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004366:	f000 f9e7 	bl	8004738 <xTaskResumeAll>
 800436a:	2800      	cmp	r0, #0
 800436c:	d101      	bne.n	8004372 <xQueueSemaphoreTake+0xaa>
					portYIELD_WITHIN_API();
 800436e:	f000 fbad 	bl	8004acc <vPortYield>
 8004372:	003e      	movs	r6, r7
		taskENTER_CRITICAL();
 8004374:	f000 fbb6 	bl	8004ae4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004378:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0bc      	beq.n	80042f8 <xQueueSemaphoreTake+0x30>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800437e:	3b01      	subs	r3, #1
 8004380:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <xQueueSemaphoreTake+0xd0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004388:	0020      	movs	r0, r4
 800438a:	3010      	adds	r0, #16
 800438c:	f000 fa9c 	bl	80048c8 <xTaskRemoveFromEventList>
 8004390:	2800      	cmp	r0, #0
 8004392:	d001      	beq.n	8004398 <xQueueSemaphoreTake+0xd0>
						queueYIELD_IF_USING_PREEMPTION();
 8004394:	f000 fb9a 	bl	8004acc <vPortYield>
				taskEXIT_CRITICAL();
 8004398:	f000 fbb0 	bl	8004afc <vPortExitCritical>
				return pdPASS;
 800439c:	2001      	movs	r0, #1
}
 800439e:	b005      	add	sp, #20
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80043a2:	0020      	movs	r0, r4
 80043a4:	f7ff fec3 	bl	800412e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043a8:	f000 f9c6 	bl	8004738 <xTaskResumeAll>
 80043ac:	e7e1      	b.n	8004372 <xQueueSemaphoreTake+0xaa>
			prvUnlockQueue( pxQueue );
 80043ae:	0020      	movs	r0, r4
 80043b0:	f7ff febd 	bl	800412e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b4:	f000 f9c0 	bl	8004738 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b8:	0020      	movs	r0, r4
 80043ba:	f7ff feae 	bl	800411a <prvIsQueueEmpty>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0d7      	beq.n	8004372 <xQueueSemaphoreTake+0xaa>
 80043c2:	e79e      	b.n	8004302 <xQueueSemaphoreTake+0x3a>

080043c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043c4:	b510      	push	{r4, lr}

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c6:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <prvIdleTask+0x10>)
 80043c8:	6813      	ldr	r3, [r2, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d9fc      	bls.n	80043c8 <prvIdleTask+0x4>
			{
				taskYIELD();
 80043ce:	f000 fb7d 	bl	8004acc <vPortYield>
 80043d2:	e7f8      	b.n	80043c6 <prvIdleTask+0x2>
 80043d4:	200004bc 	.word	0x200004bc

080043d8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <prvResetNextTaskUnblockTime+0x20>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <prvResetNextTaskUnblockTime+0x24>)
 80043e0:	2900      	cmp	r1, #0
 80043e2:	d103      	bne.n	80043ec <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043e4:	2201      	movs	r2, #1
 80043e6:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043e8:	601a      	str	r2, [r3, #0]
	}
}
 80043ea:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	6852      	ldr	r2, [r2, #4]
 80043f4:	e7f8      	b.n	80043e8 <prvResetNextTaskUnblockTime+0x10>
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	200004b4 	.word	0x200004b4
 80043fc:	20000584 	.word	0x20000584

08004400 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	0004      	movs	r4, r0
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <prvAddCurrentTaskToDelayedList.constprop.0+0x44>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004406:	4d10      	ldr	r5, [pc, #64]	; (8004448 <prvAddCurrentTaskToDelayedList.constprop.0+0x48>)
const TickType_t xConstTickCount = xTickCount;
 8004408:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800440a:	6828      	ldr	r0, [r5, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 800440c:	1934      	adds	r4, r6, r4
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800440e:	3004      	adds	r0, #4
 8004410:	f7ff fe73 	bl	80040fa <uxListRemove>

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8004418:	42a6      	cmp	r6, r4
 800441a:	d906      	bls.n	800442a <prvAddCurrentTaskToDelayedList.constprop.0+0x2a>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	3104      	adds	r1, #4
 8004424:	f7ff fe52 	bl	80040cc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004428:	bd70      	pop	{r4, r5, r6, pc}
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <prvAddCurrentTaskToDelayedList.constprop.0+0x50>)
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	6829      	ldr	r1, [r5, #0]
 8004430:	3104      	adds	r1, #4
 8004432:	f7ff fe4b 	bl	80040cc <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <prvAddCurrentTaskToDelayedList.constprop.0+0x54>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4294      	cmp	r4, r2
 800443c:	d2f4      	bcs.n	8004428 <prvAddCurrentTaskToDelayedList.constprop.0+0x28>
				xNextTaskUnblockTime = xTimeToWake;
 800443e:	601c      	str	r4, [r3, #0]
}
 8004440:	e7f2      	b.n	8004428 <prvAddCurrentTaskToDelayedList.constprop.0+0x28>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	200005a4 	.word	0x200005a4
 8004448:	200004b0 	.word	0x200004b0
 800444c:	200004b8 	.word	0x200004b8
 8004450:	200004b4 	.word	0x200004b4
 8004454:	20000584 	.word	0x20000584

08004458 <xTaskCreateStatic>:
	{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004460:	0006      	movs	r6, r0
 8004462:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <xTaskCreateStatic+0x14>
 8004468:	b672      	cpsid	i
 800446a:	e7fe      	b.n	800446a <xTaskCreateStatic+0x12>
		configASSERT( pxTaskBuffer != NULL );
 800446c:	2c00      	cmp	r4, #0
 800446e:	d101      	bne.n	8004474 <xTaskCreateStatic+0x1c>
 8004470:	b672      	cpsid	i
 8004472:	e7fe      	b.n	8004472 <xTaskCreateStatic+0x1a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004474:	204c      	movs	r0, #76	; 0x4c
 8004476:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004478:	9803      	ldr	r0, [sp, #12]
 800447a:	284c      	cmp	r0, #76	; 0x4c
 800447c:	d001      	beq.n	8004482 <xTaskCreateStatic+0x2a>
 800447e:	b672      	cpsid	i
 8004480:	e7fe      	b.n	8004480 <xTaskCreateStatic+0x28>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004482:	9803      	ldr	r0, [sp, #12]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004484:	4844      	ldr	r0, [pc, #272]	; (8004598 <xTaskCreateStatic+0x140>)
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004486:	6323      	str	r3, [r4, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004488:	1812      	adds	r2, r2, r0
 800448a:	0092      	lsls	r2, r2, #2
 800448c:	189a      	adds	r2, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800448e:	2307      	movs	r3, #7
 8004490:	439a      	bics	r2, r3
 8004492:	9200      	str	r2, [sp, #0]
 8004494:	0022      	movs	r2, r4
 8004496:	3234      	adds	r2, #52	; 0x34
	if( pcName != NULL )
 8004498:	2900      	cmp	r1, #0
 800449a:	d100      	bne.n	800449e <xTaskCreateStatic+0x46>
 800449c:	e06f      	b.n	800457e <xTaskCreateStatic+0x126>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449e:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a0:	5cc8      	ldrb	r0, [r1, r3]
 80044a2:	54d0      	strb	r0, [r2, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d002      	beq.n	80044ae <xTaskCreateStatic+0x56>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a8:	3301      	adds	r3, #1
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d1f8      	bne.n	80044a0 <xTaskCreateStatic+0x48>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044ae:	0023      	movs	r3, r4
 80044b0:	2200      	movs	r2, #0
 80044b2:	3343      	adds	r3, #67	; 0x43
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80044b8:	2d06      	cmp	r5, #6
 80044ba:	d900      	bls.n	80044be <xTaskCreateStatic+0x66>
 80044bc:	2506      	movs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044be:	1d27      	adds	r7, r4, #4
 80044c0:	0038      	movs	r0, r7
	pxNewTCB->uxPriority = uxPriority;
 80044c2:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044c4:	f7ff fdf3 	bl	80040ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c8:	0020      	movs	r0, r4
 80044ca:	3018      	adds	r0, #24
 80044cc:	f7ff fdef 	bl	80040ae <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	2307      	movs	r3, #7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044d2:	0022      	movs	r2, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d4:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 80044d6:	2300      	movs	r3, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044d8:	3248      	adds	r2, #72	; 0x48
		pxNewTCB->ulNotifiedValue = 0;
 80044da:	6463      	str	r3, [r4, #68]	; 0x44
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044dc:	0031      	movs	r1, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044de:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044e2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e4:	9800      	ldr	r0, [sp, #0]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044e6:	7013      	strb	r3, [r2, #0]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e8:	9a01      	ldr	r2, [sp, #4]
 80044ea:	f000 faab 	bl	8004a44 <pxPortInitialiseStack>
 80044ee:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 80044f0:	f000 faf8 	bl	8004ae4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <xTaskCreateStatic+0x144>)
		if( pxCurrentTCB == NULL )
 80044f6:	4d2a      	ldr	r5, [pc, #168]	; (80045a0 <xTaskCreateStatic+0x148>)
		uxCurrentNumberOfTasks++;
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	3201      	adds	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80044fe:	682e      	ldr	r6, [r5, #0]
 8004500:	2e00      	cmp	r6, #0
 8004502:	d13e      	bne.n	8004582 <xTaskCreateStatic+0x12a>
			pxCurrentTCB = pxNewTCB;
 8004504:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d117      	bne.n	800453c <xTaskCreateStatic+0xe4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800450c:	2014      	movs	r0, #20
 800450e:	4370      	muls	r0, r6
 8004510:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <xTaskCreateStatic+0x14c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004512:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004514:	1818      	adds	r0, r3, r0
 8004516:	f7ff fdbf 	bl	8004098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800451a:	2e07      	cmp	r6, #7
 800451c:	d1f6      	bne.n	800450c <xTaskCreateStatic+0xb4>
	vListInitialise( &xDelayedTaskList1 );
 800451e:	4e22      	ldr	r6, [pc, #136]	; (80045a8 <xTaskCreateStatic+0x150>)
 8004520:	0030      	movs	r0, r6
 8004522:	f7ff fdb9 	bl	8004098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004526:	4821      	ldr	r0, [pc, #132]	; (80045ac <xTaskCreateStatic+0x154>)
 8004528:	f7ff fdb6 	bl	8004098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800452c:	4820      	ldr	r0, [pc, #128]	; (80045b0 <xTaskCreateStatic+0x158>)
 800452e:	f7ff fdb3 	bl	8004098 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <xTaskCreateStatic+0x15c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <xTaskCreateStatic+0x154>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8004536:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <xTaskCreateStatic+0x160>)
 800453a:	601a      	str	r2, [r3, #0]
		uxTaskNumber++;
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <xTaskCreateStatic+0x164>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004544:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <xTaskCreateStatic+0x168>)
 8004546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004548:	6811      	ldr	r1, [r2, #0]
 800454a:	428b      	cmp	r3, r1
 800454c:	d900      	bls.n	8004550 <xTaskCreateStatic+0xf8>
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	2014      	movs	r0, #20
 8004552:	4358      	muls	r0, r3
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <xTaskCreateStatic+0x14c>)
 8004556:	0039      	movs	r1, r7
 8004558:	1818      	adds	r0, r3, r0
 800455a:	f7ff fdab 	bl	80040b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800455e:	f000 facd 	bl	8004afc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <xTaskCreateStatic+0x16c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <xTaskCreateStatic+0x120>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4293      	cmp	r3, r2
 8004572:	d201      	bcs.n	8004578 <xTaskCreateStatic+0x120>
			taskYIELD_IF_USING_PREEMPTION();
 8004574:	f000 faaa 	bl	8004acc <vPortYield>
	}
 8004578:	0020      	movs	r0, r4
 800457a:	b005      	add	sp, #20
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800457e:	7011      	strb	r1, [r2, #0]
 8004580:	e799      	b.n	80044b6 <xTaskCreateStatic+0x5e>
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <xTaskCreateStatic+0x16c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1d8      	bne.n	800453c <xTaskCreateStatic+0xe4>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	682b      	ldr	r3, [r5, #0]
 800458c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	429a      	cmp	r2, r3
 8004592:	d3d3      	bcc.n	800453c <xTaskCreateStatic+0xe4>
					pxCurrentTCB = pxNewTCB;
 8004594:	602c      	str	r4, [r5, #0]
 8004596:	e7d1      	b.n	800453c <xTaskCreateStatic+0xe4>
 8004598:	3fffffff 	.word	0x3fffffff
 800459c:	20000548 	.word	0x20000548
 80045a0:	200004b0 	.word	0x200004b0
 80045a4:	200004bc 	.word	0x200004bc
 80045a8:	2000055c 	.word	0x2000055c
 80045ac:	20000570 	.word	0x20000570
 80045b0:	2000058c 	.word	0x2000058c
 80045b4:	200004b4 	.word	0x200004b4
 80045b8:	200004b8 	.word	0x200004b8
 80045bc:	20000554 	.word	0x20000554
 80045c0:	20000558 	.word	0x20000558
 80045c4:	200005a0 	.word	0x200005a0

080045c8 <vTaskStartScheduler>:
{
 80045c8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ca:	2400      	movs	r4, #0
{
 80045cc:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ce:	aa07      	add	r2, sp, #28
 80045d0:	a906      	add	r1, sp, #24
 80045d2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045d4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045d6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045d8:	f7fd fb86 	bl	8001ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045dc:	9b05      	ldr	r3, [sp, #20]
 80045de:	9a07      	ldr	r2, [sp, #28]
 80045e0:	9302      	str	r3, [sp, #8]
 80045e2:	9b06      	ldr	r3, [sp, #24]
 80045e4:	490b      	ldr	r1, [pc, #44]	; (8004614 <vTaskStartScheduler+0x4c>)
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	480b      	ldr	r0, [pc, #44]	; (8004618 <vTaskStartScheduler+0x50>)
 80045ea:	0023      	movs	r3, r4
 80045ec:	9400      	str	r4, [sp, #0]
 80045ee:	f7ff ff33 	bl	8004458 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80045f2:	42a0      	cmp	r0, r4
 80045f4:	d00b      	beq.n	800460e <vTaskStartScheduler+0x46>
		portDISABLE_INTERRUPTS();
 80045f6:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80045f8:	2201      	movs	r2, #1
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <vTaskStartScheduler+0x54>)
 80045fc:	4252      	negs	r2, r2
 80045fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <vTaskStartScheduler+0x58>)
 8004602:	3202      	adds	r2, #2
 8004604:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <vTaskStartScheduler+0x5c>)
 8004608:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800460a:	f000 fa2d 	bl	8004a68 <xPortStartScheduler>
}
 800460e:	b008      	add	sp, #32
 8004610:	bd10      	pop	{r4, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	080064d6 	.word	0x080064d6
 8004618:	080043c5 	.word	0x080043c5
 800461c:	20000584 	.word	0x20000584
 8004620:	200005a0 	.word	0x200005a0
 8004624:	200005a4 	.word	0x200005a4

08004628 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004628:	4a02      	ldr	r2, [pc, #8]	; (8004634 <vTaskSuspendAll+0xc>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	4770      	bx	lr
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	20000550 	.word	0x20000550

08004638 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <xTaskIncrementTick+0xd4>)
{
 800463a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d15e      	bne.n	8004700 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004642:	4b33      	ldr	r3, [pc, #204]	; (8004710 <xTaskIncrementTick+0xd8>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	3201      	adds	r2, #1
 8004648:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 800464a:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800464c:	2a00      	cmp	r2, #0
 800464e:	d111      	bne.n	8004674 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <xTaskIncrementTick+0xdc>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	2a00      	cmp	r2, #0
 8004658:	d001      	beq.n	800465e <xTaskIncrementTick+0x26>
 800465a:	b672      	cpsid	i
 800465c:	e7fe      	b.n	800465c <xTaskIncrementTick+0x24>
 800465e:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <xTaskIncrementTick+0xe0>)
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	6810      	ldr	r0, [r2, #0]
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	6011      	str	r1, [r2, #0]
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <xTaskIncrementTick+0xe4>)
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f7ff feb2 	bl	80043d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004674:	4e2a      	ldr	r6, [pc, #168]	; (8004720 <xTaskIncrementTick+0xe8>)
 8004676:	9a00      	ldr	r2, [sp, #0]
 8004678:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800467a:	2400      	movs	r4, #0
 800467c:	4f29      	ldr	r7, [pc, #164]	; (8004724 <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800467e:	4293      	cmp	r3, r2
 8004680:	d935      	bls.n	80046ee <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	2314      	movs	r3, #20
 8004688:	4353      	muls	r3, r2
 800468a:	4a27      	ldr	r2, [pc, #156]	; (8004728 <xTaskIncrementTick+0xf0>)
 800468c:	58d3      	ldr	r3, [r2, r3]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d900      	bls.n	8004694 <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8004692:	2401      	movs	r4, #1
		if( xYieldPending != pdFALSE )
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <xTaskIncrementTick+0xf4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d000      	beq.n	800469e <xTaskIncrementTick+0x66>
			xSwitchRequired = pdTRUE;
 800469c:	2401      	movs	r4, #1
}
 800469e:	0020      	movs	r0, r4
 80046a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 80046a4:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046aa:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d325      	bcc.n	80046fc <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b0:	1d2b      	adds	r3, r5, #4
 80046b2:	0018      	movs	r0, r3
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	f7ff fd20 	bl	80040fa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c0:	0028      	movs	r0, r5
 80046c2:	3018      	adds	r0, #24
 80046c4:	f7ff fd19 	bl	80040fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <xTaskIncrementTick+0xf8>)
 80046ca:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4290      	cmp	r0, r2
 80046d0:	d900      	bls.n	80046d4 <xTaskIncrementTick+0x9c>
 80046d2:	6018      	str	r0, [r3, #0]
 80046d4:	2314      	movs	r3, #20
 80046d6:	4358      	muls	r0, r3
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <xTaskIncrementTick+0xf0>)
 80046da:	1d29      	adds	r1, r5, #4
 80046dc:	1818      	adds	r0, r3, r0
 80046de:	f7ff fce9 	bl	80040b4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d300      	bcc.n	80046ee <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 80046ec:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <xTaskIncrementTick+0xdc>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	d1d4      	bne.n	80046a2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f8:	2301      	movs	r3, #1
 80046fa:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 80046fc:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046fe:	e7c0      	b.n	8004682 <xTaskIncrementTick+0x4a>
		++uxPendedTicks;
 8004700:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 8004702:	2400      	movs	r4, #0
		++uxPendedTicks;
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e7c3      	b.n	8004694 <xTaskIncrementTick+0x5c>
 800470c:	20000550 	.word	0x20000550
 8004710:	200005a4 	.word	0x200005a4
 8004714:	200004b4 	.word	0x200004b4
 8004718:	200004b8 	.word	0x200004b8
 800471c:	20000588 	.word	0x20000588
 8004720:	20000584 	.word	0x20000584
 8004724:	200004b0 	.word	0x200004b0
 8004728:	200004bc 	.word	0x200004bc
 800472c:	200005a8 	.word	0x200005a8
 8004730:	20000558 	.word	0x20000558
 8004734:	2000054c 	.word	0x2000054c

08004738 <xTaskResumeAll>:
{
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800473a:	4c2b      	ldr	r4, [pc, #172]	; (80047e8 <xTaskResumeAll+0xb0>)
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <xTaskResumeAll+0xe>
 8004742:	b672      	cpsid	i
 8004744:	e7fe      	b.n	8004744 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8004746:	f000 f9cd 	bl	8004ae4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004750:	6824      	ldr	r4, [r4, #0]
 8004752:	2c00      	cmp	r4, #0
 8004754:	d004      	beq.n	8004760 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8004756:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004758:	f000 f9d0 	bl	8004afc <vPortExitCritical>
}
 800475c:	0020      	movs	r0, r4
 800475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004760:	4b22      	ldr	r3, [pc, #136]	; (80047ec <xTaskResumeAll+0xb4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f6      	beq.n	8004756 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8004768:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 800476a:	2701      	movs	r7, #1
 800476c:	e01d      	b.n	80047aa <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004772:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004774:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004776:	3018      	adds	r0, #24
 8004778:	f7ff fcbf 	bl	80040fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477c:	0028      	movs	r0, r5
 800477e:	f7ff fcbc 	bl	80040fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <xTaskResumeAll+0xb8>)
 8004784:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4290      	cmp	r0, r2
 800478a:	d900      	bls.n	800478e <xTaskResumeAll+0x56>
 800478c:	6018      	str	r0, [r3, #0]
 800478e:	4370      	muls	r0, r6
 8004790:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <xTaskResumeAll+0xbc>)
 8004792:	0029      	movs	r1, r5
 8004794:	18c0      	adds	r0, r0, r3
 8004796:	f7ff fc8d 	bl	80040b4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <xTaskResumeAll+0xc0>)
 800479c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d301      	bcc.n	80047aa <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <xTaskResumeAll+0xc4>)
 80047a8:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <xTaskResumeAll+0xc8>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	d1dd      	bne.n	800476e <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	d001      	beq.n	80047ba <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 80047b6:	f7ff fe0f 	bl	80043d8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047ba:	4d12      	ldr	r5, [pc, #72]	; (8004804 <xTaskResumeAll+0xcc>)
 80047bc:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047be:	2c00      	cmp	r4, #0
 80047c0:	d00a      	beq.n	80047d8 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 80047c2:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80047c4:	f7ff ff38 	bl	8004638 <xTaskIncrementTick>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d001      	beq.n	80047d0 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <xTaskResumeAll+0xc4>)
 80047ce:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 80047d0:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	d1f6      	bne.n	80047c4 <xTaskResumeAll+0x8c>
						uxPendedTicks = 0;
 80047d6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <xTaskResumeAll+0xc4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ba      	beq.n	8004756 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 80047e0:	f000 f974 	bl	8004acc <vPortYield>
						xAlreadyYielded = pdTRUE;
 80047e4:	2401      	movs	r4, #1
 80047e6:	e7b7      	b.n	8004758 <xTaskResumeAll+0x20>
 80047e8:	20000550 	.word	0x20000550
 80047ec:	20000548 	.word	0x20000548
 80047f0:	20000558 	.word	0x20000558
 80047f4:	200004bc 	.word	0x200004bc
 80047f8:	200004b0 	.word	0x200004b0
 80047fc:	200005a8 	.word	0x200005a8
 8004800:	2000058c 	.word	0x2000058c
 8004804:	2000054c 	.word	0x2000054c

08004808 <vTaskDelay>:
	{
 8004808:	b510      	push	{r4, lr}
 800480a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800480c:	d102      	bne.n	8004814 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 800480e:	f000 f95d 	bl	8004acc <vPortYield>
	}
 8004812:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <vTaskDelay+0x2c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <vTaskDelay+0x18>
 800481c:	b672      	cpsid	i
 800481e:	e7fe      	b.n	800481e <vTaskDelay+0x16>
			vTaskSuspendAll();
 8004820:	f7ff ff02 	bl	8004628 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004824:	0020      	movs	r0, r4
 8004826:	f7ff fdeb 	bl	8004400 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 800482a:	f7ff ff85 	bl	8004738 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800482e:	2800      	cmp	r0, #0
 8004830:	d0ed      	beq.n	800480e <vTaskDelay+0x6>
 8004832:	e7ee      	b.n	8004812 <vTaskDelay+0xa>
 8004834:	20000550 	.word	0x20000550

08004838 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <vTaskSwitchContext+0x58>)
{
 800483a:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <vTaskSwitchContext+0x5c>)
 8004840:	2a00      	cmp	r2, #0
 8004842:	d002      	beq.n	800484a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
}
 8004848:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484a:	2514      	movs	r5, #20
 800484c:	4812      	ldr	r0, [pc, #72]	; (8004898 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 800484e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004850:	6802      	ldr	r2, [r0, #0]
 8004852:	4912      	ldr	r1, [pc, #72]	; (800489c <vTaskSwitchContext+0x64>)
 8004854:	002b      	movs	r3, r5
 8004856:	4353      	muls	r3, r2
 8004858:	585c      	ldr	r4, [r3, r1]
 800485a:	2c00      	cmp	r4, #0
 800485c:	d012      	beq.n	8004884 <vTaskSwitchContext+0x4c>
 800485e:	18cc      	adds	r4, r1, r3
 8004860:	6865      	ldr	r5, [r4, #4]
 8004862:	3308      	adds	r3, #8
 8004864:	686d      	ldr	r5, [r5, #4]
 8004866:	185b      	adds	r3, r3, r1
 8004868:	6065      	str	r5, [r4, #4]
 800486a:	429d      	cmp	r5, r3
 800486c:	d101      	bne.n	8004872 <vTaskSwitchContext+0x3a>
 800486e:	686b      	ldr	r3, [r5, #4]
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	2314      	movs	r3, #20
 8004874:	4353      	muls	r3, r2
 8004876:	18c9      	adds	r1, r1, r3
 8004878:	684b      	ldr	r3, [r1, #4]
 800487a:	68d9      	ldr	r1, [r3, #12]
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <vTaskSwitchContext+0x68>)
 800487e:	6019      	str	r1, [r3, #0]
 8004880:	6002      	str	r2, [r0, #0]
}
 8004882:	e7e1      	b.n	8004848 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004884:	2a00      	cmp	r2, #0
 8004886:	d101      	bne.n	800488c <vTaskSwitchContext+0x54>
 8004888:	b672      	cpsid	i
 800488a:	e7fe      	b.n	800488a <vTaskSwitchContext+0x52>
 800488c:	3a01      	subs	r2, #1
 800488e:	e7e1      	b.n	8004854 <vTaskSwitchContext+0x1c>
 8004890:	20000550 	.word	0x20000550
 8004894:	200005a8 	.word	0x200005a8
 8004898:	20000558 	.word	0x20000558
 800489c:	200004bc 	.word	0x200004bc
 80048a0:	200004b0 	.word	0x200004b0

080048a4 <vTaskPlaceOnEventList>:
{
 80048a4:	b510      	push	{r4, lr}
 80048a6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d101      	bne.n	80048b0 <vTaskPlaceOnEventList+0xc>
 80048ac:	b672      	cpsid	i
 80048ae:	e7fe      	b.n	80048ae <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <vTaskPlaceOnEventList+0x20>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	3118      	adds	r1, #24
 80048b6:	f7ff fc09 	bl	80040cc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ba:	0020      	movs	r0, r4
 80048bc:	f7ff fda0 	bl	8004400 <prvAddCurrentTaskToDelayedList.constprop.0>
}
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	200004b0 	.word	0x200004b0

080048c8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c8:	68c3      	ldr	r3, [r0, #12]
{
 80048ca:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80048ce:	2c00      	cmp	r4, #0
 80048d0:	d101      	bne.n	80048d6 <xTaskRemoveFromEventList+0xe>
 80048d2:	b672      	cpsid	i
 80048d4:	e7fe      	b.n	80048d4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048d6:	0025      	movs	r5, r4
 80048d8:	3518      	adds	r5, #24
 80048da:	0028      	movs	r0, r5
 80048dc:	f7ff fc0d 	bl	80040fa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e0:	4b11      	ldr	r3, [pc, #68]	; (8004928 <xTaskRemoveFromEventList+0x60>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048e8:	1d25      	adds	r5, r4, #4
 80048ea:	0028      	movs	r0, r5
 80048ec:	f7ff fc05 	bl	80040fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048f0:	4a0e      	ldr	r2, [pc, #56]	; (800492c <xTaskRemoveFromEventList+0x64>)
 80048f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048f4:	6811      	ldr	r1, [r2, #0]
 80048f6:	428b      	cmp	r3, r1
 80048f8:	d900      	bls.n	80048fc <xTaskRemoveFromEventList+0x34>
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	2014      	movs	r0, #20
 80048fe:	0029      	movs	r1, r5
 8004900:	4358      	muls	r0, r3
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <xTaskRemoveFromEventList+0x68>)
 8004904:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004906:	f7ff fbd5 	bl	80040b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <xTaskRemoveFromEventList+0x6c>)
 800490c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800490e:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8004910:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d902      	bls.n	800491e <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <xTaskRemoveFromEventList+0x70>)
 800491a:	3001      	adds	r0, #1
 800491c:	6018      	str	r0, [r3, #0]
}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004920:	0029      	movs	r1, r5
 8004922:	4806      	ldr	r0, [pc, #24]	; (800493c <xTaskRemoveFromEventList+0x74>)
 8004924:	e7ef      	b.n	8004906 <xTaskRemoveFromEventList+0x3e>
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000550 	.word	0x20000550
 800492c:	20000558 	.word	0x20000558
 8004930:	200004bc 	.word	0x200004bc
 8004934:	200004b0 	.word	0x200004b0
 8004938:	200005a8 	.word	0x200005a8
 800493c:	2000058c 	.word	0x2000058c

08004940 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <vTaskInternalSetTimeOutState+0x10>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <vTaskInternalSetTimeOutState+0x14>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6043      	str	r3, [r0, #4]
}
 800494c:	4770      	bx	lr
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	20000588 	.word	0x20000588
 8004954:	200005a4 	.word	0x200005a4

08004958 <xTaskCheckForTimeOut>:
{
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	0005      	movs	r5, r0
 800495c:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 800495e:	2800      	cmp	r0, #0
 8004960:	d101      	bne.n	8004966 <xTaskCheckForTimeOut+0xe>
 8004962:	b672      	cpsid	i
 8004964:	e7fe      	b.n	8004964 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 8004966:	2900      	cmp	r1, #0
 8004968:	d101      	bne.n	800496e <xTaskCheckForTimeOut+0x16>
 800496a:	b672      	cpsid	i
 800496c:	e7fe      	b.n	800496c <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800496e:	f000 f8b9 	bl	8004ae4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <xTaskCheckForTimeOut+0x58>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004974:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004976:	6819      	ldr	r1, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <xTaskCheckForTimeOut+0x5c>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800497a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4298      	cmp	r0, r3
 8004980:	d002      	beq.n	8004988 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 8004982:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004984:	428a      	cmp	r2, r1
 8004986:	d90a      	bls.n	800499e <xTaskCheckForTimeOut+0x46>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004988:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800498a:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800498c:	4283      	cmp	r3, r0
 800498e:	d90a      	bls.n	80049a6 <xTaskCheckForTimeOut+0x4e>
			*pxTicksToWait -= xElapsedTime;
 8004990:	1a5b      	subs	r3, r3, r1
 8004992:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004994:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004996:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004998:	f7ff ffd2 	bl	8004940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800499c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800499e:	f000 f8ad 	bl	8004afc <vPortExitCritical>
}
 80049a2:	0030      	movs	r0, r6
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80049a6:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80049a8:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	e7f7      	b.n	800499e <xTaskCheckForTimeOut+0x46>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	200005a4 	.word	0x200005a4
 80049b4:	20000588 	.word	0x20000588

080049b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80049b8:	2201      	movs	r2, #1
 80049ba:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <vTaskMissedYield+0x8>)
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	4770      	bx	lr
 80049c0:	200005a8 	.word	0x200005a8

080049c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049c6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <xTaskGetSchedulerState+0x1c>)
 80049d0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80049d2:	4243      	negs	r3, r0
 80049d4:	4158      	adcs	r0, r3
 80049d6:	0040      	lsls	r0, r0, #1
	}
 80049d8:	4770      	bx	lr
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200005a0 	.word	0x200005a0
 80049e0:	20000550 	.word	0x20000550

080049e4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80049e4:	2300      	movs	r3, #0
{
 80049e6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80049e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <prvTaskExitError+0x20>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	d001      	beq.n	80049f6 <prvTaskExitError+0x12>
 80049f2:	b672      	cpsid	i
 80049f4:	e7fe      	b.n	80049f4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 80049f6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80049f8:	9b01      	ldr	r3, [sp, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0fc      	beq.n	80049f8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049fe:	b002      	add	sp, #8
 8004a00:	4770      	bx	lr
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	2000000c 	.word	0x2000000c
	...

08004a10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004a10:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <pxCurrentTCBConst2>)
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	3020      	adds	r0, #32
 8004a18:	f380 8809 	msr	PSP, r0
 8004a1c:	2002      	movs	r0, #2
 8004a1e:	f380 8814 	msr	CONTROL, r0
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004a28:	46ae      	mov	lr, r5
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	bc04      	pop	{r2}
 8004a2e:	b662      	cpsie	i
 8004a30:	4718      	bx	r3
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46c0      	nop			; (mov r8, r8)

08004a40 <pxCurrentTCBConst2>:
 8004a40:	200004b0 	.word	0x200004b0

08004a44 <pxPortInitialiseStack>:
{
 8004a44:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a46:	2480      	movs	r4, #128	; 0x80
 8004a48:	1f03      	subs	r3, r0, #4
 8004a4a:	0464      	lsls	r4, r4, #17
 8004a4c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a52:	4903      	ldr	r1, [pc, #12]	; (8004a60 <pxPortInitialiseStack+0x1c>)
 8004a54:	3b04      	subs	r3, #4
 8004a56:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a58:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8004a5a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a5c:	601a      	str	r2, [r3, #0]
}
 8004a5e:	bd10      	pop	{r4, pc}
 8004a60:	080049e5 	.word	0x080049e5

08004a64 <SVC_Handler>:
}
 8004a64:	4770      	bx	lr
	...

08004a68 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <xPortStartScheduler+0x4c>)
 8004a6c:	0412      	lsls	r2, r2, #16
 8004a6e:	6819      	ldr	r1, [r3, #0]
{
 8004a70:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004a76:	22ff      	movs	r2, #255	; 0xff
 8004a78:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004a7a:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004a7c:	0612      	lsls	r2, r2, #24
 8004a7e:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a80:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004a82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 8004a84:	4d0c      	ldr	r5, [pc, #48]	; (8004ab8 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 8004a88:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004a8a:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <xPortStartScheduler+0x58>)
 8004a8e:	0089      	lsls	r1, r1, #2
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	f7fb fb57 	bl	8000144 <__udivsi3>
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <xPortStartScheduler+0x5c>)
 8004a98:	3801      	subs	r0, #1
 8004a9a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004a9c:	2307      	movs	r3, #7
 8004a9e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <xPortStartScheduler+0x60>)
 8004aa2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8004aa4:	f7ff ffb4 	bl	8004a10 <vPortStartFirstTask>
	vTaskSwitchContext();
 8004aa8:	f7ff fec6 	bl	8004838 <vTaskSwitchContext>
	prvTaskExitError();
 8004aac:	f7ff ff9a 	bl	80049e4 <prvTaskExitError>
}
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	e000ed20 	.word	0xe000ed20
 8004ab8:	e000e010 	.word	0xe000e010
 8004abc:	e000e018 	.word	0xe000e018
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	e000e014 	.word	0xe000e014
 8004ac8:	2000000c 	.word	0x2000000c

08004acc <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <vPortYield+0x14>)
 8004ad0:	0552      	lsls	r2, r2, #21
 8004ad2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004ad4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ad8:	f3bf 8f6f 	isb	sy
}
 8004adc:	4770      	bx	lr
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8004ae4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004ae6:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <vPortEnterCritical+0x14>)
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004aee:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004af2:	f3bf 8f6f 	isb	sy
}
 8004af6:	4770      	bx	lr
 8004af8:	2000000c 	.word	0x2000000c

08004afc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004afc:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <vPortExitCritical+0x18>)
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <vPortExitCritical+0xc>
 8004b04:	b672      	cpsid	i
 8004b06:	e7fe      	b.n	8004b06 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8004b10:	b662      	cpsie	i
}
 8004b12:	4770      	bx	lr
 8004b14:	2000000c 	.word	0x2000000c

08004b18 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8004b18:	f3ef 8010 	mrs	r0, PRIMASK
 8004b1c:	b672      	cpsid	i
 8004b1e:	4770      	bx	lr

08004b20 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8004b20:	f380 8810 	msr	PRIMASK, r0
 8004b24:	4770      	bx	lr
	...

08004b30 <PendSV_Handler>:
	__asm volatile
 8004b30:	f3ef 8009 	mrs	r0, PSP
 8004b34:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <pxCurrentTCBConst>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	3820      	subs	r0, #32
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b3e:	4644      	mov	r4, r8
 8004b40:	464d      	mov	r5, r9
 8004b42:	4656      	mov	r6, sl
 8004b44:	465f      	mov	r7, fp
 8004b46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b48:	b508      	push	{r3, lr}
 8004b4a:	b672      	cpsid	i
 8004b4c:	f7ff fe74 	bl	8004838 <vTaskSwitchContext>
 8004b50:	b662      	cpsie	i
 8004b52:	bc0c      	pop	{r2, r3}
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	6808      	ldr	r0, [r1, #0]
 8004b58:	3010      	adds	r0, #16
 8004b5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b5c:	46a0      	mov	r8, r4
 8004b5e:	46a9      	mov	r9, r5
 8004b60:	46b2      	mov	sl, r6
 8004b62:	46bb      	mov	fp, r7
 8004b64:	f380 8809 	msr	PSP, r0
 8004b68:	3820      	subs	r0, #32
 8004b6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b6c:	4718      	bx	r3
 8004b6e:	46c0      	nop			; (mov r8, r8)

08004b70 <pxCurrentTCBConst>:
 8004b70:	200004b0 	.word	0x200004b0

08004b74 <SysTick_Handler>:
{
 8004b74:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b76:	f7ff ffcf 	bl	8004b18 <ulSetInterruptMaskFromISR>
 8004b7a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8004b7c:	f7ff fd5c 	bl	8004638 <xTaskIncrementTick>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d003      	beq.n	8004b8c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004b84:	2280      	movs	r2, #128	; 0x80
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <SysTick_Handler+0x20>)
 8004b88:	0552      	lsls	r2, r2, #21
 8004b8a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004b8c:	0020      	movs	r0, r4
 8004b8e:	f7ff ffc7 	bl	8004b20 <vClearInterruptMaskFromISR>
}
 8004b92:	bd10      	pop	{r4, pc}
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <gnss_thread>:
#include <gnss.h>



void gnss_thread(void * arg) {
 8004b98:	e7fe      	b.n	8004b98 <gnss_thread>
	...

08004b9c <init>:
#define GNSS_PRIO	(5)

static TaskHandle_t radio_handle = NULL;
static TaskHandle_t gnss_handle = NULL;

void init(void) {
 8004b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}


	spi_init();
 8004b9e:	f000 f863 	bl	8004c68 <spi_init>


	INIT_THREAD_CREATE(radio_handle, radio, radio_thread, NULL, RADIO_SZ, RADIO_PRIO);
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <init+0x3c>)
 8004ba4:	2480      	movs	r4, #128	; 0x80
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <init+0x40>)
 8004baa:	0064      	lsls	r4, r4, #1
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	2306      	movs	r3, #6
 8004bb0:	0022      	movs	r2, r4
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	490a      	ldr	r1, [pc, #40]	; (8004be0 <init+0x44>)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	480a      	ldr	r0, [pc, #40]	; (8004be4 <init+0x48>)
 8004bba:	f7ff fc4d 	bl	8004458 <xTaskCreateStatic>

	INIT_THREAD_CREATE(gnss_handle, gnss, gnss_thread, NULL, GNSS_SZ, GNSS_PRIO);
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <init+0x4c>)
 8004bc0:	0022      	movs	r2, r4
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <init+0x50>)
 8004bc6:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <init+0x54>)
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	2305      	movs	r3, #5
 8004bcc:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <init+0x58>)
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f7ff fc41 	bl	8004458 <xTaskCreateStatic>

}
 8004bd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8004bd8:	200009f8 	.word	0x200009f8
 8004bdc:	20000a44 	.word	0x20000a44
 8004be0:	080064db 	.word	0x080064db
 8004be4:	08005171 	.word	0x08005171
 8004be8:	200005ac 	.word	0x200005ac
 8004bec:	200005f8 	.word	0x200005f8
 8004bf0:	080064e1 	.word	0x080064e1
 8004bf4:	08004b99 	.word	0x08004b99

08004bf8 <HAL_SPI_TxCpltCallback>:
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004bfa:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004bfc:	9301      	str	r3, [sp, #4]

	if(hspi->Instance == hspi1.Instance) {
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_SPI_TxCpltCallback+0x2c>)
 8004c00:	6802      	ldr	r2, [r0, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d10b      	bne.n	8004c20 <HAL_SPI_TxCpltCallback+0x28>
		xSemaphoreGiveFromISR(spi_sem, &xHigherPriorityTaskWoken);
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_SPI_TxCpltCallback+0x30>)
 8004c0a:	a901      	add	r1, sp, #4
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	f7ff fb1f 	bl	8004250 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004c12:	9b01      	ldr	r3, [sp, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_SPI_TxCpltCallback+0x28>
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <HAL_SPI_TxCpltCallback+0x34>)
 8004c1c:	0552      	lsls	r2, r2, #21
 8004c1e:	601a      	str	r2, [r3, #0]

}
 8004c20:	bd07      	pop	{r0, r1, r2, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	20000300 	.word	0x20000300
 8004c28:	20000e48 	.word	0x20000e48
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <HAL_SPI_TxRxCpltCallback>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	f7ff ffe1 	bl	8004bf8 <HAL_SPI_TxCpltCallback>
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <HAL_SPI_RxCpltCallback>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	f7ff ffdd 	bl	8004bf8 <HAL_SPI_TxCpltCallback>
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <HAL_GPIO_EXTI_Callback>:

static void (*radio_cb)(void) = NULL;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if(GPIO_Pin == GPIO_PIN_8) {
 8004c40:	2380      	movs	r3, #128	; 0x80
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004c42:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_8) {
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4298      	cmp	r0, r3
 8004c48:	d104      	bne.n	8004c54 <HAL_GPIO_EXTI_Callback+0x14>
		if(radio_cb) {
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_GPIO_EXTI_Callback+0x18>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d000      	beq.n	8004c54 <HAL_GPIO_EXTI_Callback+0x14>
			radio_cb();
 8004c52:	4798      	blx	r3
		}
	}
}
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000e44 	.word	0x20000e44

08004c5c <port_register_radio_cb>:


void port_register_radio_cb(void (*cb)(void)) {
	radio_cb = cb;
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <port_register_radio_cb+0x8>)
 8004c5e:	6018      	str	r0, [r3, #0]
}
 8004c60:	4770      	bx	lr
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	20000e44 	.word	0x20000e44

08004c68 <spi_init>:



void spi_init() {
 8004c68:	b507      	push	{r0, r1, r2, lr}
	spi_sem = xSemaphoreCreateBinaryStatic(&spi_sem_buffer);
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	0011      	movs	r1, r2
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <spi_init+0x24>)
 8004c74:	2001      	movs	r0, #1
 8004c76:	f7ff fac3 	bl	8004200 <xQueueGenericCreateStatic>
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <spi_init+0x28>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004c7c:	2201      	movs	r2, #1
	spi_sem = xSemaphoreCreateBinaryStatic(&spi_sem_buffer);
 8004c7e:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004c80:	20a0      	movs	r0, #160	; 0xa0
 8004c82:	2110      	movs	r1, #16
 8004c84:	05c0      	lsls	r0, r0, #23
 8004c86:	f7fd fc8f 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8004c8a:	bd07      	pop	{r0, r1, r2, pc}
 8004c8c:	20000e4c 	.word	0x20000e4c
 8004c90:	20000e48 	.word	0x20000e48

08004c94 <spi_write_reg>:

error_t spi_write_reg(uint8_t addr, uint8_t data) {
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004c98:	20a0      	movs	r0, #160	; 0xa0
error_t spi_write_reg(uint8_t addr, uint8_t data) {
 8004c9a:	000c      	movs	r4, r1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	05c0      	lsls	r0, r0, #23
 8004ca2:	f7fd fc81 	bl	80025a8 <HAL_GPIO_WritePin>
	static uint8_t tx_data[2];
	tx_data[0] = addr | 0x80; //write mode
 8004ca6:	2080      	movs	r0, #128	; 0x80
 8004ca8:	490f      	ldr	r1, [pc, #60]	; (8004ce8 <spi_write_reg+0x54>)
 8004caa:	4240      	negs	r0, r0
 8004cac:	4328      	orrs	r0, r5
	tx_data[1] = data;
	HAL_SPI_Transmit_IT(&hspi1, tx_data, 2);
 8004cae:	2202      	movs	r2, #2
	tx_data[0] = addr | 0x80; //write mode
 8004cb0:	7008      	strb	r0, [r1, #0]
	tx_data[1] = data;
 8004cb2:	704c      	strb	r4, [r1, #1]
	HAL_SPI_Transmit_IT(&hspi1, tx_data, 2);
 8004cb4:	480d      	ldr	r0, [pc, #52]	; (8004cec <spi_write_reg+0x58>)
 8004cb6:	f7fe fa03 	bl	80030c0 <HAL_SPI_Transmit_IT>
	//wait for done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <spi_write_reg+0x5c>)
 8004cbc:	210a      	movs	r1, #10
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	f7ff fb02 	bl	80042c8 <xQueueSemaphoreTake>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	2801      	cmp	r0, #1
 8004cc8:	d106      	bne.n	8004cd8 <spi_write_reg+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004cca:	20a0      	movs	r0, #160	; 0xa0
 8004ccc:	2110      	movs	r1, #16
 8004cce:	05c0      	lsls	r0, r0, #23
 8004cd0:	f7fd fc6a 	bl	80025a8 <HAL_GPIO_WritePin>
		return e_success;
 8004cd4:	2000      	movs	r0, #0
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
}
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004cd8:	20a0      	movs	r0, #160	; 0xa0
 8004cda:	2201      	movs	r2, #1
 8004cdc:	05c0      	lsls	r0, r0, #23
 8004cde:	2110      	movs	r1, #16
 8004ce0:	f7fd fc62 	bl	80025a8 <HAL_GPIO_WritePin>
		return e_failure;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7f6      	b.n	8004cd6 <spi_write_reg+0x42>
 8004ce8:	20000e94 	.word	0x20000e94
 8004cec:	20000300 	.word	0x20000300
 8004cf0:	20000e48 	.word	0x20000e48

08004cf4 <spi_read_reg>:


error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8004cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cf6:	466b      	mov	r3, sp
 8004cf8:	71d8      	strb	r0, [r3, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004cfa:	20a0      	movs	r0, #160	; 0xa0
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	05c0      	lsls	r0, r0, #23
error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8004d00:	000c      	movs	r4, r1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d02:	2110      	movs	r1, #16
error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8004d04:	1ddd      	adds	r5, r3, #7
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d06:	f7fd fc4f 	bl	80025a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, &addr, 1);
 8004d0a:	4e14      	ldr	r6, [pc, #80]	; (8004d5c <spi_read_reg+0x68>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	0029      	movs	r1, r5
 8004d10:	0030      	movs	r0, r6
 8004d12:	f7fe f9d5 	bl	80030c0 <HAL_SPI_Transmit_IT>
	//wait for tx done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004d16:	4d12      	ldr	r5, [pc, #72]	; (8004d60 <spi_read_reg+0x6c>)
 8004d18:	210a      	movs	r1, #10
 8004d1a:	6828      	ldr	r0, [r5, #0]
 8004d1c:	f7ff fad4 	bl	80042c8 <xQueueSemaphoreTake>
 8004d20:	0002      	movs	r2, r0
 8004d22:	2801      	cmp	r0, #1
 8004d24:	d10a      	bne.n	8004d3c <spi_read_reg+0x48>
		HAL_SPI_Receive_IT(&hspi1, data, 1);
 8004d26:	0021      	movs	r1, r4
 8004d28:	0030      	movs	r0, r6
 8004d2a:	f7fe fa69 	bl	8003200 <HAL_SPI_Receive_IT>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
	//wait for rx done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004d2e:	210a      	movs	r1, #10
 8004d30:	6828      	ldr	r0, [r5, #0]
 8004d32:	f7ff fac9 	bl	80042c8 <xQueueSemaphoreTake>
 8004d36:	0002      	movs	r2, r0
 8004d38:	2801      	cmp	r0, #1
 8004d3a:	d007      	beq.n	8004d4c <spi_read_reg+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004d3c:	20a0      	movs	r0, #160	; 0xa0
 8004d3e:	2201      	movs	r2, #1
 8004d40:	05c0      	lsls	r0, r0, #23
 8004d42:	2110      	movs	r1, #16
 8004d44:	f7fd fc30 	bl	80025a8 <HAL_GPIO_WritePin>
		return e_failure;
 8004d48:	2001      	movs	r0, #1
		return e_success;
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
}
 8004d4a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004d4c:	20a0      	movs	r0, #160	; 0xa0
 8004d4e:	2110      	movs	r1, #16
 8004d50:	05c0      	lsls	r0, r0, #23
 8004d52:	f7fd fc29 	bl	80025a8 <HAL_GPIO_WritePin>
		return e_success;
 8004d56:	2000      	movs	r0, #0
 8004d58:	e7f7      	b.n	8004d4a <spi_read_reg+0x56>
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	20000300 	.word	0x20000300
 8004d60:	20000e48 	.word	0x20000e48

08004d64 <spi_write_reg_burst>:

/*
 * Max data size 4 bytes
 */
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d66:	0006      	movs	r6, r0
	if(len <= MAX_SPI_PACKET) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d68:	20a0      	movs	r0, #160	; 0xa0
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004d6a:	000d      	movs	r5, r1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d6c:	05c0      	lsls	r0, r0, #23
 8004d6e:	2110      	movs	r1, #16
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004d70:	0014      	movs	r4, r2
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7fd fc18 	bl	80025a8 <HAL_GPIO_WritePin>
		uint8_t wr_addr = addr | 0x80; //write mode
 8004d78:	2080      	movs	r0, #128	; 0x80
 8004d7a:	466b      	mov	r3, sp
		HAL_SPI_Transmit_IT(&hspi1, &wr_addr, 1);
 8004d7c:	4f15      	ldr	r7, [pc, #84]	; (8004dd4 <spi_write_reg_burst+0x70>)
		uint8_t wr_addr = addr | 0x80; //write mode
 8004d7e:	4240      	negs	r0, r0
 8004d80:	1dd9      	adds	r1, r3, #7
 8004d82:	4330      	orrs	r0, r6
 8004d84:	7008      	strb	r0, [r1, #0]
		HAL_SPI_Transmit_IT(&hspi1, &wr_addr, 1);
 8004d86:	2201      	movs	r2, #1
 8004d88:	0038      	movs	r0, r7
 8004d8a:	f7fe f999 	bl	80030c0 <HAL_SPI_Transmit_IT>
		//wait for tx addr done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004d8e:	4e12      	ldr	r6, [pc, #72]	; (8004dd8 <spi_write_reg_burst+0x74>)
 8004d90:	210a      	movs	r1, #10
 8004d92:	6830      	ldr	r0, [r6, #0]
 8004d94:	f7ff fa98 	bl	80042c8 <xQueueSemaphoreTake>
 8004d98:	2801      	cmp	r0, #1
 8004d9a:	d10b      	bne.n	8004db4 <spi_write_reg_burst+0x50>
			HAL_SPI_Transmit_IT(&hspi1, data, len);
 8004d9c:	b2a2      	uxth	r2, r4
 8004d9e:	0029      	movs	r1, r5
 8004da0:	0038      	movs	r0, r7
 8004da2:	f7fe f98d 	bl	80030c0 <HAL_SPI_Transmit_IT>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
			return e_failure;
		}
		//wait for done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004da6:	210a      	movs	r1, #10
 8004da8:	6830      	ldr	r0, [r6, #0]
 8004daa:	f7ff fa8d 	bl	80042c8 <xQueueSemaphoreTake>
 8004dae:	0002      	movs	r2, r0
 8004db0:	2801      	cmp	r0, #1
 8004db2:	d007      	beq.n	8004dc4 <spi_write_reg_burst+0x60>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004db4:	20a0      	movs	r0, #160	; 0xa0
 8004db6:	2201      	movs	r2, #1
 8004db8:	05c0      	lsls	r0, r0, #23
 8004dba:	2110      	movs	r1, #16
 8004dbc:	f7fd fbf4 	bl	80025a8 <HAL_GPIO_WritePin>
			return e_failure;
 8004dc0:	2001      	movs	r0, #1
			return e_failure;
		}
	} else {
		return e_failure;
	}
}
 8004dc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004dc4:	20a0      	movs	r0, #160	; 0xa0
 8004dc6:	2110      	movs	r1, #16
 8004dc8:	05c0      	lsls	r0, r0, #23
 8004dca:	f7fd fbed 	bl	80025a8 <HAL_GPIO_WritePin>
			return e_success;
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e7f7      	b.n	8004dc2 <spi_write_reg_burst+0x5e>
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	20000300 	.word	0x20000300
 8004dd8:	20000e48 	.word	0x20000e48

08004ddc <spi_read_reg_burst>:


error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dde:	466b      	mov	r3, sp
 8004de0:	71d8      	strb	r0, [r3, #7]
	if(len <= MAX_SPI_PACKET) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004de2:	20a0      	movs	r0, #160	; 0xa0
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004de4:	000d      	movs	r5, r1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004de6:	05c0      	lsls	r0, r0, #23
 8004de8:	2110      	movs	r1, #16
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004dea:	0014      	movs	r4, r2
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004dec:	2200      	movs	r2, #0
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8004dee:	1dde      	adds	r6, r3, #7
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004df0:	f7fd fbda 	bl	80025a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, &addr, 1);
 8004df4:	4f13      	ldr	r7, [pc, #76]	; (8004e44 <spi_read_reg_burst+0x68>)
 8004df6:	0031      	movs	r1, r6
 8004df8:	2201      	movs	r2, #1
 8004dfa:	0038      	movs	r0, r7
 8004dfc:	f7fe f960 	bl	80030c0 <HAL_SPI_Transmit_IT>
		//wait for tx done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004e00:	4e11      	ldr	r6, [pc, #68]	; (8004e48 <spi_read_reg_burst+0x6c>)
 8004e02:	210a      	movs	r1, #10
 8004e04:	6830      	ldr	r0, [r6, #0]
 8004e06:	f7ff fa5f 	bl	80042c8 <xQueueSemaphoreTake>
 8004e0a:	2801      	cmp	r0, #1
 8004e0c:	d10b      	bne.n	8004e26 <spi_read_reg_burst+0x4a>
			HAL_SPI_Receive_IT(&hspi1, data, len);
 8004e0e:	b2a2      	uxth	r2, r4
 8004e10:	0029      	movs	r1, r5
 8004e12:	0038      	movs	r0, r7
 8004e14:	f7fe f9f4 	bl	8003200 <HAL_SPI_Receive_IT>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
			return e_failure;
		}
		//wait for rx done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8004e18:	210a      	movs	r1, #10
 8004e1a:	6830      	ldr	r0, [r6, #0]
 8004e1c:	f7ff fa54 	bl	80042c8 <xQueueSemaphoreTake>
 8004e20:	0002      	movs	r2, r0
 8004e22:	2801      	cmp	r0, #1
 8004e24:	d007      	beq.n	8004e36 <spi_read_reg_burst+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004e26:	20a0      	movs	r0, #160	; 0xa0
 8004e28:	2201      	movs	r2, #1
 8004e2a:	05c0      	lsls	r0, r0, #23
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	f7fd fbbb 	bl	80025a8 <HAL_GPIO_WritePin>
			return e_failure;
 8004e32:	2001      	movs	r0, #1
			return e_failure;
		}
	} else {
		return e_failure;
	}
}
 8004e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004e36:	20a0      	movs	r0, #160	; 0xa0
 8004e38:	2110      	movs	r1, #16
 8004e3a:	05c0      	lsls	r0, r0, #23
 8004e3c:	f7fd fbb4 	bl	80025a8 <HAL_GPIO_WritePin>
			return e_success;
 8004e40:	2000      	movs	r0, #0
 8004e42:	e7f7      	b.n	8004e34 <spi_read_reg_burst+0x58>
 8004e44:	20000300 	.word	0x20000300
 8004e48:	20000e48 	.word	0x20000e48

08004e4c <radio_isr_handler>:
}



void radio_isr_handler(void) {
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
void radio_isr_handler(void) {
 8004e4e:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004e50:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR(radio_isr_sem, &xHigherPriorityTaskWoken);
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <radio_isr_handler+0x20>)
 8004e54:	a901      	add	r1, sp, #4
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	f7ff f9fa 	bl	8004250 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <radio_isr_handler+0x1e>
 8004e62:	2280      	movs	r2, #128	; 0x80
 8004e64:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <radio_isr_handler+0x24>)
 8004e66:	0552      	lsls	r2, r2, #21
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bd07      	pop	{r0, r1, r2, pc}
 8004e6c:	20000e98 	.word	0x20000e98
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <radio_set_idle>:
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 8004e74:	2101      	movs	r1, #1
void radio_set_idle() {
 8004e76:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 8004e78:	0008      	movs	r0, r1
 8004e7a:	f7ff ff0b 	bl	8004c94 <spi_write_reg>
}
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <radio_set_rx>:
void radio_set_rx() {
 8004e80:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 8004e82:	2105      	movs	r1, #5
 8004e84:	2001      	movs	r0, #1
 8004e86:	f7ff ff05 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	2040      	movs	r0, #64	; 0x40
 8004e8e:	f7ff ff01 	bl	8004c94 <spi_write_reg>
}
 8004e92:	bd10      	pop	{r4, pc}

08004e94 <radio_set_tx>:
void radio_set_tx() {
 8004e94:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 8004e96:	2103      	movs	r1, #3
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f7ff fefb 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 8004e9e:	2140      	movs	r1, #64	; 0x40
 8004ea0:	0008      	movs	r0, r1
 8004ea2:	f7ff fef7 	bl	8004c94 <spi_write_reg>
}
 8004ea6:	bd10      	pop	{r4, pc}

08004ea8 <radio_set_tx_power>:
void radio_set_tx_power(int8_t power) {
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	0004      	movs	r4, r0
	if (power > 20)
 8004eac:	2814      	cmp	r0, #20
 8004eae:	dc12      	bgt.n	8004ed6 <radio_set_tx_power+0x2e>
	if (power < 2)
 8004eb0:	2801      	cmp	r0, #1
 8004eb2:	dd12      	ble.n	8004eda <radio_set_tx_power+0x32>
	if (power > 17)
 8004eb4:	2811      	cmp	r0, #17
 8004eb6:	dd11      	ble.n	8004edc <radio_set_tx_power+0x34>
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 8004eb8:	2107      	movs	r1, #7
 8004eba:	204d      	movs	r0, #77	; 0x4d
 8004ebc:	f7ff feea 	bl	8004c94 <spi_write_reg>
	    power -= 3;
 8004ec0:	3c03      	subs	r4, #3
 8004ec2:	b264      	sxtb	r4, r4
	spi_write_reg(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	3c02      	subs	r4, #2
 8004ec8:	4249      	negs	r1, r1
 8004eca:	4321      	orrs	r1, r4
 8004ecc:	b2c9      	uxtb	r1, r1
 8004ece:	2009      	movs	r0, #9
 8004ed0:	f7ff fee0 	bl	8004c94 <spi_write_reg>
}
 8004ed4:	bd10      	pop	{r4, pc}
	    power = 20;
 8004ed6:	2414      	movs	r4, #20
 8004ed8:	e7ee      	b.n	8004eb8 <radio_set_tx_power+0x10>
	    power = 2;
 8004eda:	2402      	movs	r4, #2
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 8004edc:	2104      	movs	r1, #4
 8004ede:	204d      	movs	r0, #77	; 0x4d
 8004ee0:	f7ff fed8 	bl	8004c94 <spi_write_reg>
 8004ee4:	e7ee      	b.n	8004ec4 <radio_set_tx_power+0x1c>
	...

08004ee8 <radio_set_frequency>:
void radio_set_frequency(float freq) {
 8004ee8:	b510      	push	{r4, lr}
	uint32_t frf = (freq * 1000000.0) / RH_RF95_FSTEP;
 8004eea:	f7fc fc5b 	bl	80017a4 <__aeabi_f2d>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <radio_set_frequency+0x3c>)
 8004ef2:	f7fb fe23 	bl	8000b3c <__aeabi_dmul>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <radio_set_frequency+0x40>)
 8004efa:	f7fb fb29 	bl	8000550 <__aeabi_ddiv>
 8004efe:	f7fb fa1f 	bl	8000340 <__aeabi_d2uiz>
 8004f02:	0004      	movs	r4, r0
	spi_write_reg(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8004f04:	0c01      	lsrs	r1, r0, #16
 8004f06:	b2c9      	uxtb	r1, r1
 8004f08:	2006      	movs	r0, #6
 8004f0a:	f7ff fec3 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 8004f0e:	0a21      	lsrs	r1, r4, #8
 8004f10:	b2c9      	uxtb	r1, r1
 8004f12:	2007      	movs	r0, #7
 8004f14:	f7ff febe 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 8004f18:	b2e1      	uxtb	r1, r4
 8004f1a:	2008      	movs	r0, #8
 8004f1c:	f7ff feba 	bl	8004c94 <spi_write_reg>
}
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	412e8480 	.word	0x412e8480
 8004f28:	404e8480 	.word	0x404e8480

08004f2c <radio_set_preamble_len>:
void radio_set_preamble_len(uint16_t bytes) {
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	0004      	movs	r4, r0
	spi_write_reg(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 8004f30:	0a01      	lsrs	r1, r0, #8
 8004f32:	2020      	movs	r0, #32
 8004f34:	f7ff feae 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 8004f38:	b2e1      	uxtb	r1, r4
 8004f3a:	2021      	movs	r0, #33	; 0x21
 8004f3c:	f7ff feaa 	bl	8004c94 <spi_write_reg>
}
 8004f40:	bd10      	pop	{r4, pc}

08004f42 <radio_set_modem_params>:
void radio_set_modem_params(radio_config_t cfg) {
 8004f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch(cfg.cr) {
 8004f44:	2102      	movs	r1, #2
void radio_set_modem_params(radio_config_t cfg) {
 8004f46:	0a03      	lsrs	r3, r0, #8
 8004f48:	9001      	str	r0, [sp, #4]
	switch(cfg.cr) {
 8004f4a:	b2d8      	uxtb	r0, r3
 8004f4c:	1e43      	subs	r3, r0, #1
void radio_set_modem_params(radio_config_t cfg) {
 8004f4e:	aa01      	add	r2, sp, #4
 8004f50:	428b      	cmp	r3, r1
 8004f52:	d802      	bhi.n	8004f5a <radio_set_modem_params+0x18>
 8004f54:	3001      	adds	r0, #1
 8004f56:	0041      	lsls	r1, r0, #1
 8004f58:	b2c9      	uxtb	r1, r1
	switch(cfg.bw) {
 8004f5a:	7810      	ldrb	r0, [r2, #0]
 8004f5c:	2809      	cmp	r0, #9
 8004f5e:	d82b      	bhi.n	8004fb8 <radio_set_modem_params+0x76>
 8004f60:	f7fb f8dc 	bl	800011c <__gnu_thumb1_case_uqi>
 8004f64:	1e1c0507 	.word	0x1e1c0507
 8004f68:	2a242220 	.word	0x2a242220
 8004f6c:	2826      	.short	0x2826
		reg_1d |= RH_RF95_BW_10_4KHZ;
 8004f6e:	2310      	movs	r3, #16
		reg_1d |= RH_RF95_BW_125KHZ;
 8004f70:	4319      	orrs	r1, r3
	switch(cfg.sf) {
 8004f72:	7893      	ldrb	r3, [r2, #2]
 8004f74:	2460      	movs	r4, #96	; 0x60
 8004f76:	1fda      	subs	r2, r3, #7
 8004f78:	2a05      	cmp	r2, #5
 8004f7a:	d801      	bhi.n	8004f80 <radio_set_modem_params+0x3e>
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	b2dc      	uxtb	r4, r3
	spi_write_reg(RH_RF95_REG_1D_MODEM_CONFIG1, reg_1d);
 8004f80:	201d      	movs	r0, #29
 8004f82:	f7ff fe87 	bl	8004c94 <spi_write_reg>
	reg_1e |= RH_RF95_PAYLOAD_CRC_ON;
 8004f86:	2504      	movs	r5, #4
	spi_write_reg(RH_RF95_REG_1E_MODEM_CONFIG2, reg_1e);
 8004f88:	0021      	movs	r1, r4
 8004f8a:	201e      	movs	r0, #30
 8004f8c:	4329      	orrs	r1, r5
 8004f8e:	f7ff fe81 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_26_MODEM_CONFIG3, reg_26);
 8004f92:	0029      	movs	r1, r5
 8004f94:	2026      	movs	r0, #38	; 0x26
 8004f96:	f7ff fe7d 	bl	8004c94 <spi_write_reg>
}
 8004f9a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		reg_1d |= RH_RF95_BW_15_6KHZ;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e7e7      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_20_8KHZ;
 8004fa0:	2330      	movs	r3, #48	; 0x30
 8004fa2:	e7e5      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_31_25KHZ;
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	e7e3      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_41_7KHZ;
 8004fa8:	2350      	movs	r3, #80	; 0x50
 8004faa:	e7e1      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_62_5KHZ;
 8004fac:	2360      	movs	r3, #96	; 0x60
 8004fae:	e7df      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_250KHZ;
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	e7dd      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_500KHZ;
 8004fb4:	2390      	movs	r3, #144	; 0x90
 8004fb6:	e7db      	b.n	8004f70 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_125KHZ;
 8004fb8:	2370      	movs	r3, #112	; 0x70
 8004fba:	e7d9      	b.n	8004f70 <radio_set_modem_params+0x2e>

08004fbc <radio_init>:
error_t radio_init() {
 8004fbc:	b530      	push	{r4, r5, lr}
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2503      	movs	r5, #3
error_t radio_init() {
 8004fc2:	b085      	sub	sp, #20
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <radio_init+0x84>)
 8004fc8:	2001      	movs	r0, #1
 8004fca:	9500      	str	r5, [sp, #0]
 8004fcc:	f7ff f918 	bl	8004200 <xQueueGenericCreateStatic>
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 8004fd0:	240b      	movs	r4, #11
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <radio_init+0x88>)
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 8004fd4:	446c      	add	r4, sp
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 8004fd6:	6018      	str	r0, [r3, #0]
	port_register_radio_cb(radio_isr_handler);
 8004fd8:	481b      	ldr	r0, [pc, #108]	; (8005048 <radio_init+0x8c>)
 8004fda:	f7ff fe3f 	bl	8004c5c <port_register_radio_cb>
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7ff fe57 	bl	8004c94 <spi_write_reg>
	osDelay(10);
 8004fe6:	200a      	movs	r0, #10
 8004fe8:	f7ff f84e 	bl	8004088 <osDelay>
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 8004fec:	0021      	movs	r1, r4
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f7ff fe80 	bl	8004cf4 <spi_read_reg>
	if(data != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE)) {
 8004ff4:	7823      	ldrb	r3, [r4, #0]
		return e_failure; // No device present?
 8004ff6:	2401      	movs	r4, #1
	if(data != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE)) {
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d11e      	bne.n	800503a <radio_init+0x7e>
	spi_write_reg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	200e      	movs	r0, #14
 8005000:	f7ff fe48 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8005004:	2100      	movs	r1, #0
 8005006:	200f      	movs	r0, #15
 8005008:	f7ff fe44 	bl	8004c94 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 800500c:	0021      	movs	r1, r4
 800500e:	0020      	movs	r0, r4
 8005010:	f7ff fe40 	bl	8004c94 <spi_write_reg>
	radio_config_t cfg = {
 8005014:	2207      	movs	r2, #7
 8005016:	ab03      	add	r3, sp, #12
 8005018:	18a4      	adds	r4, r4, r2
 800501a:	709c      	strb	r4, [r3, #2]
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	705d      	strb	r5, [r3, #1]
	radio_set_modem_params(cfg);
 8005020:	9803      	ldr	r0, [sp, #12]
 8005022:	f7ff ff8e 	bl	8004f42 <radio_set_modem_params>
	radio_set_preamble_len(8);
 8005026:	0020      	movs	r0, r4
 8005028:	f7ff ff80 	bl	8004f2c <radio_set_preamble_len>
	radio_set_frequency(868);
 800502c:	4807      	ldr	r0, [pc, #28]	; (800504c <radio_init+0x90>)
 800502e:	f7ff ff5b 	bl	8004ee8 <radio_set_frequency>
	radio_set_tx_power(13);
 8005032:	200d      	movs	r0, #13
 8005034:	f7ff ff38 	bl	8004ea8 <radio_set_tx_power>
 8005038:	2400      	movs	r4, #0
}
 800503a:	0020      	movs	r0, r4
 800503c:	b005      	add	sp, #20
 800503e:	bd30      	pop	{r4, r5, pc}
 8005040:	20000e9c 	.word	0x20000e9c
 8005044:	20000e98 	.word	0x20000e98
 8005048:	08004e4d 	.word	0x08004e4d
 800504c:	44590000 	.word	0x44590000

08005050 <radio_transmit>:
error_t radio_transmit(uint8_t * data, uint16_t len) {
 8005050:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005052:	0005      	movs	r5, r0
 8005054:	000c      	movs	r4, r1
		return e_failure;
 8005056:	2601      	movs	r6, #1
	if (len > MAX_PACKET_LEN) {
 8005058:	29ff      	cmp	r1, #255	; 0xff
 800505a:	d822      	bhi.n	80050a2 <radio_transmit+0x52>
	spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 800505c:	2100      	movs	r1, #0
	spi_write_reg_burst(RH_RF95_REG_00_FIFO, data, len);
 800505e:	b2e4      	uxtb	r4, r4
	spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 8005060:	200d      	movs	r0, #13
 8005062:	f7ff fe17 	bl	8004c94 <spi_write_reg>
	spi_write_reg_burst(RH_RF95_REG_00_FIFO, data, len);
 8005066:	0022      	movs	r2, r4
 8005068:	0029      	movs	r1, r5
 800506a:	2000      	movs	r0, #0
 800506c:	f7ff fe7a 	bl	8004d64 <spi_write_reg_burst>
	spi_write_reg(RH_RF95_REG_22_PAYLOAD_LENGTH, len);
 8005070:	0021      	movs	r1, r4
 8005072:	2022      	movs	r0, #34	; 0x22
 8005074:	f7ff fe0e 	bl	8004c94 <spi_write_reg>
	radio_set_tx();
 8005078:	f7ff ff0c 	bl	8004e94 <radio_set_tx>
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) 0xffff ) == pdTRUE ) {
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <radio_transmit+0x58>)
 800507e:	490b      	ldr	r1, [pc, #44]	; (80050ac <radio_transmit+0x5c>)
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f7ff f921 	bl	80042c8 <xQueueSemaphoreTake>
	return e_success;
 8005086:	2600      	movs	r6, #0
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) 0xffff ) == pdTRUE ) {
 8005088:	2801      	cmp	r0, #1
 800508a:	d10a      	bne.n	80050a2 <radio_transmit+0x52>
		spi_read_reg(RH_RF95_REG_12_IRQ_FLAGS, &irq_flags);
 800508c:	466b      	mov	r3, sp
 800508e:	3011      	adds	r0, #17
 8005090:	1dd9      	adds	r1, r3, #7
 8005092:	f7ff fe2f 	bl	8004cf4 <spi_read_reg>
		spi_write_reg(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 8005096:	21ff      	movs	r1, #255	; 0xff
 8005098:	2012      	movs	r0, #18
 800509a:	f7ff fdfb 	bl	8004c94 <spi_write_reg>
		radio_set_idle();
 800509e:	f7ff fee9 	bl	8004e74 <radio_set_idle>
}
 80050a2:	0030      	movs	r0, r6
 80050a4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	20000e98 	.word	0x20000e98
 80050ac:	0000ffff 	.word	0x0000ffff

080050b0 <radio_receive>:
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*plen > MAX_PACKET_LEN) {
 80050b2:	880b      	ldrh	r3, [r1, #0]
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 80050b4:	b085      	sub	sp, #20
 80050b6:	000e      	movs	r6, r1
 80050b8:	0015      	movs	r5, r2
		return e_failure;
 80050ba:	2401      	movs	r4, #1
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 80050bc:	9001      	str	r0, [sp, #4]
	if (*plen > MAX_PACKET_LEN) {
 80050be:	2bff      	cmp	r3, #255	; 0xff
 80050c0:	d83b      	bhi.n	800513a <radio_receive+0x8a>
	radio_set_rx();
 80050c2:	f7ff fedd 	bl	8004e80 <radio_set_rx>
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) timeout ) == pdTRUE ) {
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <radio_receive+0x98>)
 80050c8:	0029      	movs	r1, r5
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	f7ff f8fc 	bl	80042c8 <xQueueSemaphoreTake>
 80050d0:	0005      	movs	r5, r0
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	d134      	bne.n	8005140 <radio_receive+0x90>
		spi_read_reg(RH_RF95_REG_12_IRQ_FLAGS, &irq_flags);
 80050d6:	ab02      	add	r3, sp, #8
 80050d8:	1d5c      	adds	r4, r3, #5
 80050da:	0021      	movs	r1, r4
 80050dc:	2012      	movs	r0, #18
 80050de:	f7ff fe09 	bl	8004cf4 <spi_read_reg>
		spi_write_reg(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80050e2:	21ff      	movs	r1, #255	; 0xff
 80050e4:	2012      	movs	r0, #18
 80050e6:	f7ff fdd5 	bl	8004c94 <spi_write_reg>
		if((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))) {
 80050ea:	7823      	ldrb	r3, [r4, #0]
 80050ec:	225f      	movs	r2, #95	; 0x5f
 80050ee:	001c      	movs	r4, r3
 80050f0:	4394      	bics	r4, r2
 80050f2:	d003      	beq.n	80050fc <radio_receive+0x4c>
	radio_set_idle();
 80050f4:	f7ff febe 	bl	8004e74 <radio_set_idle>
	return e_failure;
 80050f8:	002c      	movs	r4, r5
 80050fa:	e01e      	b.n	800513a <radio_receive+0x8a>
		} else if(irq_flags & RH_RF95_RX_DONE) {
 80050fc:	065b      	lsls	r3, r3, #25
 80050fe:	d5f9      	bpl.n	80050f4 <radio_receive+0x44>
			spi_read_reg(RH_RF95_REG_13_RX_NB_BYTES, &packet_len);
 8005100:	ab02      	add	r3, sp, #8
 8005102:	1d99      	adds	r1, r3, #6
 8005104:	2013      	movs	r0, #19
 8005106:	f7ff fdf5 	bl	8004cf4 <spi_read_reg>
			spi_read_reg(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR, &current_fifo_address);
 800510a:	ab02      	add	r3, sp, #8
 800510c:	1ddf      	adds	r7, r3, #7
 800510e:	0039      	movs	r1, r7
 8005110:	2010      	movs	r0, #16
 8005112:	f7ff fdef 	bl	8004cf4 <spi_read_reg>
			spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, current_fifo_address);
 8005116:	200d      	movs	r0, #13
 8005118:	7839      	ldrb	r1, [r7, #0]
 800511a:	f7ff fdbb 	bl	8004c94 <spi_write_reg>
			if(packet_len > *plen) {
 800511e:	ab02      	add	r3, sp, #8
 8005120:	799a      	ldrb	r2, [r3, #6]
 8005122:	8833      	ldrh	r3, [r6, #0]
 8005124:	4293      	cmp	r3, r2
 8005126:	d3e5      	bcc.n	80050f4 <radio_receive+0x44>
			spi_read_reg_burst(RH_RF95_REG_00_FIFO, data, packet_len);
 8005128:	0020      	movs	r0, r4
 800512a:	9901      	ldr	r1, [sp, #4]
 800512c:	f7ff fe56 	bl	8004ddc <spi_read_reg_burst>
			*plen = packet_len;
 8005130:	ab02      	add	r3, sp, #8
 8005132:	799b      	ldrb	r3, [r3, #6]
 8005134:	8033      	strh	r3, [r6, #0]
			radio_set_idle();
 8005136:	f7ff fe9d 	bl	8004e74 <radio_set_idle>
}
 800513a:	0020      	movs	r0, r4
 800513c:	b005      	add	sp, #20
 800513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_set_idle();
 8005140:	f7ff fe98 	bl	8004e74 <radio_set_idle>
		return e_timeout;
 8005144:	2402      	movs	r4, #2
 8005146:	e7f8      	b.n	800513a <radio_receive+0x8a>
 8005148:	20000e98 	.word	0x20000e98

0800514c <radio_store_packet>:
} tracker_data = {0};



void radio_store_packet(uint32_t packet_id) {
	tracker_data.packet_list[tracker_data.packet_pointer++] = packet_id; //store packet in database
 800514c:	21cc      	movs	r1, #204	; 0xcc
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <radio_store_packet+0x20>)
 8005150:	0049      	lsls	r1, r1, #1
 8005152:	5853      	ldr	r3, [r2, r1]
void radio_store_packet(uint32_t packet_id) {
 8005154:	b510      	push	{r4, lr}
	tracker_data.packet_list[tracker_data.packet_pointer++] = packet_id; //store packet in database
 8005156:	1c5c      	adds	r4, r3, #1
 8005158:	3302      	adds	r3, #2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	5054      	str	r4, [r2, r1]
 800515e:	50d0      	str	r0, [r2, r3]
	if(tracker_data.packet_pointer >= PACKET_HISTORY) {
 8005160:	2c63      	cmp	r4, #99	; 0x63
 8005162:	d901      	bls.n	8005168 <radio_store_packet+0x1c>
		tracker_data.packet_pointer = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	5053      	str	r3, [r2, r1]
	}
}
 8005168:	bd10      	pop	{r4, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	20000f08 	.word	0x20000f08

08005170 <radio_thread>:



void radio_thread(void * arg) {
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	b085      	sub	sp, #20


	radio_init();
 8005174:	f7ff ff22 	bl	8004fbc <radio_init>

	//read hardware board ID
	tracker_data.tracker_id = GPIOB->IDR | 0x0F;
 8005178:	200f      	movs	r0, #15
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <radio_thread+0xb0>)
 800517c:	4e29      	ldr	r6, [pc, #164]	; (8005224 <radio_thread+0xb4>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	4318      	orrs	r0, r3
 8005182:	b2c0      	uxtb	r0, r0
 8005184:	7030      	strb	r0, [r6, #0]

	srand(tracker_data.tracker_id);
 8005186:	f000 f88d 	bl	80052a4 <srand>
		static radio_packet_t tx_packet = {
				.callsign = CALLSIGN,
				.hop_count = 0
		};

		tx_packet.packet_id = tracker_data.tracker_id | tracker_data.packet_count++ << 8;
 800518a:	6870      	ldr	r0, [r6, #4]
 800518c:	7832      	ldrb	r2, [r6, #0]
 800518e:	4c26      	ldr	r4, [pc, #152]	; (8005228 <radio_thread+0xb8>)
 8005190:	1c41      	adds	r1, r0, #1
 8005192:	0200      	lsls	r0, r0, #8
 8005194:	4310      	orrs	r0, r2
 8005196:	6060      	str	r0, [r4, #4]
 8005198:	6071      	str	r1, [r6, #4]

		radio_store_packet(tx_packet.packet_id);
 800519a:	f7ff ffd7 	bl	800514c <radio_store_packet>

		radio_transmit((uint8_t *) &tx_packet, sizeof(radio_packet_t));
 800519e:	2124      	movs	r1, #36	; 0x24
 80051a0:	0020      	movs	r0, r4
 80051a2:	f7ff ff55 	bl	8005050 <radio_transmit>

		 //timer between 2 and 5 minutes
		int32_t rx_timer = (int64_t)rand()*18000 / RAND_MAX + 12000;
 80051a6:	f000 f8ad 	bl	8005304 <rand>
 80051aa:	2300      	movs	r3, #0
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <radio_thread+0xbc>)
 80051ae:	17c1      	asrs	r1, r0, #31
 80051b0:	f7fb f898 	bl	80002e4 <__aeabi_lmul>
 80051b4:	2300      	movs	r3, #0
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <radio_thread+0xc0>)
 80051b8:	f7fb f850 	bl	800025c <__aeabi_ldivmod>
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <radio_thread+0xc4>)
 80051be:	18c4      	adds	r4, r0, r3
		while(rx_timer > 0) {
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	dde2      	ble.n	800518a <radio_thread+0x1a>
			uint32_t time = HAL_GetTick();
 80051c4:	f7fd f8b6 	bl	8002334 <HAL_GetTick>
			static radio_packet_t rx_packet;
			uint16_t size = sizeof(radio_packet_t);
 80051c8:	ab02      	add	r3, sp, #8
 80051ca:	1d99      	adds	r1, r3, #6
 80051cc:	2324      	movs	r3, #36	; 0x24
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 80051ce:	4d1a      	ldr	r5, [pc, #104]	; (8005238 <radio_thread+0xc8>)
			uint32_t time = HAL_GetTick();
 80051d0:	9001      	str	r0, [sp, #4]
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 80051d2:	b2a2      	uxth	r2, r4
 80051d4:	0028      	movs	r0, r5
			uint16_t size = sizeof(radio_packet_t);
 80051d6:	800b      	strh	r3, [r1, #0]
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 80051d8:	f7ff ff6a 	bl	80050b0 <radio_receive>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d118      	bne.n	8005212 <radio_thread+0xa2>
				//packet received
				if(rx_packet.callsign == CALLSIGN) {
 80051e0:	4b16      	ldr	r3, [pc, #88]	; (800523c <radio_thread+0xcc>)
 80051e2:	682a      	ldr	r2, [r5, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d114      	bne.n	8005212 <radio_thread+0xa2>
 80051e8:	0037      	movs	r7, r6
					//valid packet

					//check if packet is known
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 80051ea:	9000      	str	r0, [sp, #0]
						if(rx_packet.packet_id == tracker_data.packet_list[i]) {
 80051ec:	6868      	ldr	r0, [r5, #4]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4298      	cmp	r0, r3
 80051f2:	d00e      	beq.n	8005212 <radio_thread+0xa2>
							//known packet -> discard
							break;
						} else {
							//unknown packet -> repeat
							rx_packet.hop_count += 1;
 80051f4:	7a2b      	ldrb	r3, [r5, #8]
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 80051f6:	3704      	adds	r7, #4
							rx_packet.hop_count += 1;
 80051f8:	3301      	adds	r3, #1
 80051fa:	722b      	strb	r3, [r5, #8]
							radio_store_packet(rx_packet.packet_id);
 80051fc:	f7ff ffa6 	bl	800514c <radio_store_packet>
							radio_transmit((uint8_t *)&rx_packet, sizeof(radio_packet_t));
 8005200:	2124      	movs	r1, #36	; 0x24
 8005202:	0028      	movs	r0, r5
 8005204:	f7ff ff24 	bl	8005050 <radio_transmit>
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 8005208:	9b00      	ldr	r3, [sp, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d1ec      	bne.n	80051ec <radio_thread+0x7c>
					}
				}
			} else {
				//some other condition (stray packet, timeout, error)
			}
			time = HAL_GetTick() - time;
 8005212:	f7fd f88f 	bl	8002334 <HAL_GetTick>
			rx_timer -= time;
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	18e4      	adds	r4, r4, r3
 800521a:	1a24      	subs	r4, r4, r0
 800521c:	e7d0      	b.n	80051c0 <radio_thread+0x50>
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	50000400 	.word	0x50000400
 8005224:	20000f08 	.word	0x20000f08
 8005228:	20000010 	.word	0x20000010
 800522c:	00004650 	.word	0x00004650
 8005230:	7fffffff 	.word	0x7fffffff
 8005234:	00002ee0 	.word	0x00002ee0
 8005238:	20000ee4 	.word	0x20000ee4
 800523c:	47424652 	.word	0x47424652

08005240 <__errno>:
 8005240:	4b01      	ldr	r3, [pc, #4]	; (8005248 <__errno+0x8>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	4770      	bx	lr
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	20000034 	.word	0x20000034

0800524c <__libc_init_array>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	2600      	movs	r6, #0
 8005250:	4d0c      	ldr	r5, [pc, #48]	; (8005284 <__libc_init_array+0x38>)
 8005252:	4c0d      	ldr	r4, [pc, #52]	; (8005288 <__libc_init_array+0x3c>)
 8005254:	1b64      	subs	r4, r4, r5
 8005256:	10a4      	asrs	r4, r4, #2
 8005258:	42a6      	cmp	r6, r4
 800525a:	d109      	bne.n	8005270 <__libc_init_array+0x24>
 800525c:	2600      	movs	r6, #0
 800525e:	f001 f8d7 	bl	8006410 <_init>
 8005262:	4d0a      	ldr	r5, [pc, #40]	; (800528c <__libc_init_array+0x40>)
 8005264:	4c0a      	ldr	r4, [pc, #40]	; (8005290 <__libc_init_array+0x44>)
 8005266:	1b64      	subs	r4, r4, r5
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	42a6      	cmp	r6, r4
 800526c:	d105      	bne.n	800527a <__libc_init_array+0x2e>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	00b3      	lsls	r3, r6, #2
 8005272:	58eb      	ldr	r3, [r5, r3]
 8005274:	4798      	blx	r3
 8005276:	3601      	adds	r6, #1
 8005278:	e7ee      	b.n	8005258 <__libc_init_array+0xc>
 800527a:	00b3      	lsls	r3, r6, #2
 800527c:	58eb      	ldr	r3, [r5, r3]
 800527e:	4798      	blx	r3
 8005280:	3601      	adds	r6, #1
 8005282:	e7f2      	b.n	800526a <__libc_init_array+0x1e>
 8005284:	08006638 	.word	0x08006638
 8005288:	08006638 	.word	0x08006638
 800528c:	08006638 	.word	0x08006638
 8005290:	0800663c 	.word	0x0800663c

08005294 <memset>:
 8005294:	0003      	movs	r3, r0
 8005296:	1882      	adds	r2, r0, r2
 8005298:	4293      	cmp	r3, r2
 800529a:	d100      	bne.n	800529e <memset+0xa>
 800529c:	4770      	bx	lr
 800529e:	7019      	strb	r1, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	e7f9      	b.n	8005298 <memset+0x4>

080052a4 <srand>:
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <srand+0x48>)
 80052a6:	b570      	push	{r4, r5, r6, lr}
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	0004      	movs	r4, r0
 80052ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d116      	bne.n	80052e0 <srand+0x3c>
 80052b2:	2018      	movs	r0, #24
 80052b4:	f000 f892 	bl	80053dc <malloc>
 80052b8:	1e02      	subs	r2, r0, #0
 80052ba:	63a8      	str	r0, [r5, #56]	; 0x38
 80052bc:	d104      	bne.n	80052c8 <srand+0x24>
 80052be:	2142      	movs	r1, #66	; 0x42
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <srand+0x4c>)
 80052c2:	480c      	ldr	r0, [pc, #48]	; (80052f4 <srand+0x50>)
 80052c4:	f000 f85c 	bl	8005380 <__assert_func>
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <srand+0x54>)
 80052ca:	2100      	movs	r1, #0
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <srand+0x58>)
 80052d0:	6043      	str	r3, [r0, #4]
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <srand+0x5c>)
 80052d4:	6083      	str	r3, [r0, #8]
 80052d6:	230b      	movs	r3, #11
 80052d8:	8183      	strh	r3, [r0, #12]
 80052da:	2001      	movs	r0, #1
 80052dc:	6110      	str	r0, [r2, #16]
 80052de:	6151      	str	r1, [r2, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80052e4:	611c      	str	r4, [r3, #16]
 80052e6:	615a      	str	r2, [r3, #20]
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	20000034 	.word	0x20000034
 80052f0:	080064ec 	.word	0x080064ec
 80052f4:	08006503 	.word	0x08006503
 80052f8:	abcd330e 	.word	0xabcd330e
 80052fc:	e66d1234 	.word	0xe66d1234
 8005300:	0005deec 	.word	0x0005deec

08005304 <rand>:
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <rand+0x5c>)
 8005306:	b510      	push	{r4, lr}
 8005308:	681c      	ldr	r4, [r3, #0]
 800530a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d116      	bne.n	800533e <rand+0x3a>
 8005310:	2018      	movs	r0, #24
 8005312:	f000 f863 	bl	80053dc <malloc>
 8005316:	1e02      	subs	r2, r0, #0
 8005318:	63a0      	str	r0, [r4, #56]	; 0x38
 800531a:	d104      	bne.n	8005326 <rand+0x22>
 800531c:	214e      	movs	r1, #78	; 0x4e
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <rand+0x60>)
 8005320:	4811      	ldr	r0, [pc, #68]	; (8005368 <rand+0x64>)
 8005322:	f000 f82d 	bl	8005380 <__assert_func>
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <rand+0x68>)
 8005328:	2100      	movs	r1, #0
 800532a:	6003      	str	r3, [r0, #0]
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <rand+0x6c>)
 800532e:	6043      	str	r3, [r0, #4]
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <rand+0x70>)
 8005332:	6083      	str	r3, [r0, #8]
 8005334:	230b      	movs	r3, #11
 8005336:	8183      	strh	r3, [r0, #12]
 8005338:	2001      	movs	r0, #1
 800533a:	6110      	str	r0, [r2, #16]
 800533c:	6151      	str	r1, [r2, #20]
 800533e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005340:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <rand+0x74>)
 8005342:	6920      	ldr	r0, [r4, #16]
 8005344:	6961      	ldr	r1, [r4, #20]
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <rand+0x78>)
 8005348:	f7fa ffcc 	bl	80002e4 <__aeabi_lmul>
 800534c:	2201      	movs	r2, #1
 800534e:	2300      	movs	r3, #0
 8005350:	1880      	adds	r0, r0, r2
 8005352:	4159      	adcs	r1, r3
 8005354:	6120      	str	r0, [r4, #16]
 8005356:	6161      	str	r1, [r4, #20]
 8005358:	0048      	lsls	r0, r1, #1
 800535a:	0840      	lsrs	r0, r0, #1
 800535c:	bd10      	pop	{r4, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	20000034 	.word	0x20000034
 8005364:	080064ec 	.word	0x080064ec
 8005368:	08006503 	.word	0x08006503
 800536c:	abcd330e 	.word	0xabcd330e
 8005370:	e66d1234 	.word	0xe66d1234
 8005374:	0005deec 	.word	0x0005deec
 8005378:	4c957f2d 	.word	0x4c957f2d
 800537c:	5851f42d 	.word	0x5851f42d

08005380 <__assert_func>:
 8005380:	b530      	push	{r4, r5, lr}
 8005382:	0014      	movs	r4, r2
 8005384:	001a      	movs	r2, r3
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <__assert_func+0x2c>)
 8005388:	0005      	movs	r5, r0
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	b085      	sub	sp, #20
 800538e:	68d8      	ldr	r0, [r3, #12]
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <__assert_func+0x30>)
 8005392:	2c00      	cmp	r4, #0
 8005394:	d101      	bne.n	800539a <__assert_func+0x1a>
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <__assert_func+0x34>)
 8005398:	001c      	movs	r4, r3
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	9100      	str	r1, [sp, #0]
 800539e:	002b      	movs	r3, r5
 80053a0:	4905      	ldr	r1, [pc, #20]	; (80053b8 <__assert_func+0x38>)
 80053a2:	9402      	str	r4, [sp, #8]
 80053a4:	f000 f80a 	bl	80053bc <fiprintf>
 80053a8:	f000 fcc8 	bl	8005d3c <abort>
 80053ac:	20000034 	.word	0x20000034
 80053b0:	0800655e 	.word	0x0800655e
 80053b4:	08006599 	.word	0x08006599
 80053b8:	0800656b 	.word	0x0800656b

080053bc <fiprintf>:
 80053bc:	b40e      	push	{r1, r2, r3}
 80053be:	b503      	push	{r0, r1, lr}
 80053c0:	0001      	movs	r1, r0
 80053c2:	ab03      	add	r3, sp, #12
 80053c4:	4804      	ldr	r0, [pc, #16]	; (80053d8 <fiprintf+0x1c>)
 80053c6:	cb04      	ldmia	r3!, {r2}
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	f000 f91a 	bl	8005604 <_vfiprintf_r>
 80053d0:	b002      	add	sp, #8
 80053d2:	bc08      	pop	{r3}
 80053d4:	b003      	add	sp, #12
 80053d6:	4718      	bx	r3
 80053d8:	20000034 	.word	0x20000034

080053dc <malloc>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4b03      	ldr	r3, [pc, #12]	; (80053ec <malloc+0x10>)
 80053e0:	0001      	movs	r1, r0
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	f000 f870 	bl	80054c8 <_malloc_r>
 80053e8:	bd10      	pop	{r4, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	20000034 	.word	0x20000034

080053f0 <_free_r>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	0005      	movs	r5, r0
 80053f4:	2900      	cmp	r1, #0
 80053f6:	d010      	beq.n	800541a <_free_r+0x2a>
 80053f8:	1f0c      	subs	r4, r1, #4
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da00      	bge.n	8005402 <_free_r+0x12>
 8005400:	18e4      	adds	r4, r4, r3
 8005402:	0028      	movs	r0, r5
 8005404:	f000 feec 	bl	80061e0 <__malloc_lock>
 8005408:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <_free_r+0x90>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <_free_r+0x2c>
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	6014      	str	r4, [r2, #0]
 8005414:	0028      	movs	r0, r5
 8005416:	f000 feeb 	bl	80061f0 <__malloc_unlock>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	42a3      	cmp	r3, r4
 800541e:	d908      	bls.n	8005432 <_free_r+0x42>
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	1860      	adds	r0, r4, r1
 8005424:	4283      	cmp	r3, r0
 8005426:	d1f3      	bne.n	8005410 <_free_r+0x20>
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	1841      	adds	r1, r0, r1
 800542e:	6021      	str	r1, [r4, #0]
 8005430:	e7ee      	b.n	8005410 <_free_r+0x20>
 8005432:	001a      	movs	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <_free_r+0x4e>
 800543a:	42a3      	cmp	r3, r4
 800543c:	d9f9      	bls.n	8005432 <_free_r+0x42>
 800543e:	6811      	ldr	r1, [r2, #0]
 8005440:	1850      	adds	r0, r2, r1
 8005442:	42a0      	cmp	r0, r4
 8005444:	d10b      	bne.n	800545e <_free_r+0x6e>
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	1809      	adds	r1, r1, r0
 800544a:	1850      	adds	r0, r2, r1
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	4283      	cmp	r3, r0
 8005450:	d1e0      	bne.n	8005414 <_free_r+0x24>
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	1841      	adds	r1, r0, r1
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	6053      	str	r3, [r2, #4]
 800545c:	e7da      	b.n	8005414 <_free_r+0x24>
 800545e:	42a0      	cmp	r0, r4
 8005460:	d902      	bls.n	8005468 <_free_r+0x78>
 8005462:	230c      	movs	r3, #12
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	e7d5      	b.n	8005414 <_free_r+0x24>
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	1860      	adds	r0, r4, r1
 800546c:	4283      	cmp	r3, r0
 800546e:	d103      	bne.n	8005478 <_free_r+0x88>
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1841      	adds	r1, r0, r1
 8005476:	6021      	str	r1, [r4, #0]
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	6054      	str	r4, [r2, #4]
 800547c:	e7ca      	b.n	8005414 <_free_r+0x24>
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	200010a4 	.word	0x200010a4

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0f      	ldr	r6, [pc, #60]	; (80054c4 <sbrk_aligned+0x40>)
 8005488:	000d      	movs	r5, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	0004      	movs	r4, r0
 800548e:	2900      	cmp	r1, #0
 8005490:	d102      	bne.n	8005498 <sbrk_aligned+0x14>
 8005492:	f000 fb73 	bl	8005b7c <_sbrk_r>
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	0029      	movs	r1, r5
 800549a:	0020      	movs	r0, r4
 800549c:	f000 fb6e 	bl	8005b7c <_sbrk_r>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d00a      	beq.n	80054ba <sbrk_aligned+0x36>
 80054a4:	2303      	movs	r3, #3
 80054a6:	1cc5      	adds	r5, r0, #3
 80054a8:	439d      	bics	r5, r3
 80054aa:	42a8      	cmp	r0, r5
 80054ac:	d007      	beq.n	80054be <sbrk_aligned+0x3a>
 80054ae:	1a29      	subs	r1, r5, r0
 80054b0:	0020      	movs	r0, r4
 80054b2:	f000 fb63 	bl	8005b7c <_sbrk_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	d101      	bne.n	80054be <sbrk_aligned+0x3a>
 80054ba:	2501      	movs	r5, #1
 80054bc:	426d      	negs	r5, r5
 80054be:	0028      	movs	r0, r5
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	200010a8 	.word	0x200010a8

080054c8 <_malloc_r>:
 80054c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ca:	2203      	movs	r2, #3
 80054cc:	1ccb      	adds	r3, r1, #3
 80054ce:	4393      	bics	r3, r2
 80054d0:	3308      	adds	r3, #8
 80054d2:	0006      	movs	r6, r0
 80054d4:	001f      	movs	r7, r3
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d232      	bcs.n	8005540 <_malloc_r+0x78>
 80054da:	270c      	movs	r7, #12
 80054dc:	42b9      	cmp	r1, r7
 80054de:	d831      	bhi.n	8005544 <_malloc_r+0x7c>
 80054e0:	0030      	movs	r0, r6
 80054e2:	f000 fe7d 	bl	80061e0 <__malloc_lock>
 80054e6:	4d32      	ldr	r5, [pc, #200]	; (80055b0 <_malloc_r+0xe8>)
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	001c      	movs	r4, r3
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d12e      	bne.n	800554e <_malloc_r+0x86>
 80054f0:	0039      	movs	r1, r7
 80054f2:	0030      	movs	r0, r6
 80054f4:	f7ff ffc6 	bl	8005484 <sbrk_aligned>
 80054f8:	0004      	movs	r4, r0
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	d11e      	bne.n	800553c <_malloc_r+0x74>
 80054fe:	682c      	ldr	r4, [r5, #0]
 8005500:	0025      	movs	r5, r4
 8005502:	2d00      	cmp	r5, #0
 8005504:	d14a      	bne.n	800559c <_malloc_r+0xd4>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	0029      	movs	r1, r5
 800550a:	18e3      	adds	r3, r4, r3
 800550c:	0030      	movs	r0, r6
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f000 fb34 	bl	8005b7c <_sbrk_r>
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	4283      	cmp	r3, r0
 8005518:	d143      	bne.n	80055a2 <_malloc_r+0xda>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	3703      	adds	r7, #3
 800551e:	1aff      	subs	r7, r7, r3
 8005520:	2303      	movs	r3, #3
 8005522:	439f      	bics	r7, r3
 8005524:	3708      	adds	r7, #8
 8005526:	2f0c      	cmp	r7, #12
 8005528:	d200      	bcs.n	800552c <_malloc_r+0x64>
 800552a:	270c      	movs	r7, #12
 800552c:	0039      	movs	r1, r7
 800552e:	0030      	movs	r0, r6
 8005530:	f7ff ffa8 	bl	8005484 <sbrk_aligned>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d034      	beq.n	80055a2 <_malloc_r+0xda>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	19df      	adds	r7, r3, r7
 800553c:	6027      	str	r7, [r4, #0]
 800553e:	e013      	b.n	8005568 <_malloc_r+0xa0>
 8005540:	2b00      	cmp	r3, #0
 8005542:	dacb      	bge.n	80054dc <_malloc_r+0x14>
 8005544:	230c      	movs	r3, #12
 8005546:	2500      	movs	r5, #0
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	0028      	movs	r0, r5
 800554c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	1bd1      	subs	r1, r2, r7
 8005552:	d420      	bmi.n	8005596 <_malloc_r+0xce>
 8005554:	290b      	cmp	r1, #11
 8005556:	d917      	bls.n	8005588 <_malloc_r+0xc0>
 8005558:	19e2      	adds	r2, r4, r7
 800555a:	6027      	str	r7, [r4, #0]
 800555c:	42a3      	cmp	r3, r4
 800555e:	d111      	bne.n	8005584 <_malloc_r+0xbc>
 8005560:	602a      	str	r2, [r5, #0]
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	0030      	movs	r0, r6
 800556a:	0025      	movs	r5, r4
 800556c:	f000 fe40 	bl	80061f0 <__malloc_unlock>
 8005570:	2207      	movs	r2, #7
 8005572:	350b      	adds	r5, #11
 8005574:	1d23      	adds	r3, r4, #4
 8005576:	4395      	bics	r5, r2
 8005578:	1aea      	subs	r2, r5, r3
 800557a:	429d      	cmp	r5, r3
 800557c:	d0e5      	beq.n	800554a <_malloc_r+0x82>
 800557e:	1b5b      	subs	r3, r3, r5
 8005580:	50a3      	str	r3, [r4, r2]
 8005582:	e7e2      	b.n	800554a <_malloc_r+0x82>
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e7ec      	b.n	8005562 <_malloc_r+0x9a>
 8005588:	6862      	ldr	r2, [r4, #4]
 800558a:	42a3      	cmp	r3, r4
 800558c:	d101      	bne.n	8005592 <_malloc_r+0xca>
 800558e:	602a      	str	r2, [r5, #0]
 8005590:	e7ea      	b.n	8005568 <_malloc_r+0xa0>
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e7e8      	b.n	8005568 <_malloc_r+0xa0>
 8005596:	0023      	movs	r3, r4
 8005598:	6864      	ldr	r4, [r4, #4]
 800559a:	e7a7      	b.n	80054ec <_malloc_r+0x24>
 800559c:	002c      	movs	r4, r5
 800559e:	686d      	ldr	r5, [r5, #4]
 80055a0:	e7af      	b.n	8005502 <_malloc_r+0x3a>
 80055a2:	230c      	movs	r3, #12
 80055a4:	0030      	movs	r0, r6
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	f000 fe22 	bl	80061f0 <__malloc_unlock>
 80055ac:	e7cd      	b.n	800554a <_malloc_r+0x82>
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	200010a4 	.word	0x200010a4

080055b4 <__sfputc_r>:
 80055b4:	6893      	ldr	r3, [r2, #8]
 80055b6:	b510      	push	{r4, lr}
 80055b8:	3b01      	subs	r3, #1
 80055ba:	6093      	str	r3, [r2, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da04      	bge.n	80055ca <__sfputc_r+0x16>
 80055c0:	6994      	ldr	r4, [r2, #24]
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	db07      	blt.n	80055d6 <__sfputc_r+0x22>
 80055c6:	290a      	cmp	r1, #10
 80055c8:	d005      	beq.n	80055d6 <__sfputc_r+0x22>
 80055ca:	6813      	ldr	r3, [r2, #0]
 80055cc:	1c58      	adds	r0, r3, #1
 80055ce:	6010      	str	r0, [r2, #0]
 80055d0:	7019      	strb	r1, [r3, #0]
 80055d2:	0008      	movs	r0, r1
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f000 fae3 	bl	8005ba0 <__swbuf_r>
 80055da:	0001      	movs	r1, r0
 80055dc:	e7f9      	b.n	80055d2 <__sfputc_r+0x1e>

080055de <__sfputs_r>:
 80055de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e0:	0006      	movs	r6, r0
 80055e2:	000f      	movs	r7, r1
 80055e4:	0014      	movs	r4, r2
 80055e6:	18d5      	adds	r5, r2, r3
 80055e8:	42ac      	cmp	r4, r5
 80055ea:	d101      	bne.n	80055f0 <__sfputs_r+0x12>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e007      	b.n	8005600 <__sfputs_r+0x22>
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	003a      	movs	r2, r7
 80055f4:	0030      	movs	r0, r6
 80055f6:	f7ff ffdd 	bl	80055b4 <__sfputc_r>
 80055fa:	3401      	adds	r4, #1
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d1f3      	bne.n	80055e8 <__sfputs_r+0xa>
 8005600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005604 <_vfiprintf_r>:
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005606:	b0a1      	sub	sp, #132	; 0x84
 8005608:	0006      	movs	r6, r0
 800560a:	000c      	movs	r4, r1
 800560c:	001f      	movs	r7, r3
 800560e:	9203      	str	r2, [sp, #12]
 8005610:	2800      	cmp	r0, #0
 8005612:	d004      	beq.n	800561e <_vfiprintf_r+0x1a>
 8005614:	6983      	ldr	r3, [r0, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <_vfiprintf_r+0x1a>
 800561a:	f000 fcc5 	bl	8005fa8 <__sinit>
 800561e:	4b8e      	ldr	r3, [pc, #568]	; (8005858 <_vfiprintf_r+0x254>)
 8005620:	429c      	cmp	r4, r3
 8005622:	d11c      	bne.n	800565e <_vfiprintf_r+0x5a>
 8005624:	6874      	ldr	r4, [r6, #4]
 8005626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005628:	07db      	lsls	r3, r3, #31
 800562a:	d405      	bmi.n	8005638 <_vfiprintf_r+0x34>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	059b      	lsls	r3, r3, #22
 8005630:	d402      	bmi.n	8005638 <_vfiprintf_r+0x34>
 8005632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005634:	f000 fd59 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	071b      	lsls	r3, r3, #28
 800563c:	d502      	bpl.n	8005644 <_vfiprintf_r+0x40>
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11d      	bne.n	8005680 <_vfiprintf_r+0x7c>
 8005644:	0021      	movs	r1, r4
 8005646:	0030      	movs	r0, r6
 8005648:	f000 fb00 	bl	8005c4c <__swsetup_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	d017      	beq.n	8005680 <_vfiprintf_r+0x7c>
 8005650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005652:	07db      	lsls	r3, r3, #31
 8005654:	d50d      	bpl.n	8005672 <_vfiprintf_r+0x6e>
 8005656:	2001      	movs	r0, #1
 8005658:	4240      	negs	r0, r0
 800565a:	b021      	add	sp, #132	; 0x84
 800565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565e:	4b7f      	ldr	r3, [pc, #508]	; (800585c <_vfiprintf_r+0x258>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d101      	bne.n	8005668 <_vfiprintf_r+0x64>
 8005664:	68b4      	ldr	r4, [r6, #8]
 8005666:	e7de      	b.n	8005626 <_vfiprintf_r+0x22>
 8005668:	4b7d      	ldr	r3, [pc, #500]	; (8005860 <_vfiprintf_r+0x25c>)
 800566a:	429c      	cmp	r4, r3
 800566c:	d1db      	bne.n	8005626 <_vfiprintf_r+0x22>
 800566e:	68f4      	ldr	r4, [r6, #12]
 8005670:	e7d9      	b.n	8005626 <_vfiprintf_r+0x22>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	059b      	lsls	r3, r3, #22
 8005676:	d4ee      	bmi.n	8005656 <_vfiprintf_r+0x52>
 8005678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567a:	f000 fd37 	bl	80060ec <__retarget_lock_release_recursive>
 800567e:	e7ea      	b.n	8005656 <_vfiprintf_r+0x52>
 8005680:	2300      	movs	r3, #0
 8005682:	ad08      	add	r5, sp, #32
 8005684:	616b      	str	r3, [r5, #20]
 8005686:	3320      	adds	r3, #32
 8005688:	766b      	strb	r3, [r5, #25]
 800568a:	3310      	adds	r3, #16
 800568c:	76ab      	strb	r3, [r5, #26]
 800568e:	9707      	str	r7, [sp, #28]
 8005690:	9f03      	ldr	r7, [sp, #12]
 8005692:	783b      	ldrb	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <_vfiprintf_r+0x98>
 8005698:	2b25      	cmp	r3, #37	; 0x25
 800569a:	d14e      	bne.n	800573a <_vfiprintf_r+0x136>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	1afb      	subs	r3, r7, r3
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	429f      	cmp	r7, r3
 80056a6:	d00d      	beq.n	80056c4 <_vfiprintf_r+0xc0>
 80056a8:	9b05      	ldr	r3, [sp, #20]
 80056aa:	0021      	movs	r1, r4
 80056ac:	0030      	movs	r0, r6
 80056ae:	9a03      	ldr	r2, [sp, #12]
 80056b0:	f7ff ff95 	bl	80055de <__sfputs_r>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d100      	bne.n	80056ba <_vfiprintf_r+0xb6>
 80056b8:	e0b5      	b.n	8005826 <_vfiprintf_r+0x222>
 80056ba:	696a      	ldr	r2, [r5, #20]
 80056bc:	9b05      	ldr	r3, [sp, #20]
 80056be:	4694      	mov	ip, r2
 80056c0:	4463      	add	r3, ip
 80056c2:	616b      	str	r3, [r5, #20]
 80056c4:	783b      	ldrb	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d100      	bne.n	80056cc <_vfiprintf_r+0xc8>
 80056ca:	e0ac      	b.n	8005826 <_vfiprintf_r+0x222>
 80056cc:	2201      	movs	r2, #1
 80056ce:	1c7b      	adds	r3, r7, #1
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	2300      	movs	r3, #0
 80056d4:	4252      	negs	r2, r2
 80056d6:	606a      	str	r2, [r5, #4]
 80056d8:	a904      	add	r1, sp, #16
 80056da:	3254      	adds	r2, #84	; 0x54
 80056dc:	1852      	adds	r2, r2, r1
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	60eb      	str	r3, [r5, #12]
 80056e2:	60ab      	str	r3, [r5, #8]
 80056e4:	7013      	strb	r3, [r2, #0]
 80056e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	2205      	movs	r2, #5
 80056ec:	7819      	ldrb	r1, [r3, #0]
 80056ee:	485d      	ldr	r0, [pc, #372]	; (8005864 <_vfiprintf_r+0x260>)
 80056f0:	f000 fd6a 	bl	80061c8 <memchr>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1c5f      	adds	r7, r3, #1
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d120      	bne.n	800573e <_vfiprintf_r+0x13a>
 80056fc:	682a      	ldr	r2, [r5, #0]
 80056fe:	06d3      	lsls	r3, r2, #27
 8005700:	d504      	bpl.n	800570c <_vfiprintf_r+0x108>
 8005702:	2353      	movs	r3, #83	; 0x53
 8005704:	a904      	add	r1, sp, #16
 8005706:	185b      	adds	r3, r3, r1
 8005708:	2120      	movs	r1, #32
 800570a:	7019      	strb	r1, [r3, #0]
 800570c:	0713      	lsls	r3, r2, #28
 800570e:	d504      	bpl.n	800571a <_vfiprintf_r+0x116>
 8005710:	2353      	movs	r3, #83	; 0x53
 8005712:	a904      	add	r1, sp, #16
 8005714:	185b      	adds	r3, r3, r1
 8005716:	212b      	movs	r1, #43	; 0x2b
 8005718:	7019      	strb	r1, [r3, #0]
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b2a      	cmp	r3, #42	; 0x2a
 8005720:	d016      	beq.n	8005750 <_vfiprintf_r+0x14c>
 8005722:	2100      	movs	r1, #0
 8005724:	68eb      	ldr	r3, [r5, #12]
 8005726:	9f03      	ldr	r7, [sp, #12]
 8005728:	783a      	ldrb	r2, [r7, #0]
 800572a:	1c78      	adds	r0, r7, #1
 800572c:	3a30      	subs	r2, #48	; 0x30
 800572e:	4684      	mov	ip, r0
 8005730:	2a09      	cmp	r2, #9
 8005732:	d94f      	bls.n	80057d4 <_vfiprintf_r+0x1d0>
 8005734:	2900      	cmp	r1, #0
 8005736:	d111      	bne.n	800575c <_vfiprintf_r+0x158>
 8005738:	e017      	b.n	800576a <_vfiprintf_r+0x166>
 800573a:	3701      	adds	r7, #1
 800573c:	e7a9      	b.n	8005692 <_vfiprintf_r+0x8e>
 800573e:	4b49      	ldr	r3, [pc, #292]	; (8005864 <_vfiprintf_r+0x260>)
 8005740:	682a      	ldr	r2, [r5, #0]
 8005742:	1ac0      	subs	r0, r0, r3
 8005744:	2301      	movs	r3, #1
 8005746:	4083      	lsls	r3, r0
 8005748:	4313      	orrs	r3, r2
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	9703      	str	r7, [sp, #12]
 800574e:	e7cb      	b.n	80056e8 <_vfiprintf_r+0xe4>
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	1d19      	adds	r1, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	9107      	str	r1, [sp, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db01      	blt.n	8005760 <_vfiprintf_r+0x15c>
 800575c:	930b      	str	r3, [sp, #44]	; 0x2c
 800575e:	e004      	b.n	800576a <_vfiprintf_r+0x166>
 8005760:	425b      	negs	r3, r3
 8005762:	60eb      	str	r3, [r5, #12]
 8005764:	2302      	movs	r3, #2
 8005766:	4313      	orrs	r3, r2
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	783b      	ldrb	r3, [r7, #0]
 800576c:	2b2e      	cmp	r3, #46	; 0x2e
 800576e:	d10a      	bne.n	8005786 <_vfiprintf_r+0x182>
 8005770:	787b      	ldrb	r3, [r7, #1]
 8005772:	2b2a      	cmp	r3, #42	; 0x2a
 8005774:	d137      	bne.n	80057e6 <_vfiprintf_r+0x1e2>
 8005776:	9b07      	ldr	r3, [sp, #28]
 8005778:	3702      	adds	r7, #2
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	9207      	str	r2, [sp, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db2d      	blt.n	80057e0 <_vfiprintf_r+0x1dc>
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	2203      	movs	r2, #3
 8005788:	7839      	ldrb	r1, [r7, #0]
 800578a:	4837      	ldr	r0, [pc, #220]	; (8005868 <_vfiprintf_r+0x264>)
 800578c:	f000 fd1c 	bl	80061c8 <memchr>
 8005790:	2800      	cmp	r0, #0
 8005792:	d007      	beq.n	80057a4 <_vfiprintf_r+0x1a0>
 8005794:	4b34      	ldr	r3, [pc, #208]	; (8005868 <_vfiprintf_r+0x264>)
 8005796:	682a      	ldr	r2, [r5, #0]
 8005798:	1ac0      	subs	r0, r0, r3
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	4083      	lsls	r3, r0
 800579e:	4313      	orrs	r3, r2
 80057a0:	3701      	adds	r7, #1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	7839      	ldrb	r1, [r7, #0]
 80057a6:	1c7b      	adds	r3, r7, #1
 80057a8:	2206      	movs	r2, #6
 80057aa:	4830      	ldr	r0, [pc, #192]	; (800586c <_vfiprintf_r+0x268>)
 80057ac:	9303      	str	r3, [sp, #12]
 80057ae:	7629      	strb	r1, [r5, #24]
 80057b0:	f000 fd0a 	bl	80061c8 <memchr>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d045      	beq.n	8005844 <_vfiprintf_r+0x240>
 80057b8:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <_vfiprintf_r+0x26c>)
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d127      	bne.n	800580e <_vfiprintf_r+0x20a>
 80057be:	2207      	movs	r2, #7
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	3307      	adds	r3, #7
 80057c4:	4393      	bics	r3, r2
 80057c6:	3308      	adds	r3, #8
 80057c8:	9307      	str	r3, [sp, #28]
 80057ca:	696b      	ldr	r3, [r5, #20]
 80057cc:	9a04      	ldr	r2, [sp, #16]
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	616b      	str	r3, [r5, #20]
 80057d2:	e75d      	b.n	8005690 <_vfiprintf_r+0x8c>
 80057d4:	210a      	movs	r1, #10
 80057d6:	434b      	muls	r3, r1
 80057d8:	4667      	mov	r7, ip
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	3909      	subs	r1, #9
 80057de:	e7a3      	b.n	8005728 <_vfiprintf_r+0x124>
 80057e0:	2301      	movs	r3, #1
 80057e2:	425b      	negs	r3, r3
 80057e4:	e7ce      	b.n	8005784 <_vfiprintf_r+0x180>
 80057e6:	2300      	movs	r3, #0
 80057e8:	001a      	movs	r2, r3
 80057ea:	3701      	adds	r7, #1
 80057ec:	606b      	str	r3, [r5, #4]
 80057ee:	7839      	ldrb	r1, [r7, #0]
 80057f0:	1c78      	adds	r0, r7, #1
 80057f2:	3930      	subs	r1, #48	; 0x30
 80057f4:	4684      	mov	ip, r0
 80057f6:	2909      	cmp	r1, #9
 80057f8:	d903      	bls.n	8005802 <_vfiprintf_r+0x1fe>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0c3      	beq.n	8005786 <_vfiprintf_r+0x182>
 80057fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005800:	e7c1      	b.n	8005786 <_vfiprintf_r+0x182>
 8005802:	230a      	movs	r3, #10
 8005804:	435a      	muls	r2, r3
 8005806:	4667      	mov	r7, ip
 8005808:	1852      	adds	r2, r2, r1
 800580a:	3b09      	subs	r3, #9
 800580c:	e7ef      	b.n	80057ee <_vfiprintf_r+0x1ea>
 800580e:	ab07      	add	r3, sp, #28
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	0022      	movs	r2, r4
 8005814:	0029      	movs	r1, r5
 8005816:	0030      	movs	r0, r6
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <_vfiprintf_r+0x270>)
 800581a:	e000      	b.n	800581e <_vfiprintf_r+0x21a>
 800581c:	bf00      	nop
 800581e:	9004      	str	r0, [sp, #16]
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	3301      	adds	r3, #1
 8005824:	d1d1      	bne.n	80057ca <_vfiprintf_r+0x1c6>
 8005826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005828:	07db      	lsls	r3, r3, #31
 800582a:	d405      	bmi.n	8005838 <_vfiprintf_r+0x234>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	059b      	lsls	r3, r3, #22
 8005830:	d402      	bmi.n	8005838 <_vfiprintf_r+0x234>
 8005832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005834:	f000 fc5a 	bl	80060ec <__retarget_lock_release_recursive>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	065b      	lsls	r3, r3, #25
 800583c:	d500      	bpl.n	8005840 <_vfiprintf_r+0x23c>
 800583e:	e70a      	b.n	8005656 <_vfiprintf_r+0x52>
 8005840:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005842:	e70a      	b.n	800565a <_vfiprintf_r+0x56>
 8005844:	ab07      	add	r3, sp, #28
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	0022      	movs	r2, r4
 800584a:	0029      	movs	r1, r5
 800584c:	0030      	movs	r0, r6
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <_vfiprintf_r+0x270>)
 8005850:	f000 f882 	bl	8005958 <_printf_i>
 8005854:	e7e3      	b.n	800581e <_vfiprintf_r+0x21a>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	080065f0 	.word	0x080065f0
 800585c:	08006610 	.word	0x08006610
 8005860:	080065d0 	.word	0x080065d0
 8005864:	0800659a 	.word	0x0800659a
 8005868:	080065a0 	.word	0x080065a0
 800586c:	080065a4 	.word	0x080065a4
 8005870:	00000000 	.word	0x00000000
 8005874:	080055df 	.word	0x080055df

08005878 <_printf_common>:
 8005878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800587a:	0015      	movs	r5, r2
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	688a      	ldr	r2, [r1, #8]
 8005880:	690b      	ldr	r3, [r1, #16]
 8005882:	000c      	movs	r4, r1
 8005884:	9000      	str	r0, [sp, #0]
 8005886:	4293      	cmp	r3, r2
 8005888:	da00      	bge.n	800588c <_printf_common+0x14>
 800588a:	0013      	movs	r3, r2
 800588c:	0022      	movs	r2, r4
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	3243      	adds	r2, #67	; 0x43
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	2a00      	cmp	r2, #0
 8005896:	d001      	beq.n	800589c <_printf_common+0x24>
 8005898:	3301      	adds	r3, #1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	069b      	lsls	r3, r3, #26
 80058a0:	d502      	bpl.n	80058a8 <_printf_common+0x30>
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	3302      	adds	r3, #2
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	2306      	movs	r3, #6
 80058ac:	0017      	movs	r7, r2
 80058ae:	401f      	ands	r7, r3
 80058b0:	421a      	tst	r2, r3
 80058b2:	d027      	beq.n	8005904 <_printf_common+0x8c>
 80058b4:	0023      	movs	r3, r4
 80058b6:	3343      	adds	r3, #67	; 0x43
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	4193      	sbcs	r3, r2
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d430      	bmi.n	8005926 <_printf_common+0xae>
 80058c4:	0022      	movs	r2, r4
 80058c6:	9901      	ldr	r1, [sp, #4]
 80058c8:	9800      	ldr	r0, [sp, #0]
 80058ca:	9e08      	ldr	r6, [sp, #32]
 80058cc:	3243      	adds	r2, #67	; 0x43
 80058ce:	47b0      	blx	r6
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d025      	beq.n	8005920 <_printf_common+0xa8>
 80058d4:	2306      	movs	r3, #6
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	682a      	ldr	r2, [r5, #0]
 80058da:	68e1      	ldr	r1, [r4, #12]
 80058dc:	2500      	movs	r5, #0
 80058de:	4003      	ands	r3, r0
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d103      	bne.n	80058ec <_printf_common+0x74>
 80058e4:	1a8d      	subs	r5, r1, r2
 80058e6:	43eb      	mvns	r3, r5
 80058e8:	17db      	asrs	r3, r3, #31
 80058ea:	401d      	ands	r5, r3
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	6922      	ldr	r2, [r4, #16]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	dd01      	ble.n	80058f8 <_printf_common+0x80>
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	18ed      	adds	r5, r5, r3
 80058f8:	2700      	movs	r7, #0
 80058fa:	42bd      	cmp	r5, r7
 80058fc:	d120      	bne.n	8005940 <_printf_common+0xc8>
 80058fe:	2000      	movs	r0, #0
 8005900:	e010      	b.n	8005924 <_printf_common+0xac>
 8005902:	3701      	adds	r7, #1
 8005904:	68e3      	ldr	r3, [r4, #12]
 8005906:	682a      	ldr	r2, [r5, #0]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	42bb      	cmp	r3, r7
 800590c:	ddd2      	ble.n	80058b4 <_printf_common+0x3c>
 800590e:	0022      	movs	r2, r4
 8005910:	2301      	movs	r3, #1
 8005912:	9901      	ldr	r1, [sp, #4]
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	9e08      	ldr	r6, [sp, #32]
 8005918:	3219      	adds	r2, #25
 800591a:	47b0      	blx	r6
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d1f0      	bne.n	8005902 <_printf_common+0x8a>
 8005920:	2001      	movs	r0, #1
 8005922:	4240      	negs	r0, r0
 8005924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005926:	2030      	movs	r0, #48	; 0x30
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	3143      	adds	r1, #67	; 0x43
 800592c:	7008      	strb	r0, [r1, #0]
 800592e:	0021      	movs	r1, r4
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	3145      	adds	r1, #69	; 0x45
 8005934:	7809      	ldrb	r1, [r1, #0]
 8005936:	18a2      	adds	r2, r4, r2
 8005938:	3243      	adds	r2, #67	; 0x43
 800593a:	3302      	adds	r3, #2
 800593c:	7011      	strb	r1, [r2, #0]
 800593e:	e7c1      	b.n	80058c4 <_printf_common+0x4c>
 8005940:	0022      	movs	r2, r4
 8005942:	2301      	movs	r3, #1
 8005944:	9901      	ldr	r1, [sp, #4]
 8005946:	9800      	ldr	r0, [sp, #0]
 8005948:	9e08      	ldr	r6, [sp, #32]
 800594a:	321a      	adds	r2, #26
 800594c:	47b0      	blx	r6
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d0e6      	beq.n	8005920 <_printf_common+0xa8>
 8005952:	3701      	adds	r7, #1
 8005954:	e7d1      	b.n	80058fa <_printf_common+0x82>
	...

08005958 <_printf_i>:
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b08b      	sub	sp, #44	; 0x2c
 800595c:	9206      	str	r2, [sp, #24]
 800595e:	000a      	movs	r2, r1
 8005960:	3243      	adds	r2, #67	; 0x43
 8005962:	9307      	str	r3, [sp, #28]
 8005964:	9005      	str	r0, [sp, #20]
 8005966:	9204      	str	r2, [sp, #16]
 8005968:	7e0a      	ldrb	r2, [r1, #24]
 800596a:	000c      	movs	r4, r1
 800596c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800596e:	2a78      	cmp	r2, #120	; 0x78
 8005970:	d807      	bhi.n	8005982 <_printf_i+0x2a>
 8005972:	2a62      	cmp	r2, #98	; 0x62
 8005974:	d809      	bhi.n	800598a <_printf_i+0x32>
 8005976:	2a00      	cmp	r2, #0
 8005978:	d100      	bne.n	800597c <_printf_i+0x24>
 800597a:	e0c1      	b.n	8005b00 <_printf_i+0x1a8>
 800597c:	2a58      	cmp	r2, #88	; 0x58
 800597e:	d100      	bne.n	8005982 <_printf_i+0x2a>
 8005980:	e08c      	b.n	8005a9c <_printf_i+0x144>
 8005982:	0026      	movs	r6, r4
 8005984:	3642      	adds	r6, #66	; 0x42
 8005986:	7032      	strb	r2, [r6, #0]
 8005988:	e022      	b.n	80059d0 <_printf_i+0x78>
 800598a:	0010      	movs	r0, r2
 800598c:	3863      	subs	r0, #99	; 0x63
 800598e:	2815      	cmp	r0, #21
 8005990:	d8f7      	bhi.n	8005982 <_printf_i+0x2a>
 8005992:	f7fa fbcd 	bl	8000130 <__gnu_thumb1_case_shi>
 8005996:	0016      	.short	0x0016
 8005998:	fff6001f 	.word	0xfff6001f
 800599c:	fff6fff6 	.word	0xfff6fff6
 80059a0:	001ffff6 	.word	0x001ffff6
 80059a4:	fff6fff6 	.word	0xfff6fff6
 80059a8:	fff6fff6 	.word	0xfff6fff6
 80059ac:	003600a8 	.word	0x003600a8
 80059b0:	fff6009a 	.word	0xfff6009a
 80059b4:	00b9fff6 	.word	0x00b9fff6
 80059b8:	0036fff6 	.word	0x0036fff6
 80059bc:	fff6fff6 	.word	0xfff6fff6
 80059c0:	009e      	.short	0x009e
 80059c2:	0026      	movs	r6, r4
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	3642      	adds	r6, #66	; 0x42
 80059c8:	1d11      	adds	r1, r2, #4
 80059ca:	6019      	str	r1, [r3, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	7033      	strb	r3, [r6, #0]
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0a7      	b.n	8005b24 <_printf_i+0x1cc>
 80059d4:	6808      	ldr	r0, [r1, #0]
 80059d6:	6819      	ldr	r1, [r3, #0]
 80059d8:	1d0a      	adds	r2, r1, #4
 80059da:	0605      	lsls	r5, r0, #24
 80059dc:	d50b      	bpl.n	80059f6 <_printf_i+0x9e>
 80059de:	680d      	ldr	r5, [r1, #0]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	da03      	bge.n	80059ee <_printf_i+0x96>
 80059e6:	232d      	movs	r3, #45	; 0x2d
 80059e8:	9a04      	ldr	r2, [sp, #16]
 80059ea:	426d      	negs	r5, r5
 80059ec:	7013      	strb	r3, [r2, #0]
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <_printf_i+0x21c>)
 80059f0:	270a      	movs	r7, #10
 80059f2:	9303      	str	r3, [sp, #12]
 80059f4:	e01b      	b.n	8005a2e <_printf_i+0xd6>
 80059f6:	680d      	ldr	r5, [r1, #0]
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	0641      	lsls	r1, r0, #25
 80059fc:	d5f1      	bpl.n	80059e2 <_printf_i+0x8a>
 80059fe:	b22d      	sxth	r5, r5
 8005a00:	e7ef      	b.n	80059e2 <_printf_i+0x8a>
 8005a02:	680d      	ldr	r5, [r1, #0]
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	1d08      	adds	r0, r1, #4
 8005a08:	6018      	str	r0, [r3, #0]
 8005a0a:	062e      	lsls	r6, r5, #24
 8005a0c:	d501      	bpl.n	8005a12 <_printf_i+0xba>
 8005a0e:	680d      	ldr	r5, [r1, #0]
 8005a10:	e003      	b.n	8005a1a <_printf_i+0xc2>
 8005a12:	066d      	lsls	r5, r5, #25
 8005a14:	d5fb      	bpl.n	8005a0e <_printf_i+0xb6>
 8005a16:	680d      	ldr	r5, [r1, #0]
 8005a18:	b2ad      	uxth	r5, r5
 8005a1a:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <_printf_i+0x21c>)
 8005a1c:	2708      	movs	r7, #8
 8005a1e:	9303      	str	r3, [sp, #12]
 8005a20:	2a6f      	cmp	r2, #111	; 0x6f
 8005a22:	d000      	beq.n	8005a26 <_printf_i+0xce>
 8005a24:	3702      	adds	r7, #2
 8005a26:	0023      	movs	r3, r4
 8005a28:	2200      	movs	r2, #0
 8005a2a:	3343      	adds	r3, #67	; 0x43
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db03      	blt.n	8005a3e <_printf_i+0xe6>
 8005a36:	2204      	movs	r2, #4
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	4391      	bics	r1, r2
 8005a3c:	6021      	str	r1, [r4, #0]
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	d102      	bne.n	8005a48 <_printf_i+0xf0>
 8005a42:	9e04      	ldr	r6, [sp, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <_printf_i+0x10a>
 8005a48:	9e04      	ldr	r6, [sp, #16]
 8005a4a:	0028      	movs	r0, r5
 8005a4c:	0039      	movs	r1, r7
 8005a4e:	f7fa fbff 	bl	8000250 <__aeabi_uidivmod>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	3e01      	subs	r6, #1
 8005a56:	5c5b      	ldrb	r3, [r3, r1]
 8005a58:	7033      	strb	r3, [r6, #0]
 8005a5a:	002b      	movs	r3, r5
 8005a5c:	0005      	movs	r5, r0
 8005a5e:	429f      	cmp	r7, r3
 8005a60:	d9f3      	bls.n	8005a4a <_printf_i+0xf2>
 8005a62:	2f08      	cmp	r7, #8
 8005a64:	d109      	bne.n	8005a7a <_printf_i+0x122>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	07db      	lsls	r3, r3, #31
 8005a6a:	d506      	bpl.n	8005a7a <_printf_i+0x122>
 8005a6c:	6863      	ldr	r3, [r4, #4]
 8005a6e:	6922      	ldr	r2, [r4, #16]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	dc02      	bgt.n	8005a7a <_printf_i+0x122>
 8005a74:	2330      	movs	r3, #48	; 0x30
 8005a76:	3e01      	subs	r6, #1
 8005a78:	7033      	strb	r3, [r6, #0]
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	1b9b      	subs	r3, r3, r6
 8005a7e:	6123      	str	r3, [r4, #16]
 8005a80:	9b07      	ldr	r3, [sp, #28]
 8005a82:	0021      	movs	r1, r4
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	9805      	ldr	r0, [sp, #20]
 8005a88:	9b06      	ldr	r3, [sp, #24]
 8005a8a:	aa09      	add	r2, sp, #36	; 0x24
 8005a8c:	f7ff fef4 	bl	8005878 <_printf_common>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d14c      	bne.n	8005b2e <_printf_i+0x1d6>
 8005a94:	2001      	movs	r0, #1
 8005a96:	4240      	negs	r0, r0
 8005a98:	b00b      	add	sp, #44	; 0x2c
 8005a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9c:	3145      	adds	r1, #69	; 0x45
 8005a9e:	700a      	strb	r2, [r1, #0]
 8005aa0:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <_printf_i+0x21c>)
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	6821      	ldr	r1, [r4, #0]
 8005aa8:	ca20      	ldmia	r2!, {r5}
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	0608      	lsls	r0, r1, #24
 8005aae:	d516      	bpl.n	8005ade <_printf_i+0x186>
 8005ab0:	07cb      	lsls	r3, r1, #31
 8005ab2:	d502      	bpl.n	8005aba <_printf_i+0x162>
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	4319      	orrs	r1, r3
 8005ab8:	6021      	str	r1, [r4, #0]
 8005aba:	2710      	movs	r7, #16
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	d1b2      	bne.n	8005a26 <_printf_i+0xce>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	439a      	bics	r2, r3
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	e7ad      	b.n	8005a26 <_printf_i+0xce>
 8005aca:	2220      	movs	r2, #32
 8005acc:	6809      	ldr	r1, [r1, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	0022      	movs	r2, r4
 8005ad4:	2178      	movs	r1, #120	; 0x78
 8005ad6:	3245      	adds	r2, #69	; 0x45
 8005ad8:	7011      	strb	r1, [r2, #0]
 8005ada:	4a27      	ldr	r2, [pc, #156]	; (8005b78 <_printf_i+0x220>)
 8005adc:	e7e1      	b.n	8005aa2 <_printf_i+0x14a>
 8005ade:	0648      	lsls	r0, r1, #25
 8005ae0:	d5e6      	bpl.n	8005ab0 <_printf_i+0x158>
 8005ae2:	b2ad      	uxth	r5, r5
 8005ae4:	e7e4      	b.n	8005ab0 <_printf_i+0x158>
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	680d      	ldr	r5, [r1, #0]
 8005aea:	1d10      	adds	r0, r2, #4
 8005aec:	6949      	ldr	r1, [r1, #20]
 8005aee:	6018      	str	r0, [r3, #0]
 8005af0:	6813      	ldr	r3, [r2, #0]
 8005af2:	062e      	lsls	r6, r5, #24
 8005af4:	d501      	bpl.n	8005afa <_printf_i+0x1a2>
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <_printf_i+0x1a8>
 8005afa:	066d      	lsls	r5, r5, #25
 8005afc:	d5fb      	bpl.n	8005af6 <_printf_i+0x19e>
 8005afe:	8019      	strh	r1, [r3, #0]
 8005b00:	2300      	movs	r3, #0
 8005b02:	9e04      	ldr	r6, [sp, #16]
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	e7bb      	b.n	8005a80 <_printf_i+0x128>
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	1d11      	adds	r1, r2, #4
 8005b0c:	6019      	str	r1, [r3, #0]
 8005b0e:	6816      	ldr	r6, [r2, #0]
 8005b10:	2100      	movs	r1, #0
 8005b12:	0030      	movs	r0, r6
 8005b14:	6862      	ldr	r2, [r4, #4]
 8005b16:	f000 fb57 	bl	80061c8 <memchr>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d001      	beq.n	8005b22 <_printf_i+0x1ca>
 8005b1e:	1b80      	subs	r0, r0, r6
 8005b20:	6060      	str	r0, [r4, #4]
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9a04      	ldr	r2, [sp, #16]
 8005b2a:	7013      	strb	r3, [r2, #0]
 8005b2c:	e7a8      	b.n	8005a80 <_printf_i+0x128>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	0032      	movs	r2, r6
 8005b32:	9906      	ldr	r1, [sp, #24]
 8005b34:	9805      	ldr	r0, [sp, #20]
 8005b36:	9d07      	ldr	r5, [sp, #28]
 8005b38:	47a8      	blx	r5
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d0aa      	beq.n	8005a94 <_printf_i+0x13c>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	079b      	lsls	r3, r3, #30
 8005b42:	d415      	bmi.n	8005b70 <_printf_i+0x218>
 8005b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b46:	68e0      	ldr	r0, [r4, #12]
 8005b48:	4298      	cmp	r0, r3
 8005b4a:	daa5      	bge.n	8005a98 <_printf_i+0x140>
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	e7a3      	b.n	8005a98 <_printf_i+0x140>
 8005b50:	0022      	movs	r2, r4
 8005b52:	2301      	movs	r3, #1
 8005b54:	9906      	ldr	r1, [sp, #24]
 8005b56:	9805      	ldr	r0, [sp, #20]
 8005b58:	9e07      	ldr	r6, [sp, #28]
 8005b5a:	3219      	adds	r2, #25
 8005b5c:	47b0      	blx	r6
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d098      	beq.n	8005a94 <_printf_i+0x13c>
 8005b62:	3501      	adds	r5, #1
 8005b64:	68e3      	ldr	r3, [r4, #12]
 8005b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	42ab      	cmp	r3, r5
 8005b6c:	dcf0      	bgt.n	8005b50 <_printf_i+0x1f8>
 8005b6e:	e7e9      	b.n	8005b44 <_printf_i+0x1ec>
 8005b70:	2500      	movs	r5, #0
 8005b72:	e7f7      	b.n	8005b64 <_printf_i+0x20c>
 8005b74:	080065ab 	.word	0x080065ab
 8005b78:	080065bc 	.word	0x080065bc

08005b7c <_sbrk_r>:
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	4d06      	ldr	r5, [pc, #24]	; (8005b9c <_sbrk_r+0x20>)
 8005b82:	0004      	movs	r4, r0
 8005b84:	0008      	movs	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fc fab8 	bl	80020fc <_sbrk>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d103      	bne.n	8005b98 <_sbrk_r+0x1c>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d000      	beq.n	8005b98 <_sbrk_r+0x1c>
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	200010b0 	.word	0x200010b0

08005ba0 <__swbuf_r>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	0005      	movs	r5, r0
 8005ba4:	000e      	movs	r6, r1
 8005ba6:	0014      	movs	r4, r2
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d004      	beq.n	8005bb6 <__swbuf_r+0x16>
 8005bac:	6983      	ldr	r3, [r0, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <__swbuf_r+0x16>
 8005bb2:	f000 f9f9 	bl	8005fa8 <__sinit>
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <__swbuf_r+0xa0>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d12e      	bne.n	8005c1a <__swbuf_r+0x7a>
 8005bbc:	686c      	ldr	r4, [r5, #4]
 8005bbe:	69a3      	ldr	r3, [r4, #24]
 8005bc0:	60a3      	str	r3, [r4, #8]
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	071b      	lsls	r3, r3, #28
 8005bc6:	d532      	bpl.n	8005c2e <__swbuf_r+0x8e>
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02f      	beq.n	8005c2e <__swbuf_r+0x8e>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	b2f7      	uxtb	r7, r6
 8005bd4:	1a98      	subs	r0, r3, r2
 8005bd6:	6963      	ldr	r3, [r4, #20]
 8005bd8:	b2f6      	uxtb	r6, r6
 8005bda:	4283      	cmp	r3, r0
 8005bdc:	dc05      	bgt.n	8005bea <__swbuf_r+0x4a>
 8005bde:	0021      	movs	r1, r4
 8005be0:	0028      	movs	r0, r5
 8005be2:	f000 f93f 	bl	8005e64 <_fflush_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d127      	bne.n	8005c3a <__swbuf_r+0x9a>
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	3001      	adds	r0, #1
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	6022      	str	r2, [r4, #0]
 8005bf8:	701f      	strb	r7, [r3, #0]
 8005bfa:	6963      	ldr	r3, [r4, #20]
 8005bfc:	4283      	cmp	r3, r0
 8005bfe:	d004      	beq.n	8005c0a <__swbuf_r+0x6a>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	07db      	lsls	r3, r3, #31
 8005c04:	d507      	bpl.n	8005c16 <__swbuf_r+0x76>
 8005c06:	2e0a      	cmp	r6, #10
 8005c08:	d105      	bne.n	8005c16 <__swbuf_r+0x76>
 8005c0a:	0021      	movs	r1, r4
 8005c0c:	0028      	movs	r0, r5
 8005c0e:	f000 f929 	bl	8005e64 <_fflush_r>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d111      	bne.n	8005c3a <__swbuf_r+0x9a>
 8005c16:	0030      	movs	r0, r6
 8005c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <__swbuf_r+0xa4>)
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d101      	bne.n	8005c24 <__swbuf_r+0x84>
 8005c20:	68ac      	ldr	r4, [r5, #8]
 8005c22:	e7cc      	b.n	8005bbe <__swbuf_r+0x1e>
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <__swbuf_r+0xa8>)
 8005c26:	429c      	cmp	r4, r3
 8005c28:	d1c9      	bne.n	8005bbe <__swbuf_r+0x1e>
 8005c2a:	68ec      	ldr	r4, [r5, #12]
 8005c2c:	e7c7      	b.n	8005bbe <__swbuf_r+0x1e>
 8005c2e:	0021      	movs	r1, r4
 8005c30:	0028      	movs	r0, r5
 8005c32:	f000 f80b 	bl	8005c4c <__swsetup_r>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0c9      	beq.n	8005bce <__swbuf_r+0x2e>
 8005c3a:	2601      	movs	r6, #1
 8005c3c:	4276      	negs	r6, r6
 8005c3e:	e7ea      	b.n	8005c16 <__swbuf_r+0x76>
 8005c40:	080065f0 	.word	0x080065f0
 8005c44:	08006610 	.word	0x08006610
 8005c48:	080065d0 	.word	0x080065d0

08005c4c <__swsetup_r>:
 8005c4c:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <__swsetup_r+0xe0>)
 8005c4e:	b570      	push	{r4, r5, r6, lr}
 8005c50:	681d      	ldr	r5, [r3, #0]
 8005c52:	0006      	movs	r6, r0
 8005c54:	000c      	movs	r4, r1
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	d005      	beq.n	8005c66 <__swsetup_r+0x1a>
 8005c5a:	69ab      	ldr	r3, [r5, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <__swsetup_r+0x1a>
 8005c60:	0028      	movs	r0, r5
 8005c62:	f000 f9a1 	bl	8005fa8 <__sinit>
 8005c66:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <__swsetup_r+0xe4>)
 8005c68:	429c      	cmp	r4, r3
 8005c6a:	d10f      	bne.n	8005c8c <__swsetup_r+0x40>
 8005c6c:	686c      	ldr	r4, [r5, #4]
 8005c6e:	230c      	movs	r3, #12
 8005c70:	5ee2      	ldrsh	r2, [r4, r3]
 8005c72:	b293      	uxth	r3, r2
 8005c74:	0711      	lsls	r1, r2, #28
 8005c76:	d42d      	bmi.n	8005cd4 <__swsetup_r+0x88>
 8005c78:	06d9      	lsls	r1, r3, #27
 8005c7a:	d411      	bmi.n	8005ca0 <__swsetup_r+0x54>
 8005c7c:	2309      	movs	r3, #9
 8005c7e:	2001      	movs	r0, #1
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	3337      	adds	r3, #55	; 0x37
 8005c84:	4313      	orrs	r3, r2
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	4240      	negs	r0, r0
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <__swsetup_r+0xe8>)
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	d101      	bne.n	8005c96 <__swsetup_r+0x4a>
 8005c92:	68ac      	ldr	r4, [r5, #8]
 8005c94:	e7eb      	b.n	8005c6e <__swsetup_r+0x22>
 8005c96:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <__swsetup_r+0xec>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d1e8      	bne.n	8005c6e <__swsetup_r+0x22>
 8005c9c:	68ec      	ldr	r4, [r5, #12]
 8005c9e:	e7e6      	b.n	8005c6e <__swsetup_r+0x22>
 8005ca0:	075b      	lsls	r3, r3, #29
 8005ca2:	d513      	bpl.n	8005ccc <__swsetup_r+0x80>
 8005ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	d008      	beq.n	8005cbc <__swsetup_r+0x70>
 8005caa:	0023      	movs	r3, r4
 8005cac:	3344      	adds	r3, #68	; 0x44
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	d002      	beq.n	8005cb8 <__swsetup_r+0x6c>
 8005cb2:	0030      	movs	r0, r6
 8005cb4:	f7ff fb9c 	bl	80053f0 <_free_r>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6363      	str	r3, [r4, #52]	; 0x34
 8005cbc:	2224      	movs	r2, #36	; 0x24
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	4393      	bics	r3, r2
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	2308      	movs	r3, #8
 8005cce:	89a2      	ldrh	r2, [r4, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <__swsetup_r+0xa6>
 8005cda:	21a0      	movs	r1, #160	; 0xa0
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	0089      	lsls	r1, r1, #2
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <__swsetup_r+0xa6>
 8005cea:	0021      	movs	r1, r4
 8005cec:	0030      	movs	r0, r6
 8005cee:	f000 fa27 	bl	8006140 <__smakebuf_r>
 8005cf2:	220c      	movs	r2, #12
 8005cf4:	5ea3      	ldrsh	r3, [r4, r2]
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	b299      	uxth	r1, r3
 8005cfc:	4002      	ands	r2, r0
 8005cfe:	4203      	tst	r3, r0
 8005d00:	d00f      	beq.n	8005d22 <__swsetup_r+0xd6>
 8005d02:	2200      	movs	r2, #0
 8005d04:	60a2      	str	r2, [r4, #8]
 8005d06:	6962      	ldr	r2, [r4, #20]
 8005d08:	4252      	negs	r2, r2
 8005d0a:	61a2      	str	r2, [r4, #24]
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	6922      	ldr	r2, [r4, #16]
 8005d10:	4282      	cmp	r2, r0
 8005d12:	d1ba      	bne.n	8005c8a <__swsetup_r+0x3e>
 8005d14:	060a      	lsls	r2, r1, #24
 8005d16:	d5b8      	bpl.n	8005c8a <__swsetup_r+0x3e>
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	3801      	subs	r0, #1
 8005d20:	e7b3      	b.n	8005c8a <__swsetup_r+0x3e>
 8005d22:	0788      	lsls	r0, r1, #30
 8005d24:	d400      	bmi.n	8005d28 <__swsetup_r+0xdc>
 8005d26:	6962      	ldr	r2, [r4, #20]
 8005d28:	60a2      	str	r2, [r4, #8]
 8005d2a:	e7ef      	b.n	8005d0c <__swsetup_r+0xc0>
 8005d2c:	20000034 	.word	0x20000034
 8005d30:	080065f0 	.word	0x080065f0
 8005d34:	08006610 	.word	0x08006610
 8005d38:	080065d0 	.word	0x080065d0

08005d3c <abort>:
 8005d3c:	2006      	movs	r0, #6
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	f000 fa88 	bl	8006254 <raise>
 8005d44:	2001      	movs	r0, #1
 8005d46:	f7fc f9ad 	bl	80020a4 <_exit>
	...

08005d4c <__sflush_r>:
 8005d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4e:	898b      	ldrh	r3, [r1, #12]
 8005d50:	0005      	movs	r5, r0
 8005d52:	000c      	movs	r4, r1
 8005d54:	071a      	lsls	r2, r3, #28
 8005d56:	d45f      	bmi.n	8005e18 <__sflush_r+0xcc>
 8005d58:	684a      	ldr	r2, [r1, #4]
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	dc04      	bgt.n	8005d68 <__sflush_r+0x1c>
 8005d5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	dc01      	bgt.n	8005d68 <__sflush_r+0x1c>
 8005d64:	2000      	movs	r0, #0
 8005d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d6a:	2f00      	cmp	r7, #0
 8005d6c:	d0fa      	beq.n	8005d64 <__sflush_r+0x18>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	682e      	ldr	r6, [r5, #0]
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	001a      	movs	r2, r3
 8005d78:	0149      	lsls	r1, r1, #5
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	420b      	tst	r3, r1
 8005d7e:	d034      	beq.n	8005dea <__sflush_r+0x9e>
 8005d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	075b      	lsls	r3, r3, #29
 8005d86:	d506      	bpl.n	8005d96 <__sflush_r+0x4a>
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	1ac0      	subs	r0, r0, r3
 8005d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <__sflush_r+0x4a>
 8005d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d94:	1ac0      	subs	r0, r0, r3
 8005d96:	0002      	movs	r2, r0
 8005d98:	6a21      	ldr	r1, [r4, #32]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	0028      	movs	r0, r5
 8005d9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005da0:	47b8      	blx	r7
 8005da2:	89a1      	ldrh	r1, [r4, #12]
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d106      	bne.n	8005db6 <__sflush_r+0x6a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	2b1d      	cmp	r3, #29
 8005dac:	d831      	bhi.n	8005e12 <__sflush_r+0xc6>
 8005dae:	4a2c      	ldr	r2, [pc, #176]	; (8005e60 <__sflush_r+0x114>)
 8005db0:	40da      	lsrs	r2, r3
 8005db2:	07d3      	lsls	r3, r2, #31
 8005db4:	d52d      	bpl.n	8005e12 <__sflush_r+0xc6>
 8005db6:	2300      	movs	r3, #0
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	04cb      	lsls	r3, r1, #19
 8005dc0:	d505      	bpl.n	8005dce <__sflush_r+0x82>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d102      	bne.n	8005dcc <__sflush_r+0x80>
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d100      	bne.n	8005dce <__sflush_r+0x82>
 8005dcc:	6560      	str	r0, [r4, #84]	; 0x54
 8005dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dd0:	602e      	str	r6, [r5, #0]
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d0c6      	beq.n	8005d64 <__sflush_r+0x18>
 8005dd6:	0023      	movs	r3, r4
 8005dd8:	3344      	adds	r3, #68	; 0x44
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	d002      	beq.n	8005de4 <__sflush_r+0x98>
 8005dde:	0028      	movs	r0, r5
 8005de0:	f7ff fb06 	bl	80053f0 <_free_r>
 8005de4:	2000      	movs	r0, #0
 8005de6:	6360      	str	r0, [r4, #52]	; 0x34
 8005de8:	e7bd      	b.n	8005d66 <__sflush_r+0x1a>
 8005dea:	2301      	movs	r3, #1
 8005dec:	0028      	movs	r0, r5
 8005dee:	6a21      	ldr	r1, [r4, #32]
 8005df0:	47b8      	blx	r7
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d1c5      	bne.n	8005d82 <__sflush_r+0x36>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0c2      	beq.n	8005d82 <__sflush_r+0x36>
 8005dfc:	2b1d      	cmp	r3, #29
 8005dfe:	d001      	beq.n	8005e04 <__sflush_r+0xb8>
 8005e00:	2b16      	cmp	r3, #22
 8005e02:	d101      	bne.n	8005e08 <__sflush_r+0xbc>
 8005e04:	602e      	str	r6, [r5, #0]
 8005e06:	e7ad      	b.n	8005d64 <__sflush_r+0x18>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	89a2      	ldrh	r2, [r4, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	e7a9      	b.n	8005d66 <__sflush_r+0x1a>
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	430b      	orrs	r3, r1
 8005e16:	e7fa      	b.n	8005e0e <__sflush_r+0xc2>
 8005e18:	690f      	ldr	r7, [r1, #16]
 8005e1a:	2f00      	cmp	r7, #0
 8005e1c:	d0a2      	beq.n	8005d64 <__sflush_r+0x18>
 8005e1e:	680a      	ldr	r2, [r1, #0]
 8005e20:	600f      	str	r7, [r1, #0]
 8005e22:	1bd2      	subs	r2, r2, r7
 8005e24:	9201      	str	r2, [sp, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	079b      	lsls	r3, r3, #30
 8005e2a:	d100      	bne.n	8005e2e <__sflush_r+0xe2>
 8005e2c:	694a      	ldr	r2, [r1, #20]
 8005e2e:	60a2      	str	r2, [r4, #8]
 8005e30:	9b01      	ldr	r3, [sp, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dc00      	bgt.n	8005e38 <__sflush_r+0xec>
 8005e36:	e795      	b.n	8005d64 <__sflush_r+0x18>
 8005e38:	003a      	movs	r2, r7
 8005e3a:	0028      	movs	r0, r5
 8005e3c:	9b01      	ldr	r3, [sp, #4]
 8005e3e:	6a21      	ldr	r1, [r4, #32]
 8005e40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e42:	47b0      	blx	r6
 8005e44:	2800      	cmp	r0, #0
 8005e46:	dc06      	bgt.n	8005e56 <__sflush_r+0x10a>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	89a2      	ldrh	r2, [r4, #12]
 8005e4e:	4240      	negs	r0, r0
 8005e50:	4313      	orrs	r3, r2
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	e787      	b.n	8005d66 <__sflush_r+0x1a>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	183f      	adds	r7, r7, r0
 8005e5a:	1a1b      	subs	r3, r3, r0
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	e7e7      	b.n	8005e30 <__sflush_r+0xe4>
 8005e60:	20400001 	.word	0x20400001

08005e64 <_fflush_r>:
 8005e64:	690b      	ldr	r3, [r1, #16]
 8005e66:	b570      	push	{r4, r5, r6, lr}
 8005e68:	0005      	movs	r5, r0
 8005e6a:	000c      	movs	r4, r1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <_fflush_r+0x12>
 8005e70:	2500      	movs	r5, #0
 8005e72:	0028      	movs	r0, r5
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d004      	beq.n	8005e84 <_fflush_r+0x20>
 8005e7a:	6983      	ldr	r3, [r0, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <_fflush_r+0x20>
 8005e80:	f000 f892 	bl	8005fa8 <__sinit>
 8005e84:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <_fflush_r+0x74>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d11b      	bne.n	8005ec2 <_fflush_r+0x5e>
 8005e8a:	686c      	ldr	r4, [r5, #4]
 8005e8c:	220c      	movs	r2, #12
 8005e8e:	5ea3      	ldrsh	r3, [r4, r2]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ed      	beq.n	8005e70 <_fflush_r+0xc>
 8005e94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e96:	07d2      	lsls	r2, r2, #31
 8005e98:	d404      	bmi.n	8005ea4 <_fflush_r+0x40>
 8005e9a:	059b      	lsls	r3, r3, #22
 8005e9c:	d402      	bmi.n	8005ea4 <_fflush_r+0x40>
 8005e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea0:	f000 f923 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	0021      	movs	r1, r4
 8005ea8:	f7ff ff50 	bl	8005d4c <__sflush_r>
 8005eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eae:	0005      	movs	r5, r0
 8005eb0:	07db      	lsls	r3, r3, #31
 8005eb2:	d4de      	bmi.n	8005e72 <_fflush_r+0xe>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	059b      	lsls	r3, r3, #22
 8005eb8:	d4db      	bmi.n	8005e72 <_fflush_r+0xe>
 8005eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ebc:	f000 f916 	bl	80060ec <__retarget_lock_release_recursive>
 8005ec0:	e7d7      	b.n	8005e72 <_fflush_r+0xe>
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <_fflush_r+0x78>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d101      	bne.n	8005ecc <_fflush_r+0x68>
 8005ec8:	68ac      	ldr	r4, [r5, #8]
 8005eca:	e7df      	b.n	8005e8c <_fflush_r+0x28>
 8005ecc:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <_fflush_r+0x7c>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d1dc      	bne.n	8005e8c <_fflush_r+0x28>
 8005ed2:	68ec      	ldr	r4, [r5, #12]
 8005ed4:	e7da      	b.n	8005e8c <_fflush_r+0x28>
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	080065f0 	.word	0x080065f0
 8005edc:	08006610 	.word	0x08006610
 8005ee0:	080065d0 	.word	0x080065d0

08005ee4 <std>:
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	0004      	movs	r4, r0
 8005eea:	6003      	str	r3, [r0, #0]
 8005eec:	6043      	str	r3, [r0, #4]
 8005eee:	6083      	str	r3, [r0, #8]
 8005ef0:	8181      	strh	r1, [r0, #12]
 8005ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	81c2      	strh	r2, [r0, #14]
 8005ef8:	6103      	str	r3, [r0, #16]
 8005efa:	6143      	str	r3, [r0, #20]
 8005efc:	6183      	str	r3, [r0, #24]
 8005efe:	2208      	movs	r2, #8
 8005f00:	305c      	adds	r0, #92	; 0x5c
 8005f02:	f7ff f9c7 	bl	8005294 <memset>
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x38>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <std+0x3c>)
 8005f0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <std+0x40>)
 8005f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <std+0x44>)
 8005f16:	6323      	str	r3, [r4, #48]	; 0x30
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	08006295 	.word	0x08006295
 8005f20:	080062bd 	.word	0x080062bd
 8005f24:	080062f5 	.word	0x080062f5
 8005f28:	08006321 	.word	0x08006321

08005f2c <_cleanup_r>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	4902      	ldr	r1, [pc, #8]	; (8005f38 <_cleanup_r+0xc>)
 8005f30:	f000 f8ba 	bl	80060a8 <_fwalk_reent>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	08005e65 	.word	0x08005e65

08005f3c <__sfmoreglue>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	2568      	movs	r5, #104	; 0x68
 8005f40:	1e4a      	subs	r2, r1, #1
 8005f42:	4355      	muls	r5, r2
 8005f44:	000e      	movs	r6, r1
 8005f46:	0029      	movs	r1, r5
 8005f48:	3174      	adds	r1, #116	; 0x74
 8005f4a:	f7ff fabd 	bl	80054c8 <_malloc_r>
 8005f4e:	1e04      	subs	r4, r0, #0
 8005f50:	d008      	beq.n	8005f64 <__sfmoreglue+0x28>
 8005f52:	2100      	movs	r1, #0
 8005f54:	002a      	movs	r2, r5
 8005f56:	6001      	str	r1, [r0, #0]
 8005f58:	6046      	str	r6, [r0, #4]
 8005f5a:	300c      	adds	r0, #12
 8005f5c:	60a0      	str	r0, [r4, #8]
 8005f5e:	3268      	adds	r2, #104	; 0x68
 8005f60:	f7ff f998 	bl	8005294 <memset>
 8005f64:	0020      	movs	r0, r4
 8005f66:	bd70      	pop	{r4, r5, r6, pc}

08005f68 <__sfp_lock_acquire>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4802      	ldr	r0, [pc, #8]	; (8005f74 <__sfp_lock_acquire+0xc>)
 8005f6c:	f000 f8bd 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	200010ad 	.word	0x200010ad

08005f78 <__sfp_lock_release>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4802      	ldr	r0, [pc, #8]	; (8005f84 <__sfp_lock_release+0xc>)
 8005f7c:	f000 f8b6 	bl	80060ec <__retarget_lock_release_recursive>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	200010ad 	.word	0x200010ad

08005f88 <__sinit_lock_acquire>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4802      	ldr	r0, [pc, #8]	; (8005f94 <__sinit_lock_acquire+0xc>)
 8005f8c:	f000 f8ad 	bl	80060ea <__retarget_lock_acquire_recursive>
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	200010ae 	.word	0x200010ae

08005f98 <__sinit_lock_release>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <__sinit_lock_release+0xc>)
 8005f9c:	f000 f8a6 	bl	80060ec <__retarget_lock_release_recursive>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	200010ae 	.word	0x200010ae

08005fa8 <__sinit>:
 8005fa8:	b513      	push	{r0, r1, r4, lr}
 8005faa:	0004      	movs	r4, r0
 8005fac:	f7ff ffec 	bl	8005f88 <__sinit_lock_acquire>
 8005fb0:	69a3      	ldr	r3, [r4, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <__sinit+0x14>
 8005fb6:	f7ff ffef 	bl	8005f98 <__sinit_lock_release>
 8005fba:	bd13      	pop	{r0, r1, r4, pc}
 8005fbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <__sinit+0x68>)
 8005fc4:	4a13      	ldr	r2, [pc, #76]	; (8006014 <__sinit+0x6c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d101      	bne.n	8005fd4 <__sinit+0x2c>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	61a3      	str	r3, [r4, #24]
 8005fd4:	0020      	movs	r0, r4
 8005fd6:	f000 f81f 	bl	8006018 <__sfp>
 8005fda:	6060      	str	r0, [r4, #4]
 8005fdc:	0020      	movs	r0, r4
 8005fde:	f000 f81b 	bl	8006018 <__sfp>
 8005fe2:	60a0      	str	r0, [r4, #8]
 8005fe4:	0020      	movs	r0, r4
 8005fe6:	f000 f817 	bl	8006018 <__sfp>
 8005fea:	2200      	movs	r2, #0
 8005fec:	2104      	movs	r1, #4
 8005fee:	60e0      	str	r0, [r4, #12]
 8005ff0:	6860      	ldr	r0, [r4, #4]
 8005ff2:	f7ff ff77 	bl	8005ee4 <std>
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	2109      	movs	r1, #9
 8005ffa:	68a0      	ldr	r0, [r4, #8]
 8005ffc:	f7ff ff72 	bl	8005ee4 <std>
 8006000:	2202      	movs	r2, #2
 8006002:	2112      	movs	r1, #18
 8006004:	68e0      	ldr	r0, [r4, #12]
 8006006:	f7ff ff6d 	bl	8005ee4 <std>
 800600a:	2301      	movs	r3, #1
 800600c:	61a3      	str	r3, [r4, #24]
 800600e:	e7d2      	b.n	8005fb6 <__sinit+0xe>
 8006010:	080064e8 	.word	0x080064e8
 8006014:	08005f2d 	.word	0x08005f2d

08006018 <__sfp>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	0007      	movs	r7, r0
 800601c:	f7ff ffa4 	bl	8005f68 <__sfp_lock_acquire>
 8006020:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <__sfp+0x88>)
 8006022:	681e      	ldr	r6, [r3, #0]
 8006024:	69b3      	ldr	r3, [r6, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <__sfp+0x18>
 800602a:	0030      	movs	r0, r6
 800602c:	f7ff ffbc 	bl	8005fa8 <__sinit>
 8006030:	3648      	adds	r6, #72	; 0x48
 8006032:	68b4      	ldr	r4, [r6, #8]
 8006034:	6873      	ldr	r3, [r6, #4]
 8006036:	3b01      	subs	r3, #1
 8006038:	d504      	bpl.n	8006044 <__sfp+0x2c>
 800603a:	6833      	ldr	r3, [r6, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d022      	beq.n	8006086 <__sfp+0x6e>
 8006040:	6836      	ldr	r6, [r6, #0]
 8006042:	e7f6      	b.n	8006032 <__sfp+0x1a>
 8006044:	220c      	movs	r2, #12
 8006046:	5ea5      	ldrsh	r5, [r4, r2]
 8006048:	2d00      	cmp	r5, #0
 800604a:	d11a      	bne.n	8006082 <__sfp+0x6a>
 800604c:	0020      	movs	r0, r4
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <__sfp+0x8c>)
 8006050:	3058      	adds	r0, #88	; 0x58
 8006052:	60e3      	str	r3, [r4, #12]
 8006054:	6665      	str	r5, [r4, #100]	; 0x64
 8006056:	f000 f847 	bl	80060e8 <__retarget_lock_init_recursive>
 800605a:	f7ff ff8d 	bl	8005f78 <__sfp_lock_release>
 800605e:	0020      	movs	r0, r4
 8006060:	2208      	movs	r2, #8
 8006062:	0029      	movs	r1, r5
 8006064:	6025      	str	r5, [r4, #0]
 8006066:	60a5      	str	r5, [r4, #8]
 8006068:	6065      	str	r5, [r4, #4]
 800606a:	6125      	str	r5, [r4, #16]
 800606c:	6165      	str	r5, [r4, #20]
 800606e:	61a5      	str	r5, [r4, #24]
 8006070:	305c      	adds	r0, #92	; 0x5c
 8006072:	f7ff f90f 	bl	8005294 <memset>
 8006076:	6365      	str	r5, [r4, #52]	; 0x34
 8006078:	63a5      	str	r5, [r4, #56]	; 0x38
 800607a:	64a5      	str	r5, [r4, #72]	; 0x48
 800607c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800607e:	0020      	movs	r0, r4
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	3468      	adds	r4, #104	; 0x68
 8006084:	e7d7      	b.n	8006036 <__sfp+0x1e>
 8006086:	2104      	movs	r1, #4
 8006088:	0038      	movs	r0, r7
 800608a:	f7ff ff57 	bl	8005f3c <__sfmoreglue>
 800608e:	1e04      	subs	r4, r0, #0
 8006090:	6030      	str	r0, [r6, #0]
 8006092:	d1d5      	bne.n	8006040 <__sfp+0x28>
 8006094:	f7ff ff70 	bl	8005f78 <__sfp_lock_release>
 8006098:	230c      	movs	r3, #12
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	e7ef      	b.n	800607e <__sfp+0x66>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	080064e8 	.word	0x080064e8
 80060a4:	ffff0001 	.word	0xffff0001

080060a8 <_fwalk_reent>:
 80060a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060aa:	0004      	movs	r4, r0
 80060ac:	0006      	movs	r6, r0
 80060ae:	2700      	movs	r7, #0
 80060b0:	9101      	str	r1, [sp, #4]
 80060b2:	3448      	adds	r4, #72	; 0x48
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	68a5      	ldr	r5, [r4, #8]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	d504      	bpl.n	80060cc <_fwalk_reent+0x24>
 80060c2:	6824      	ldr	r4, [r4, #0]
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d1f5      	bne.n	80060b4 <_fwalk_reent+0xc>
 80060c8:	0038      	movs	r0, r7
 80060ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060cc:	89ab      	ldrh	r3, [r5, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d908      	bls.n	80060e4 <_fwalk_reent+0x3c>
 80060d2:	220e      	movs	r2, #14
 80060d4:	5eab      	ldrsh	r3, [r5, r2]
 80060d6:	3301      	adds	r3, #1
 80060d8:	d004      	beq.n	80060e4 <_fwalk_reent+0x3c>
 80060da:	0029      	movs	r1, r5
 80060dc:	0030      	movs	r0, r6
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	4798      	blx	r3
 80060e2:	4307      	orrs	r7, r0
 80060e4:	3568      	adds	r5, #104	; 0x68
 80060e6:	e7e8      	b.n	80060ba <_fwalk_reent+0x12>

080060e8 <__retarget_lock_init_recursive>:
 80060e8:	4770      	bx	lr

080060ea <__retarget_lock_acquire_recursive>:
 80060ea:	4770      	bx	lr

080060ec <__retarget_lock_release_recursive>:
 80060ec:	4770      	bx	lr
	...

080060f0 <__swhatbuf_r>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	000e      	movs	r6, r1
 80060f4:	001d      	movs	r5, r3
 80060f6:	230e      	movs	r3, #14
 80060f8:	5ec9      	ldrsh	r1, [r1, r3]
 80060fa:	0014      	movs	r4, r2
 80060fc:	b096      	sub	sp, #88	; 0x58
 80060fe:	2900      	cmp	r1, #0
 8006100:	da08      	bge.n	8006114 <__swhatbuf_r+0x24>
 8006102:	220c      	movs	r2, #12
 8006104:	5eb3      	ldrsh	r3, [r6, r2]
 8006106:	2200      	movs	r2, #0
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	d411      	bmi.n	8006132 <__swhatbuf_r+0x42>
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	e00f      	b.n	8006134 <__swhatbuf_r+0x44>
 8006114:	466a      	mov	r2, sp
 8006116:	f000 f92f 	bl	8006378 <_fstat_r>
 800611a:	2800      	cmp	r0, #0
 800611c:	dbf1      	blt.n	8006102 <__swhatbuf_r+0x12>
 800611e:	23f0      	movs	r3, #240	; 0xf0
 8006120:	9901      	ldr	r1, [sp, #4]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	4019      	ands	r1, r3
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <__swhatbuf_r+0x4c>)
 8006128:	18c9      	adds	r1, r1, r3
 800612a:	424b      	negs	r3, r1
 800612c:	4159      	adcs	r1, r3
 800612e:	6029      	str	r1, [r5, #0]
 8006130:	e7ed      	b.n	800610e <__swhatbuf_r+0x1e>
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	2000      	movs	r0, #0
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	b016      	add	sp, #88	; 0x58
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	ffffe000 	.word	0xffffe000

08006140 <__smakebuf_r>:
 8006140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006142:	2602      	movs	r6, #2
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	0005      	movs	r5, r0
 8006148:	000c      	movs	r4, r1
 800614a:	4233      	tst	r3, r6
 800614c:	d006      	beq.n	800615c <__smakebuf_r+0x1c>
 800614e:	0023      	movs	r3, r4
 8006150:	3347      	adds	r3, #71	; 0x47
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	2301      	movs	r3, #1
 8006158:	6163      	str	r3, [r4, #20]
 800615a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800615c:	466a      	mov	r2, sp
 800615e:	ab01      	add	r3, sp, #4
 8006160:	f7ff ffc6 	bl	80060f0 <__swhatbuf_r>
 8006164:	9900      	ldr	r1, [sp, #0]
 8006166:	0007      	movs	r7, r0
 8006168:	0028      	movs	r0, r5
 800616a:	f7ff f9ad 	bl	80054c8 <_malloc_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	d108      	bne.n	8006184 <__smakebuf_r+0x44>
 8006172:	220c      	movs	r2, #12
 8006174:	5ea3      	ldrsh	r3, [r4, r2]
 8006176:	059a      	lsls	r2, r3, #22
 8006178:	d4ef      	bmi.n	800615a <__smakebuf_r+0x1a>
 800617a:	2203      	movs	r2, #3
 800617c:	4393      	bics	r3, r2
 800617e:	431e      	orrs	r6, r3
 8006180:	81a6      	strh	r6, [r4, #12]
 8006182:	e7e4      	b.n	800614e <__smakebuf_r+0xe>
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <__smakebuf_r+0x84>)
 8006186:	62ab      	str	r3, [r5, #40]	; 0x28
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	89a2      	ldrh	r2, [r4, #12]
 800618c:	6020      	str	r0, [r4, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	9b00      	ldr	r3, [sp, #0]
 8006194:	6120      	str	r0, [r4, #16]
 8006196:	6163      	str	r3, [r4, #20]
 8006198:	9b01      	ldr	r3, [sp, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <__smakebuf_r+0x7a>
 800619e:	0028      	movs	r0, r5
 80061a0:	230e      	movs	r3, #14
 80061a2:	5ee1      	ldrsh	r1, [r4, r3]
 80061a4:	f000 f8fa 	bl	800639c <_isatty_r>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d006      	beq.n	80061ba <__smakebuf_r+0x7a>
 80061ac:	2203      	movs	r2, #3
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	4393      	bics	r3, r2
 80061b2:	001a      	movs	r2, r3
 80061b4:	2301      	movs	r3, #1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	89a0      	ldrh	r0, [r4, #12]
 80061bc:	4307      	orrs	r7, r0
 80061be:	81a7      	strh	r7, [r4, #12]
 80061c0:	e7cb      	b.n	800615a <__smakebuf_r+0x1a>
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	08005f2d 	.word	0x08005f2d

080061c8 <memchr>:
 80061c8:	b2c9      	uxtb	r1, r1
 80061ca:	1882      	adds	r2, r0, r2
 80061cc:	4290      	cmp	r0, r2
 80061ce:	d101      	bne.n	80061d4 <memchr+0xc>
 80061d0:	2000      	movs	r0, #0
 80061d2:	4770      	bx	lr
 80061d4:	7803      	ldrb	r3, [r0, #0]
 80061d6:	428b      	cmp	r3, r1
 80061d8:	d0fb      	beq.n	80061d2 <memchr+0xa>
 80061da:	3001      	adds	r0, #1
 80061dc:	e7f6      	b.n	80061cc <memchr+0x4>
	...

080061e0 <__malloc_lock>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4802      	ldr	r0, [pc, #8]	; (80061ec <__malloc_lock+0xc>)
 80061e4:	f7ff ff81 	bl	80060ea <__retarget_lock_acquire_recursive>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	200010ac 	.word	0x200010ac

080061f0 <__malloc_unlock>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4802      	ldr	r0, [pc, #8]	; (80061fc <__malloc_unlock+0xc>)
 80061f4:	f7ff ff7a 	bl	80060ec <__retarget_lock_release_recursive>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	200010ac 	.word	0x200010ac

08006200 <_raise_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	0004      	movs	r4, r0
 8006204:	000d      	movs	r5, r1
 8006206:	291f      	cmp	r1, #31
 8006208:	d904      	bls.n	8006214 <_raise_r+0x14>
 800620a:	2316      	movs	r3, #22
 800620c:	6003      	str	r3, [r0, #0]
 800620e:	2001      	movs	r0, #1
 8006210:	4240      	negs	r0, r0
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <_raise_r+0x24>
 800621a:	008a      	lsls	r2, r1, #2
 800621c:	189b      	adds	r3, r3, r2
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	2a00      	cmp	r2, #0
 8006222:	d108      	bne.n	8006236 <_raise_r+0x36>
 8006224:	0020      	movs	r0, r4
 8006226:	f000 f831 	bl	800628c <_getpid_r>
 800622a:	002a      	movs	r2, r5
 800622c:	0001      	movs	r1, r0
 800622e:	0020      	movs	r0, r4
 8006230:	f000 f81a 	bl	8006268 <_kill_r>
 8006234:	e7ed      	b.n	8006212 <_raise_r+0x12>
 8006236:	2000      	movs	r0, #0
 8006238:	2a01      	cmp	r2, #1
 800623a:	d0ea      	beq.n	8006212 <_raise_r+0x12>
 800623c:	1c51      	adds	r1, r2, #1
 800623e:	d103      	bne.n	8006248 <_raise_r+0x48>
 8006240:	2316      	movs	r3, #22
 8006242:	3001      	adds	r0, #1
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	e7e4      	b.n	8006212 <_raise_r+0x12>
 8006248:	2400      	movs	r4, #0
 800624a:	0028      	movs	r0, r5
 800624c:	601c      	str	r4, [r3, #0]
 800624e:	4790      	blx	r2
 8006250:	0020      	movs	r0, r4
 8006252:	e7de      	b.n	8006212 <_raise_r+0x12>

08006254 <raise>:
 8006254:	b510      	push	{r4, lr}
 8006256:	4b03      	ldr	r3, [pc, #12]	; (8006264 <raise+0x10>)
 8006258:	0001      	movs	r1, r0
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	f7ff ffd0 	bl	8006200 <_raise_r>
 8006260:	bd10      	pop	{r4, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	20000034 	.word	0x20000034

08006268 <_kill_r>:
 8006268:	2300      	movs	r3, #0
 800626a:	b570      	push	{r4, r5, r6, lr}
 800626c:	4d06      	ldr	r5, [pc, #24]	; (8006288 <_kill_r+0x20>)
 800626e:	0004      	movs	r4, r0
 8006270:	0008      	movs	r0, r1
 8006272:	0011      	movs	r1, r2
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	f7fb ff0d 	bl	8002094 <_kill>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d103      	bne.n	8006286 <_kill_r+0x1e>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d000      	beq.n	8006286 <_kill_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	200010b0 	.word	0x200010b0

0800628c <_getpid_r>:
 800628c:	b510      	push	{r4, lr}
 800628e:	f7fb feff 	bl	8002090 <_getpid>
 8006292:	bd10      	pop	{r4, pc}

08006294 <__sread>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	000c      	movs	r4, r1
 8006298:	250e      	movs	r5, #14
 800629a:	5f49      	ldrsh	r1, [r1, r5]
 800629c:	f000 f8a4 	bl	80063e8 <_read_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	db03      	blt.n	80062ac <__sread+0x18>
 80062a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062a6:	181b      	adds	r3, r3, r0
 80062a8:	6563      	str	r3, [r4, #84]	; 0x54
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	4a02      	ldr	r2, [pc, #8]	; (80062b8 <__sread+0x24>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	e7f9      	b.n	80062aa <__sread+0x16>
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	ffffefff 	.word	0xffffefff

080062bc <__swrite>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	001f      	movs	r7, r3
 80062c0:	898b      	ldrh	r3, [r1, #12]
 80062c2:	0005      	movs	r5, r0
 80062c4:	000c      	movs	r4, r1
 80062c6:	0016      	movs	r6, r2
 80062c8:	05db      	lsls	r3, r3, #23
 80062ca:	d505      	bpl.n	80062d8 <__swrite+0x1c>
 80062cc:	230e      	movs	r3, #14
 80062ce:	5ec9      	ldrsh	r1, [r1, r3]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2302      	movs	r3, #2
 80062d4:	f000 f874 	bl	80063c0 <_lseek_r>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <__swrite+0x34>)
 80062dc:	0028      	movs	r0, r5
 80062de:	4013      	ands	r3, r2
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	0032      	movs	r2, r6
 80062e4:	230e      	movs	r3, #14
 80062e6:	5ee1      	ldrsh	r1, [r4, r3]
 80062e8:	003b      	movs	r3, r7
 80062ea:	f000 f81f 	bl	800632c <_write_r>
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	ffffefff 	.word	0xffffefff

080062f4 <__sseek>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	000c      	movs	r4, r1
 80062f8:	250e      	movs	r5, #14
 80062fa:	5f49      	ldrsh	r1, [r1, r5]
 80062fc:	f000 f860 	bl	80063c0 <_lseek_r>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	1c42      	adds	r2, r0, #1
 8006304:	d103      	bne.n	800630e <__sseek+0x1a>
 8006306:	4a05      	ldr	r2, [pc, #20]	; (800631c <__sseek+0x28>)
 8006308:	4013      	ands	r3, r2
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	2280      	movs	r2, #128	; 0x80
 8006310:	0152      	lsls	r2, r2, #5
 8006312:	4313      	orrs	r3, r2
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	6560      	str	r0, [r4, #84]	; 0x54
 8006318:	e7f8      	b.n	800630c <__sseek+0x18>
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	ffffefff 	.word	0xffffefff

08006320 <__sclose>:
 8006320:	b510      	push	{r4, lr}
 8006322:	230e      	movs	r3, #14
 8006324:	5ec9      	ldrsh	r1, [r1, r3]
 8006326:	f000 f815 	bl	8006354 <_close_r>
 800632a:	bd10      	pop	{r4, pc}

0800632c <_write_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	0004      	movs	r4, r0
 8006330:	0008      	movs	r0, r1
 8006332:	0011      	movs	r1, r2
 8006334:	001a      	movs	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	4d05      	ldr	r5, [pc, #20]	; (8006350 <_write_r+0x24>)
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f7fb fec5 	bl	80020ca <_write>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d103      	bne.n	800634c <_write_r+0x20>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d000      	beq.n	800634c <_write_r+0x20>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	200010b0 	.word	0x200010b0

08006354 <_close_r>:
 8006354:	2300      	movs	r3, #0
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	4d06      	ldr	r5, [pc, #24]	; (8006374 <_close_r+0x20>)
 800635a:	0004      	movs	r4, r0
 800635c:	0008      	movs	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fb fec0 	bl	80020e4 <_close>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d103      	bne.n	8006370 <_close_r+0x1c>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d000      	beq.n	8006370 <_close_r+0x1c>
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	bd70      	pop	{r4, r5, r6, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	200010b0 	.word	0x200010b0

08006378 <_fstat_r>:
 8006378:	2300      	movs	r3, #0
 800637a:	b570      	push	{r4, r5, r6, lr}
 800637c:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_fstat_r+0x20>)
 800637e:	0004      	movs	r4, r0
 8006380:	0008      	movs	r0, r1
 8006382:	0011      	movs	r1, r2
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	f7fb feb0 	bl	80020ea <_fstat>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d103      	bne.n	8006396 <_fstat_r+0x1e>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d000      	beq.n	8006396 <_fstat_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	200010b0 	.word	0x200010b0

0800639c <_isatty_r>:
 800639c:	2300      	movs	r3, #0
 800639e:	b570      	push	{r4, r5, r6, lr}
 80063a0:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_isatty_r+0x20>)
 80063a2:	0004      	movs	r4, r0
 80063a4:	0008      	movs	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fea4 	bl	80020f4 <_isatty>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d103      	bne.n	80063b8 <_isatty_r+0x1c>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d000      	beq.n	80063b8 <_isatty_r+0x1c>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	200010b0 	.word	0x200010b0

080063c0 <_lseek_r>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	0004      	movs	r4, r0
 80063c4:	0008      	movs	r0, r1
 80063c6:	0011      	movs	r1, r2
 80063c8:	001a      	movs	r2, r3
 80063ca:	2300      	movs	r3, #0
 80063cc:	4d05      	ldr	r5, [pc, #20]	; (80063e4 <_lseek_r+0x24>)
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fb fe92 	bl	80020f8 <_lseek>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d103      	bne.n	80063e0 <_lseek_r+0x20>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d000      	beq.n	80063e0 <_lseek_r+0x20>
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	200010b0 	.word	0x200010b0

080063e8 <_read_r>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	0004      	movs	r4, r0
 80063ec:	0008      	movs	r0, r1
 80063ee:	0011      	movs	r1, r2
 80063f0:	001a      	movs	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	4d05      	ldr	r5, [pc, #20]	; (800640c <_read_r+0x24>)
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fb fe5a 	bl	80020b0 <_read>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d103      	bne.n	8006408 <_read_r+0x20>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d000      	beq.n	8006408 <_read_r+0x20>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	200010b0 	.word	0x200010b0

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
