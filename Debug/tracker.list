
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d0  080078d0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d8  080078d8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080078e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d0  2000001c  080078fc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019ec  080078fc  000219ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016edd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b03  00000000  00000000  00036f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001462b  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e2d  00000000  00000000  0005187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b0ba  00000000  00000000  0006a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b94  00000000  00000000  000e57b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800774c 	.word	0x0800774c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	0800774c 	.word	0x0800774c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f852 	bl	80002f8 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_d2uiz>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2200      	movs	r2, #0
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002c2:	0004      	movs	r4, r0
 80002c4:	000d      	movs	r5, r1
 80002c6:	f001 fa89 	bl	80017dc <__aeabi_dcmpge>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d104      	bne.n	80002d8 <__aeabi_d2uiz+0x1c>
 80002ce:	0020      	movs	r0, r4
 80002d0:	0029      	movs	r1, r5
 80002d2:	f001 f9d1 	bl	8001678 <__aeabi_d2iz>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002da:	2200      	movs	r2, #0
 80002dc:	0020      	movs	r0, r4
 80002de:	0029      	movs	r1, r5
 80002e0:	f000 fe38 	bl	8000f54 <__aeabi_dsub>
 80002e4:	f001 f9c8 	bl	8001678 <__aeabi_d2iz>
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	061b      	lsls	r3, r3, #24
 80002ec:	469c      	mov	ip, r3
 80002ee:	4460      	add	r0, ip
 80002f0:	e7f1      	b.n	80002d6 <__aeabi_d2uiz+0x1a>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	41e00000 	.word	0x41e00000

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f001 fa88 	bl	800182c <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f001 fa83 	bl	800182c <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_ddiv>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	4681      	mov	r9, r0
 800049e:	0005      	movs	r5, r0
 80004a0:	030c      	lsls	r4, r1, #12
 80004a2:	0048      	lsls	r0, r1, #1
 80004a4:	4692      	mov	sl, r2
 80004a6:	001f      	movs	r7, r3
 80004a8:	b085      	sub	sp, #20
 80004aa:	0b24      	lsrs	r4, r4, #12
 80004ac:	0d40      	lsrs	r0, r0, #21
 80004ae:	0fce      	lsrs	r6, r1, #31
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_ddiv+0x26>
 80004b4:	e156      	b.n	8000764 <__aeabi_ddiv+0x2d4>
 80004b6:	4bd4      	ldr	r3, [pc, #848]	; (8000808 <__aeabi_ddiv+0x378>)
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d100      	bne.n	80004be <__aeabi_ddiv+0x2e>
 80004bc:	e172      	b.n	80007a4 <__aeabi_ddiv+0x314>
 80004be:	0f6b      	lsrs	r3, r5, #29
 80004c0:	00e4      	lsls	r4, r4, #3
 80004c2:	431c      	orrs	r4, r3
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	4698      	mov	r8, r3
 80004cc:	4bcf      	ldr	r3, [pc, #828]	; (800080c <__aeabi_ddiv+0x37c>)
 80004ce:	00ed      	lsls	r5, r5, #3
 80004d0:	469b      	mov	fp, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	4483      	add	fp, r0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	033c      	lsls	r4, r7, #12
 80004dc:	007b      	lsls	r3, r7, #1
 80004de:	4650      	mov	r0, sl
 80004e0:	0b24      	lsrs	r4, r4, #12
 80004e2:	0d5b      	lsrs	r3, r3, #21
 80004e4:	0fff      	lsrs	r7, r7, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_ddiv+0x5c>
 80004ea:	e11f      	b.n	800072c <__aeabi_ddiv+0x29c>
 80004ec:	4ac6      	ldr	r2, [pc, #792]	; (8000808 <__aeabi_ddiv+0x378>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x64>
 80004f2:	e162      	b.n	80007ba <__aeabi_ddiv+0x32a>
 80004f4:	49c5      	ldr	r1, [pc, #788]	; (800080c <__aeabi_ddiv+0x37c>)
 80004f6:	0f42      	lsrs	r2, r0, #29
 80004f8:	468c      	mov	ip, r1
 80004fa:	00e4      	lsls	r4, r4, #3
 80004fc:	4659      	mov	r1, fp
 80004fe:	4314      	orrs	r4, r2
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	4463      	add	r3, ip
 8000504:	0412      	lsls	r2, r2, #16
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	4314      	orrs	r4, r2
 800050a:	469b      	mov	fp, r3
 800050c:	00c2      	lsls	r2, r0, #3
 800050e:	2000      	movs	r0, #0
 8000510:	0033      	movs	r3, r6
 8000512:	407b      	eors	r3, r7
 8000514:	469a      	mov	sl, r3
 8000516:	464b      	mov	r3, r9
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d827      	bhi.n	800056c <__aeabi_ddiv+0xdc>
 800051c:	49bc      	ldr	r1, [pc, #752]	; (8000810 <__aeabi_ddiv+0x380>)
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	58cb      	ldr	r3, [r1, r3]
 8000522:	469f      	mov	pc, r3
 8000524:	46b2      	mov	sl, r6
 8000526:	9b00      	ldr	r3, [sp, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d016      	beq.n	800055a <__aeabi_ddiv+0xca>
 800052c:	2b03      	cmp	r3, #3
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0xa2>
 8000530:	e28e      	b.n	8000a50 <__aeabi_ddiv+0x5c0>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d000      	beq.n	8000538 <__aeabi_ddiv+0xa8>
 8000536:	e0d9      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000538:	2300      	movs	r3, #0
 800053a:	2400      	movs	r4, #0
 800053c:	2500      	movs	r5, #0
 800053e:	4652      	mov	r2, sl
 8000540:	051b      	lsls	r3, r3, #20
 8000542:	4323      	orrs	r3, r4
 8000544:	07d2      	lsls	r2, r2, #31
 8000546:	4313      	orrs	r3, r2
 8000548:	0028      	movs	r0, r5
 800054a:	0019      	movs	r1, r3
 800054c:	b005      	add	sp, #20
 800054e:	bcf0      	pop	{r4, r5, r6, r7}
 8000550:	46bb      	mov	fp, r7
 8000552:	46b2      	mov	sl, r6
 8000554:	46a9      	mov	r9, r5
 8000556:	46a0      	mov	r8, r4
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	2400      	movs	r4, #0
 800055c:	2500      	movs	r5, #0
 800055e:	4baa      	ldr	r3, [pc, #680]	; (8000808 <__aeabi_ddiv+0x378>)
 8000560:	e7ed      	b.n	800053e <__aeabi_ddiv+0xae>
 8000562:	46ba      	mov	sl, r7
 8000564:	46a0      	mov	r8, r4
 8000566:	0015      	movs	r5, r2
 8000568:	9000      	str	r0, [sp, #0]
 800056a:	e7dc      	b.n	8000526 <__aeabi_ddiv+0x96>
 800056c:	4544      	cmp	r4, r8
 800056e:	d200      	bcs.n	8000572 <__aeabi_ddiv+0xe2>
 8000570:	e1c7      	b.n	8000902 <__aeabi_ddiv+0x472>
 8000572:	d100      	bne.n	8000576 <__aeabi_ddiv+0xe6>
 8000574:	e1c2      	b.n	80008fc <__aeabi_ddiv+0x46c>
 8000576:	2301      	movs	r3, #1
 8000578:	425b      	negs	r3, r3
 800057a:	469c      	mov	ip, r3
 800057c:	002e      	movs	r6, r5
 800057e:	4640      	mov	r0, r8
 8000580:	2500      	movs	r5, #0
 8000582:	44e3      	add	fp, ip
 8000584:	0223      	lsls	r3, r4, #8
 8000586:	0e14      	lsrs	r4, r2, #24
 8000588:	431c      	orrs	r4, r3
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	4699      	mov	r9, r3
 800058e:	0423      	lsls	r3, r4, #16
 8000590:	0c1f      	lsrs	r7, r3, #16
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	4649      	mov	r1, r9
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9701      	str	r7, [sp, #4]
 800059a:	f7ff fe3b 	bl	8000214 <__aeabi_uidivmod>
 800059e:	0002      	movs	r2, r0
 80005a0:	437a      	muls	r2, r7
 80005a2:	040b      	lsls	r3, r1, #16
 80005a4:	0c31      	lsrs	r1, r6, #16
 80005a6:	4680      	mov	r8, r0
 80005a8:	4319      	orrs	r1, r3
 80005aa:	428a      	cmp	r2, r1
 80005ac:	d907      	bls.n	80005be <__aeabi_ddiv+0x12e>
 80005ae:	2301      	movs	r3, #1
 80005b0:	425b      	negs	r3, r3
 80005b2:	469c      	mov	ip, r3
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	44e0      	add	r8, ip
 80005b8:	428c      	cmp	r4, r1
 80005ba:	d800      	bhi.n	80005be <__aeabi_ddiv+0x12e>
 80005bc:	e207      	b.n	80009ce <__aeabi_ddiv+0x53e>
 80005be:	1a88      	subs	r0, r1, r2
 80005c0:	4649      	mov	r1, r9
 80005c2:	f7ff fe27 	bl	8000214 <__aeabi_uidivmod>
 80005c6:	0409      	lsls	r1, r1, #16
 80005c8:	468c      	mov	ip, r1
 80005ca:	0431      	lsls	r1, r6, #16
 80005cc:	4666      	mov	r6, ip
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	0c09      	lsrs	r1, r1, #16
 80005d2:	4342      	muls	r2, r0
 80005d4:	0003      	movs	r3, r0
 80005d6:	4331      	orrs	r1, r6
 80005d8:	428a      	cmp	r2, r1
 80005da:	d904      	bls.n	80005e6 <__aeabi_ddiv+0x156>
 80005dc:	1909      	adds	r1, r1, r4
 80005de:	3b01      	subs	r3, #1
 80005e0:	428c      	cmp	r4, r1
 80005e2:	d800      	bhi.n	80005e6 <__aeabi_ddiv+0x156>
 80005e4:	e1ed      	b.n	80009c2 <__aeabi_ddiv+0x532>
 80005e6:	1a88      	subs	r0, r1, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	4690      	mov	r8, r2
 80005f0:	4641      	mov	r1, r8
 80005f2:	9b00      	ldr	r3, [sp, #0]
 80005f4:	040e      	lsls	r6, r1, #16
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001f      	movs	r7, r3
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	0c36      	lsrs	r6, r6, #16
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c19      	lsrs	r1, r3, #16
 8000604:	000b      	movs	r3, r1
 8000606:	4373      	muls	r3, r6
 8000608:	0c12      	lsrs	r2, r2, #16
 800060a:	437e      	muls	r6, r7
 800060c:	9103      	str	r1, [sp, #12]
 800060e:	4351      	muls	r1, r2
 8000610:	437a      	muls	r2, r7
 8000612:	0c1f      	lsrs	r7, r3, #16
 8000614:	46bc      	mov	ip, r7
 8000616:	1876      	adds	r6, r6, r1
 8000618:	4466      	add	r6, ip
 800061a:	42b1      	cmp	r1, r6
 800061c:	d903      	bls.n	8000626 <__aeabi_ddiv+0x196>
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	0249      	lsls	r1, r1, #9
 8000622:	468c      	mov	ip, r1
 8000624:	4462      	add	r2, ip
 8000626:	0c31      	lsrs	r1, r6, #16
 8000628:	188a      	adds	r2, r1, r2
 800062a:	0431      	lsls	r1, r6, #16
 800062c:	041e      	lsls	r6, r3, #16
 800062e:	0c36      	lsrs	r6, r6, #16
 8000630:	198e      	adds	r6, r1, r6
 8000632:	4290      	cmp	r0, r2
 8000634:	d302      	bcc.n	800063c <__aeabi_ddiv+0x1ac>
 8000636:	d112      	bne.n	800065e <__aeabi_ddiv+0x1ce>
 8000638:	42b5      	cmp	r5, r6
 800063a:	d210      	bcs.n	800065e <__aeabi_ddiv+0x1ce>
 800063c:	4643      	mov	r3, r8
 800063e:	1e59      	subs	r1, r3, #1
 8000640:	9b00      	ldr	r3, [sp, #0]
 8000642:	469c      	mov	ip, r3
 8000644:	4465      	add	r5, ip
 8000646:	001f      	movs	r7, r3
 8000648:	429d      	cmp	r5, r3
 800064a:	419b      	sbcs	r3, r3
 800064c:	425b      	negs	r3, r3
 800064e:	191b      	adds	r3, r3, r4
 8000650:	18c0      	adds	r0, r0, r3
 8000652:	4284      	cmp	r4, r0
 8000654:	d200      	bcs.n	8000658 <__aeabi_ddiv+0x1c8>
 8000656:	e1a0      	b.n	800099a <__aeabi_ddiv+0x50a>
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x1cc>
 800065a:	e19b      	b.n	8000994 <__aeabi_ddiv+0x504>
 800065c:	4688      	mov	r8, r1
 800065e:	1bae      	subs	r6, r5, r6
 8000660:	42b5      	cmp	r5, r6
 8000662:	41ad      	sbcs	r5, r5
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	426d      	negs	r5, r5
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	4284      	cmp	r4, r0
 800066c:	d100      	bne.n	8000670 <__aeabi_ddiv+0x1e0>
 800066e:	e1d5      	b.n	8000a1c <__aeabi_ddiv+0x58c>
 8000670:	4649      	mov	r1, r9
 8000672:	f7ff fdcf 	bl	8000214 <__aeabi_uidivmod>
 8000676:	9a01      	ldr	r2, [sp, #4]
 8000678:	040b      	lsls	r3, r1, #16
 800067a:	4342      	muls	r2, r0
 800067c:	0c31      	lsrs	r1, r6, #16
 800067e:	0005      	movs	r5, r0
 8000680:	4319      	orrs	r1, r3
 8000682:	428a      	cmp	r2, r1
 8000684:	d900      	bls.n	8000688 <__aeabi_ddiv+0x1f8>
 8000686:	e16c      	b.n	8000962 <__aeabi_ddiv+0x4d2>
 8000688:	1a88      	subs	r0, r1, r2
 800068a:	4649      	mov	r1, r9
 800068c:	f7ff fdc2 	bl	8000214 <__aeabi_uidivmod>
 8000690:	9a01      	ldr	r2, [sp, #4]
 8000692:	0436      	lsls	r6, r6, #16
 8000694:	4342      	muls	r2, r0
 8000696:	0409      	lsls	r1, r1, #16
 8000698:	0c36      	lsrs	r6, r6, #16
 800069a:	0003      	movs	r3, r0
 800069c:	430e      	orrs	r6, r1
 800069e:	42b2      	cmp	r2, r6
 80006a0:	d900      	bls.n	80006a4 <__aeabi_ddiv+0x214>
 80006a2:	e153      	b.n	800094c <__aeabi_ddiv+0x4bc>
 80006a4:	9803      	ldr	r0, [sp, #12]
 80006a6:	1ab6      	subs	r6, r6, r2
 80006a8:	0002      	movs	r2, r0
 80006aa:	042d      	lsls	r5, r5, #16
 80006ac:	431d      	orrs	r5, r3
 80006ae:	9f02      	ldr	r7, [sp, #8]
 80006b0:	042b      	lsls	r3, r5, #16
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	435a      	muls	r2, r3
 80006b6:	437b      	muls	r3, r7
 80006b8:	469c      	mov	ip, r3
 80006ba:	0c29      	lsrs	r1, r5, #16
 80006bc:	4348      	muls	r0, r1
 80006be:	0c13      	lsrs	r3, r2, #16
 80006c0:	4484      	add	ip, r0
 80006c2:	4463      	add	r3, ip
 80006c4:	4379      	muls	r1, r7
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d903      	bls.n	80006d2 <__aeabi_ddiv+0x242>
 80006ca:	2080      	movs	r0, #128	; 0x80
 80006cc:	0240      	lsls	r0, r0, #9
 80006ce:	4684      	mov	ip, r0
 80006d0:	4461      	add	r1, ip
 80006d2:	0c18      	lsrs	r0, r3, #16
 80006d4:	0412      	lsls	r2, r2, #16
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	0c12      	lsrs	r2, r2, #16
 80006da:	1841      	adds	r1, r0, r1
 80006dc:	189b      	adds	r3, r3, r2
 80006de:	428e      	cmp	r6, r1
 80006e0:	d200      	bcs.n	80006e4 <__aeabi_ddiv+0x254>
 80006e2:	e0ff      	b.n	80008e4 <__aeabi_ddiv+0x454>
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x258>
 80006e6:	e0fa      	b.n	80008de <__aeabi_ddiv+0x44e>
 80006e8:	2301      	movs	r3, #1
 80006ea:	431d      	orrs	r5, r3
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <__aeabi_ddiv+0x384>)
 80006ee:	445a      	add	r2, fp
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_ddiv+0x266>
 80006f4:	e0aa      	b.n	800084c <__aeabi_ddiv+0x3bc>
 80006f6:	076b      	lsls	r3, r5, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_ddiv+0x26c>
 80006fa:	e13d      	b.n	8000978 <__aeabi_ddiv+0x4e8>
 80006fc:	08ed      	lsrs	r5, r5, #3
 80006fe:	4643      	mov	r3, r8
 8000700:	01db      	lsls	r3, r3, #7
 8000702:	d506      	bpl.n	8000712 <__aeabi_ddiv+0x282>
 8000704:	4642      	mov	r2, r8
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <__aeabi_ddiv+0x388>)
 8000708:	401a      	ands	r2, r3
 800070a:	4690      	mov	r8, r2
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	00d2      	lsls	r2, r2, #3
 8000710:	445a      	add	r2, fp
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <__aeabi_ddiv+0x38c>)
 8000714:	429a      	cmp	r2, r3
 8000716:	dd00      	ble.n	800071a <__aeabi_ddiv+0x28a>
 8000718:	e71f      	b.n	800055a <__aeabi_ddiv+0xca>
 800071a:	4643      	mov	r3, r8
 800071c:	075b      	lsls	r3, r3, #29
 800071e:	431d      	orrs	r5, r3
 8000720:	4643      	mov	r3, r8
 8000722:	0552      	lsls	r2, r2, #21
 8000724:	025c      	lsls	r4, r3, #9
 8000726:	0b24      	lsrs	r4, r4, #12
 8000728:	0d53      	lsrs	r3, r2, #21
 800072a:	e708      	b.n	800053e <__aeabi_ddiv+0xae>
 800072c:	4652      	mov	r2, sl
 800072e:	4322      	orrs	r2, r4
 8000730:	d100      	bne.n	8000734 <__aeabi_ddiv+0x2a4>
 8000732:	e07b      	b.n	800082c <__aeabi_ddiv+0x39c>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x2aa>
 8000738:	e0fa      	b.n	8000930 <__aeabi_ddiv+0x4a0>
 800073a:	0020      	movs	r0, r4
 800073c:	f001 f858 	bl	80017f0 <__clzsi2>
 8000740:	0002      	movs	r2, r0
 8000742:	3a0b      	subs	r2, #11
 8000744:	231d      	movs	r3, #29
 8000746:	0001      	movs	r1, r0
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	4652      	mov	r2, sl
 800074c:	3908      	subs	r1, #8
 800074e:	40da      	lsrs	r2, r3
 8000750:	408c      	lsls	r4, r1
 8000752:	4314      	orrs	r4, r2
 8000754:	4652      	mov	r2, sl
 8000756:	408a      	lsls	r2, r1
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <__aeabi_ddiv+0x390>)
 800075a:	4458      	add	r0, fp
 800075c:	469b      	mov	fp, r3
 800075e:	4483      	add	fp, r0
 8000760:	2000      	movs	r0, #0
 8000762:	e6d5      	b.n	8000510 <__aeabi_ddiv+0x80>
 8000764:	464b      	mov	r3, r9
 8000766:	4323      	orrs	r3, r4
 8000768:	4698      	mov	r8, r3
 800076a:	d044      	beq.n	80007f6 <__aeabi_ddiv+0x366>
 800076c:	2c00      	cmp	r4, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x2e2>
 8000770:	e0ce      	b.n	8000910 <__aeabi_ddiv+0x480>
 8000772:	0020      	movs	r0, r4
 8000774:	f001 f83c 	bl	80017f0 <__clzsi2>
 8000778:	0001      	movs	r1, r0
 800077a:	0002      	movs	r2, r0
 800077c:	390b      	subs	r1, #11
 800077e:	231d      	movs	r3, #29
 8000780:	1a5b      	subs	r3, r3, r1
 8000782:	4649      	mov	r1, r9
 8000784:	0010      	movs	r0, r2
 8000786:	40d9      	lsrs	r1, r3
 8000788:	3808      	subs	r0, #8
 800078a:	4084      	lsls	r4, r0
 800078c:	000b      	movs	r3, r1
 800078e:	464d      	mov	r5, r9
 8000790:	4323      	orrs	r3, r4
 8000792:	4698      	mov	r8, r3
 8000794:	4085      	lsls	r5, r0
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <__aeabi_ddiv+0x394>)
 8000798:	1a83      	subs	r3, r0, r2
 800079a:	469b      	mov	fp, r3
 800079c:	2300      	movs	r3, #0
 800079e:	4699      	mov	r9, r3
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	e69a      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007a4:	464b      	mov	r3, r9
 80007a6:	4323      	orrs	r3, r4
 80007a8:	4698      	mov	r8, r3
 80007aa:	d11d      	bne.n	80007e8 <__aeabi_ddiv+0x358>
 80007ac:	2308      	movs	r3, #8
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b06      	subs	r3, #6
 80007b2:	2500      	movs	r5, #0
 80007b4:	4683      	mov	fp, r0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	e68f      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007ba:	4652      	mov	r2, sl
 80007bc:	4322      	orrs	r2, r4
 80007be:	d109      	bne.n	80007d4 <__aeabi_ddiv+0x344>
 80007c0:	2302      	movs	r3, #2
 80007c2:	4649      	mov	r1, r9
 80007c4:	4319      	orrs	r1, r3
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <__aeabi_ddiv+0x398>)
 80007c8:	4689      	mov	r9, r1
 80007ca:	469c      	mov	ip, r3
 80007cc:	2400      	movs	r4, #0
 80007ce:	2002      	movs	r0, #2
 80007d0:	44e3      	add	fp, ip
 80007d2:	e69d      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007d4:	2303      	movs	r3, #3
 80007d6:	464a      	mov	r2, r9
 80007d8:	431a      	orrs	r2, r3
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <__aeabi_ddiv+0x398>)
 80007dc:	4691      	mov	r9, r2
 80007de:	469c      	mov	ip, r3
 80007e0:	4652      	mov	r2, sl
 80007e2:	2003      	movs	r0, #3
 80007e4:	44e3      	add	fp, ip
 80007e6:	e693      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007e8:	230c      	movs	r3, #12
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	46a0      	mov	r8, r4
 80007f0:	4683      	mov	fp, r0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	e671      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007f6:	2304      	movs	r3, #4
 80007f8:	4699      	mov	r9, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	469b      	mov	fp, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	2500      	movs	r5, #0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	e669      	b.n	80004da <__aeabi_ddiv+0x4a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	000007ff 	.word	0x000007ff
 800080c:	fffffc01 	.word	0xfffffc01
 8000810:	080077a0 	.word	0x080077a0
 8000814:	000003ff 	.word	0x000003ff
 8000818:	feffffff 	.word	0xfeffffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	000003f3 	.word	0x000003f3
 8000824:	fffffc0d 	.word	0xfffffc0d
 8000828:	fffff801 	.word	0xfffff801
 800082c:	4649      	mov	r1, r9
 800082e:	2301      	movs	r3, #1
 8000830:	4319      	orrs	r1, r3
 8000832:	4689      	mov	r9, r1
 8000834:	2400      	movs	r4, #0
 8000836:	2001      	movs	r0, #1
 8000838:	e66a      	b.n	8000510 <__aeabi_ddiv+0x80>
 800083a:	2300      	movs	r3, #0
 800083c:	2480      	movs	r4, #128	; 0x80
 800083e:	469a      	mov	sl, r3
 8000840:	2500      	movs	r5, #0
 8000842:	4b8a      	ldr	r3, [pc, #552]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	e67a      	b.n	800053e <__aeabi_ddiv+0xae>
 8000848:	2501      	movs	r5, #1
 800084a:	426d      	negs	r5, r5
 800084c:	2301      	movs	r3, #1
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	2b38      	cmp	r3, #56	; 0x38
 8000852:	dd00      	ble.n	8000856 <__aeabi_ddiv+0x3c6>
 8000854:	e670      	b.n	8000538 <__aeabi_ddiv+0xa8>
 8000856:	2b1f      	cmp	r3, #31
 8000858:	dc00      	bgt.n	800085c <__aeabi_ddiv+0x3cc>
 800085a:	e0bf      	b.n	80009dc <__aeabi_ddiv+0x54c>
 800085c:	211f      	movs	r1, #31
 800085e:	4249      	negs	r1, r1
 8000860:	1a8a      	subs	r2, r1, r2
 8000862:	4641      	mov	r1, r8
 8000864:	40d1      	lsrs	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	2b20      	cmp	r3, #32
 800086a:	d004      	beq.n	8000876 <__aeabi_ddiv+0x3e6>
 800086c:	4641      	mov	r1, r8
 800086e:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <__aeabi_ddiv+0x5e0>)
 8000870:	445b      	add	r3, fp
 8000872:	4099      	lsls	r1, r3
 8000874:	430d      	orrs	r5, r1
 8000876:	1e6b      	subs	r3, r5, #1
 8000878:	419d      	sbcs	r5, r3
 800087a:	2307      	movs	r3, #7
 800087c:	432a      	orrs	r2, r5
 800087e:	001d      	movs	r5, r3
 8000880:	2400      	movs	r4, #0
 8000882:	4015      	ands	r5, r2
 8000884:	4213      	tst	r3, r2
 8000886:	d100      	bne.n	800088a <__aeabi_ddiv+0x3fa>
 8000888:	e0d4      	b.n	8000a34 <__aeabi_ddiv+0x5a4>
 800088a:	210f      	movs	r1, #15
 800088c:	2300      	movs	r3, #0
 800088e:	4011      	ands	r1, r2
 8000890:	2904      	cmp	r1, #4
 8000892:	d100      	bne.n	8000896 <__aeabi_ddiv+0x406>
 8000894:	e0cb      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 8000896:	1d11      	adds	r1, r2, #4
 8000898:	4291      	cmp	r1, r2
 800089a:	4192      	sbcs	r2, r2
 800089c:	4252      	negs	r2, r2
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	000a      	movs	r2, r1
 80008a2:	0219      	lsls	r1, r3, #8
 80008a4:	d400      	bmi.n	80008a8 <__aeabi_ddiv+0x418>
 80008a6:	e0c2      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 80008a8:	2301      	movs	r3, #1
 80008aa:	2400      	movs	r4, #0
 80008ac:	2500      	movs	r5, #0
 80008ae:	e646      	b.n	800053e <__aeabi_ddiv+0xae>
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	4641      	mov	r1, r8
 80008b4:	031b      	lsls	r3, r3, #12
 80008b6:	4219      	tst	r1, r3
 80008b8:	d008      	beq.n	80008cc <__aeabi_ddiv+0x43c>
 80008ba:	421c      	tst	r4, r3
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x43c>
 80008be:	431c      	orrs	r4, r3
 80008c0:	0324      	lsls	r4, r4, #12
 80008c2:	46ba      	mov	sl, r7
 80008c4:	0015      	movs	r5, r2
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	e638      	b.n	800053e <__aeabi_ddiv+0xae>
 80008cc:	2480      	movs	r4, #128	; 0x80
 80008ce:	4643      	mov	r3, r8
 80008d0:	0324      	lsls	r4, r4, #12
 80008d2:	431c      	orrs	r4, r3
 80008d4:	0324      	lsls	r4, r4, #12
 80008d6:	46b2      	mov	sl, r6
 80008d8:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008da:	0b24      	lsrs	r4, r4, #12
 80008dc:	e62f      	b.n	800053e <__aeabi_ddiv+0xae>
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_ddiv+0x454>
 80008e2:	e703      	b.n	80006ec <__aeabi_ddiv+0x25c>
 80008e4:	19a6      	adds	r6, r4, r6
 80008e6:	1e68      	subs	r0, r5, #1
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d200      	bcs.n	80008ee <__aeabi_ddiv+0x45e>
 80008ec:	e08d      	b.n	8000a0a <__aeabi_ddiv+0x57a>
 80008ee:	428e      	cmp	r6, r1
 80008f0:	d200      	bcs.n	80008f4 <__aeabi_ddiv+0x464>
 80008f2:	e0a3      	b.n	8000a3c <__aeabi_ddiv+0x5ac>
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x468>
 80008f6:	e0b3      	b.n	8000a60 <__aeabi_ddiv+0x5d0>
 80008f8:	0005      	movs	r5, r0
 80008fa:	e6f5      	b.n	80006e8 <__aeabi_ddiv+0x258>
 80008fc:	42aa      	cmp	r2, r5
 80008fe:	d900      	bls.n	8000902 <__aeabi_ddiv+0x472>
 8000900:	e639      	b.n	8000576 <__aeabi_ddiv+0xe6>
 8000902:	4643      	mov	r3, r8
 8000904:	07de      	lsls	r6, r3, #31
 8000906:	0858      	lsrs	r0, r3, #1
 8000908:	086b      	lsrs	r3, r5, #1
 800090a:	431e      	orrs	r6, r3
 800090c:	07ed      	lsls	r5, r5, #31
 800090e:	e639      	b.n	8000584 <__aeabi_ddiv+0xf4>
 8000910:	4648      	mov	r0, r9
 8000912:	f000 ff6d 	bl	80017f0 <__clzsi2>
 8000916:	0001      	movs	r1, r0
 8000918:	0002      	movs	r2, r0
 800091a:	3115      	adds	r1, #21
 800091c:	3220      	adds	r2, #32
 800091e:	291c      	cmp	r1, #28
 8000920:	dc00      	bgt.n	8000924 <__aeabi_ddiv+0x494>
 8000922:	e72c      	b.n	800077e <__aeabi_ddiv+0x2ee>
 8000924:	464b      	mov	r3, r9
 8000926:	3808      	subs	r0, #8
 8000928:	4083      	lsls	r3, r0
 800092a:	2500      	movs	r5, #0
 800092c:	4698      	mov	r8, r3
 800092e:	e732      	b.n	8000796 <__aeabi_ddiv+0x306>
 8000930:	f000 ff5e 	bl	80017f0 <__clzsi2>
 8000934:	0003      	movs	r3, r0
 8000936:	001a      	movs	r2, r3
 8000938:	3215      	adds	r2, #21
 800093a:	3020      	adds	r0, #32
 800093c:	2a1c      	cmp	r2, #28
 800093e:	dc00      	bgt.n	8000942 <__aeabi_ddiv+0x4b2>
 8000940:	e700      	b.n	8000744 <__aeabi_ddiv+0x2b4>
 8000942:	4654      	mov	r4, sl
 8000944:	3b08      	subs	r3, #8
 8000946:	2200      	movs	r2, #0
 8000948:	409c      	lsls	r4, r3
 800094a:	e705      	b.n	8000758 <__aeabi_ddiv+0x2c8>
 800094c:	1936      	adds	r6, r6, r4
 800094e:	3b01      	subs	r3, #1
 8000950:	42b4      	cmp	r4, r6
 8000952:	d900      	bls.n	8000956 <__aeabi_ddiv+0x4c6>
 8000954:	e6a6      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000956:	42b2      	cmp	r2, r6
 8000958:	d800      	bhi.n	800095c <__aeabi_ddiv+0x4cc>
 800095a:	e6a3      	b.n	80006a4 <__aeabi_ddiv+0x214>
 800095c:	1e83      	subs	r3, r0, #2
 800095e:	1936      	adds	r6, r6, r4
 8000960:	e6a0      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000962:	1909      	adds	r1, r1, r4
 8000964:	3d01      	subs	r5, #1
 8000966:	428c      	cmp	r4, r1
 8000968:	d900      	bls.n	800096c <__aeabi_ddiv+0x4dc>
 800096a:	e68d      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 800096c:	428a      	cmp	r2, r1
 800096e:	d800      	bhi.n	8000972 <__aeabi_ddiv+0x4e2>
 8000970:	e68a      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000972:	1e85      	subs	r5, r0, #2
 8000974:	1909      	adds	r1, r1, r4
 8000976:	e687      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000978:	230f      	movs	r3, #15
 800097a:	402b      	ands	r3, r5
 800097c:	2b04      	cmp	r3, #4
 800097e:	d100      	bne.n	8000982 <__aeabi_ddiv+0x4f2>
 8000980:	e6bc      	b.n	80006fc <__aeabi_ddiv+0x26c>
 8000982:	2305      	movs	r3, #5
 8000984:	425b      	negs	r3, r3
 8000986:	42ab      	cmp	r3, r5
 8000988:	419b      	sbcs	r3, r3
 800098a:	3504      	adds	r5, #4
 800098c:	425b      	negs	r3, r3
 800098e:	08ed      	lsrs	r5, r5, #3
 8000990:	4498      	add	r8, r3
 8000992:	e6b4      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000994:	42af      	cmp	r7, r5
 8000996:	d900      	bls.n	800099a <__aeabi_ddiv+0x50a>
 8000998:	e660      	b.n	800065c <__aeabi_ddiv+0x1cc>
 800099a:	4282      	cmp	r2, r0
 800099c:	d804      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 800099e:	d000      	beq.n	80009a2 <__aeabi_ddiv+0x512>
 80009a0:	e65c      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	d800      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 80009a6:	e659      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a8:	2302      	movs	r3, #2
 80009aa:	425b      	negs	r3, r3
 80009ac:	469c      	mov	ip, r3
 80009ae:	9b00      	ldr	r3, [sp, #0]
 80009b0:	44e0      	add	r8, ip
 80009b2:	469c      	mov	ip, r3
 80009b4:	4465      	add	r5, ip
 80009b6:	429d      	cmp	r5, r3
 80009b8:	419b      	sbcs	r3, r3
 80009ba:	425b      	negs	r3, r3
 80009bc:	191b      	adds	r3, r3, r4
 80009be:	18c0      	adds	r0, r0, r3
 80009c0:	e64d      	b.n	800065e <__aeabi_ddiv+0x1ce>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	d800      	bhi.n	80009c8 <__aeabi_ddiv+0x538>
 80009c6:	e60e      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009c8:	1e83      	subs	r3, r0, #2
 80009ca:	1909      	adds	r1, r1, r4
 80009cc:	e60b      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009ce:	428a      	cmp	r2, r1
 80009d0:	d800      	bhi.n	80009d4 <__aeabi_ddiv+0x544>
 80009d2:	e5f4      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009d4:	1e83      	subs	r3, r0, #2
 80009d6:	4698      	mov	r8, r3
 80009d8:	1909      	adds	r1, r1, r4
 80009da:	e5f0      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009dc:	4925      	ldr	r1, [pc, #148]	; (8000a74 <__aeabi_ddiv+0x5e4>)
 80009de:	0028      	movs	r0, r5
 80009e0:	4459      	add	r1, fp
 80009e2:	408d      	lsls	r5, r1
 80009e4:	4642      	mov	r2, r8
 80009e6:	408a      	lsls	r2, r1
 80009e8:	1e69      	subs	r1, r5, #1
 80009ea:	418d      	sbcs	r5, r1
 80009ec:	4641      	mov	r1, r8
 80009ee:	40d8      	lsrs	r0, r3
 80009f0:	40d9      	lsrs	r1, r3
 80009f2:	4302      	orrs	r2, r0
 80009f4:	432a      	orrs	r2, r5
 80009f6:	000b      	movs	r3, r1
 80009f8:	0751      	lsls	r1, r2, #29
 80009fa:	d100      	bne.n	80009fe <__aeabi_ddiv+0x56e>
 80009fc:	e751      	b.n	80008a2 <__aeabi_ddiv+0x412>
 80009fe:	210f      	movs	r1, #15
 8000a00:	4011      	ands	r1, r2
 8000a02:	2904      	cmp	r1, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_ddiv+0x578>
 8000a06:	e746      	b.n	8000896 <__aeabi_ddiv+0x406>
 8000a08:	e74b      	b.n	80008a2 <__aeabi_ddiv+0x412>
 8000a0a:	0005      	movs	r5, r0
 8000a0c:	428e      	cmp	r6, r1
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_ddiv+0x582>
 8000a10:	e66a      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a12:	9a00      	ldr	r2, [sp, #0]
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d000      	beq.n	8000a1a <__aeabi_ddiv+0x58a>
 8000a18:	e666      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a1a:	e667      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <__aeabi_ddiv+0x5e8>)
 8000a1e:	445a      	add	r2, fp
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_ddiv+0x596>
 8000a24:	e710      	b.n	8000848 <__aeabi_ddiv+0x3b8>
 8000a26:	2301      	movs	r3, #1
 8000a28:	2500      	movs	r5, #0
 8000a2a:	4498      	add	r8, r3
 8000a2c:	e667      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000a2e:	075d      	lsls	r5, r3, #29
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0b1c      	lsrs	r4, r3, #12
 8000a34:	08d2      	lsrs	r2, r2, #3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4315      	orrs	r5, r2
 8000a3a:	e580      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a3c:	9800      	ldr	r0, [sp, #0]
 8000a3e:	3d02      	subs	r5, #2
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	4282      	cmp	r2, r0
 8000a44:	41bf      	sbcs	r7, r7
 8000a46:	427f      	negs	r7, r7
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	1936      	adds	r6, r6, r4
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	e7dd      	b.n	8000a0c <__aeabi_ddiv+0x57c>
 8000a50:	2480      	movs	r4, #128	; 0x80
 8000a52:	4643      	mov	r3, r8
 8000a54:	0324      	lsls	r4, r4, #12
 8000a56:	431c      	orrs	r4, r3
 8000a58:	0324      	lsls	r4, r4, #12
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000a5c:	0b24      	lsrs	r4, r4, #12
 8000a5e:	e56e      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a60:	9a00      	ldr	r2, [sp, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3ea      	bcc.n	8000a3c <__aeabi_ddiv+0x5ac>
 8000a66:	0005      	movs	r5, r0
 8000a68:	e7d3      	b.n	8000a12 <__aeabi_ddiv+0x582>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	000007ff 	.word	0x000007ff
 8000a70:	0000043e 	.word	0x0000043e
 8000a74:	0000041e 	.word	0x0000041e
 8000a78:	000003ff 	.word	0x000003ff

08000a7c <__aeabi_dmul>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	4645      	mov	r5, r8
 8000a84:	46de      	mov	lr, fp
 8000a86:	b5e0      	push	{r5, r6, r7, lr}
 8000a88:	4698      	mov	r8, r3
 8000a8a:	030c      	lsls	r4, r1, #12
 8000a8c:	004b      	lsls	r3, r1, #1
 8000a8e:	0006      	movs	r6, r0
 8000a90:	4692      	mov	sl, r2
 8000a92:	b087      	sub	sp, #28
 8000a94:	0b24      	lsrs	r4, r4, #12
 8000a96:	0d5b      	lsrs	r3, r3, #21
 8000a98:	0fcf      	lsrs	r7, r1, #31
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dmul+0x24>
 8000a9e:	e15c      	b.n	8000d5a <__aeabi_dmul+0x2de>
 8000aa0:	4ad9      	ldr	r2, [pc, #868]	; (8000e08 <__aeabi_dmul+0x38c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dmul+0x2c>
 8000aa6:	e175      	b.n	8000d94 <__aeabi_dmul+0x318>
 8000aa8:	0f42      	lsrs	r2, r0, #29
 8000aaa:	00e4      	lsls	r4, r4, #3
 8000aac:	4314      	orrs	r4, r2
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0412      	lsls	r2, r2, #16
 8000ab2:	4314      	orrs	r4, r2
 8000ab4:	4ad5      	ldr	r2, [pc, #852]	; (8000e0c <__aeabi_dmul+0x390>)
 8000ab6:	00c5      	lsls	r5, r0, #3
 8000ab8:	4694      	mov	ip, r2
 8000aba:	4463      	add	r3, ip
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	469b      	mov	fp, r3
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	4642      	mov	r2, r8
 8000ac8:	031e      	lsls	r6, r3, #12
 8000aca:	0fd2      	lsrs	r2, r2, #31
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4650      	mov	r0, sl
 8000ad0:	4690      	mov	r8, r2
 8000ad2:	0b36      	lsrs	r6, r6, #12
 8000ad4:	0d5b      	lsrs	r3, r3, #21
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dmul+0x5e>
 8000ad8:	e120      	b.n	8000d1c <__aeabi_dmul+0x2a0>
 8000ada:	4acb      	ldr	r2, [pc, #812]	; (8000e08 <__aeabi_dmul+0x38c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dmul+0x66>
 8000ae0:	e162      	b.n	8000da8 <__aeabi_dmul+0x32c>
 8000ae2:	49ca      	ldr	r1, [pc, #808]	; (8000e0c <__aeabi_dmul+0x390>)
 8000ae4:	0f42      	lsrs	r2, r0, #29
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	9900      	ldr	r1, [sp, #0]
 8000aea:	4463      	add	r3, ip
 8000aec:	00f6      	lsls	r6, r6, #3
 8000aee:	468c      	mov	ip, r1
 8000af0:	4316      	orrs	r6, r2
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	449c      	add	ip, r3
 8000af6:	0412      	lsls	r2, r2, #16
 8000af8:	4663      	mov	r3, ip
 8000afa:	4316      	orrs	r6, r2
 8000afc:	00c2      	lsls	r2, r0, #3
 8000afe:	2000      	movs	r0, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	9900      	ldr	r1, [sp, #0]
 8000b04:	4643      	mov	r3, r8
 8000b06:	3101      	adds	r1, #1
 8000b08:	468c      	mov	ip, r1
 8000b0a:	4649      	mov	r1, r9
 8000b0c:	407b      	eors	r3, r7
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	290f      	cmp	r1, #15
 8000b12:	d826      	bhi.n	8000b62 <__aeabi_dmul+0xe6>
 8000b14:	4bbe      	ldr	r3, [pc, #760]	; (8000e10 <__aeabi_dmul+0x394>)
 8000b16:	0089      	lsls	r1, r1, #2
 8000b18:	5859      	ldr	r1, [r3, r1]
 8000b1a:	468f      	mov	pc, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	0034      	movs	r4, r6
 8000b22:	0015      	movs	r5, r2
 8000b24:	4683      	mov	fp, r0
 8000b26:	465b      	mov	r3, fp
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d016      	beq.n	8000b5a <__aeabi_dmul+0xde>
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dmul+0xb6>
 8000b30:	e203      	b.n	8000f3a <__aeabi_dmul+0x4be>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dmul+0xbc>
 8000b36:	e0cd      	b.n	8000cd4 <__aeabi_dmul+0x258>
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	9b01      	ldr	r3, [sp, #4]
 8000b40:	0512      	lsls	r2, r2, #20
 8000b42:	4322      	orrs	r2, r4
 8000b44:	07db      	lsls	r3, r3, #31
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0028      	movs	r0, r5
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	b007      	add	sp, #28
 8000b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b50:	46bb      	mov	fp, r7
 8000b52:	46b2      	mov	sl, r6
 8000b54:	46a9      	mov	r9, r5
 8000b56:	46a0      	mov	r8, r4
 8000b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5a:	2400      	movs	r4, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4aaa      	ldr	r2, [pc, #680]	; (8000e08 <__aeabi_dmul+0x38c>)
 8000b60:	e7ed      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000b62:	0c28      	lsrs	r0, r5, #16
 8000b64:	042d      	lsls	r5, r5, #16
 8000b66:	0c2d      	lsrs	r5, r5, #16
 8000b68:	002b      	movs	r3, r5
 8000b6a:	0c11      	lsrs	r1, r2, #16
 8000b6c:	0412      	lsls	r2, r2, #16
 8000b6e:	0c12      	lsrs	r2, r2, #16
 8000b70:	4353      	muls	r3, r2
 8000b72:	4698      	mov	r8, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	002f      	movs	r7, r5
 8000b78:	4343      	muls	r3, r0
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	434f      	muls	r7, r1
 8000b7e:	444f      	add	r7, r9
 8000b80:	46bb      	mov	fp, r7
 8000b82:	4647      	mov	r7, r8
 8000b84:	000b      	movs	r3, r1
 8000b86:	0c3f      	lsrs	r7, r7, #16
 8000b88:	46ba      	mov	sl, r7
 8000b8a:	4343      	muls	r3, r0
 8000b8c:	44da      	add	sl, fp
 8000b8e:	9302      	str	r3, [sp, #8]
 8000b90:	45d1      	cmp	r9, sl
 8000b92:	d904      	bls.n	8000b9e <__aeabi_dmul+0x122>
 8000b94:	2780      	movs	r7, #128	; 0x80
 8000b96:	027f      	lsls	r7, r7, #9
 8000b98:	46b9      	mov	r9, r7
 8000b9a:	444b      	add	r3, r9
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	4653      	mov	r3, sl
 8000ba0:	0c1b      	lsrs	r3, r3, #16
 8000ba2:	469b      	mov	fp, r3
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	041f      	lsls	r7, r3, #16
 8000ba8:	4643      	mov	r3, r8
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	0c1b      	lsrs	r3, r3, #16
 8000bae:	4698      	mov	r8, r3
 8000bb0:	003b      	movs	r3, r7
 8000bb2:	4443      	add	r3, r8
 8000bb4:	9304      	str	r3, [sp, #16]
 8000bb6:	0c33      	lsrs	r3, r6, #16
 8000bb8:	0436      	lsls	r6, r6, #16
 8000bba:	0c36      	lsrs	r6, r6, #16
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	0033      	movs	r3, r6
 8000bc0:	4343      	muls	r3, r0
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4343      	muls	r3, r0
 8000bc8:	002f      	movs	r7, r5
 8000bca:	469a      	mov	sl, r3
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4377      	muls	r7, r6
 8000bd0:	435d      	muls	r5, r3
 8000bd2:	0c38      	lsrs	r0, r7, #16
 8000bd4:	444d      	add	r5, r9
 8000bd6:	1945      	adds	r5, r0, r5
 8000bd8:	45a9      	cmp	r9, r5
 8000bda:	d903      	bls.n	8000be4 <__aeabi_dmul+0x168>
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	025b      	lsls	r3, r3, #9
 8000be0:	4699      	mov	r9, r3
 8000be2:	44ca      	add	sl, r9
 8000be4:	043f      	lsls	r7, r7, #16
 8000be6:	0c28      	lsrs	r0, r5, #16
 8000be8:	0c3f      	lsrs	r7, r7, #16
 8000bea:	042d      	lsls	r5, r5, #16
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	0c27      	lsrs	r7, r4, #16
 8000bf0:	0424      	lsls	r4, r4, #16
 8000bf2:	0c24      	lsrs	r4, r4, #16
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	4350      	muls	r0, r2
 8000bfa:	437a      	muls	r2, r7
 8000bfc:	4691      	mov	r9, r2
 8000bfe:	003a      	movs	r2, r7
 8000c00:	4453      	add	r3, sl
 8000c02:	9305      	str	r3, [sp, #20]
 8000c04:	0c03      	lsrs	r3, r0, #16
 8000c06:	469a      	mov	sl, r3
 8000c08:	434a      	muls	r2, r1
 8000c0a:	4361      	muls	r1, r4
 8000c0c:	4449      	add	r1, r9
 8000c0e:	4451      	add	r1, sl
 8000c10:	44ab      	add	fp, r5
 8000c12:	4589      	cmp	r9, r1
 8000c14:	d903      	bls.n	8000c1e <__aeabi_dmul+0x1a2>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	444a      	add	r2, r9
 8000c1e:	0400      	lsls	r0, r0, #16
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	0409      	lsls	r1, r1, #16
 8000c26:	1809      	adds	r1, r1, r0
 8000c28:	0020      	movs	r0, r4
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	4370      	muls	r0, r6
 8000c30:	435c      	muls	r4, r3
 8000c32:	437e      	muls	r6, r7
 8000c34:	435f      	muls	r7, r3
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	4698      	mov	r8, r3
 8000c3a:	19a4      	adds	r4, r4, r6
 8000c3c:	4444      	add	r4, r8
 8000c3e:	444a      	add	r2, r9
 8000c40:	9703      	str	r7, [sp, #12]
 8000c42:	42a6      	cmp	r6, r4
 8000c44:	d904      	bls.n	8000c50 <__aeabi_dmul+0x1d4>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	4447      	add	r7, r8
 8000c4e:	9703      	str	r7, [sp, #12]
 8000c50:	0423      	lsls	r3, r4, #16
 8000c52:	9e02      	ldr	r6, [sp, #8]
 8000c54:	469a      	mov	sl, r3
 8000c56:	9b05      	ldr	r3, [sp, #20]
 8000c58:	445e      	add	r6, fp
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	42ae      	cmp	r6, r5
 8000c5e:	41ad      	sbcs	r5, r5
 8000c60:	1876      	adds	r6, r6, r1
 8000c62:	428e      	cmp	r6, r1
 8000c64:	4189      	sbcs	r1, r1
 8000c66:	0400      	lsls	r0, r0, #16
 8000c68:	0c00      	lsrs	r0, r0, #16
 8000c6a:	4450      	add	r0, sl
 8000c6c:	4440      	add	r0, r8
 8000c6e:	426d      	negs	r5, r5
 8000c70:	1947      	adds	r7, r0, r5
 8000c72:	46b8      	mov	r8, r7
 8000c74:	4693      	mov	fp, r2
 8000c76:	4249      	negs	r1, r1
 8000c78:	4689      	mov	r9, r1
 8000c7a:	44c3      	add	fp, r8
 8000c7c:	44d9      	add	r9, fp
 8000c7e:	4298      	cmp	r0, r3
 8000c80:	4180      	sbcs	r0, r0
 8000c82:	45a8      	cmp	r8, r5
 8000c84:	41ad      	sbcs	r5, r5
 8000c86:	4593      	cmp	fp, r2
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4589      	cmp	r9, r1
 8000c8c:	4189      	sbcs	r1, r1
 8000c8e:	426d      	negs	r5, r5
 8000c90:	4240      	negs	r0, r0
 8000c92:	4328      	orrs	r0, r5
 8000c94:	0c24      	lsrs	r4, r4, #16
 8000c96:	4252      	negs	r2, r2
 8000c98:	4249      	negs	r1, r1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	9b03      	ldr	r3, [sp, #12]
 8000c9e:	1900      	adds	r0, r0, r4
 8000ca0:	1880      	adds	r0, r0, r2
 8000ca2:	18c7      	adds	r7, r0, r3
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	0ddc      	lsrs	r4, r3, #23
 8000ca8:	9b04      	ldr	r3, [sp, #16]
 8000caa:	0275      	lsls	r5, r6, #9
 8000cac:	431d      	orrs	r5, r3
 8000cae:	1e6a      	subs	r2, r5, #1
 8000cb0:	4195      	sbcs	r5, r2
 8000cb2:	464b      	mov	r3, r9
 8000cb4:	0df6      	lsrs	r6, r6, #23
 8000cb6:	027f      	lsls	r7, r7, #9
 8000cb8:	4335      	orrs	r5, r6
 8000cba:	025a      	lsls	r2, r3, #9
 8000cbc:	433c      	orrs	r4, r7
 8000cbe:	4315      	orrs	r5, r2
 8000cc0:	01fb      	lsls	r3, r7, #7
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dmul+0x24a>
 8000cc4:	e11c      	b.n	8000f00 <__aeabi_dmul+0x484>
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	086a      	lsrs	r2, r5, #1
 8000cca:	400d      	ands	r5, r1
 8000ccc:	4315      	orrs	r5, r2
 8000cce:	07e2      	lsls	r2, r4, #31
 8000cd0:	4315      	orrs	r5, r2
 8000cd2:	0864      	lsrs	r4, r4, #1
 8000cd4:	494f      	ldr	r1, [pc, #316]	; (8000e14 <__aeabi_dmul+0x398>)
 8000cd6:	4461      	add	r1, ip
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_dmul+0x262>
 8000cdc:	e0b0      	b.n	8000e40 <__aeabi_dmul+0x3c4>
 8000cde:	076b      	lsls	r3, r5, #29
 8000ce0:	d009      	beq.n	8000cf6 <__aeabi_dmul+0x27a>
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	402a      	ands	r2, r5
 8000ce6:	2a04      	cmp	r2, #4
 8000ce8:	d005      	beq.n	8000cf6 <__aeabi_dmul+0x27a>
 8000cea:	1d2a      	adds	r2, r5, #4
 8000cec:	42aa      	cmp	r2, r5
 8000cee:	41ad      	sbcs	r5, r5
 8000cf0:	426d      	negs	r5, r5
 8000cf2:	1964      	adds	r4, r4, r5
 8000cf4:	0015      	movs	r5, r2
 8000cf6:	01e3      	lsls	r3, r4, #7
 8000cf8:	d504      	bpl.n	8000d04 <__aeabi_dmul+0x288>
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <__aeabi_dmul+0x39c>)
 8000cfe:	00c9      	lsls	r1, r1, #3
 8000d00:	4014      	ands	r4, r2
 8000d02:	4461      	add	r1, ip
 8000d04:	4a45      	ldr	r2, [pc, #276]	; (8000e1c <__aeabi_dmul+0x3a0>)
 8000d06:	4291      	cmp	r1, r2
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_dmul+0x290>
 8000d0a:	e726      	b.n	8000b5a <__aeabi_dmul+0xde>
 8000d0c:	0762      	lsls	r2, r4, #29
 8000d0e:	08ed      	lsrs	r5, r5, #3
 8000d10:	0264      	lsls	r4, r4, #9
 8000d12:	0549      	lsls	r1, r1, #21
 8000d14:	4315      	orrs	r5, r2
 8000d16:	0b24      	lsrs	r4, r4, #12
 8000d18:	0d4a      	lsrs	r2, r1, #21
 8000d1a:	e710      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000d1c:	4652      	mov	r2, sl
 8000d1e:	4332      	orrs	r2, r6
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dmul+0x2a8>
 8000d22:	e07f      	b.n	8000e24 <__aeabi_dmul+0x3a8>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dmul+0x2ae>
 8000d28:	e0dc      	b.n	8000ee4 <__aeabi_dmul+0x468>
 8000d2a:	0030      	movs	r0, r6
 8000d2c:	f000 fd60 	bl	80017f0 <__clzsi2>
 8000d30:	0002      	movs	r2, r0
 8000d32:	3a0b      	subs	r2, #11
 8000d34:	231d      	movs	r3, #29
 8000d36:	0001      	movs	r1, r0
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	4652      	mov	r2, sl
 8000d3c:	3908      	subs	r1, #8
 8000d3e:	40da      	lsrs	r2, r3
 8000d40:	408e      	lsls	r6, r1
 8000d42:	4316      	orrs	r6, r2
 8000d44:	4652      	mov	r2, sl
 8000d46:	408a      	lsls	r2, r1
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	4935      	ldr	r1, [pc, #212]	; (8000e20 <__aeabi_dmul+0x3a4>)
 8000d4c:	1a18      	subs	r0, r3, r0
 8000d4e:	0003      	movs	r3, r0
 8000d50:	468c      	mov	ip, r1
 8000d52:	4463      	add	r3, ip
 8000d54:	2000      	movs	r0, #0
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	e6d3      	b.n	8000b02 <__aeabi_dmul+0x86>
 8000d5a:	0025      	movs	r5, r4
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	d04a      	beq.n	8000df6 <__aeabi_dmul+0x37a>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dmul+0x2ea>
 8000d64:	e0b0      	b.n	8000ec8 <__aeabi_dmul+0x44c>
 8000d66:	0020      	movs	r0, r4
 8000d68:	f000 fd42 	bl	80017f0 <__clzsi2>
 8000d6c:	0001      	movs	r1, r0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	390b      	subs	r1, #11
 8000d72:	231d      	movs	r3, #29
 8000d74:	0010      	movs	r0, r2
 8000d76:	1a5b      	subs	r3, r3, r1
 8000d78:	0031      	movs	r1, r6
 8000d7a:	0035      	movs	r5, r6
 8000d7c:	3808      	subs	r0, #8
 8000d7e:	4084      	lsls	r4, r0
 8000d80:	40d9      	lsrs	r1, r3
 8000d82:	4085      	lsls	r5, r0
 8000d84:	430c      	orrs	r4, r1
 8000d86:	4826      	ldr	r0, [pc, #152]	; (8000e20 <__aeabi_dmul+0x3a4>)
 8000d88:	1a83      	subs	r3, r0, r2
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4699      	mov	r9, r3
 8000d90:	469b      	mov	fp, r3
 8000d92:	e697      	b.n	8000ac4 <__aeabi_dmul+0x48>
 8000d94:	0005      	movs	r5, r0
 8000d96:	4325      	orrs	r5, r4
 8000d98:	d126      	bne.n	8000de8 <__aeabi_dmul+0x36c>
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2302      	movs	r3, #2
 8000da0:	2400      	movs	r4, #0
 8000da2:	4691      	mov	r9, r2
 8000da4:	469b      	mov	fp, r3
 8000da6:	e68d      	b.n	8000ac4 <__aeabi_dmul+0x48>
 8000da8:	4652      	mov	r2, sl
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	4332      	orrs	r2, r6
 8000dae:	d110      	bne.n	8000dd2 <__aeabi_dmul+0x356>
 8000db0:	4915      	ldr	r1, [pc, #84]	; (8000e08 <__aeabi_dmul+0x38c>)
 8000db2:	2600      	movs	r6, #0
 8000db4:	468c      	mov	ip, r1
 8000db6:	4463      	add	r3, ip
 8000db8:	4649      	mov	r1, r9
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	4319      	orrs	r1, r3
 8000dc0:	4689      	mov	r9, r1
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	e69d      	b.n	8000b02 <__aeabi_dmul+0x86>
 8000dc6:	465b      	mov	r3, fp
 8000dc8:	9701      	str	r7, [sp, #4]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_dmul+0x354>
 8000dce:	e6ad      	b.n	8000b2c <__aeabi_dmul+0xb0>
 8000dd0:	e6c3      	b.n	8000b5a <__aeabi_dmul+0xde>
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <__aeabi_dmul+0x38c>)
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	4463      	add	r3, ip
 8000dda:	464a      	mov	r2, r9
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2303      	movs	r3, #3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4691      	mov	r9, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	e68c      	b.n	8000b02 <__aeabi_dmul+0x86>
 8000de8:	220c      	movs	r2, #12
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2303      	movs	r3, #3
 8000dee:	0005      	movs	r5, r0
 8000df0:	4691      	mov	r9, r2
 8000df2:	469b      	mov	fp, r3
 8000df4:	e666      	b.n	8000ac4 <__aeabi_dmul+0x48>
 8000df6:	2304      	movs	r3, #4
 8000df8:	4699      	mov	r9, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	2400      	movs	r4, #0
 8000e02:	469b      	mov	fp, r3
 8000e04:	e65e      	b.n	8000ac4 <__aeabi_dmul+0x48>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	000007ff 	.word	0x000007ff
 8000e0c:	fffffc01 	.word	0xfffffc01
 8000e10:	080077e0 	.word	0x080077e0
 8000e14:	000003ff 	.word	0x000003ff
 8000e18:	feffffff 	.word	0xfeffffff
 8000e1c:	000007fe 	.word	0x000007fe
 8000e20:	fffffc0d 	.word	0xfffffc0d
 8000e24:	4649      	mov	r1, r9
 8000e26:	2301      	movs	r3, #1
 8000e28:	4319      	orrs	r1, r3
 8000e2a:	4689      	mov	r9, r1
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	2001      	movs	r0, #1
 8000e30:	e667      	b.n	8000b02 <__aeabi_dmul+0x86>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2480      	movs	r4, #128	; 0x80
 8000e36:	2500      	movs	r5, #0
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <__aeabi_dmul+0x4cc>)
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	e67e      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000e40:	2001      	movs	r0, #1
 8000e42:	1a40      	subs	r0, r0, r1
 8000e44:	2838      	cmp	r0, #56	; 0x38
 8000e46:	dd00      	ble.n	8000e4a <__aeabi_dmul+0x3ce>
 8000e48:	e676      	b.n	8000b38 <__aeabi_dmul+0xbc>
 8000e4a:	281f      	cmp	r0, #31
 8000e4c:	dd5b      	ble.n	8000f06 <__aeabi_dmul+0x48a>
 8000e4e:	221f      	movs	r2, #31
 8000e50:	0023      	movs	r3, r4
 8000e52:	4252      	negs	r2, r2
 8000e54:	1a51      	subs	r1, r2, r1
 8000e56:	40cb      	lsrs	r3, r1
 8000e58:	0019      	movs	r1, r3
 8000e5a:	2820      	cmp	r0, #32
 8000e5c:	d003      	beq.n	8000e66 <__aeabi_dmul+0x3ea>
 8000e5e:	4a3b      	ldr	r2, [pc, #236]	; (8000f4c <__aeabi_dmul+0x4d0>)
 8000e60:	4462      	add	r2, ip
 8000e62:	4094      	lsls	r4, r2
 8000e64:	4325      	orrs	r5, r4
 8000e66:	1e6a      	subs	r2, r5, #1
 8000e68:	4195      	sbcs	r5, r2
 8000e6a:	002a      	movs	r2, r5
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	2107      	movs	r1, #7
 8000e70:	000d      	movs	r5, r1
 8000e72:	2400      	movs	r4, #0
 8000e74:	4015      	ands	r5, r2
 8000e76:	4211      	tst	r1, r2
 8000e78:	d05b      	beq.n	8000f32 <__aeabi_dmul+0x4b6>
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4011      	ands	r1, r2
 8000e80:	2904      	cmp	r1, #4
 8000e82:	d053      	beq.n	8000f2c <__aeabi_dmul+0x4b0>
 8000e84:	1d11      	adds	r1, r2, #4
 8000e86:	4291      	cmp	r1, r2
 8000e88:	4192      	sbcs	r2, r2
 8000e8a:	4252      	negs	r2, r2
 8000e8c:	18a4      	adds	r4, r4, r2
 8000e8e:	000a      	movs	r2, r1
 8000e90:	0223      	lsls	r3, r4, #8
 8000e92:	d54b      	bpl.n	8000f2c <__aeabi_dmul+0x4b0>
 8000e94:	2201      	movs	r2, #1
 8000e96:	2400      	movs	r4, #0
 8000e98:	2500      	movs	r5, #0
 8000e9a:	e650      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	031b      	lsls	r3, r3, #12
 8000ea0:	421c      	tst	r4, r3
 8000ea2:	d009      	beq.n	8000eb8 <__aeabi_dmul+0x43c>
 8000ea4:	421e      	tst	r6, r3
 8000ea6:	d107      	bne.n	8000eb8 <__aeabi_dmul+0x43c>
 8000ea8:	4333      	orrs	r3, r6
 8000eaa:	031c      	lsls	r4, r3, #12
 8000eac:	4643      	mov	r3, r8
 8000eae:	0015      	movs	r5, r2
 8000eb0:	0b24      	lsrs	r4, r4, #12
 8000eb2:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <__aeabi_dmul+0x4cc>)
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	e642      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0312      	lsls	r2, r2, #12
 8000ebc:	4314      	orrs	r4, r2
 8000ebe:	0324      	lsls	r4, r4, #12
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <__aeabi_dmul+0x4cc>)
 8000ec2:	0b24      	lsrs	r4, r4, #12
 8000ec4:	9701      	str	r7, [sp, #4]
 8000ec6:	e63a      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000ec8:	f000 fc92 	bl	80017f0 <__clzsi2>
 8000ecc:	0001      	movs	r1, r0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	3115      	adds	r1, #21
 8000ed2:	3220      	adds	r2, #32
 8000ed4:	291c      	cmp	r1, #28
 8000ed6:	dc00      	bgt.n	8000eda <__aeabi_dmul+0x45e>
 8000ed8:	e74b      	b.n	8000d72 <__aeabi_dmul+0x2f6>
 8000eda:	0034      	movs	r4, r6
 8000edc:	3808      	subs	r0, #8
 8000ede:	2500      	movs	r5, #0
 8000ee0:	4084      	lsls	r4, r0
 8000ee2:	e750      	b.n	8000d86 <__aeabi_dmul+0x30a>
 8000ee4:	f000 fc84 	bl	80017f0 <__clzsi2>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	001a      	movs	r2, r3
 8000eec:	3215      	adds	r2, #21
 8000eee:	3020      	adds	r0, #32
 8000ef0:	2a1c      	cmp	r2, #28
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_dmul+0x47a>
 8000ef4:	e71e      	b.n	8000d34 <__aeabi_dmul+0x2b8>
 8000ef6:	4656      	mov	r6, sl
 8000ef8:	3b08      	subs	r3, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	409e      	lsls	r6, r3
 8000efe:	e723      	b.n	8000d48 <__aeabi_dmul+0x2cc>
 8000f00:	9b00      	ldr	r3, [sp, #0]
 8000f02:	469c      	mov	ip, r3
 8000f04:	e6e6      	b.n	8000cd4 <__aeabi_dmul+0x258>
 8000f06:	4912      	ldr	r1, [pc, #72]	; (8000f50 <__aeabi_dmul+0x4d4>)
 8000f08:	0022      	movs	r2, r4
 8000f0a:	4461      	add	r1, ip
 8000f0c:	002e      	movs	r6, r5
 8000f0e:	408d      	lsls	r5, r1
 8000f10:	408a      	lsls	r2, r1
 8000f12:	40c6      	lsrs	r6, r0
 8000f14:	1e69      	subs	r1, r5, #1
 8000f16:	418d      	sbcs	r5, r1
 8000f18:	4332      	orrs	r2, r6
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	40c4      	lsrs	r4, r0
 8000f1e:	0753      	lsls	r3, r2, #29
 8000f20:	d0b6      	beq.n	8000e90 <__aeabi_dmul+0x414>
 8000f22:	210f      	movs	r1, #15
 8000f24:	4011      	ands	r1, r2
 8000f26:	2904      	cmp	r1, #4
 8000f28:	d1ac      	bne.n	8000e84 <__aeabi_dmul+0x408>
 8000f2a:	e7b1      	b.n	8000e90 <__aeabi_dmul+0x414>
 8000f2c:	0765      	lsls	r5, r4, #29
 8000f2e:	0264      	lsls	r4, r4, #9
 8000f30:	0b24      	lsrs	r4, r4, #12
 8000f32:	08d2      	lsrs	r2, r2, #3
 8000f34:	4315      	orrs	r5, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	e601      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0312      	lsls	r2, r2, #12
 8000f3e:	4314      	orrs	r4, r2
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	4a01      	ldr	r2, [pc, #4]	; (8000f48 <__aeabi_dmul+0x4cc>)
 8000f44:	0b24      	lsrs	r4, r4, #12
 8000f46:	e5fa      	b.n	8000b3e <__aeabi_dmul+0xc2>
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	0000043e 	.word	0x0000043e
 8000f50:	0000041e 	.word	0x0000041e

08000f54 <__aeabi_dsub>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	4657      	mov	r7, sl
 8000f58:	464e      	mov	r6, r9
 8000f5a:	4645      	mov	r5, r8
 8000f5c:	46de      	mov	lr, fp
 8000f5e:	b5e0      	push	{r5, r6, r7, lr}
 8000f60:	001e      	movs	r6, r3
 8000f62:	0017      	movs	r7, r2
 8000f64:	004a      	lsls	r2, r1, #1
 8000f66:	030b      	lsls	r3, r1, #12
 8000f68:	0d52      	lsrs	r2, r2, #21
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	4690      	mov	r8, r2
 8000f6e:	0f42      	lsrs	r2, r0, #29
 8000f70:	431a      	orrs	r2, r3
 8000f72:	0fcd      	lsrs	r5, r1, #31
 8000f74:	4ccd      	ldr	r4, [pc, #820]	; (80012ac <__aeabi_dsub+0x358>)
 8000f76:	0331      	lsls	r1, r6, #12
 8000f78:	00c3      	lsls	r3, r0, #3
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	0070      	lsls	r0, r6, #1
 8000f7e:	0f7a      	lsrs	r2, r7, #29
 8000f80:	0a49      	lsrs	r1, r1, #9
 8000f82:	00ff      	lsls	r7, r7, #3
 8000f84:	469a      	mov	sl, r3
 8000f86:	46b9      	mov	r9, r7
 8000f88:	0d40      	lsrs	r0, r0, #21
 8000f8a:	0ff6      	lsrs	r6, r6, #31
 8000f8c:	4311      	orrs	r1, r2
 8000f8e:	42a0      	cmp	r0, r4
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dsub+0x40>
 8000f92:	e0b1      	b.n	80010f8 <__aeabi_dsub+0x1a4>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4056      	eors	r6, r2
 8000f98:	46b3      	mov	fp, r6
 8000f9a:	42b5      	cmp	r5, r6
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dsub+0x4c>
 8000f9e:	e088      	b.n	80010b2 <__aeabi_dsub+0x15e>
 8000fa0:	4642      	mov	r2, r8
 8000fa2:	1a12      	subs	r2, r2, r0
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_dsub+0x56>
 8000fa8:	e0ae      	b.n	8001108 <__aeabi_dsub+0x1b4>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_dsub+0x5c>
 8000fae:	e0c1      	b.n	8001134 <__aeabi_dsub+0x1e0>
 8000fb0:	48be      	ldr	r0, [pc, #760]	; (80012ac <__aeabi_dsub+0x358>)
 8000fb2:	4580      	cmp	r8, r0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dsub+0x64>
 8000fb6:	e151      	b.n	800125c <__aeabi_dsub+0x308>
 8000fb8:	2080      	movs	r0, #128	; 0x80
 8000fba:	0400      	lsls	r0, r0, #16
 8000fbc:	4301      	orrs	r1, r0
 8000fbe:	2a38      	cmp	r2, #56	; 0x38
 8000fc0:	dd00      	ble.n	8000fc4 <__aeabi_dsub+0x70>
 8000fc2:	e17b      	b.n	80012bc <__aeabi_dsub+0x368>
 8000fc4:	2a1f      	cmp	r2, #31
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_dsub+0x76>
 8000fc8:	e1ee      	b.n	80013a8 <__aeabi_dsub+0x454>
 8000fca:	2020      	movs	r0, #32
 8000fcc:	003e      	movs	r6, r7
 8000fce:	1a80      	subs	r0, r0, r2
 8000fd0:	000c      	movs	r4, r1
 8000fd2:	40d6      	lsrs	r6, r2
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	4087      	lsls	r7, r0
 8000fd8:	4662      	mov	r2, ip
 8000fda:	4084      	lsls	r4, r0
 8000fdc:	1a52      	subs	r2, r2, r1
 8000fde:	1e78      	subs	r0, r7, #1
 8000fe0:	4187      	sbcs	r7, r0
 8000fe2:	4694      	mov	ip, r2
 8000fe4:	4334      	orrs	r4, r6
 8000fe6:	4327      	orrs	r7, r4
 8000fe8:	1bdc      	subs	r4, r3, r7
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	419b      	sbcs	r3, r3
 8000fee:	4662      	mov	r2, ip
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	464b      	mov	r3, r9
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	d400      	bmi.n	8000ffe <__aeabi_dsub+0xaa>
 8000ffc:	e118      	b.n	8001230 <__aeabi_dsub+0x2dc>
 8000ffe:	464b      	mov	r3, r9
 8001000:	0258      	lsls	r0, r3, #9
 8001002:	0a43      	lsrs	r3, r0, #9
 8001004:	4699      	mov	r9, r3
 8001006:	464b      	mov	r3, r9
 8001008:	2b00      	cmp	r3, #0
 800100a:	d100      	bne.n	800100e <__aeabi_dsub+0xba>
 800100c:	e137      	b.n	800127e <__aeabi_dsub+0x32a>
 800100e:	4648      	mov	r0, r9
 8001010:	f000 fbee 	bl	80017f0 <__clzsi2>
 8001014:	0001      	movs	r1, r0
 8001016:	3908      	subs	r1, #8
 8001018:	2320      	movs	r3, #32
 800101a:	0022      	movs	r2, r4
 800101c:	4648      	mov	r0, r9
 800101e:	1a5b      	subs	r3, r3, r1
 8001020:	40da      	lsrs	r2, r3
 8001022:	4088      	lsls	r0, r1
 8001024:	408c      	lsls	r4, r1
 8001026:	4643      	mov	r3, r8
 8001028:	4310      	orrs	r0, r2
 800102a:	4588      	cmp	r8, r1
 800102c:	dd00      	ble.n	8001030 <__aeabi_dsub+0xdc>
 800102e:	e136      	b.n	800129e <__aeabi_dsub+0x34a>
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	1c4b      	adds	r3, r1, #1
 8001034:	2b1f      	cmp	r3, #31
 8001036:	dd00      	ble.n	800103a <__aeabi_dsub+0xe6>
 8001038:	e0ea      	b.n	8001210 <__aeabi_dsub+0x2bc>
 800103a:	2220      	movs	r2, #32
 800103c:	0026      	movs	r6, r4
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	0001      	movs	r1, r0
 8001042:	4094      	lsls	r4, r2
 8001044:	40de      	lsrs	r6, r3
 8001046:	40d8      	lsrs	r0, r3
 8001048:	2300      	movs	r3, #0
 800104a:	4091      	lsls	r1, r2
 800104c:	1e62      	subs	r2, r4, #1
 800104e:	4194      	sbcs	r4, r2
 8001050:	4681      	mov	r9, r0
 8001052:	4698      	mov	r8, r3
 8001054:	4331      	orrs	r1, r6
 8001056:	430c      	orrs	r4, r1
 8001058:	0763      	lsls	r3, r4, #29
 800105a:	d009      	beq.n	8001070 <__aeabi_dsub+0x11c>
 800105c:	230f      	movs	r3, #15
 800105e:	4023      	ands	r3, r4
 8001060:	2b04      	cmp	r3, #4
 8001062:	d005      	beq.n	8001070 <__aeabi_dsub+0x11c>
 8001064:	1d23      	adds	r3, r4, #4
 8001066:	42a3      	cmp	r3, r4
 8001068:	41a4      	sbcs	r4, r4
 800106a:	4264      	negs	r4, r4
 800106c:	44a1      	add	r9, r4
 800106e:	001c      	movs	r4, r3
 8001070:	464b      	mov	r3, r9
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	d400      	bmi.n	8001078 <__aeabi_dsub+0x124>
 8001076:	e0de      	b.n	8001236 <__aeabi_dsub+0x2e2>
 8001078:	4641      	mov	r1, r8
 800107a:	4b8c      	ldr	r3, [pc, #560]	; (80012ac <__aeabi_dsub+0x358>)
 800107c:	3101      	adds	r1, #1
 800107e:	4299      	cmp	r1, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_dsub+0x130>
 8001082:	e0e7      	b.n	8001254 <__aeabi_dsub+0x300>
 8001084:	464b      	mov	r3, r9
 8001086:	488a      	ldr	r0, [pc, #552]	; (80012b0 <__aeabi_dsub+0x35c>)
 8001088:	08e4      	lsrs	r4, r4, #3
 800108a:	4003      	ands	r3, r0
 800108c:	0018      	movs	r0, r3
 800108e:	0549      	lsls	r1, r1, #21
 8001090:	075b      	lsls	r3, r3, #29
 8001092:	0240      	lsls	r0, r0, #9
 8001094:	4323      	orrs	r3, r4
 8001096:	0d4a      	lsrs	r2, r1, #21
 8001098:	0b04      	lsrs	r4, r0, #12
 800109a:	0512      	lsls	r2, r2, #20
 800109c:	07ed      	lsls	r5, r5, #31
 800109e:	4322      	orrs	r2, r4
 80010a0:	432a      	orrs	r2, r5
 80010a2:	0018      	movs	r0, r3
 80010a4:	0011      	movs	r1, r2
 80010a6:	bcf0      	pop	{r4, r5, r6, r7}
 80010a8:	46bb      	mov	fp, r7
 80010aa:	46b2      	mov	sl, r6
 80010ac:	46a9      	mov	r9, r5
 80010ae:	46a0      	mov	r8, r4
 80010b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b2:	4642      	mov	r2, r8
 80010b4:	1a12      	subs	r2, r2, r0
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	dd52      	ble.n	8001160 <__aeabi_dsub+0x20c>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x16c>
 80010be:	e09c      	b.n	80011fa <__aeabi_dsub+0x2a6>
 80010c0:	45a0      	cmp	r8, r4
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dsub+0x172>
 80010c4:	e0ca      	b.n	800125c <__aeabi_dsub+0x308>
 80010c6:	2080      	movs	r0, #128	; 0x80
 80010c8:	0400      	lsls	r0, r0, #16
 80010ca:	4301      	orrs	r1, r0
 80010cc:	2a38      	cmp	r2, #56	; 0x38
 80010ce:	dd00      	ble.n	80010d2 <__aeabi_dsub+0x17e>
 80010d0:	e149      	b.n	8001366 <__aeabi_dsub+0x412>
 80010d2:	2a1f      	cmp	r2, #31
 80010d4:	dc00      	bgt.n	80010d8 <__aeabi_dsub+0x184>
 80010d6:	e197      	b.n	8001408 <__aeabi_dsub+0x4b4>
 80010d8:	0010      	movs	r0, r2
 80010da:	000e      	movs	r6, r1
 80010dc:	3820      	subs	r0, #32
 80010de:	40c6      	lsrs	r6, r0
 80010e0:	2a20      	cmp	r2, #32
 80010e2:	d004      	beq.n	80010ee <__aeabi_dsub+0x19a>
 80010e4:	2040      	movs	r0, #64	; 0x40
 80010e6:	1a82      	subs	r2, r0, r2
 80010e8:	4091      	lsls	r1, r2
 80010ea:	430f      	orrs	r7, r1
 80010ec:	46b9      	mov	r9, r7
 80010ee:	464c      	mov	r4, r9
 80010f0:	1e62      	subs	r2, r4, #1
 80010f2:	4194      	sbcs	r4, r2
 80010f4:	4334      	orrs	r4, r6
 80010f6:	e13a      	b.n	800136e <__aeabi_dsub+0x41a>
 80010f8:	000a      	movs	r2, r1
 80010fa:	433a      	orrs	r2, r7
 80010fc:	d028      	beq.n	8001150 <__aeabi_dsub+0x1fc>
 80010fe:	46b3      	mov	fp, r6
 8001100:	42b5      	cmp	r5, r6
 8001102:	d02b      	beq.n	800115c <__aeabi_dsub+0x208>
 8001104:	4a6b      	ldr	r2, [pc, #428]	; (80012b4 <__aeabi_dsub+0x360>)
 8001106:	4442      	add	r2, r8
 8001108:	2a00      	cmp	r2, #0
 800110a:	d05d      	beq.n	80011c8 <__aeabi_dsub+0x274>
 800110c:	4642      	mov	r2, r8
 800110e:	4644      	mov	r4, r8
 8001110:	1a82      	subs	r2, r0, r2
 8001112:	2c00      	cmp	r4, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_dsub+0x1c4>
 8001116:	e0f5      	b.n	8001304 <__aeabi_dsub+0x3b0>
 8001118:	4665      	mov	r5, ip
 800111a:	431d      	orrs	r5, r3
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x1cc>
 800111e:	e19c      	b.n	800145a <__aeabi_dsub+0x506>
 8001120:	1e55      	subs	r5, r2, #1
 8001122:	2a01      	cmp	r2, #1
 8001124:	d100      	bne.n	8001128 <__aeabi_dsub+0x1d4>
 8001126:	e1fb      	b.n	8001520 <__aeabi_dsub+0x5cc>
 8001128:	4c60      	ldr	r4, [pc, #384]	; (80012ac <__aeabi_dsub+0x358>)
 800112a:	42a2      	cmp	r2, r4
 800112c:	d100      	bne.n	8001130 <__aeabi_dsub+0x1dc>
 800112e:	e1bd      	b.n	80014ac <__aeabi_dsub+0x558>
 8001130:	002a      	movs	r2, r5
 8001132:	e0f0      	b.n	8001316 <__aeabi_dsub+0x3c2>
 8001134:	0008      	movs	r0, r1
 8001136:	4338      	orrs	r0, r7
 8001138:	d100      	bne.n	800113c <__aeabi_dsub+0x1e8>
 800113a:	e0c3      	b.n	80012c4 <__aeabi_dsub+0x370>
 800113c:	1e50      	subs	r0, r2, #1
 800113e:	2a01      	cmp	r2, #1
 8001140:	d100      	bne.n	8001144 <__aeabi_dsub+0x1f0>
 8001142:	e1a8      	b.n	8001496 <__aeabi_dsub+0x542>
 8001144:	4c59      	ldr	r4, [pc, #356]	; (80012ac <__aeabi_dsub+0x358>)
 8001146:	42a2      	cmp	r2, r4
 8001148:	d100      	bne.n	800114c <__aeabi_dsub+0x1f8>
 800114a:	e087      	b.n	800125c <__aeabi_dsub+0x308>
 800114c:	0002      	movs	r2, r0
 800114e:	e736      	b.n	8000fbe <__aeabi_dsub+0x6a>
 8001150:	2201      	movs	r2, #1
 8001152:	4056      	eors	r6, r2
 8001154:	46b3      	mov	fp, r6
 8001156:	42b5      	cmp	r5, r6
 8001158:	d000      	beq.n	800115c <__aeabi_dsub+0x208>
 800115a:	e721      	b.n	8000fa0 <__aeabi_dsub+0x4c>
 800115c:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <__aeabi_dsub+0x360>)
 800115e:	4442      	add	r2, r8
 8001160:	2a00      	cmp	r2, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_dsub+0x212>
 8001164:	e0b5      	b.n	80012d2 <__aeabi_dsub+0x37e>
 8001166:	4642      	mov	r2, r8
 8001168:	4644      	mov	r4, r8
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	2c00      	cmp	r4, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_dsub+0x21e>
 8001170:	e138      	b.n	80013e4 <__aeabi_dsub+0x490>
 8001172:	4e4e      	ldr	r6, [pc, #312]	; (80012ac <__aeabi_dsub+0x358>)
 8001174:	42b0      	cmp	r0, r6
 8001176:	d100      	bne.n	800117a <__aeabi_dsub+0x226>
 8001178:	e1de      	b.n	8001538 <__aeabi_dsub+0x5e4>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	4664      	mov	r4, ip
 800117e:	0436      	lsls	r6, r6, #16
 8001180:	4334      	orrs	r4, r6
 8001182:	46a4      	mov	ip, r4
 8001184:	2a38      	cmp	r2, #56	; 0x38
 8001186:	dd00      	ble.n	800118a <__aeabi_dsub+0x236>
 8001188:	e196      	b.n	80014b8 <__aeabi_dsub+0x564>
 800118a:	2a1f      	cmp	r2, #31
 800118c:	dd00      	ble.n	8001190 <__aeabi_dsub+0x23c>
 800118e:	e224      	b.n	80015da <__aeabi_dsub+0x686>
 8001190:	2620      	movs	r6, #32
 8001192:	1ab4      	subs	r4, r6, r2
 8001194:	46a2      	mov	sl, r4
 8001196:	4664      	mov	r4, ip
 8001198:	4656      	mov	r6, sl
 800119a:	40b4      	lsls	r4, r6
 800119c:	46a1      	mov	r9, r4
 800119e:	001c      	movs	r4, r3
 80011a0:	464e      	mov	r6, r9
 80011a2:	40d4      	lsrs	r4, r2
 80011a4:	4326      	orrs	r6, r4
 80011a6:	0034      	movs	r4, r6
 80011a8:	4656      	mov	r6, sl
 80011aa:	40b3      	lsls	r3, r6
 80011ac:	1e5e      	subs	r6, r3, #1
 80011ae:	41b3      	sbcs	r3, r6
 80011b0:	431c      	orrs	r4, r3
 80011b2:	4663      	mov	r3, ip
 80011b4:	40d3      	lsrs	r3, r2
 80011b6:	18c9      	adds	r1, r1, r3
 80011b8:	19e4      	adds	r4, r4, r7
 80011ba:	42bc      	cmp	r4, r7
 80011bc:	41bf      	sbcs	r7, r7
 80011be:	427f      	negs	r7, r7
 80011c0:	46b9      	mov	r9, r7
 80011c2:	4680      	mov	r8, r0
 80011c4:	4489      	add	r9, r1
 80011c6:	e0d8      	b.n	800137a <__aeabi_dsub+0x426>
 80011c8:	4640      	mov	r0, r8
 80011ca:	4c3b      	ldr	r4, [pc, #236]	; (80012b8 <__aeabi_dsub+0x364>)
 80011cc:	3001      	adds	r0, #1
 80011ce:	4220      	tst	r0, r4
 80011d0:	d000      	beq.n	80011d4 <__aeabi_dsub+0x280>
 80011d2:	e0b4      	b.n	800133e <__aeabi_dsub+0x3ea>
 80011d4:	4640      	mov	r0, r8
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_dsub+0x288>
 80011da:	e144      	b.n	8001466 <__aeabi_dsub+0x512>
 80011dc:	4660      	mov	r0, ip
 80011de:	4318      	orrs	r0, r3
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dsub+0x290>
 80011e2:	e190      	b.n	8001506 <__aeabi_dsub+0x5b2>
 80011e4:	0008      	movs	r0, r1
 80011e6:	4338      	orrs	r0, r7
 80011e8:	d000      	beq.n	80011ec <__aeabi_dsub+0x298>
 80011ea:	e1aa      	b.n	8001542 <__aeabi_dsub+0x5ee>
 80011ec:	4661      	mov	r1, ip
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	0749      	lsls	r1, r1, #29
 80011f2:	430b      	orrs	r3, r1
 80011f4:	4661      	mov	r1, ip
 80011f6:	08cc      	lsrs	r4, r1, #3
 80011f8:	e027      	b.n	800124a <__aeabi_dsub+0x2f6>
 80011fa:	0008      	movs	r0, r1
 80011fc:	4338      	orrs	r0, r7
 80011fe:	d061      	beq.n	80012c4 <__aeabi_dsub+0x370>
 8001200:	1e50      	subs	r0, r2, #1
 8001202:	2a01      	cmp	r2, #1
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x2b4>
 8001206:	e139      	b.n	800147c <__aeabi_dsub+0x528>
 8001208:	42a2      	cmp	r2, r4
 800120a:	d027      	beq.n	800125c <__aeabi_dsub+0x308>
 800120c:	0002      	movs	r2, r0
 800120e:	e75d      	b.n	80010cc <__aeabi_dsub+0x178>
 8001210:	0002      	movs	r2, r0
 8001212:	391f      	subs	r1, #31
 8001214:	40ca      	lsrs	r2, r1
 8001216:	0011      	movs	r1, r2
 8001218:	2b20      	cmp	r3, #32
 800121a:	d003      	beq.n	8001224 <__aeabi_dsub+0x2d0>
 800121c:	2240      	movs	r2, #64	; 0x40
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4098      	lsls	r0, r3
 8001222:	4304      	orrs	r4, r0
 8001224:	1e63      	subs	r3, r4, #1
 8001226:	419c      	sbcs	r4, r3
 8001228:	2300      	movs	r3, #0
 800122a:	4699      	mov	r9, r3
 800122c:	4698      	mov	r8, r3
 800122e:	430c      	orrs	r4, r1
 8001230:	0763      	lsls	r3, r4, #29
 8001232:	d000      	beq.n	8001236 <__aeabi_dsub+0x2e2>
 8001234:	e712      	b.n	800105c <__aeabi_dsub+0x108>
 8001236:	464b      	mov	r3, r9
 8001238:	464a      	mov	r2, r9
 800123a:	08e4      	lsrs	r4, r4, #3
 800123c:	075b      	lsls	r3, r3, #29
 800123e:	4323      	orrs	r3, r4
 8001240:	08d4      	lsrs	r4, r2, #3
 8001242:	4642      	mov	r2, r8
 8001244:	4919      	ldr	r1, [pc, #100]	; (80012ac <__aeabi_dsub+0x358>)
 8001246:	428a      	cmp	r2, r1
 8001248:	d00e      	beq.n	8001268 <__aeabi_dsub+0x314>
 800124a:	0324      	lsls	r4, r4, #12
 800124c:	0552      	lsls	r2, r2, #21
 800124e:	0b24      	lsrs	r4, r4, #12
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	e722      	b.n	800109a <__aeabi_dsub+0x146>
 8001254:	000a      	movs	r2, r1
 8001256:	2400      	movs	r4, #0
 8001258:	2300      	movs	r3, #0
 800125a:	e71e      	b.n	800109a <__aeabi_dsub+0x146>
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	4662      	mov	r2, ip
 8001260:	0752      	lsls	r2, r2, #29
 8001262:	4313      	orrs	r3, r2
 8001264:	4662      	mov	r2, ip
 8001266:	08d4      	lsrs	r4, r2, #3
 8001268:	001a      	movs	r2, r3
 800126a:	4322      	orrs	r2, r4
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x31c>
 800126e:	e1fc      	b.n	800166a <__aeabi_dsub+0x716>
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0312      	lsls	r2, r2, #12
 8001274:	4314      	orrs	r4, r2
 8001276:	0324      	lsls	r4, r4, #12
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <__aeabi_dsub+0x358>)
 800127a:	0b24      	lsrs	r4, r4, #12
 800127c:	e70d      	b.n	800109a <__aeabi_dsub+0x146>
 800127e:	0020      	movs	r0, r4
 8001280:	f000 fab6 	bl	80017f0 <__clzsi2>
 8001284:	0001      	movs	r1, r0
 8001286:	3118      	adds	r1, #24
 8001288:	291f      	cmp	r1, #31
 800128a:	dc00      	bgt.n	800128e <__aeabi_dsub+0x33a>
 800128c:	e6c4      	b.n	8001018 <__aeabi_dsub+0xc4>
 800128e:	3808      	subs	r0, #8
 8001290:	4084      	lsls	r4, r0
 8001292:	4643      	mov	r3, r8
 8001294:	0020      	movs	r0, r4
 8001296:	2400      	movs	r4, #0
 8001298:	4588      	cmp	r8, r1
 800129a:	dc00      	bgt.n	800129e <__aeabi_dsub+0x34a>
 800129c:	e6c8      	b.n	8001030 <__aeabi_dsub+0xdc>
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__aeabi_dsub+0x35c>)
 80012a0:	1a5b      	subs	r3, r3, r1
 80012a2:	4010      	ands	r0, r2
 80012a4:	4698      	mov	r8, r3
 80012a6:	4681      	mov	r9, r0
 80012a8:	e6d6      	b.n	8001058 <__aeabi_dsub+0x104>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	000007ff 	.word	0x000007ff
 80012b0:	ff7fffff 	.word	0xff7fffff
 80012b4:	fffff801 	.word	0xfffff801
 80012b8:	000007fe 	.word	0x000007fe
 80012bc:	430f      	orrs	r7, r1
 80012be:	1e7a      	subs	r2, r7, #1
 80012c0:	4197      	sbcs	r7, r2
 80012c2:	e691      	b.n	8000fe8 <__aeabi_dsub+0x94>
 80012c4:	4661      	mov	r1, ip
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	0749      	lsls	r1, r1, #29
 80012ca:	430b      	orrs	r3, r1
 80012cc:	4661      	mov	r1, ip
 80012ce:	08cc      	lsrs	r4, r1, #3
 80012d0:	e7b8      	b.n	8001244 <__aeabi_dsub+0x2f0>
 80012d2:	4640      	mov	r0, r8
 80012d4:	4cd3      	ldr	r4, [pc, #844]	; (8001624 <__aeabi_dsub+0x6d0>)
 80012d6:	3001      	adds	r0, #1
 80012d8:	4220      	tst	r0, r4
 80012da:	d000      	beq.n	80012de <__aeabi_dsub+0x38a>
 80012dc:	e0a2      	b.n	8001424 <__aeabi_dsub+0x4d0>
 80012de:	4640      	mov	r0, r8
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d000      	beq.n	80012e6 <__aeabi_dsub+0x392>
 80012e4:	e101      	b.n	80014ea <__aeabi_dsub+0x596>
 80012e6:	4660      	mov	r0, ip
 80012e8:	4318      	orrs	r0, r3
 80012ea:	d100      	bne.n	80012ee <__aeabi_dsub+0x39a>
 80012ec:	e15e      	b.n	80015ac <__aeabi_dsub+0x658>
 80012ee:	0008      	movs	r0, r1
 80012f0:	4338      	orrs	r0, r7
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dsub+0x3a2>
 80012f4:	e15f      	b.n	80015b6 <__aeabi_dsub+0x662>
 80012f6:	4661      	mov	r1, ip
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	0749      	lsls	r1, r1, #29
 80012fc:	430b      	orrs	r3, r1
 80012fe:	4661      	mov	r1, ip
 8001300:	08cc      	lsrs	r4, r1, #3
 8001302:	e7a2      	b.n	800124a <__aeabi_dsub+0x2f6>
 8001304:	4dc8      	ldr	r5, [pc, #800]	; (8001628 <__aeabi_dsub+0x6d4>)
 8001306:	42a8      	cmp	r0, r5
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x3b8>
 800130a:	e0cf      	b.n	80014ac <__aeabi_dsub+0x558>
 800130c:	2580      	movs	r5, #128	; 0x80
 800130e:	4664      	mov	r4, ip
 8001310:	042d      	lsls	r5, r5, #16
 8001312:	432c      	orrs	r4, r5
 8001314:	46a4      	mov	ip, r4
 8001316:	2a38      	cmp	r2, #56	; 0x38
 8001318:	dc56      	bgt.n	80013c8 <__aeabi_dsub+0x474>
 800131a:	2a1f      	cmp	r2, #31
 800131c:	dd00      	ble.n	8001320 <__aeabi_dsub+0x3cc>
 800131e:	e0d1      	b.n	80014c4 <__aeabi_dsub+0x570>
 8001320:	2520      	movs	r5, #32
 8001322:	001e      	movs	r6, r3
 8001324:	1aad      	subs	r5, r5, r2
 8001326:	4664      	mov	r4, ip
 8001328:	40ab      	lsls	r3, r5
 800132a:	40ac      	lsls	r4, r5
 800132c:	40d6      	lsrs	r6, r2
 800132e:	1e5d      	subs	r5, r3, #1
 8001330:	41ab      	sbcs	r3, r5
 8001332:	4334      	orrs	r4, r6
 8001334:	4323      	orrs	r3, r4
 8001336:	4664      	mov	r4, ip
 8001338:	40d4      	lsrs	r4, r2
 800133a:	1b09      	subs	r1, r1, r4
 800133c:	e049      	b.n	80013d2 <__aeabi_dsub+0x47e>
 800133e:	4660      	mov	r0, ip
 8001340:	1bdc      	subs	r4, r3, r7
 8001342:	1a46      	subs	r6, r0, r1
 8001344:	42a3      	cmp	r3, r4
 8001346:	4180      	sbcs	r0, r0
 8001348:	4240      	negs	r0, r0
 800134a:	4681      	mov	r9, r0
 800134c:	0030      	movs	r0, r6
 800134e:	464e      	mov	r6, r9
 8001350:	1b80      	subs	r0, r0, r6
 8001352:	4681      	mov	r9, r0
 8001354:	0200      	lsls	r0, r0, #8
 8001356:	d476      	bmi.n	8001446 <__aeabi_dsub+0x4f2>
 8001358:	464b      	mov	r3, r9
 800135a:	4323      	orrs	r3, r4
 800135c:	d000      	beq.n	8001360 <__aeabi_dsub+0x40c>
 800135e:	e652      	b.n	8001006 <__aeabi_dsub+0xb2>
 8001360:	2400      	movs	r4, #0
 8001362:	2500      	movs	r5, #0
 8001364:	e771      	b.n	800124a <__aeabi_dsub+0x2f6>
 8001366:	4339      	orrs	r1, r7
 8001368:	000c      	movs	r4, r1
 800136a:	1e62      	subs	r2, r4, #1
 800136c:	4194      	sbcs	r4, r2
 800136e:	18e4      	adds	r4, r4, r3
 8001370:	429c      	cmp	r4, r3
 8001372:	419b      	sbcs	r3, r3
 8001374:	425b      	negs	r3, r3
 8001376:	4463      	add	r3, ip
 8001378:	4699      	mov	r9, r3
 800137a:	464b      	mov	r3, r9
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	d400      	bmi.n	8001382 <__aeabi_dsub+0x42e>
 8001380:	e756      	b.n	8001230 <__aeabi_dsub+0x2dc>
 8001382:	2301      	movs	r3, #1
 8001384:	469c      	mov	ip, r3
 8001386:	4ba8      	ldr	r3, [pc, #672]	; (8001628 <__aeabi_dsub+0x6d4>)
 8001388:	44e0      	add	r8, ip
 800138a:	4598      	cmp	r8, r3
 800138c:	d038      	beq.n	8001400 <__aeabi_dsub+0x4ac>
 800138e:	464b      	mov	r3, r9
 8001390:	48a6      	ldr	r0, [pc, #664]	; (800162c <__aeabi_dsub+0x6d8>)
 8001392:	2201      	movs	r2, #1
 8001394:	4003      	ands	r3, r0
 8001396:	0018      	movs	r0, r3
 8001398:	0863      	lsrs	r3, r4, #1
 800139a:	4014      	ands	r4, r2
 800139c:	431c      	orrs	r4, r3
 800139e:	07c3      	lsls	r3, r0, #31
 80013a0:	431c      	orrs	r4, r3
 80013a2:	0843      	lsrs	r3, r0, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	e657      	b.n	8001058 <__aeabi_dsub+0x104>
 80013a8:	0010      	movs	r0, r2
 80013aa:	000e      	movs	r6, r1
 80013ac:	3820      	subs	r0, #32
 80013ae:	40c6      	lsrs	r6, r0
 80013b0:	2a20      	cmp	r2, #32
 80013b2:	d004      	beq.n	80013be <__aeabi_dsub+0x46a>
 80013b4:	2040      	movs	r0, #64	; 0x40
 80013b6:	1a82      	subs	r2, r0, r2
 80013b8:	4091      	lsls	r1, r2
 80013ba:	430f      	orrs	r7, r1
 80013bc:	46b9      	mov	r9, r7
 80013be:	464f      	mov	r7, r9
 80013c0:	1e7a      	subs	r2, r7, #1
 80013c2:	4197      	sbcs	r7, r2
 80013c4:	4337      	orrs	r7, r6
 80013c6:	e60f      	b.n	8000fe8 <__aeabi_dsub+0x94>
 80013c8:	4662      	mov	r2, ip
 80013ca:	431a      	orrs	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	4193      	sbcs	r3, r2
 80013d2:	1afc      	subs	r4, r7, r3
 80013d4:	42a7      	cmp	r7, r4
 80013d6:	41bf      	sbcs	r7, r7
 80013d8:	427f      	negs	r7, r7
 80013da:	1bcb      	subs	r3, r1, r7
 80013dc:	4699      	mov	r9, r3
 80013de:	465d      	mov	r5, fp
 80013e0:	4680      	mov	r8, r0
 80013e2:	e608      	b.n	8000ff6 <__aeabi_dsub+0xa2>
 80013e4:	4666      	mov	r6, ip
 80013e6:	431e      	orrs	r6, r3
 80013e8:	d100      	bne.n	80013ec <__aeabi_dsub+0x498>
 80013ea:	e0be      	b.n	800156a <__aeabi_dsub+0x616>
 80013ec:	1e56      	subs	r6, r2, #1
 80013ee:	2a01      	cmp	r2, #1
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dsub+0x4a0>
 80013f2:	e109      	b.n	8001608 <__aeabi_dsub+0x6b4>
 80013f4:	4c8c      	ldr	r4, [pc, #560]	; (8001628 <__aeabi_dsub+0x6d4>)
 80013f6:	42a2      	cmp	r2, r4
 80013f8:	d100      	bne.n	80013fc <__aeabi_dsub+0x4a8>
 80013fa:	e119      	b.n	8001630 <__aeabi_dsub+0x6dc>
 80013fc:	0032      	movs	r2, r6
 80013fe:	e6c1      	b.n	8001184 <__aeabi_dsub+0x230>
 8001400:	4642      	mov	r2, r8
 8001402:	2400      	movs	r4, #0
 8001404:	2300      	movs	r3, #0
 8001406:	e648      	b.n	800109a <__aeabi_dsub+0x146>
 8001408:	2020      	movs	r0, #32
 800140a:	000c      	movs	r4, r1
 800140c:	1a80      	subs	r0, r0, r2
 800140e:	003e      	movs	r6, r7
 8001410:	4087      	lsls	r7, r0
 8001412:	4084      	lsls	r4, r0
 8001414:	40d6      	lsrs	r6, r2
 8001416:	1e78      	subs	r0, r7, #1
 8001418:	4187      	sbcs	r7, r0
 800141a:	40d1      	lsrs	r1, r2
 800141c:	4334      	orrs	r4, r6
 800141e:	433c      	orrs	r4, r7
 8001420:	448c      	add	ip, r1
 8001422:	e7a4      	b.n	800136e <__aeabi_dsub+0x41a>
 8001424:	4a80      	ldr	r2, [pc, #512]	; (8001628 <__aeabi_dsub+0x6d4>)
 8001426:	4290      	cmp	r0, r2
 8001428:	d100      	bne.n	800142c <__aeabi_dsub+0x4d8>
 800142a:	e0e9      	b.n	8001600 <__aeabi_dsub+0x6ac>
 800142c:	19df      	adds	r7, r3, r7
 800142e:	429f      	cmp	r7, r3
 8001430:	419b      	sbcs	r3, r3
 8001432:	4461      	add	r1, ip
 8001434:	425b      	negs	r3, r3
 8001436:	18c9      	adds	r1, r1, r3
 8001438:	07cc      	lsls	r4, r1, #31
 800143a:	087f      	lsrs	r7, r7, #1
 800143c:	084b      	lsrs	r3, r1, #1
 800143e:	4699      	mov	r9, r3
 8001440:	4680      	mov	r8, r0
 8001442:	433c      	orrs	r4, r7
 8001444:	e6f4      	b.n	8001230 <__aeabi_dsub+0x2dc>
 8001446:	1afc      	subs	r4, r7, r3
 8001448:	42a7      	cmp	r7, r4
 800144a:	41bf      	sbcs	r7, r7
 800144c:	4663      	mov	r3, ip
 800144e:	427f      	negs	r7, r7
 8001450:	1ac9      	subs	r1, r1, r3
 8001452:	1bcb      	subs	r3, r1, r7
 8001454:	4699      	mov	r9, r3
 8001456:	465d      	mov	r5, fp
 8001458:	e5d5      	b.n	8001006 <__aeabi_dsub+0xb2>
 800145a:	08ff      	lsrs	r7, r7, #3
 800145c:	074b      	lsls	r3, r1, #29
 800145e:	465d      	mov	r5, fp
 8001460:	433b      	orrs	r3, r7
 8001462:	08cc      	lsrs	r4, r1, #3
 8001464:	e6ee      	b.n	8001244 <__aeabi_dsub+0x2f0>
 8001466:	4662      	mov	r2, ip
 8001468:	431a      	orrs	r2, r3
 800146a:	d000      	beq.n	800146e <__aeabi_dsub+0x51a>
 800146c:	e082      	b.n	8001574 <__aeabi_dsub+0x620>
 800146e:	000b      	movs	r3, r1
 8001470:	433b      	orrs	r3, r7
 8001472:	d11b      	bne.n	80014ac <__aeabi_dsub+0x558>
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	2500      	movs	r5, #0
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	e6f9      	b.n	8001270 <__aeabi_dsub+0x31c>
 800147c:	19dc      	adds	r4, r3, r7
 800147e:	429c      	cmp	r4, r3
 8001480:	419b      	sbcs	r3, r3
 8001482:	4461      	add	r1, ip
 8001484:	4689      	mov	r9, r1
 8001486:	425b      	negs	r3, r3
 8001488:	4499      	add	r9, r3
 800148a:	464b      	mov	r3, r9
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	d444      	bmi.n	800151a <__aeabi_dsub+0x5c6>
 8001490:	2301      	movs	r3, #1
 8001492:	4698      	mov	r8, r3
 8001494:	e6cc      	b.n	8001230 <__aeabi_dsub+0x2dc>
 8001496:	1bdc      	subs	r4, r3, r7
 8001498:	4662      	mov	r2, ip
 800149a:	42a3      	cmp	r3, r4
 800149c:	419b      	sbcs	r3, r3
 800149e:	1a51      	subs	r1, r2, r1
 80014a0:	425b      	negs	r3, r3
 80014a2:	1acb      	subs	r3, r1, r3
 80014a4:	4699      	mov	r9, r3
 80014a6:	2301      	movs	r3, #1
 80014a8:	4698      	mov	r8, r3
 80014aa:	e5a4      	b.n	8000ff6 <__aeabi_dsub+0xa2>
 80014ac:	08ff      	lsrs	r7, r7, #3
 80014ae:	074b      	lsls	r3, r1, #29
 80014b0:	465d      	mov	r5, fp
 80014b2:	433b      	orrs	r3, r7
 80014b4:	08cc      	lsrs	r4, r1, #3
 80014b6:	e6d7      	b.n	8001268 <__aeabi_dsub+0x314>
 80014b8:	4662      	mov	r2, ip
 80014ba:	431a      	orrs	r2, r3
 80014bc:	0014      	movs	r4, r2
 80014be:	1e63      	subs	r3, r4, #1
 80014c0:	419c      	sbcs	r4, r3
 80014c2:	e679      	b.n	80011b8 <__aeabi_dsub+0x264>
 80014c4:	0015      	movs	r5, r2
 80014c6:	4664      	mov	r4, ip
 80014c8:	3d20      	subs	r5, #32
 80014ca:	40ec      	lsrs	r4, r5
 80014cc:	46a0      	mov	r8, r4
 80014ce:	2a20      	cmp	r2, #32
 80014d0:	d005      	beq.n	80014de <__aeabi_dsub+0x58a>
 80014d2:	2540      	movs	r5, #64	; 0x40
 80014d4:	4664      	mov	r4, ip
 80014d6:	1aaa      	subs	r2, r5, r2
 80014d8:	4094      	lsls	r4, r2
 80014da:	4323      	orrs	r3, r4
 80014dc:	469a      	mov	sl, r3
 80014de:	4654      	mov	r4, sl
 80014e0:	1e63      	subs	r3, r4, #1
 80014e2:	419c      	sbcs	r4, r3
 80014e4:	4643      	mov	r3, r8
 80014e6:	4323      	orrs	r3, r4
 80014e8:	e773      	b.n	80013d2 <__aeabi_dsub+0x47e>
 80014ea:	4662      	mov	r2, ip
 80014ec:	431a      	orrs	r2, r3
 80014ee:	d023      	beq.n	8001538 <__aeabi_dsub+0x5e4>
 80014f0:	000a      	movs	r2, r1
 80014f2:	433a      	orrs	r2, r7
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dsub+0x5a4>
 80014f6:	e0a0      	b.n	800163a <__aeabi_dsub+0x6e6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	0752      	lsls	r2, r2, #29
 80014fe:	4313      	orrs	r3, r2
 8001500:	4662      	mov	r2, ip
 8001502:	08d4      	lsrs	r4, r2, #3
 8001504:	e6b0      	b.n	8001268 <__aeabi_dsub+0x314>
 8001506:	000b      	movs	r3, r1
 8001508:	433b      	orrs	r3, r7
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x5ba>
 800150c:	e728      	b.n	8001360 <__aeabi_dsub+0x40c>
 800150e:	08ff      	lsrs	r7, r7, #3
 8001510:	074b      	lsls	r3, r1, #29
 8001512:	465d      	mov	r5, fp
 8001514:	433b      	orrs	r3, r7
 8001516:	08cc      	lsrs	r4, r1, #3
 8001518:	e697      	b.n	800124a <__aeabi_dsub+0x2f6>
 800151a:	2302      	movs	r3, #2
 800151c:	4698      	mov	r8, r3
 800151e:	e736      	b.n	800138e <__aeabi_dsub+0x43a>
 8001520:	1afc      	subs	r4, r7, r3
 8001522:	42a7      	cmp	r7, r4
 8001524:	41bf      	sbcs	r7, r7
 8001526:	4663      	mov	r3, ip
 8001528:	427f      	negs	r7, r7
 800152a:	1ac9      	subs	r1, r1, r3
 800152c:	1bcb      	subs	r3, r1, r7
 800152e:	4699      	mov	r9, r3
 8001530:	2301      	movs	r3, #1
 8001532:	465d      	mov	r5, fp
 8001534:	4698      	mov	r8, r3
 8001536:	e55e      	b.n	8000ff6 <__aeabi_dsub+0xa2>
 8001538:	074b      	lsls	r3, r1, #29
 800153a:	08ff      	lsrs	r7, r7, #3
 800153c:	433b      	orrs	r3, r7
 800153e:	08cc      	lsrs	r4, r1, #3
 8001540:	e692      	b.n	8001268 <__aeabi_dsub+0x314>
 8001542:	1bdc      	subs	r4, r3, r7
 8001544:	4660      	mov	r0, ip
 8001546:	42a3      	cmp	r3, r4
 8001548:	41b6      	sbcs	r6, r6
 800154a:	1a40      	subs	r0, r0, r1
 800154c:	4276      	negs	r6, r6
 800154e:	1b80      	subs	r0, r0, r6
 8001550:	4681      	mov	r9, r0
 8001552:	0200      	lsls	r0, r0, #8
 8001554:	d560      	bpl.n	8001618 <__aeabi_dsub+0x6c4>
 8001556:	1afc      	subs	r4, r7, r3
 8001558:	42a7      	cmp	r7, r4
 800155a:	41bf      	sbcs	r7, r7
 800155c:	4663      	mov	r3, ip
 800155e:	427f      	negs	r7, r7
 8001560:	1ac9      	subs	r1, r1, r3
 8001562:	1bcb      	subs	r3, r1, r7
 8001564:	4699      	mov	r9, r3
 8001566:	465d      	mov	r5, fp
 8001568:	e576      	b.n	8001058 <__aeabi_dsub+0x104>
 800156a:	08ff      	lsrs	r7, r7, #3
 800156c:	074b      	lsls	r3, r1, #29
 800156e:	433b      	orrs	r3, r7
 8001570:	08cc      	lsrs	r4, r1, #3
 8001572:	e667      	b.n	8001244 <__aeabi_dsub+0x2f0>
 8001574:	000a      	movs	r2, r1
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	433a      	orrs	r2, r7
 800157a:	d100      	bne.n	800157e <__aeabi_dsub+0x62a>
 800157c:	e66f      	b.n	800125e <__aeabi_dsub+0x30a>
 800157e:	4662      	mov	r2, ip
 8001580:	0752      	lsls	r2, r2, #29
 8001582:	4313      	orrs	r3, r2
 8001584:	4662      	mov	r2, ip
 8001586:	08d4      	lsrs	r4, r2, #3
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0312      	lsls	r2, r2, #12
 800158c:	4214      	tst	r4, r2
 800158e:	d007      	beq.n	80015a0 <__aeabi_dsub+0x64c>
 8001590:	08c8      	lsrs	r0, r1, #3
 8001592:	4210      	tst	r0, r2
 8001594:	d104      	bne.n	80015a0 <__aeabi_dsub+0x64c>
 8001596:	465d      	mov	r5, fp
 8001598:	0004      	movs	r4, r0
 800159a:	08fb      	lsrs	r3, r7, #3
 800159c:	0749      	lsls	r1, r1, #29
 800159e:	430b      	orrs	r3, r1
 80015a0:	0f5a      	lsrs	r2, r3, #29
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	0752      	lsls	r2, r2, #29
 80015a8:	4313      	orrs	r3, r2
 80015aa:	e65d      	b.n	8001268 <__aeabi_dsub+0x314>
 80015ac:	074b      	lsls	r3, r1, #29
 80015ae:	08ff      	lsrs	r7, r7, #3
 80015b0:	433b      	orrs	r3, r7
 80015b2:	08cc      	lsrs	r4, r1, #3
 80015b4:	e649      	b.n	800124a <__aeabi_dsub+0x2f6>
 80015b6:	19dc      	adds	r4, r3, r7
 80015b8:	429c      	cmp	r4, r3
 80015ba:	419b      	sbcs	r3, r3
 80015bc:	4461      	add	r1, ip
 80015be:	4689      	mov	r9, r1
 80015c0:	425b      	negs	r3, r3
 80015c2:	4499      	add	r9, r3
 80015c4:	464b      	mov	r3, r9
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	d400      	bmi.n	80015cc <__aeabi_dsub+0x678>
 80015ca:	e631      	b.n	8001230 <__aeabi_dsub+0x2dc>
 80015cc:	464a      	mov	r2, r9
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <__aeabi_dsub+0x6d8>)
 80015d0:	401a      	ands	r2, r3
 80015d2:	2301      	movs	r3, #1
 80015d4:	4691      	mov	r9, r2
 80015d6:	4698      	mov	r8, r3
 80015d8:	e62a      	b.n	8001230 <__aeabi_dsub+0x2dc>
 80015da:	0016      	movs	r6, r2
 80015dc:	4664      	mov	r4, ip
 80015de:	3e20      	subs	r6, #32
 80015e0:	40f4      	lsrs	r4, r6
 80015e2:	46a0      	mov	r8, r4
 80015e4:	2a20      	cmp	r2, #32
 80015e6:	d005      	beq.n	80015f4 <__aeabi_dsub+0x6a0>
 80015e8:	2640      	movs	r6, #64	; 0x40
 80015ea:	4664      	mov	r4, ip
 80015ec:	1ab2      	subs	r2, r6, r2
 80015ee:	4094      	lsls	r4, r2
 80015f0:	4323      	orrs	r3, r4
 80015f2:	469a      	mov	sl, r3
 80015f4:	4654      	mov	r4, sl
 80015f6:	1e63      	subs	r3, r4, #1
 80015f8:	419c      	sbcs	r4, r3
 80015fa:	4643      	mov	r3, r8
 80015fc:	431c      	orrs	r4, r3
 80015fe:	e5db      	b.n	80011b8 <__aeabi_dsub+0x264>
 8001600:	0002      	movs	r2, r0
 8001602:	2400      	movs	r4, #0
 8001604:	2300      	movs	r3, #0
 8001606:	e548      	b.n	800109a <__aeabi_dsub+0x146>
 8001608:	19dc      	adds	r4, r3, r7
 800160a:	42bc      	cmp	r4, r7
 800160c:	41bf      	sbcs	r7, r7
 800160e:	4461      	add	r1, ip
 8001610:	4689      	mov	r9, r1
 8001612:	427f      	negs	r7, r7
 8001614:	44b9      	add	r9, r7
 8001616:	e738      	b.n	800148a <__aeabi_dsub+0x536>
 8001618:	464b      	mov	r3, r9
 800161a:	4323      	orrs	r3, r4
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x6cc>
 800161e:	e69f      	b.n	8001360 <__aeabi_dsub+0x40c>
 8001620:	e606      	b.n	8001230 <__aeabi_dsub+0x2dc>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	000007fe 	.word	0x000007fe
 8001628:	000007ff 	.word	0x000007ff
 800162c:	ff7fffff 	.word	0xff7fffff
 8001630:	08ff      	lsrs	r7, r7, #3
 8001632:	074b      	lsls	r3, r1, #29
 8001634:	433b      	orrs	r3, r7
 8001636:	08cc      	lsrs	r4, r1, #3
 8001638:	e616      	b.n	8001268 <__aeabi_dsub+0x314>
 800163a:	4662      	mov	r2, ip
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	0752      	lsls	r2, r2, #29
 8001640:	4313      	orrs	r3, r2
 8001642:	4662      	mov	r2, ip
 8001644:	08d4      	lsrs	r4, r2, #3
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0312      	lsls	r2, r2, #12
 800164a:	4214      	tst	r4, r2
 800164c:	d007      	beq.n	800165e <__aeabi_dsub+0x70a>
 800164e:	08c8      	lsrs	r0, r1, #3
 8001650:	4210      	tst	r0, r2
 8001652:	d104      	bne.n	800165e <__aeabi_dsub+0x70a>
 8001654:	465d      	mov	r5, fp
 8001656:	0004      	movs	r4, r0
 8001658:	08fb      	lsrs	r3, r7, #3
 800165a:	0749      	lsls	r1, r1, #29
 800165c:	430b      	orrs	r3, r1
 800165e:	0f5a      	lsrs	r2, r3, #29
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	0752      	lsls	r2, r2, #29
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4313      	orrs	r3, r2
 8001668:	e5fe      	b.n	8001268 <__aeabi_dsub+0x314>
 800166a:	2300      	movs	r3, #0
 800166c:	4a01      	ldr	r2, [pc, #4]	; (8001674 <__aeabi_dsub+0x720>)
 800166e:	001c      	movs	r4, r3
 8001670:	e513      	b.n	800109a <__aeabi_dsub+0x146>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	000007ff 	.word	0x000007ff

08001678 <__aeabi_d2iz>:
 8001678:	000a      	movs	r2, r1
 800167a:	b530      	push	{r4, r5, lr}
 800167c:	4c13      	ldr	r4, [pc, #76]	; (80016cc <__aeabi_d2iz+0x54>)
 800167e:	0053      	lsls	r3, r2, #1
 8001680:	0309      	lsls	r1, r1, #12
 8001682:	0005      	movs	r5, r0
 8001684:	0b09      	lsrs	r1, r1, #12
 8001686:	2000      	movs	r0, #0
 8001688:	0d5b      	lsrs	r3, r3, #21
 800168a:	0fd2      	lsrs	r2, r2, #31
 800168c:	42a3      	cmp	r3, r4
 800168e:	dd04      	ble.n	800169a <__aeabi_d2iz+0x22>
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <__aeabi_d2iz+0x58>)
 8001692:	4283      	cmp	r3, r0
 8001694:	dd02      	ble.n	800169c <__aeabi_d2iz+0x24>
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <__aeabi_d2iz+0x5c>)
 8001698:	18d0      	adds	r0, r2, r3
 800169a:	bd30      	pop	{r4, r5, pc}
 800169c:	2080      	movs	r0, #128	; 0x80
 800169e:	0340      	lsls	r0, r0, #13
 80016a0:	4301      	orrs	r1, r0
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <__aeabi_d2iz+0x60>)
 80016a4:	1ac0      	subs	r0, r0, r3
 80016a6:	281f      	cmp	r0, #31
 80016a8:	dd08      	ble.n	80016bc <__aeabi_d2iz+0x44>
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <__aeabi_d2iz+0x64>)
 80016ac:	1ac3      	subs	r3, r0, r3
 80016ae:	40d9      	lsrs	r1, r3
 80016b0:	000b      	movs	r3, r1
 80016b2:	4258      	negs	r0, r3
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	d1f0      	bne.n	800169a <__aeabi_d2iz+0x22>
 80016b8:	0018      	movs	r0, r3
 80016ba:	e7ee      	b.n	800169a <__aeabi_d2iz+0x22>
 80016bc:	4c08      	ldr	r4, [pc, #32]	; (80016e0 <__aeabi_d2iz+0x68>)
 80016be:	40c5      	lsrs	r5, r0
 80016c0:	46a4      	mov	ip, r4
 80016c2:	4463      	add	r3, ip
 80016c4:	4099      	lsls	r1, r3
 80016c6:	000b      	movs	r3, r1
 80016c8:	432b      	orrs	r3, r5
 80016ca:	e7f2      	b.n	80016b2 <__aeabi_d2iz+0x3a>
 80016cc:	000003fe 	.word	0x000003fe
 80016d0:	0000041d 	.word	0x0000041d
 80016d4:	7fffffff 	.word	0x7fffffff
 80016d8:	00000433 	.word	0x00000433
 80016dc:	00000413 	.word	0x00000413
 80016e0:	fffffbed 	.word	0xfffffbed

080016e4 <__aeabi_f2d>:
 80016e4:	b570      	push	{r4, r5, r6, lr}
 80016e6:	0043      	lsls	r3, r0, #1
 80016e8:	0246      	lsls	r6, r0, #9
 80016ea:	0fc4      	lsrs	r4, r0, #31
 80016ec:	20fe      	movs	r0, #254	; 0xfe
 80016ee:	0e1b      	lsrs	r3, r3, #24
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	0a75      	lsrs	r5, r6, #9
 80016f4:	4208      	tst	r0, r1
 80016f6:	d00c      	beq.n	8001712 <__aeabi_f2d+0x2e>
 80016f8:	22e0      	movs	r2, #224	; 0xe0
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4694      	mov	ip, r2
 80016fe:	076d      	lsls	r5, r5, #29
 8001700:	0b36      	lsrs	r6, r6, #12
 8001702:	4463      	add	r3, ip
 8001704:	051b      	lsls	r3, r3, #20
 8001706:	4333      	orrs	r3, r6
 8001708:	07e4      	lsls	r4, r4, #31
 800170a:	4323      	orrs	r3, r4
 800170c:	0028      	movs	r0, r5
 800170e:	0019      	movs	r1, r3
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	2b00      	cmp	r3, #0
 8001714:	d114      	bne.n	8001740 <__aeabi_f2d+0x5c>
 8001716:	2d00      	cmp	r5, #0
 8001718:	d01b      	beq.n	8001752 <__aeabi_f2d+0x6e>
 800171a:	0028      	movs	r0, r5
 800171c:	f000 f868 	bl	80017f0 <__clzsi2>
 8001720:	280a      	cmp	r0, #10
 8001722:	dc1c      	bgt.n	800175e <__aeabi_f2d+0x7a>
 8001724:	230b      	movs	r3, #11
 8001726:	002e      	movs	r6, r5
 8001728:	1a1b      	subs	r3, r3, r0
 800172a:	40de      	lsrs	r6, r3
 800172c:	0003      	movs	r3, r0
 800172e:	3315      	adds	r3, #21
 8001730:	409d      	lsls	r5, r3
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <__aeabi_f2d+0x88>)
 8001734:	0336      	lsls	r6, r6, #12
 8001736:	1a12      	subs	r2, r2, r0
 8001738:	0552      	lsls	r2, r2, #21
 800173a:	0b36      	lsrs	r6, r6, #12
 800173c:	0d53      	lsrs	r3, r2, #21
 800173e:	e7e1      	b.n	8001704 <__aeabi_f2d+0x20>
 8001740:	2d00      	cmp	r5, #0
 8001742:	d009      	beq.n	8001758 <__aeabi_f2d+0x74>
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	0b36      	lsrs	r6, r6, #12
 8001748:	0312      	lsls	r2, r2, #12
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <__aeabi_f2d+0x8c>)
 800174c:	076d      	lsls	r5, r5, #29
 800174e:	4316      	orrs	r6, r2
 8001750:	e7d8      	b.n	8001704 <__aeabi_f2d+0x20>
 8001752:	2300      	movs	r3, #0
 8001754:	2600      	movs	r6, #0
 8001756:	e7d5      	b.n	8001704 <__aeabi_f2d+0x20>
 8001758:	2600      	movs	r6, #0
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <__aeabi_f2d+0x8c>)
 800175c:	e7d2      	b.n	8001704 <__aeabi_f2d+0x20>
 800175e:	0003      	movs	r3, r0
 8001760:	3b0b      	subs	r3, #11
 8001762:	409d      	lsls	r5, r3
 8001764:	002e      	movs	r6, r5
 8001766:	2500      	movs	r5, #0
 8001768:	e7e3      	b.n	8001732 <__aeabi_f2d+0x4e>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	00000389 	.word	0x00000389
 8001770:	000007ff 	.word	0x000007ff

08001774 <__aeabi_cdrcmple>:
 8001774:	4684      	mov	ip, r0
 8001776:	0010      	movs	r0, r2
 8001778:	4662      	mov	r2, ip
 800177a:	468c      	mov	ip, r1
 800177c:	0019      	movs	r1, r3
 800177e:	4663      	mov	r3, ip
 8001780:	e000      	b.n	8001784 <__aeabi_cdcmpeq>
 8001782:	46c0      	nop			; (mov r8, r8)

08001784 <__aeabi_cdcmpeq>:
 8001784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001786:	f000 f905 	bl	8001994 <__ledf2>
 800178a:	2800      	cmp	r0, #0
 800178c:	d401      	bmi.n	8001792 <__aeabi_cdcmpeq+0xe>
 800178e:	2100      	movs	r1, #0
 8001790:	42c8      	cmn	r0, r1
 8001792:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001794 <__aeabi_dcmpeq>:
 8001794:	b510      	push	{r4, lr}
 8001796:	f000 f855 	bl	8001844 <__eqdf2>
 800179a:	4240      	negs	r0, r0
 800179c:	3001      	adds	r0, #1
 800179e:	bd10      	pop	{r4, pc}

080017a0 <__aeabi_dcmplt>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	f000 f8f7 	bl	8001994 <__ledf2>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	db01      	blt.n	80017ae <__aeabi_dcmplt+0xe>
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	2001      	movs	r0, #1
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)

080017b4 <__aeabi_dcmple>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	f000 f8ed 	bl	8001994 <__ledf2>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	dd01      	ble.n	80017c2 <__aeabi_dcmple+0xe>
 80017be:	2000      	movs	r0, #0
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	2001      	movs	r0, #1
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)

080017c8 <__aeabi_dcmpgt>:
 80017c8:	b510      	push	{r4, lr}
 80017ca:	f000 f87d 	bl	80018c8 <__gedf2>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	dc01      	bgt.n	80017d6 <__aeabi_dcmpgt+0xe>
 80017d2:	2000      	movs	r0, #0
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	2001      	movs	r0, #1
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	46c0      	nop			; (mov r8, r8)

080017dc <__aeabi_dcmpge>:
 80017dc:	b510      	push	{r4, lr}
 80017de:	f000 f873 	bl	80018c8 <__gedf2>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	da01      	bge.n	80017ea <__aeabi_dcmpge+0xe>
 80017e6:	2000      	movs	r0, #0
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	2001      	movs	r0, #1
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)

080017f0 <__clzsi2>:
 80017f0:	211c      	movs	r1, #28
 80017f2:	2301      	movs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	4298      	cmp	r0, r3
 80017f8:	d301      	bcc.n	80017fe <__clzsi2+0xe>
 80017fa:	0c00      	lsrs	r0, r0, #16
 80017fc:	3910      	subs	r1, #16
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	4298      	cmp	r0, r3
 8001802:	d301      	bcc.n	8001808 <__clzsi2+0x18>
 8001804:	0a00      	lsrs	r0, r0, #8
 8001806:	3908      	subs	r1, #8
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	4298      	cmp	r0, r3
 800180c:	d301      	bcc.n	8001812 <__clzsi2+0x22>
 800180e:	0900      	lsrs	r0, r0, #4
 8001810:	3904      	subs	r1, #4
 8001812:	a202      	add	r2, pc, #8	; (adr r2, 800181c <__clzsi2+0x2c>)
 8001814:	5c10      	ldrb	r0, [r2, r0]
 8001816:	1840      	adds	r0, r0, r1
 8001818:	4770      	bx	lr
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	02020304 	.word	0x02020304
 8001820:	01010101 	.word	0x01010101
	...

0800182c <__clzdi2>:
 800182c:	b510      	push	{r4, lr}
 800182e:	2900      	cmp	r1, #0
 8001830:	d103      	bne.n	800183a <__clzdi2+0xe>
 8001832:	f7ff ffdd 	bl	80017f0 <__clzsi2>
 8001836:	3020      	adds	r0, #32
 8001838:	e002      	b.n	8001840 <__clzdi2+0x14>
 800183a:	0008      	movs	r0, r1
 800183c:	f7ff ffd8 	bl	80017f0 <__clzsi2>
 8001840:	bd10      	pop	{r4, pc}
 8001842:	46c0      	nop			; (mov r8, r8)

08001844 <__eqdf2>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	464e      	mov	r6, r9
 8001848:	4645      	mov	r5, r8
 800184a:	46de      	mov	lr, fp
 800184c:	4657      	mov	r7, sl
 800184e:	4690      	mov	r8, r2
 8001850:	b5e0      	push	{r5, r6, r7, lr}
 8001852:	0017      	movs	r7, r2
 8001854:	031a      	lsls	r2, r3, #12
 8001856:	0b12      	lsrs	r2, r2, #12
 8001858:	0005      	movs	r5, r0
 800185a:	4684      	mov	ip, r0
 800185c:	4819      	ldr	r0, [pc, #100]	; (80018c4 <__eqdf2+0x80>)
 800185e:	030e      	lsls	r6, r1, #12
 8001860:	004c      	lsls	r4, r1, #1
 8001862:	4691      	mov	r9, r2
 8001864:	005a      	lsls	r2, r3, #1
 8001866:	0fdb      	lsrs	r3, r3, #31
 8001868:	469b      	mov	fp, r3
 800186a:	0b36      	lsrs	r6, r6, #12
 800186c:	0d64      	lsrs	r4, r4, #21
 800186e:	0fc9      	lsrs	r1, r1, #31
 8001870:	0d52      	lsrs	r2, r2, #21
 8001872:	4284      	cmp	r4, r0
 8001874:	d019      	beq.n	80018aa <__eqdf2+0x66>
 8001876:	4282      	cmp	r2, r0
 8001878:	d010      	beq.n	800189c <__eqdf2+0x58>
 800187a:	2001      	movs	r0, #1
 800187c:	4294      	cmp	r4, r2
 800187e:	d10e      	bne.n	800189e <__eqdf2+0x5a>
 8001880:	454e      	cmp	r6, r9
 8001882:	d10c      	bne.n	800189e <__eqdf2+0x5a>
 8001884:	2001      	movs	r0, #1
 8001886:	45c4      	cmp	ip, r8
 8001888:	d109      	bne.n	800189e <__eqdf2+0x5a>
 800188a:	4559      	cmp	r1, fp
 800188c:	d017      	beq.n	80018be <__eqdf2+0x7a>
 800188e:	2c00      	cmp	r4, #0
 8001890:	d105      	bne.n	800189e <__eqdf2+0x5a>
 8001892:	0030      	movs	r0, r6
 8001894:	4328      	orrs	r0, r5
 8001896:	1e43      	subs	r3, r0, #1
 8001898:	4198      	sbcs	r0, r3
 800189a:	e000      	b.n	800189e <__eqdf2+0x5a>
 800189c:	2001      	movs	r0, #1
 800189e:	bcf0      	pop	{r4, r5, r6, r7}
 80018a0:	46bb      	mov	fp, r7
 80018a2:	46b2      	mov	sl, r6
 80018a4:	46a9      	mov	r9, r5
 80018a6:	46a0      	mov	r8, r4
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	0033      	movs	r3, r6
 80018ac:	2001      	movs	r0, #1
 80018ae:	432b      	orrs	r3, r5
 80018b0:	d1f5      	bne.n	800189e <__eqdf2+0x5a>
 80018b2:	42a2      	cmp	r2, r4
 80018b4:	d1f3      	bne.n	800189e <__eqdf2+0x5a>
 80018b6:	464b      	mov	r3, r9
 80018b8:	433b      	orrs	r3, r7
 80018ba:	d1f0      	bne.n	800189e <__eqdf2+0x5a>
 80018bc:	e7e2      	b.n	8001884 <__eqdf2+0x40>
 80018be:	2000      	movs	r0, #0
 80018c0:	e7ed      	b.n	800189e <__eqdf2+0x5a>
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	000007ff 	.word	0x000007ff

080018c8 <__gedf2>:
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	4647      	mov	r7, r8
 80018cc:	46ce      	mov	lr, r9
 80018ce:	0004      	movs	r4, r0
 80018d0:	0018      	movs	r0, r3
 80018d2:	0016      	movs	r6, r2
 80018d4:	031b      	lsls	r3, r3, #12
 80018d6:	0b1b      	lsrs	r3, r3, #12
 80018d8:	4d2d      	ldr	r5, [pc, #180]	; (8001990 <__gedf2+0xc8>)
 80018da:	004a      	lsls	r2, r1, #1
 80018dc:	4699      	mov	r9, r3
 80018de:	b580      	push	{r7, lr}
 80018e0:	0043      	lsls	r3, r0, #1
 80018e2:	030f      	lsls	r7, r1, #12
 80018e4:	46a4      	mov	ip, r4
 80018e6:	46b0      	mov	r8, r6
 80018e8:	0b3f      	lsrs	r7, r7, #12
 80018ea:	0d52      	lsrs	r2, r2, #21
 80018ec:	0fc9      	lsrs	r1, r1, #31
 80018ee:	0d5b      	lsrs	r3, r3, #21
 80018f0:	0fc0      	lsrs	r0, r0, #31
 80018f2:	42aa      	cmp	r2, r5
 80018f4:	d021      	beq.n	800193a <__gedf2+0x72>
 80018f6:	42ab      	cmp	r3, r5
 80018f8:	d013      	beq.n	8001922 <__gedf2+0x5a>
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d122      	bne.n	8001944 <__gedf2+0x7c>
 80018fe:	433c      	orrs	r4, r7
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <__gedf2+0x42>
 8001904:	464d      	mov	r5, r9
 8001906:	432e      	orrs	r6, r5
 8001908:	d022      	beq.n	8001950 <__gedf2+0x88>
 800190a:	2c00      	cmp	r4, #0
 800190c:	d010      	beq.n	8001930 <__gedf2+0x68>
 800190e:	4281      	cmp	r1, r0
 8001910:	d022      	beq.n	8001958 <__gedf2+0x90>
 8001912:	2002      	movs	r0, #2
 8001914:	3901      	subs	r1, #1
 8001916:	4008      	ands	r0, r1
 8001918:	3801      	subs	r0, #1
 800191a:	bcc0      	pop	{r6, r7}
 800191c:	46b9      	mov	r9, r7
 800191e:	46b0      	mov	r8, r6
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001922:	464d      	mov	r5, r9
 8001924:	432e      	orrs	r6, r5
 8001926:	d129      	bne.n	800197c <__gedf2+0xb4>
 8001928:	2a00      	cmp	r2, #0
 800192a:	d1f0      	bne.n	800190e <__gedf2+0x46>
 800192c:	433c      	orrs	r4, r7
 800192e:	d1ee      	bne.n	800190e <__gedf2+0x46>
 8001930:	2800      	cmp	r0, #0
 8001932:	d1f2      	bne.n	800191a <__gedf2+0x52>
 8001934:	2001      	movs	r0, #1
 8001936:	4240      	negs	r0, r0
 8001938:	e7ef      	b.n	800191a <__gedf2+0x52>
 800193a:	003d      	movs	r5, r7
 800193c:	4325      	orrs	r5, r4
 800193e:	d11d      	bne.n	800197c <__gedf2+0xb4>
 8001940:	4293      	cmp	r3, r2
 8001942:	d0ee      	beq.n	8001922 <__gedf2+0x5a>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e2      	bne.n	800190e <__gedf2+0x46>
 8001948:	464c      	mov	r4, r9
 800194a:	4326      	orrs	r6, r4
 800194c:	d1df      	bne.n	800190e <__gedf2+0x46>
 800194e:	e7e0      	b.n	8001912 <__gedf2+0x4a>
 8001950:	2000      	movs	r0, #0
 8001952:	2c00      	cmp	r4, #0
 8001954:	d0e1      	beq.n	800191a <__gedf2+0x52>
 8001956:	e7dc      	b.n	8001912 <__gedf2+0x4a>
 8001958:	429a      	cmp	r2, r3
 800195a:	dc0a      	bgt.n	8001972 <__gedf2+0xaa>
 800195c:	dbe8      	blt.n	8001930 <__gedf2+0x68>
 800195e:	454f      	cmp	r7, r9
 8001960:	d8d7      	bhi.n	8001912 <__gedf2+0x4a>
 8001962:	d00e      	beq.n	8001982 <__gedf2+0xba>
 8001964:	2000      	movs	r0, #0
 8001966:	454f      	cmp	r7, r9
 8001968:	d2d7      	bcs.n	800191a <__gedf2+0x52>
 800196a:	2900      	cmp	r1, #0
 800196c:	d0e2      	beq.n	8001934 <__gedf2+0x6c>
 800196e:	0008      	movs	r0, r1
 8001970:	e7d3      	b.n	800191a <__gedf2+0x52>
 8001972:	4243      	negs	r3, r0
 8001974:	4158      	adcs	r0, r3
 8001976:	0040      	lsls	r0, r0, #1
 8001978:	3801      	subs	r0, #1
 800197a:	e7ce      	b.n	800191a <__gedf2+0x52>
 800197c:	2002      	movs	r0, #2
 800197e:	4240      	negs	r0, r0
 8001980:	e7cb      	b.n	800191a <__gedf2+0x52>
 8001982:	45c4      	cmp	ip, r8
 8001984:	d8c5      	bhi.n	8001912 <__gedf2+0x4a>
 8001986:	2000      	movs	r0, #0
 8001988:	45c4      	cmp	ip, r8
 800198a:	d2c6      	bcs.n	800191a <__gedf2+0x52>
 800198c:	e7ed      	b.n	800196a <__gedf2+0xa2>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	000007ff 	.word	0x000007ff

08001994 <__ledf2>:
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	4647      	mov	r7, r8
 8001998:	46ce      	mov	lr, r9
 800199a:	0004      	movs	r4, r0
 800199c:	0018      	movs	r0, r3
 800199e:	0016      	movs	r6, r2
 80019a0:	031b      	lsls	r3, r3, #12
 80019a2:	0b1b      	lsrs	r3, r3, #12
 80019a4:	4d2c      	ldr	r5, [pc, #176]	; (8001a58 <__ledf2+0xc4>)
 80019a6:	004a      	lsls	r2, r1, #1
 80019a8:	4699      	mov	r9, r3
 80019aa:	b580      	push	{r7, lr}
 80019ac:	0043      	lsls	r3, r0, #1
 80019ae:	030f      	lsls	r7, r1, #12
 80019b0:	46a4      	mov	ip, r4
 80019b2:	46b0      	mov	r8, r6
 80019b4:	0b3f      	lsrs	r7, r7, #12
 80019b6:	0d52      	lsrs	r2, r2, #21
 80019b8:	0fc9      	lsrs	r1, r1, #31
 80019ba:	0d5b      	lsrs	r3, r3, #21
 80019bc:	0fc0      	lsrs	r0, r0, #31
 80019be:	42aa      	cmp	r2, r5
 80019c0:	d00d      	beq.n	80019de <__ledf2+0x4a>
 80019c2:	42ab      	cmp	r3, r5
 80019c4:	d010      	beq.n	80019e8 <__ledf2+0x54>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d127      	bne.n	8001a1a <__ledf2+0x86>
 80019ca:	433c      	orrs	r4, r7
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d111      	bne.n	80019f4 <__ledf2+0x60>
 80019d0:	464d      	mov	r5, r9
 80019d2:	432e      	orrs	r6, r5
 80019d4:	d10e      	bne.n	80019f4 <__ledf2+0x60>
 80019d6:	2000      	movs	r0, #0
 80019d8:	2c00      	cmp	r4, #0
 80019da:	d015      	beq.n	8001a08 <__ledf2+0x74>
 80019dc:	e00e      	b.n	80019fc <__ledf2+0x68>
 80019de:	003d      	movs	r5, r7
 80019e0:	4325      	orrs	r5, r4
 80019e2:	d110      	bne.n	8001a06 <__ledf2+0x72>
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d118      	bne.n	8001a1a <__ledf2+0x86>
 80019e8:	464d      	mov	r5, r9
 80019ea:	432e      	orrs	r6, r5
 80019ec:	d10b      	bne.n	8001a06 <__ledf2+0x72>
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d102      	bne.n	80019f8 <__ledf2+0x64>
 80019f2:	433c      	orrs	r4, r7
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	d00b      	beq.n	8001a10 <__ledf2+0x7c>
 80019f8:	4281      	cmp	r1, r0
 80019fa:	d014      	beq.n	8001a26 <__ledf2+0x92>
 80019fc:	2002      	movs	r0, #2
 80019fe:	3901      	subs	r1, #1
 8001a00:	4008      	ands	r0, r1
 8001a02:	3801      	subs	r0, #1
 8001a04:	e000      	b.n	8001a08 <__ledf2+0x74>
 8001a06:	2002      	movs	r0, #2
 8001a08:	bcc0      	pop	{r6, r7}
 8001a0a:	46b9      	mov	r9, r7
 8001a0c:	46b0      	mov	r8, r6
 8001a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d1f9      	bne.n	8001a08 <__ledf2+0x74>
 8001a14:	2001      	movs	r0, #1
 8001a16:	4240      	negs	r0, r0
 8001a18:	e7f6      	b.n	8001a08 <__ledf2+0x74>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ec      	bne.n	80019f8 <__ledf2+0x64>
 8001a1e:	464c      	mov	r4, r9
 8001a20:	4326      	orrs	r6, r4
 8001a22:	d1e9      	bne.n	80019f8 <__ledf2+0x64>
 8001a24:	e7ea      	b.n	80019fc <__ledf2+0x68>
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dd04      	ble.n	8001a34 <__ledf2+0xa0>
 8001a2a:	4243      	negs	r3, r0
 8001a2c:	4158      	adcs	r0, r3
 8001a2e:	0040      	lsls	r0, r0, #1
 8001a30:	3801      	subs	r0, #1
 8001a32:	e7e9      	b.n	8001a08 <__ledf2+0x74>
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbeb      	blt.n	8001a10 <__ledf2+0x7c>
 8001a38:	454f      	cmp	r7, r9
 8001a3a:	d8df      	bhi.n	80019fc <__ledf2+0x68>
 8001a3c:	d006      	beq.n	8001a4c <__ledf2+0xb8>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	454f      	cmp	r7, r9
 8001a42:	d2e1      	bcs.n	8001a08 <__ledf2+0x74>
 8001a44:	2900      	cmp	r1, #0
 8001a46:	d0e5      	beq.n	8001a14 <__ledf2+0x80>
 8001a48:	0008      	movs	r0, r1
 8001a4a:	e7dd      	b.n	8001a08 <__ledf2+0x74>
 8001a4c:	45c4      	cmp	ip, r8
 8001a4e:	d8d5      	bhi.n	80019fc <__ledf2+0x68>
 8001a50:	2000      	movs	r0, #0
 8001a52:	45c4      	cmp	ip, r8
 8001a54:	d2d8      	bcs.n	8001a08 <__ledf2+0x74>
 8001a56:	e7f5      	b.n	8001a44 <__ledf2+0xb0>
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <vApplicationGetIdleTaskMemory+0x28>)
 8001a6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b004      	add	sp, #16
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000290 	.word	0x20000290
 8001a88:	200002e4 	.word	0x200002e4

08001a8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <MX_FREERTOS_Init+0x30>)
 8001a96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a98:	c313      	stmia	r3!, {r0, r1, r4}
 8001a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a9c:	c313      	stmia	r3!, {r0, r1, r4}
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f003 ffa1 	bl	80059ee <osThreadCreate>
 8001aac:	0002      	movs	r2, r0
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <MX_FREERTOS_Init+0x34>)
 8001ab0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b009      	add	sp, #36	; 0x24
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	08007770 	.word	0x08007770
 8001ac0:	20000038 	.word	0x20000038

08001ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f003 ffb4 	bl	8005a3a <osDelay>
 8001ad2:	e7fb      	b.n	8001acc <StartDefaultTask+0x8>

08001ad4 <MX_GPIO_Init>:
/** Configure pins
     PA9   ------> I2C1_SCL
     PA10   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b08b      	sub	sp, #44	; 0x2c
 8001ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	2414      	movs	r4, #20
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	0018      	movs	r0, r3
 8001ae0:	2314      	movs	r3, #20
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f005 fe28 	bl	800773a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	4b67      	ldr	r3, [pc, #412]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001af0:	2104      	movs	r1, #4
 8001af2:	430a      	orrs	r2, r1
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1e:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b36:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b38:	2102      	movs	r1, #2
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b3e:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <MX_GPIO_Init+0x1b8>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b4a:	23a0      	movs	r3, #160	; 0xa0
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 ff0e 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <MX_GPIO_Init+0x1bc>)
 8001b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	2203      	movs	r2, #3
 8001b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <MX_GPIO_Init+0x1c0>)
 8001b6e:	0019      	movs	r1, r3
 8001b70:	0010      	movs	r0, r2
 8001b72:	f000 fd91 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2203      	movs	r2, #3
 8001b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2203      	movs	r2, #3
 8001b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <MX_GPIO_Init+0x1c4>)
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	0010      	movs	r0, r2
 8001b90:	f000 fd82 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	4a41      	ldr	r2, [pc, #260]	; (8001c9c <MX_GPIO_Init+0x1c8>)
 8001b98:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	193a      	adds	r2, r7, r4
 8001ba8:	23a0      	movs	r3, #160	; 0xa0
 8001baa:	05db      	lsls	r3, r3, #23
 8001bac:	0011      	movs	r1, r2
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 fd72 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	193b      	adds	r3, r7, r4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	193a      	adds	r2, r7, r4
 8001bce:	23a0      	movs	r3, #160	; 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fd5f 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <MX_GPIO_Init+0x1cc>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f000 fd50 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bf8:	0021      	movs	r1, r4
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	22f0      	movs	r2, #240	; 0xf0
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	000c      	movs	r4, r1
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	2203      	movs	r2, #3
 8001c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <MX_GPIO_Init+0x1cc>)
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f000 fd3e 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1c:	0021      	movs	r1, r4
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	22c0      	movs	r2, #192	; 0xc0
 8001c22:	00d2      	lsls	r2, r2, #3
 8001c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c26:	000c      	movs	r4, r1
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2212      	movs	r2, #18
 8001c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	2203      	movs	r2, #3
 8001c38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	193a      	adds	r2, r7, r4
 8001c42:	23a0      	movs	r3, #160	; 0xa0
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fd25 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c4e:	0021      	movs	r1, r4
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	22c0      	movs	r2, #192	; 0xc0
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2288      	movs	r2, #136	; 0x88
 8001c5c:	0352      	lsls	r2, r2, #13
 8001c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <MX_GPIO_Init+0x1cc>)
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f000 fd13 	bl	8002698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2103      	movs	r1, #3
 8001c76:	2007      	movs	r0, #7
 8001c78:	f000 fc62 	bl	8002540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001c7c:	2007      	movs	r0, #7
 8001c7e:	f000 fc74 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b00b      	add	sp, #44	; 0x2c
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	0000e001 	.word	0x0000e001
 8001c94:	50000800 	.word	0x50000800
 8001c98:	50001c00 	.word	0x50001c00
 8001c9c:	00009903 	.word	0x00009903
 8001ca0:	50000400 	.word	0x50000400

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca8:	f000 fb86 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cac:	f000 f812 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb0:	f7ff ff10 	bl	8001ad4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001cb4:	f000 fa56 	bl	8002164 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001cb8:	f000 fa84 	bl	80021c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cbc:	f000 f912 	bl	8001ee4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001cc0:	f000 f894 	bl	8001dec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  init();
 8001cc4:	f005 f94c 	bl	8006f60 <init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001cc8:	f7ff fee0 	bl	8001a8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ccc:	f003 fe87 	bl	80059de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <main+0x2c>
	...

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b099      	sub	sp, #100	; 0x64
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	242c      	movs	r4, #44	; 0x2c
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	0018      	movs	r0, r3
 8001ce0:	2334      	movs	r3, #52	; 0x34
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f005 fd28 	bl	800773a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cea:	2318      	movs	r3, #24
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	2314      	movs	r3, #20
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f005 fd20 	bl	800773a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	2318      	movs	r3, #24
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f005 fd19 	bl	800773a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <SystemClock_Config+0xe4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <SystemClock_Config+0xe8>)
 8001d0e:	401a      	ands	r2, r3
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <SystemClock_Config+0xe4>)
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0109      	lsls	r1, r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001d1a:	0021      	movs	r1, r4
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2218      	movs	r2, #24
 8001d20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2201      	movs	r2, #1
 8001d26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2200      	movs	r2, #0
 8001d32:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	22a0      	movs	r2, #160	; 0xa0
 8001d38:	0212      	lsls	r2, r2, #8
 8001d3a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 fe4f 	bl	80029e8 <HAL_RCC_OscConfig>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d4e:	f000 f847 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d52:	2118      	movs	r1, #24
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	220f      	movs	r2, #15
 8001d58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2100      	movs	r1, #0
 8001d76:	0018      	movs	r0, r3
 8001d78:	f001 f9b2 	bl	80030e0 <HAL_RCC_ClockConfig>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001d80:	f000 f82e 	bl	8001de0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8001d84:	003b      	movs	r3, r7
 8001d86:	2226      	movs	r2, #38	; 0x26
 8001d88:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d8a:	003b      	movs	r3, r7
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d90:	003b      	movs	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d96:	003b      	movs	r3, r7
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0292      	lsls	r2, r2, #10
 8001d9c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	003b      	movs	r3, r7
 8001da0:	0018      	movs	r0, r3
 8001da2:	f001 fbf3 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001daa:	f000 f819 	bl	8001de0 <Error_Handler>
  }
}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b019      	add	sp, #100	; 0x64
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	ffffe7ff 	.word	0xffffe7ff

08001dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d101      	bne.n	8001dd8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001dd4:	f000 fb10 	bl	80023f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	0018      	movs	r0, r3
 8001df6:	2314      	movs	r3, #20
 8001df8:	001a      	movs	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f005 fc9d 	bl	800773a <memset>
  RTC_DateTypeDef sDate = {0};
 8001e00:	003b      	movs	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e08:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <MX_RTC_Init+0xc4>)
 8001e0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e14:	227f      	movs	r2, #127	; 0x7f
 8001e16:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f001 fcd3 	bl	80037e4 <HAL_RTC_Init>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f7ff ffcd 	bl	8001de0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e64:	1d39      	adds	r1, r7, #4
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f001 fd56 	bl	800391c <HAL_RTC_SetTime>
 8001e70:	1e03      	subs	r3, r0, #0
 8001e72:	d001      	beq.n	8001e78 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001e74:	f7ff ffb4 	bl	8001de0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e78:	003b      	movs	r3, r7
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e7e:	003b      	movs	r3, r7
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001e84:	003b      	movs	r3, r7
 8001e86:	2201      	movs	r2, #1
 8001e88:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001e8a:	003b      	movs	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e90:	0039      	movs	r1, r7
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_RTC_Init+0xc0>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 fdea 	bl	8003a70 <HAL_RTC_SetDate>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001ea0:	f7ff ff9e 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b006      	add	sp, #24
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200004e4 	.word	0x200004e4
 8001eb0:	40002800 	.word	0x40002800

08001eb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_RTC_MspInit+0x28>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RTC_MspInit+0x2c>)
 8001ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RTC_MspInit+0x2c>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	02c9      	lsls	r1, r1, #11
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40002800 	.word	0x40002800
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <MX_SPI1_Init+0x6c>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001ef0:	2282      	movs	r2, #130	; 0x82
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f001 fee5 	bl	8003d06 <HAL_SPI_Init>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f40:	f7ff ff4e 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000508 	.word	0x20000508
 8001f50:	40013000 	.word	0x40013000

08001f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	240c      	movs	r4, #12
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	0018      	movs	r0, r3
 8001f62:	2314      	movs	r3, #20
 8001f64:	001a      	movs	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f005 fbe7 	bl	800773a <memset>
  if(spiHandle->Instance==SPI1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_SPI_MspInit+0x90>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d131      	bne.n	8001fda <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_SPI_MspInit+0x94>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_SPI_MspInit+0x94>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0149      	lsls	r1, r1, #5
 8001f80:	430a      	orrs	r2, r1
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x94>)
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x94>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x94>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f9c:	0021      	movs	r1, r4
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	22e0      	movs	r2, #224	; 0xe0
 8001fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	187a      	adds	r2, r7, r1
 8001fbe:	23a0      	movs	r3, #160	; 0xa0
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 fb67 	bl	8002698 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2103      	movs	r1, #3
 8001fce:	2019      	movs	r0, #25
 8001fd0:	f000 fab6 	bl	8002540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fd4:	2019      	movs	r0, #25
 8001fd6:	f000 fac8 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b009      	add	sp, #36	; 0x24
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_MspInit+0x34>)
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_MspInit+0x34>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_MspInit+0x34>)
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_MspInit+0x34>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	0549      	lsls	r1, r1, #21
 8002006:	430a      	orrs	r2, r1
 8002008:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800200a:	2302      	movs	r3, #2
 800200c:	425b      	negs	r3, r3
 800200e:	2200      	movs	r2, #0
 8002010:	2103      	movs	r1, #3
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fa94 	bl	8002540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	0019      	movs	r1, r3
 800203a:	200f      	movs	r0, #15
 800203c:	f000 fa80 	bl	8002540 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002040:	200f      	movs	r0, #15
 8002042:	f000 fa92 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_InitTick+0x98>)
 8002048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_InitTick+0x98>)
 800204c:	2101      	movs	r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002052:	2308      	movs	r3, #8
 8002054:	18fa      	adds	r2, r7, r3
 8002056:	230c      	movs	r3, #12
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f001 fa63 	bl	8003528 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002062:	f001 fa35 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8002066:	0003      	movs	r3, r0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	4914      	ldr	r1, [pc, #80]	; (80020c0 <HAL_InitTick+0x9c>)
 800206e:	0018      	movs	r0, r3
 8002070:	f7fe f84a 	bl	8000108 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	3b01      	subs	r3, #1
 8002078:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0xa0>)
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	05d2      	lsls	r2, r2, #23
 8002080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_InitTick+0xa0>)
 8002084:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_InitTick+0xa4>)
 8002086:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_InitTick+0xa0>)
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_InitTick+0xa0>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_InitTick+0xa0>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_InitTick+0xa0>)
 800209c:	0018      	movs	r0, r3
 800209e:	f002 fa97 	bl	80045d0 <HAL_TIM_Base_Init>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_InitTick+0xa0>)
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 fad9 	bl	8004660 <HAL_TIM_Base_Start_IT>
 80020ae:	0003      	movs	r3, r0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x90>
  }

  /* Return function status */
  return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b00a      	add	sp, #40	; 0x28
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	000f4240 	.word	0x000f4240
 80020c4:	20000560 	.word	0x20000560
 80020c8:	000003e7 	.word	0x000003e7

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fc65 	bl	80029b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fc60 	bl	80029b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <TIM2_IRQHandler+0x14>)
 80020fe:	0018      	movs	r0, r3
 8002100:	f002 faf2 	bl	80046e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	20000560 	.word	0x20000560

08002110 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <SPI1_IRQHandler+0x14>)
 8002116:	0018      	movs	r0, r3
 8002118:	f001 ff26 	bl	8003f68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	20000508 	.word	0x20000508

08002128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <USART2_IRQHandler+0x14>)
 800212e:	0018      	movs	r0, r3
 8002130:	f002 fc80 	bl	8004a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	20000628 	.word	0x20000628

08002140 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <LPUART1_IRQHandler+0x14>)
 8002146:	0018      	movs	r0, r3
 8002148:	f002 fc74 	bl	8004a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	200005a0 	.word	0x200005a0

08002158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <MX_LPUART1_UART_Init+0x58>)
 800216c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <MX_LPUART1_UART_Init+0x5c>)
 8002172:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0552      	lsls	r2, r2, #21
 800217a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 800219c:	2200      	movs	r2, #0
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <MX_LPUART1_UART_Init+0x54>)
 80021a2:	0018      	movs	r0, r3
 80021a4:	f002 fbf2 	bl	800498c <HAL_UART_Init>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d001      	beq.n	80021b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80021ac:	f7ff fe18 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	200005a0 	.word	0x200005a0
 80021bc:	40004800 	.word	0x40004800
 80021c0:	00033324 	.word	0x00033324

080021c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <MX_USART2_UART_Init+0x5c>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021d0:	2296      	movs	r2, #150	; 0x96
 80021d2:	0192      	lsls	r2, r2, #6
 80021d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USART2_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USART2_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <MX_USART2_UART_Init+0x58>)
 8002208:	0018      	movs	r0, r3
 800220a:	f002 fbbf 	bl	800498c <HAL_UART_Init>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002212:	f7ff fde5 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000628 	.word	0x20000628
 8002220:	40004400 	.word	0x40004400

08002224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	2414      	movs	r4, #20
 800222e:	193b      	adds	r3, r7, r4
 8002230:	0018      	movs	r0, r3
 8002232:	2314      	movs	r3, #20
 8002234:	001a      	movs	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	f005 fa7f 	bl	800773a <memset>
  if(uartHandle->Instance==LPUART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a38      	ldr	r2, [pc, #224]	; (8002324 <HAL_UART_MspInit+0x100>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d132      	bne.n	80022ac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_UART_MspInit+0x104>)
 8002248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224a:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_UART_MspInit+0x104>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	02c9      	lsls	r1, r1, #11
 8002250:	430a      	orrs	r2, r1
 8002252:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_UART_MspInit+0x104>)
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_UART_MspInit+0x104>)
 800225a:	2102      	movs	r1, #2
 800225c:	430a      	orrs	r2, r1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_UART_MspInit+0x104>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226c:	193b      	adds	r3, r7, r4
 800226e:	22c0      	movs	r2, #192	; 0xc0
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	0021      	movs	r1, r4
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2202      	movs	r2, #2
 800227a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	187b      	adds	r3, r7, r1
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	187b      	adds	r3, r7, r1
 8002284:	2203      	movs	r2, #3
 8002286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002288:	187b      	adds	r3, r7, r1
 800228a:	2206      	movs	r2, #6
 800228c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	187b      	adds	r3, r7, r1
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_UART_MspInit+0x108>)
 8002292:	0019      	movs	r1, r3
 8002294:	0010      	movs	r0, r2
 8002296:	f000 f9ff 	bl	8002698 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2103      	movs	r1, #3
 800229e:	201d      	movs	r0, #29
 80022a0:	f000 f94e 	bl	8002540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80022a4:	201d      	movs	r0, #29
 80022a6:	f000 f960 	bl	800256a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022aa:	e036      	b.n	800231a <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_UART_MspInit+0x10c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d131      	bne.n	800231a <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	0289      	lsls	r1, r1, #10
 80022c0:	430a      	orrs	r2, r1
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022dc:	2114      	movs	r1, #20
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	220c      	movs	r2, #12
 80022e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2202      	movs	r2, #2
 80022e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2203      	movs	r2, #3
 80022f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2204      	movs	r2, #4
 80022fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	187a      	adds	r2, r7, r1
 80022fe:	23a0      	movs	r3, #160	; 0xa0
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f9c7 	bl	8002698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2103      	movs	r1, #3
 800230e:	201c      	movs	r0, #28
 8002310:	f000 f916 	bl	8002540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002314:	201c      	movs	r0, #28
 8002316:	f000 f928 	bl	800256a <HAL_NVIC_EnableIRQ>
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b00b      	add	sp, #44	; 0x2c
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40004800 	.word	0x40004800
 8002328:	40021000 	.word	0x40021000
 800232c:	50000400 	.word	0x50000400
 8002330:	40004400 	.word	0x40004400

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002336:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002338:	f7ff ff0e 	bl	8002158 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800233c:	4812      	ldr	r0, [pc, #72]	; (8002388 <LoopForever+0x6>)
    LDR R1, [R0]
 800233e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002340:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <LoopForever+0xa>)
    CMP R1, R2
 8002344:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002346:	d105      	bne.n	8002354 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <LoopForever+0x12>)
    STR R1, [R0]
 800234c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800234e:	4812      	ldr	r0, [pc, #72]	; (8002398 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002350:	4912      	ldr	r1, [pc, #72]	; (800239c <LoopForever+0x1a>)
    STR R1, [R0]
 8002352:	6001      	str	r1, [r0, #0]

08002354 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002354:	4812      	ldr	r0, [pc, #72]	; (80023a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002356:	4913      	ldr	r1, [pc, #76]	; (80023a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <LoopForever+0x26>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 800236c:	4c10      	ldr	r4, [pc, #64]	; (80023b0 <LoopForever+0x2e>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800237a:	f005 f9b1 	bl	80076e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff fc91 	bl	8001ca4 <main>

08002382 <LoopForever>:

LoopForever:
    b LoopForever
 8002382:	e7fe      	b.n	8002382 <LoopForever>
   ldr   r0, =_estack
 8002384:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002388:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800238c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002390:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002394:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002398:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800239c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80023a8:	080078e0 	.word	0x080078e0
  ldr r2, =_sbss
 80023ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80023b0:	200019ec 	.word	0x200019ec

080023b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_IRQHandler>
	...

080023b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_Init+0x3c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Init+0x3c>)
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d0:	2003      	movs	r0, #3
 80023d2:	f7ff fe27 	bl	8002024 <HAL_InitTick>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e001      	b.n	80023e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e2:	f7ff fe03 	bl	8001fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	001a      	movs	r2, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x20>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	18d2      	adds	r2, r2, r3
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_IncTick+0x20>)
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	20000008 	.word	0x20000008
 8002418:	200006b0 	.word	0x200006b0

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_GetTick+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	200006b0 	.word	0x200006b0

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	0002      	movs	r2, r0
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7f      	cmp	r3, #127	; 0x7f
 8002442:	d809      	bhi.n	8002458 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	231f      	movs	r3, #31
 800244c:	401a      	ands	r2, r3
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_EnableIRQ+0x30>)
 8002450:	2101      	movs	r1, #1
 8002452:	4091      	lsls	r1, r2
 8002454:	000a      	movs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
  }
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b7f      	cmp	r3, #127	; 0x7f
 8002478:	d828      	bhi.n	80024cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <__NVIC_SetPriority+0xd4>)
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	33c0      	adds	r3, #192	; 0xc0
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	589b      	ldr	r3, [r3, r2]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	; 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	481f      	ldr	r0, [pc, #124]	; (8002538 <__NVIC_SetPriority+0xd4>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	430a      	orrs	r2, r1
 80024c4:	33c0      	adds	r3, #192	; 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ca:	e031      	b.n	8002530 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <__NVIC_SetPriority+0xd8>)
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0019      	movs	r1, r3
 80024d4:	230f      	movs	r3, #15
 80024d6:	400b      	ands	r3, r1
 80024d8:	3b08      	subs	r3, #8
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3306      	adds	r3, #6
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1dfa      	adds	r2, r7, #7
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	0011      	movs	r1, r2
 80024ec:	2203      	movs	r2, #3
 80024ee:	400a      	ands	r2, r1
 80024f0:	00d2      	lsls	r2, r2, #3
 80024f2:	21ff      	movs	r1, #255	; 0xff
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	43d2      	mvns	r2, r2
 80024fa:	401a      	ands	r2, r3
 80024fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	401a      	ands	r2, r3
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	2303      	movs	r3, #3
 800250e:	4003      	ands	r3, r0
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002514:	4809      	ldr	r0, [pc, #36]	; (800253c <__NVIC_SetPriority+0xd8>)
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	001c      	movs	r4, r3
 800251c:	230f      	movs	r3, #15
 800251e:	4023      	ands	r3, r4
 8002520:	3b08      	subs	r3, #8
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	430a      	orrs	r2, r1
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	18c3      	adds	r3, r0, r3
 800252c:	3304      	adds	r3, #4
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b003      	add	sp, #12
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	210f      	movs	r1, #15
 800254c:	187b      	adds	r3, r7, r1
 800254e:	1c02      	adds	r2, r0, #0
 8002550:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	187b      	adds	r3, r7, r1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b25b      	sxtb	r3, r3
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff ff81 	bl	8002464 <__NVIC_SetPriority>
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	0002      	movs	r2, r0
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ff57 	bl	8002430 <__NVIC_EnableIRQ>
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	230f      	movs	r3, #15
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2225      	movs	r2, #37	; 0x25
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e024      	b.n	8002602 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	210e      	movs	r1, #14
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	438a      	bics	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	221c      	movs	r2, #28
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	2101      	movs	r1, #1
 80025e6:	4091      	lsls	r1, r2
 80025e8:	000a      	movs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2225      	movs	r2, #37	; 0x25
 80025f0:	2101      	movs	r1, #1
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

    return status;
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	210f      	movs	r1, #15
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2225      	movs	r2, #37	; 0x25
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d006      	beq.n	8002634 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800262c:	187b      	adds	r3, r7, r1
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e02a      	b.n	800268a <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	210e      	movs	r1, #14
 8002640:	438a      	bics	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	438a      	bics	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	221c      	movs	r2, #28
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2101      	movs	r1, #1
 8002662:	4091      	lsls	r1, r2
 8002664:	000a      	movs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2225      	movs	r2, #37	; 0x25
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	0010      	movs	r0, r2
 8002688:	4798      	blx	r3
    }
  }
  return status;
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026ae:	e149      	b.n	8002944 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <HAL_GPIO_Init+0x30>
 80026c6:	e13a      	b.n	800293e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d005      	beq.n	80026e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d130      	bne.n	8002742 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	43da      	mvns	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002716:	2201      	movs	r2, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
 800271c:	0013      	movs	r3, r2
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	2201      	movs	r2, #1
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	4013      	ands	r3, r2
 800274a:	2b03      	cmp	r3, #3
 800274c:	d017      	beq.n	800277e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	43da      	mvns	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	4013      	ands	r3, r2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	58d3      	ldr	r3, [r2, r3]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2207      	movs	r2, #7
 800279c:	4013      	ands	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2107      	movs	r1, #7
 80027b6:	400b      	ands	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	401a      	ands	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_GPIO_Init+0x17c>
 8002812:	e094      	b.n	800293e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <HAL_GPIO_Init+0x2c4>)
 8002816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_GPIO_Init+0x2c4>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002820:	4a4f      	ldr	r2, [pc, #316]	; (8002960 <HAL_GPIO_Init+0x2c8>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	589b      	ldr	r3, [r3, r2]
 800282c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2203      	movs	r2, #3
 8002832:	4013      	ands	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	409a      	lsls	r2, r3
 800283a:	0013      	movs	r3, r2
 800283c:	43da      	mvns	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	429a      	cmp	r2, r3
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x1de>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a44      	ldr	r2, [pc, #272]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x1da>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <HAL_GPIO_Init+0x2d0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x1d6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_GPIO_Init+0x2d4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x1d2>
 8002866:	2305      	movs	r3, #5
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x1e0>
 800286a:	2306      	movs	r3, #6
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x1e0>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x1e0>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x1e0>
 8002876:	2300      	movs	r3, #0
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	2103      	movs	r1, #3
 800287c:	400a      	ands	r2, r1
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_GPIO_Init+0x2c8>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b36      	ldr	r3, [pc, #216]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43da      	mvns	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	035b      	lsls	r3, r3, #13
 80028ae:	4013      	ands	r3, r2
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	039b      	lsls	r3, r3, #14
 80028d8:	4013      	ands	r3, r2
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	4013      	ands	r3, r2
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43da      	mvns	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	4013      	ands	r3, r2
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_GPIO_Init+0x2d8>)
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	40da      	lsrs	r2, r3
 800294c:	1e13      	subs	r3, r2, #0
 800294e:	d000      	beq.n	8002952 <HAL_GPIO_Init+0x2ba>
 8002950:	e6ae      	b.n	80026b0 <HAL_GPIO_Init+0x18>
  }
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b006      	add	sp, #24
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000
 8002964:	50000400 	.word	0x50000400
 8002968:	50000800 	.word	0x50000800
 800296c:	50001c00 	.word	0x50001c00
 8002970:	40010400 	.word	0x40010400

08002974 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	0008      	movs	r0, r1
 800297e:	0011      	movs	r1, r2
 8002980:	1cbb      	adds	r3, r7, #2
 8002982:	1c02      	adds	r2, r0, #0
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	1c7b      	adds	r3, r7, #1
 8002988:	1c0a      	adds	r2, r1, #0
 800298a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800298c:	1c7b      	adds	r3, r7, #1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002994:	1cbb      	adds	r3, r7, #2
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	0002      	movs	r2, r0
 80029b8:	1dbb      	adds	r3, r7, #6
 80029ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	1dba      	adds	r2, r7, #6
 80029c2:	8812      	ldrh	r2, [r2, #0]
 80029c4:	4013      	ands	r3, r2
 80029c6:	d008      	beq.n	80029da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029ca:	1dba      	adds	r2, r7, #6
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d0:	1dbb      	adds	r3, r7, #6
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f004 fb0b 	bl	8006ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f000 fb6c 	bl	80030d4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4bc8      	ldr	r3, [pc, #800]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	220c      	movs	r2, #12
 8002a02:	4013      	ands	r3, r2
 8002a04:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a06:	4bc6      	ldr	r3, [pc, #792]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	025b      	lsls	r3, r3, #9
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <HAL_RCC_OscConfig+0x36>
 8002a1c:	e07d      	b.n	8002b1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d007      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x68>
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d10d      	bne.n	8002a50 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4bba      	ldr	r3, [pc, #744]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCC_OscConfig+0x5a>
 8002a40:	e06a      	b.n	8002b18 <HAL_RCC_OscConfig+0x130>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d166      	bne.n	8002b18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f000 fb42 	bl	80030d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x84>
 8002a5c:	4bb0      	ldr	r3, [pc, #704]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4baf      	ldr	r3, [pc, #700]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	0249      	lsls	r1, r1, #9
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e027      	b.n	8002abc <HAL_RCC_OscConfig+0xd4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	23a0      	movs	r3, #160	; 0xa0
 8002a72:	02db      	lsls	r3, r3, #11
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10e      	bne.n	8002a96 <HAL_RCC_OscConfig+0xae>
 8002a78:	4ba9      	ldr	r3, [pc, #676]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4ba8      	ldr	r3, [pc, #672]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	02c9      	lsls	r1, r1, #11
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0249      	lsls	r1, r1, #9
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e012      	b.n	8002abc <HAL_RCC_OscConfig+0xd4>
 8002a96:	4ba2      	ldr	r3, [pc, #648]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4ba1      	ldr	r3, [pc, #644]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	49a1      	ldr	r1, [pc, #644]	; (8002d24 <HAL_RCC_OscConfig+0x33c>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	4b9f      	ldr	r3, [pc, #636]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	025b      	lsls	r3, r3, #9
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b9a      	ldr	r3, [pc, #616]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	499c      	ldr	r1, [pc, #624]	; (8002d28 <HAL_RCC_OscConfig+0x340>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7ff fcaa 	bl	800241c <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ace:	f7ff fca5 	bl	800241c <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2f9      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	029b      	lsls	r3, r3, #10
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0xe6>
 8002aec:	e015      	b.n	8002b1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7ff fc95 	bl	800241c <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff fc90 	bl	800241c <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2e4      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	029b      	lsls	r3, r3, #10
 8002b12:	4013      	ands	r3, r2
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x110>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d100      	bne.n	8002b26 <HAL_RCC_OscConfig+0x13e>
 8002b24:	e099      	b.n	8002c5a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b34:	4b7a      	ldr	r3, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2220      	movs	r2, #32
 8002b44:	4393      	bics	r3, r2
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d13e      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1ea>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4013      	ands	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_RCC_OscConfig+0x186>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e2b2      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x344>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b84:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2209      	movs	r2, #9
 8002b8a:	4393      	bics	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 fbeb 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8002b9a:	0001      	movs	r1, r0
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	4a62      	ldr	r2, [pc, #392]	; (8002d30 <HAL_RCC_OscConfig+0x348>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	000a      	movs	r2, r1
 8002bac:	40da      	lsrs	r2, r3
 8002bae:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <HAL_RCC_OscConfig+0x34c>)
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002bb2:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_RCC_OscConfig+0x350>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2513      	movs	r5, #19
 8002bb8:	197c      	adds	r4, r7, r5
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fa32 	bl	8002024 <HAL_InitTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bc4:	197b      	adds	r3, r7, r5
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d046      	beq.n	8002c5a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002bcc:	197b      	adds	r3, r7, r5
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	e280      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d027      	beq.n	8002c28 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bd8:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2209      	movs	r2, #9
 8002bde:	4393      	bics	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7ff fc17 	bl	800241c <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff fc12 	bl	800241c <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e266      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c06:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d0f1      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a45      	ldr	r2, [pc, #276]	; (8002d2c <HAL_RCC_OscConfig+0x344>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c28:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	438a      	bics	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff fbf2 	bl	800241c <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7ff fbed 	bl	800241c <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e241      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	d1f1      	bne.n	8002c3e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	4013      	ands	r3, r2
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x27e>
 8002c64:	e0a1      	b.n	8002daa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d140      	bne.n	8002cee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_OscConfig+0x29c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e227      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c84:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a2c      	ldr	r2, [pc, #176]	; (8002d3c <HAL_RCC_OscConfig+0x354>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	0a19      	lsrs	r1, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	061a      	lsls	r2, r3, #24
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	0b5b      	lsrs	r3, r3, #13
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0212      	lsls	r2, r2, #8
 8002cb8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	210f      	movs	r1, #15
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	491a      	ldr	r1, [pc, #104]	; (8002d30 <HAL_RCC_OscConfig+0x348>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_OscConfig+0x34c>)
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_RCC_OscConfig+0x350>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2513      	movs	r5, #19
 8002cd4:	197c      	adds	r4, r7, r5
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff f9a4 	bl	8002024 <HAL_InitTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002ce0:	197b      	adds	r3, r7, r5
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d060      	beq.n	8002daa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002ce8:	197b      	adds	r3, r7, r5
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	e1f2      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03f      	beq.n	8002d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x338>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0049      	lsls	r1, r1, #1
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff fb8a 	bl	800241c <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d0c:	e018      	b.n	8002d40 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fb85 	bl	800241c <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d911      	bls.n	8002d40 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1d9      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
 8002d20:	40021000 	.word	0x40021000
 8002d24:	fffeffff 	.word	0xfffeffff
 8002d28:	fffbffff 	.word	0xfffbffff
 8002d2c:	ffffe0ff 	.word	0xffffe0ff
 8002d30:	08007820 	.word	0x08007820
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d40:	4bc9      	ldr	r3, [pc, #804]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d0e0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4c:	4bc6      	ldr	r3, [pc, #792]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4ac6      	ldr	r2, [pc, #792]	; (800306c <HAL_RCC_OscConfig+0x684>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	4bc3      	ldr	r3, [pc, #780]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d60:	4bc1      	ldr	r3, [pc, #772]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	0a19      	lsrs	r1, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	061a      	lsls	r2, r3, #24
 8002d6e:	4bbe      	ldr	r3, [pc, #760]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	e019      	b.n	8002daa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d76:	4bbc      	ldr	r3, [pc, #752]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4bbb      	ldr	r3, [pc, #748]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002d7c:	49bc      	ldr	r1, [pc, #752]	; (8003070 <HAL_RCC_OscConfig+0x688>)
 8002d7e:	400a      	ands	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff fb4b 	bl	800241c <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fb46 	bl	800241c <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e19a      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d9e:	4bb2      	ldr	r3, [pc, #712]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2208      	movs	r2, #8
 8002db0:	4013      	ands	r3, r2
 8002db2:	d036      	beq.n	8002e22 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d019      	beq.n	8002df0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbc:	4baa      	ldr	r3, [pc, #680]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc0:	4ba9      	ldr	r3, [pc, #676]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7ff fb28 	bl	800241c <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fb23 	bl	800241c <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e177      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002de4:	4ba0      	ldr	r3, [pc, #640]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0f1      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x3ea>
 8002dee:	e018      	b.n	8002e22 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b9d      	ldr	r3, [pc, #628]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df4:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fb0e 	bl	800241c <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff fb09 	bl	800241c <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e15d      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e18:	4b93      	ldr	r3, [pc, #588]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d1f1      	bne.n	8002e06 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <HAL_RCC_OscConfig+0x446>
 8002e2c:	e0ae      	b.n	8002f8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2023      	movs	r0, #35	; 0x23
 8002e30:	183b      	adds	r3, r7, r0
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	055b      	lsls	r3, r3, #21
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b89      	ldr	r3, [pc, #548]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0549      	lsls	r1, r1, #21
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e50:	183b      	adds	r3, r7, r0
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b87      	ldr	r3, [pc, #540]	; (8003074 <HAL_RCC_OscConfig+0x68c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_RCC_OscConfig+0x68c>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <HAL_RCC_OscConfig+0x68c>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0049      	lsls	r1, r1, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7ff fad4 	bl	800241c <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7ff facf 	bl	800241c <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e123      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCC_OscConfig+0x68c>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4013      	ands	r3, r2
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4cc>
 8002ea4:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0049      	lsls	r1, r1, #1
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
 8002eb2:	e031      	b.n	8002f18 <HAL_RCC_OscConfig+0x530>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4ee>
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ec2:	496b      	ldr	r1, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x688>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ec8:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ece:	496a      	ldr	r1, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x690>)
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed4:	e020      	b.n	8002f18 <HAL_RCC_OscConfig+0x530>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	23a0      	movs	r3, #160	; 0xa0
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10e      	bne.n	8002f00 <HAL_RCC_OscConfig+0x518>
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee6:	4b60      	ldr	r3, [pc, #384]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	00c9      	lsls	r1, r1, #3
 8002eec:	430a      	orrs	r2, r1
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50
 8002ef0:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0049      	lsls	r1, r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0x530>
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f04:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f06:	495a      	ldr	r1, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x688>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f10:	4b55      	ldr	r3, [pc, #340]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f12:	4959      	ldr	r1, [pc, #356]	; (8003078 <HAL_RCC_OscConfig+0x690>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7ff fa7c 	bl	800241c <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f28:	e009      	b.n	8002f3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7ff fa77 	bl	800241c <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	4a51      	ldr	r2, [pc, #324]	; (800307c <HAL_RCC_OscConfig+0x694>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0ca      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	d0ef      	beq.n	8002f2a <HAL_RCC_OscConfig+0x542>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7ff fa66 	bl	800241c <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f54:	e009      	b.n	8002f6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7ff fa61 	bl	800241c <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	4a46      	ldr	r2, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x694>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0b4      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1ef      	bne.n	8002f56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f76:	2323      	movs	r3, #35	; 0x23
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002f86:	493e      	ldr	r1, [pc, #248]	; (8003080 <HAL_RCC_OscConfig+0x698>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d100      	bne.n	8002f96 <HAL_RCC_OscConfig+0x5ae>
 8002f94:	e09d      	b.n	80030d2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d100      	bne.n	8002f9e <HAL_RCC_OscConfig+0x5b6>
 8002f9c:	e076      	b.n	800308c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d145      	bne.n	8003032 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_RCC_OscConfig+0x69c>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fa33 	bl	800241c <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff fa2e 	bl	800241c <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e082      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fda:	4b23      	ldr	r3, [pc, #140]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x6a0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0449      	lsls	r1, r1, #17
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7ff fa08 	bl	800241c <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7ff fa03 	bl	800241c <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e057      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	049b      	lsls	r3, r3, #18
 800302c:	4013      	ands	r3, r2
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x62a>
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 8003038:	4912      	ldr	r1, [pc, #72]	; (8003084 <HAL_RCC_OscConfig+0x69c>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7ff f9ed 	bl	800241c <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff f9e8 	bl	800241c <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e03c      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800305a:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_OscConfig+0x680>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x660>
 8003066:	e034      	b.n	80030d2 <HAL_RCC_OscConfig+0x6ea>
 8003068:	40021000 	.word	0x40021000
 800306c:	ffff1fff 	.word	0xffff1fff
 8003070:	fffffeff 	.word	0xfffffeff
 8003074:	40007000 	.word	0x40007000
 8003078:	fffffbff 	.word	0xfffffbff
 800307c:	00001388 	.word	0x00001388
 8003080:	efffffff 	.word	0xefffffff
 8003084:	feffffff 	.word	0xfeffffff
 8003088:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x6f4>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10f      	bne.n	80030ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	23f0      	movs	r3, #240	; 0xf0
 80030b2:	039b      	lsls	r3, r3, #14
 80030b4:	401a      	ands	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	23c0      	movs	r3, #192	; 0xc0
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	401a      	ands	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b00a      	add	sp, #40	; 0x28
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e128      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b96      	ldr	r3, [pc, #600]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d91e      	bls.n	8003140 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b93      	ldr	r3, [pc, #588]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	4393      	bics	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	4b90      	ldr	r3, [pc, #576]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003114:	f7ff f982 	bl	800241c <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311c:	e009      	b.n	8003132 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7ff f97d 	bl	800241c <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	4a8a      	ldr	r2, [pc, #552]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e109      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b87      	ldr	r3, [pc, #540]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d1ee      	bne.n	800311e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314a:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	22f0      	movs	r2, #240	; 0xf0
 8003150:	4393      	bics	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 800315a:	430a      	orrs	r2, r1
 800315c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d100      	bne.n	800316a <HAL_RCC_ClockConfig+0x8a>
 8003168:	e089      	b.n	800327e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003172:	4b79      	ldr	r3, [pc, #484]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	4013      	ands	r3, r2
 800317c:	d120      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0e1      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	049b      	lsls	r3, r3, #18
 8003192:	4013      	ands	r3, r2
 8003194:	d114      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0d5      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a2:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2204      	movs	r2, #4
 80031a8:	4013      	ands	r3, r2
 80031aa:	d109      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0ca      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031b0:	4b69      	ldr	r3, [pc, #420]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0c2      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c0:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2203      	movs	r2, #3
 80031c6:	4393      	bics	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4b62      	ldr	r3, [pc, #392]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7ff f922 	bl	800241c <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7ff f919 	bl	800241c <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0a5      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	220c      	movs	r2, #12
 8003200:	4013      	ands	r3, r2
 8003202:	2b08      	cmp	r3, #8
 8003204:	d1ef      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x106>
 8003206:	e03a      	b.n	800327e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d111      	bne.n	8003234 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003210:	e009      	b.n	8003226 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7ff f903 	bl	800241c <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a4d      	ldr	r2, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e08f      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003226:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	220c      	movs	r2, #12
 800322c:	4013      	ands	r3, r2
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_ClockConfig+0x132>
 8003232:	e024      	b.n	800327e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d11b      	bne.n	8003274 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800323c:	e009      	b.n	8003252 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323e:	f7ff f8ed 	bl	800241c <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e079      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	220c      	movs	r2, #12
 8003258:	4013      	ands	r3, r2
 800325a:	2b04      	cmp	r3, #4
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_ClockConfig+0x15e>
 800325e:	e00e      	b.n	800327e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003260:	f7ff f8dc 	bl	800241c <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	4a3a      	ldr	r2, [pc, #232]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e068      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	220c      	movs	r2, #12
 800327a:	4013      	ands	r3, r2
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d21e      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	4393      	bics	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800329e:	f7ff f8bd 	bl	800241c <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	e009      	b.n	80032bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7ff f8b8 	bl	800241c <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	4a28      	ldr	r2, [pc, #160]	; (8003354 <HAL_RCC_ClockConfig+0x274>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e044      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032bc:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_ClockConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d1ee      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <HAL_RCC_ClockConfig+0x27c>)
 80032da:	4013      	ands	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00a      	beq.n	8003308 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <HAL_RCC_ClockConfig+0x280>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	00da      	lsls	r2, r3, #3
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003308:	f000 f832 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800330c:	0001      	movs	r1, r0
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_ClockConfig+0x278>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	220f      	movs	r2, #15
 8003316:	4013      	ands	r3, r2
 8003318:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x284>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	000a      	movs	r2, r1
 800331e:	40da      	lsrs	r2, r3
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCC_ClockConfig+0x288>)
 8003322:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCC_ClockConfig+0x28c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	250b      	movs	r5, #11
 800332a:	197c      	adds	r4, r7, r5
 800332c:	0018      	movs	r0, r3
 800332e:	f7fe fe79 	bl	8002024 <HAL_InitTick>
 8003332:	0003      	movs	r3, r0
 8003334:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003336:	197b      	adds	r3, r7, r5
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800333e:	197b      	adds	r3, r7, r5
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	e000      	b.n	8003346 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bdb0      	pop	{r4, r5, r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	40022000 	.word	0x40022000
 8003354:	00001388 	.word	0x00001388
 8003358:	40021000 	.word	0x40021000
 800335c:	fffff8ff 	.word	0xfffff8ff
 8003360:	ffffc7ff 	.word	0xffffc7ff
 8003364:	08007820 	.word	0x08007820
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b08e      	sub	sp, #56	; 0x38
 8003374:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003376:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800337c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337e:	230c      	movs	r3, #12
 8003380:	4013      	ands	r3, r2
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d014      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003386:	d900      	bls.n	800338a <HAL_RCC_GetSysClockFreq+0x1a>
 8003388:	e07b      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x112>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x24>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d00b      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e076      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003394:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2210      	movs	r2, #16
 800339a:	4013      	ands	r3, r2
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80033a2:	e07c      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80033a4:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033a8:	e079      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ae:	e076      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	0c9a      	lsrs	r2, r3, #18
 80033b4:	230f      	movs	r3, #15
 80033b6:	401a      	ands	r2, r3
 80033b8:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	0d9a      	lsrs	r2, r3, #22
 80033c2:	2303      	movs	r3, #3
 80033c4:	4013      	ands	r3, r2
 80033c6:	3301      	adds	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	025b      	lsls	r3, r3, #9
 80033d2:	4013      	ands	r3, r2
 80033d4:	d01a      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80033e0:	2300      	movs	r3, #0
 80033e2:	69b8      	ldr	r0, [r7, #24]
 80033e4:	69f9      	ldr	r1, [r7, #28]
 80033e6:	f7fc ff3b 	bl	8000260 <__aeabi_lmul>
 80033ea:	0002      	movs	r2, r0
 80033ec:	000b      	movs	r3, r1
 80033ee:	0010      	movs	r0, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f7fc ff0f 	bl	8000220 <__aeabi_uldivmod>
 8003402:	0002      	movs	r2, r0
 8003404:	000b      	movs	r3, r1
 8003406:	0013      	movs	r3, r2
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	e037      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800340c:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	4013      	ands	r3, r2
 8003414:	d01a      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8003420:	2300      	movs	r3, #0
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	f7fc ff1b 	bl	8000260 <__aeabi_lmul>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	0010      	movs	r0, r2
 8003430:	0019      	movs	r1, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f7fc feef 	bl	8000220 <__aeabi_uldivmod>
 8003442:	0002      	movs	r2, r0
 8003444:	000b      	movs	r3, r1
 8003446:	0013      	movs	r3, r2
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
 800344a:	e017      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	0018      	movs	r0, r3
 8003450:	2300      	movs	r3, #0
 8003452:	0019      	movs	r1, r3
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003456:	2300      	movs	r3, #0
 8003458:	f7fc ff02 	bl	8000260 <__aeabi_lmul>
 800345c:	0002      	movs	r2, r0
 800345e:	000b      	movs	r3, r1
 8003460:	0010      	movs	r0, r2
 8003462:	0019      	movs	r1, r3
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	001c      	movs	r4, r3
 8003468:	2300      	movs	r3, #0
 800346a:	001d      	movs	r5, r3
 800346c:	0022      	movs	r2, r4
 800346e:	002b      	movs	r3, r5
 8003470:	f7fc fed6 	bl	8000220 <__aeabi_uldivmod>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	0013      	movs	r3, r2
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003480:	e00d      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0b5b      	lsrs	r3, r3, #13
 8003488:	2207      	movs	r2, #7
 800348a:	4013      	ands	r3, r2
 800348c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	3301      	adds	r3, #1
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	0212      	lsls	r2, r2, #8
 8003496:	409a      	lsls	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b00e      	add	sp, #56	; 0x38
 80034a6:	bdb0      	pop	{r4, r5, r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	003d0900 	.word	0x003d0900
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	08007838 	.word	0x08007838

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b02      	ldr	r3, [pc, #8]	; (80034cc <HAL_RCC_GetHCLKFreq+0x10>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff2 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034d8:	0001      	movs	r1, r0
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	40d9      	lsrs	r1, r3
 80034ea:	000b      	movs	r3, r1
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08007830 	.word	0x08007830

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003500:	f7ff ffdc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003504:	0001      	movs	r1, r0
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	0adb      	lsrs	r3, r3, #11
 800350c:	2207      	movs	r2, #7
 800350e:	4013      	ands	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	40d9      	lsrs	r1, r3
 8003516:	000b      	movs	r3, r1
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	40021000 	.word	0x40021000
 8003524:	08007830 	.word	0x08007830

08003528 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	220f      	movs	r2, #15
 8003536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2203      	movs	r2, #3
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	22f0      	movs	r2, #240	; 0xf0
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	23e0      	movs	r3, #224	; 0xe0
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	401a      	ands	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	08da      	lsrs	r2, r3, #3
 8003564:	23e0      	movs	r3, #224	; 0xe0
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	401a      	ands	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetClockConfig+0x60>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	401a      	ands	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	40021000 	.word	0x40021000
 8003588:	40022000 	.word	0x40022000

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003594:	2017      	movs	r0, #23
 8003596:	183b      	adds	r3, r7, r0
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	4013      	ands	r3, r2
 80035a4:	d100      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80035a6:	e0c7      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a8:	4b84      	ldr	r3, [pc, #528]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	055b      	lsls	r3, r3, #21
 80035b0:	4013      	ands	r3, r2
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b81      	ldr	r3, [pc, #516]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0549      	lsls	r1, r1, #21
 80035be:	430a      	orrs	r2, r1
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80035c2:	183b      	adds	r3, r7, r0
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d11a      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d4:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	0049      	lsls	r1, r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fe ff1b 	bl	800241c <HAL_GetTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	e008      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fe ff16 	bl	800241c <HAL_GetTick>
 80035f0:	0002      	movs	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0d9      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d0f0      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	23c0      	movs	r3, #192	; 0xc0
 8003610:	039b      	lsls	r3, r3, #14
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	039b      	lsls	r3, r3, #14
 800361e:	4013      	ands	r3, r2
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	429a      	cmp	r2, r3
 8003624:	d013      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	23c0      	movs	r3, #192	; 0xc0
 800362c:	029b      	lsls	r3, r3, #10
 800362e:	401a      	ands	r2, r3
 8003630:	23c0      	movs	r3, #192	; 0xc0
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	429a      	cmp	r2, r3
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003638:	4b60      	ldr	r3, [pc, #384]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	401a      	ands	r2, r3
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	429a      	cmp	r2, r3
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0b1      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003652:	23c0      	movs	r3, #192	; 0xc0
 8003654:	029b      	lsls	r3, r3, #10
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	23c0      	movs	r3, #192	; 0xc0
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	4013      	ands	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d033      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2220      	movs	r2, #32
 8003676:	4013      	ands	r3, r2
 8003678:	d02e      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	4a51      	ldr	r2, [pc, #324]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003680:	4013      	ands	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	0309      	lsls	r1, r1, #12
 800368e:	430a      	orrs	r2, r1
 8003690:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003698:	494b      	ldr	r1, [pc, #300]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800369a:	400a      	ands	r2, r1
 800369c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	d014      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe feb5 	bl	800241c <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036b6:	e009      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe feb0 	bl	800241c <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e072      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2220      	movs	r2, #32
 80036de:	4013      	ands	r3, r2
 80036e0:	d01f      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	23c0      	movs	r3, #192	; 0xc0
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	401a      	ands	r2, r3
 80036ec:	23c0      	movs	r3, #192	; 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x182>
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	23c0      	movs	r3, #192	; 0xc0
 8003704:	039b      	lsls	r3, r3, #14
 8003706:	401a      	ands	r2, r3
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003710:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	23c0      	movs	r3, #192	; 0xc0
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	401a      	ands	r2, r3
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800371e:	430a      	orrs	r2, r1
 8003720:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003722:	2317      	movs	r3, #23
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800372e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003732:	4928      	ldr	r1, [pc, #160]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003734:	400a      	ands	r2, r1
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	220c      	movs	r2, #12
 8003748:	4393      	bics	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003752:	430a      	orrs	r2, r1
 8003754:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2204      	movs	r2, #4
 800375c:	4013      	ands	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003770:	430a      	orrs	r2, r1
 8003772:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	4013      	ands	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800378e:	430a      	orrs	r2, r1
 8003790:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	4013      	ands	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800379e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037ac:	430a      	orrs	r2, r1
 80037ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
 80037c4:	fffcffff 	.word	0xfffcffff
 80037c8:	fff7ffff 	.word	0xfff7ffff
 80037cc:	00001388 	.word	0x00001388
 80037d0:	ffcfffff 	.word	0xffcfffff
 80037d4:	efffffff 	.word	0xefffffff
 80037d8:	fffff3ff 	.word	0xfffff3ff
 80037dc:	ffffcfff 	.word	0xffffcfff
 80037e0:	fff3ffff 	.word	0xfff3ffff

080037e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037ec:	230f      	movs	r3, #15
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e088      	b.n	8003910 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	2100      	movs	r1, #0
 8003810:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f7fe fb4d 	bl	8001eb4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	2102      	movs	r1, #2
 8003820:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2210      	movs	r2, #16
 800382a:	4013      	ands	r3, r2
 800382c:	2b10      	cmp	r3, #16
 800382e:	d05f      	beq.n	80038f0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	22ca      	movs	r2, #202	; 0xca
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2253      	movs	r2, #83	; 0x53
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003840:	250f      	movs	r5, #15
 8003842:	197c      	adds	r4, r7, r5
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f9ce 	bl	8003be8 <RTC_EnterInitMode>
 800384c:	0003      	movs	r3, r0
 800384e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003850:	0028      	movs	r0, r5
 8003852:	183b      	adds	r3, r7, r0
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d12c      	bne.n	80038b4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	492c      	ldr	r1, [pc, #176]	; (8003918 <HAL_RTC_Init+0x134>)
 8003866:	400a      	ands	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68d2      	ldr	r2, [r2, #12]
 8003890:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6919      	ldr	r1, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80038a6:	183c      	adds	r4, r7, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f9e0 	bl	8003c70 <RTC_ExitInitMode>
 80038b0:	0003      	movs	r3, r0
 80038b2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80038b4:	230f      	movs	r3, #15
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2103      	movs	r1, #3
 80038ca:	438a      	bics	r2, r1
 80038cc:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	22ff      	movs	r2, #255	; 0xff
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
 80038ee:	e003      	b.n	80038f8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80038f0:	230f      	movs	r3, #15
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80038f8:	230f      	movs	r3, #15
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800390a:	230f      	movs	r3, #15
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bdb0      	pop	{r4, r5, r7, pc}
 8003918:	ff8fffbf 	.word	0xff8fffbf

0800391c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_RTC_SetTime+0x1e>
 8003936:	2302      	movs	r3, #2
 8003938:	e092      	b.n	8003a60 <HAL_RTC_SetTime+0x144>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	2102      	movs	r1, #2
 8003948:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d125      	bne.n	800399c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	4013      	ands	r3, r2
 800395a:	d102      	bne.n	8003962 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f9ac 	bl	8003cc4 <RTC_ByteToBcd2>
 800396c:	0003      	movs	r3, r0
 800396e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	0018      	movs	r0, r3
 8003976:	f000 f9a5 	bl	8003cc4 <RTC_ByteToBcd2>
 800397a:	0003      	movs	r3, r0
 800397c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800397e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	789b      	ldrb	r3, [r3, #2]
 8003984:	0018      	movs	r0, r3
 8003986:	f000 f99d 	bl	8003cc4 <RTC_ByteToBcd2>
 800398a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800398c:	0022      	movs	r2, r4
 800398e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e017      	b.n	80039cc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	4013      	ands	r3, r2
 80039a6:	d102      	bne.n	80039ae <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039ba:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	22ca      	movs	r2, #202	; 0xca
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2253      	movs	r2, #83	; 0x53
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039dc:	2513      	movs	r5, #19
 80039de:	197c      	adds	r4, r7, r5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f900 	bl	8003be8 <RTC_EnterInitMode>
 80039e8:	0003      	movs	r3, r0
 80039ea:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80039ec:	0028      	movs	r0, r5
 80039ee:	183b      	adds	r3, r7, r0
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d120      	bne.n	8003a38 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_RTC_SetTime+0x14c>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RTC_SetTime+0x150>)
 8003a0e:	400a      	ands	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a2a:	183c      	adds	r4, r7, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 f91e 	bl	8003c70 <RTC_ExitInitMode>
 8003a34:	0003      	movs	r3, r0
 8003a36:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003a38:	2313      	movs	r3, #19
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

  return status;
 8003a5a:	2313      	movs	r3, #19
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b006      	add	sp, #24
 8003a66:	bdb0      	pop	{r4, r5, r7, pc}
 8003a68:	007f7f7f 	.word	0x007f7f7f
 8003a6c:	fffbffff 	.word	0xfffbffff

08003a70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	5c9b      	ldrb	r3, [r3, r2]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_RTC_SetDate+0x1e>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e07e      	b.n	8003b8c <HAL_RTC_SetDate+0x11c>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	2101      	movs	r1, #1
 8003a94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2221      	movs	r2, #33	; 0x21
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_RTC_SetDate+0x52>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2310      	movs	r3, #16
 8003aac:	4013      	ands	r3, r2
 8003aae:	d008      	beq.n	8003ac2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	4393      	bics	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	330a      	adds	r3, #10
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11c      	bne.n	8003b02 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	78db      	ldrb	r3, [r3, #3]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 f8f9 	bl	8003cc4 <RTC_ByteToBcd2>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f8f2 	bl	8003cc4 <RTC_ByteToBcd2>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ae4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	789b      	ldrb	r3, [r3, #2]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f8ea 	bl	8003cc4 <RTC_ByteToBcd2>
 8003af0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003af2:	0022      	movs	r2, r4
 8003af4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e00e      	b.n	8003b20 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	78db      	ldrb	r3, [r3, #3]
 8003b06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	22ca      	movs	r2, #202	; 0xca
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2253      	movs	r2, #83	; 0x53
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b30:	2513      	movs	r5, #19
 8003b32:	197c      	adds	r4, r7, r5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f856 	bl	8003be8 <RTC_EnterInitMode>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003b40:	0028      	movs	r0, r5
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4910      	ldr	r1, [pc, #64]	; (8003b94 <HAL_RTC_SetDate+0x124>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b56:	183c      	adds	r4, r7, r0
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f888 	bl	8003c70 <RTC_ExitInitMode>
 8003b60:	0003      	movs	r3, r0
 8003b62:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003b64:	2313      	movs	r3, #19
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	22ff      	movs	r2, #255	; 0xff
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

  return status;
 8003b86:	2313      	movs	r3, #19
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	781b      	ldrb	r3, [r3, #0]
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b006      	add	sp, #24
 8003b92:	bdb0      	pop	{r4, r5, r7, pc}
 8003b94:	00ffff3f 	.word	0x00ffff3f

08003b98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <HAL_RTC_WaitForSynchro+0x4c>)
 8003baa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bac:	f7fe fc36 	bl	800241c <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bb6:	f7fe fc31 	bl	800241c <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	23fa      	movs	r3, #250	; 0xfa
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	0001ff5f 	.word	0x0001ff5f

08003be8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	230f      	movs	r3, #15
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	4013      	ands	r3, r2
 8003c06:	d12c      	bne.n	8003c62 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fe fc00 	bl	800241c <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c20:	e014      	b.n	8003c4c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c22:	f7fe fbfb 	bl	800241c <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	200f      	movs	r0, #15
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	1839      	adds	r1, r7, r0
 8003c32:	7809      	ldrb	r1, [r1, #0]
 8003c34:	7019      	strb	r1, [r3, #0]
 8003c36:	23fa      	movs	r3, #250	; 0xfa
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d906      	bls.n	8003c4c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	2104      	movs	r1, #4
 8003c44:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2240      	movs	r2, #64	; 0x40
 8003c54:	4013      	ands	r3, r2
 8003c56:	d104      	bne.n	8003c62 <RTC_EnterInitMode+0x7a>
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d1df      	bne.n	8003c22 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003c62:	230f      	movs	r3, #15
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	240f      	movs	r4, #15
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2220      	movs	r2, #32
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d10c      	bne.n	8003cb6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff ff7a 	bl	8003b98 <HAL_RTC_WaitForSynchro>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d006      	beq.n	8003cb6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2221      	movs	r2, #33	; 0x21
 8003cac:	2104      	movs	r1, #4
 8003cae:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003cb0:	193b      	adds	r3, r7, r4
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003cb6:	230f      	movs	r3, #15
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	781b      	ldrb	r3, [r3, #0]
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b005      	add	sp, #20
 8003cc2:	bd90      	pop	{r4, r7, pc}

08003cc4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	0002      	movs	r2, r0
 8003ccc:	1dfb      	adds	r3, r7, #7
 8003cce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003cd4:	e007      	b.n	8003ce6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	1dfa      	adds	r2, r7, #7
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	3a0a      	subs	r2, #10
 8003ce4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	d8f3      	bhi.n	8003cd6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b2db      	uxtb	r3, r3
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e07b      	b.n	8003e10 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	2382      	movs	r3, #130	; 0x82
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d009      	beq.n	8003d40 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61da      	str	r2, [r3, #28]
 8003d32:	e005      	b.n	8003d40 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2251      	movs	r2, #81	; 0x51
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2250      	movs	r2, #80	; 0x50
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fe f8f9 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2251      	movs	r2, #81	; 0x51
 8003d66:	2102      	movs	r1, #2
 8003d68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	438a      	bics	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	2382      	movs	r3, #130	; 0x82
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	2384      	movs	r3, #132	; 0x84
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68d9      	ldr	r1, [r3, #12]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	400b      	ands	r3, r1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2102      	movs	r1, #2
 8003da2:	400b      	ands	r3, r1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2101      	movs	r1, #1
 8003dac:	400b      	ands	r3, r1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	400b      	ands	r3, r1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2138      	movs	r1, #56	; 0x38
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	400b      	ands	r3, r1
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	2204      	movs	r2, #4
 8003dec:	4013      	ands	r3, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	2210      	movs	r2, #16
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2251      	movs	r2, #81	; 0x51
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	001a      	movs	r2, r3
 8003e26:	1cbb      	adds	r3, r7, #2
 8003e28:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e2a:	2317      	movs	r3, #23
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2250      	movs	r2, #80	; 0x50
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_SPI_TransmitReceive_IT+0x28>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e086      	b.n	8003f4e <HAL_SPI_TransmitReceive_IT+0x136>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2250      	movs	r2, #80	; 0x50
 8003e44:	2101      	movs	r1, #1
 8003e46:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e48:	2016      	movs	r0, #22
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	2151      	movs	r1, #81	; 0x51
 8003e50:	5c52      	ldrb	r2, [r2, r1]
 8003e52:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e5a:	0001      	movs	r1, r0
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d011      	beq.n	8003e88 <HAL_SPI_TransmitReceive_IT+0x70>
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	2382      	movs	r3, #130	; 0x82
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d107      	bne.n	8003e7e <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_SPI_TransmitReceive_IT+0x66>
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d004      	beq.n	8003e88 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8003e7e:	2317      	movs	r3, #23
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2202      	movs	r2, #2
 8003e84:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e86:	e05b      	b.n	8003f40 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_SPI_TransmitReceive_IT+0x84>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_SPI_TransmitReceive_IT+0x84>
 8003e94:	1cbb      	adds	r3, r7, #2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8003e9c:	2317      	movs	r3, #23
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ea4:	e04c      	b.n	8003f40 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2251      	movs	r2, #81	; 0x51
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d003      	beq.n	8003eba <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2251      	movs	r2, #81	; 0x51
 8003eb6:	2105      	movs	r1, #5
 8003eb8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1cba      	adds	r2, r7, #2
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1cba      	adds	r2, r7, #2
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1cba      	adds	r2, r7, #2
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1cba      	adds	r2, r7, #2
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_SPI_TransmitReceive_IT+0x140>)
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_SPI_TransmitReceive_IT+0x144>)
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
 8003f00:	e005      	b.n	8003f0e <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <HAL_SPI_TransmitReceive_IT+0x148>)
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	21e0      	movs	r1, #224	; 0xe0
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2240      	movs	r2, #64	; 0x40
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d008      	beq.n	8003f3e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2140      	movs	r1, #64	; 0x40
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e000      	b.n	8003f40 <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 8003f3e:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2250      	movs	r2, #80	; 0x50
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f48:	2317      	movs	r3, #23
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781b      	ldrb	r3, [r3, #0]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	08004277 	.word	0x08004277
 8003f5c:	080042d9 	.word	0x080042d9
 8003f60:	080041af 	.word	0x080041af
 8003f64:	08004215 	.word	0x08004215

08003f68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	001a      	movs	r2, r3
 8003f86:	2301      	movs	r3, #1
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d10f      	bne.n	8003fac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f92:	d00b      	beq.n	8003fac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d005      	beq.n	8003fac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	0010      	movs	r0, r2
 8003fa8:	4798      	blx	r3
    return;
 8003faa:	e0d5      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_SPI_IRQHandler+0x68>
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	09db      	lsrs	r3, r3, #7
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d005      	beq.n	8003fd0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	0010      	movs	r0, r2
 8003fcc:	4798      	blx	r3
    return;
 8003fce:	e0c3      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d10c      	bne.n	8003ff6 <HAL_SPI_IRQHandler+0x8e>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d106      	bne.n	8003ff6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	001a      	movs	r2, r3
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_SPI_IRQHandler+0x8e>
 8003ff4:	e0b0      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	d100      	bne.n	8004004 <HAL_SPI_IRQHandler+0x9c>
 8004002:	e0a9      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	001a      	movs	r2, r3
 800400a:	2301      	movs	r3, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d023      	beq.n	8004058 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2251      	movs	r2, #81	; 0x51
 8004014:	5c9b      	ldrb	r3, [r3, r2]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d011      	beq.n	8004040 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	2204      	movs	r2, #4
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	e00b      	b.n	8004058 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
        return;
 8004056:	e07f      	b.n	8004158 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	001a      	movs	r2, r3
 800405e:	2301      	movs	r3, #1
 8004060:	4013      	ands	r3, r2
 8004062:	d014      	beq.n	800408e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	2201      	movs	r2, #1
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	438a      	bics	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	001a      	movs	r2, r3
 8004094:	2301      	movs	r3, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d00c      	beq.n	80040b4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	2208      	movs	r2, #8
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d04c      	beq.n	8004156 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	21e0      	movs	r1, #224	; 0xe0
 80040c8:	438a      	bics	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2251      	movs	r2, #81	; 0x51
 80040d0:	2101      	movs	r1, #1
 80040d2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2202      	movs	r2, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d103      	bne.n	80040e4 <HAL_SPI_IRQHandler+0x17c>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2201      	movs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d032      	beq.n	800414a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2103      	movs	r1, #3
 80040f0:	438a      	bics	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <HAL_SPI_IRQHandler+0x1f8>)
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	0018      	movs	r0, r3
 800410a:	f7fe fa7e 	bl	800260a <HAL_DMA_Abort_IT>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d005      	beq.n	800411e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <HAL_SPI_IRQHandler+0x1f8>)
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	0018      	movs	r0, r3
 8004134:	f7fe fa69 	bl	800260a <HAL_DMA_Abort_IT>
 8004138:	1e03      	subs	r3, r0, #0
 800413a:	d00b      	beq.n	8004154 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004148:	e004      	b.n	8004154 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f811 	bl	8004174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004152:	e000      	b.n	8004156 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004154:	46c0      	nop			; (mov r8, r8)
    return;
 8004156:	46c0      	nop			; (mov r8, r8)
  }
}
 8004158:	46bd      	mov	sp, r7
 800415a:	b008      	add	sp, #32
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	08004185 	.word	0x08004185

08004164 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7ff ffe7 	bl	8004174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}

080041ae <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	001a      	movs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d110      	bne.n	800420c <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2160      	movs	r1, #96	; 0x60
 80041f6:	438a      	bics	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0018      	movs	r0, r3
 8004208:	f000 f96a 	bl	80044e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	7812      	ldrb	r2, [r2, #0]
 8004228:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	438a      	bics	r2, r1
 800425a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 f939 	bl	80044e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}

08004276 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	b292      	uxth	r2, r2
 800428a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d110      	bne.n	80042d0 <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	438a      	bics	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 f908 	bl	80044e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d110      	bne.n	8004330 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	438a      	bics	r2, r1
 800431c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f8d8 	bl	80044e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004348:	f7fe f868 	bl	800241c <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004358:	f7fe f860 	bl	800241c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	015b      	lsls	r3, r3, #5
 8004366:	0d1b      	lsrs	r3, r3, #20
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	4353      	muls	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	e058      	b.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	d055      	beq.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004376:	f7fe f851 	bl	800241c <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	429a      	cmp	r2, r3
 8004384:	d902      	bls.n	800438c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d142      	bne.n	8004412 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	21e0      	movs	r1, #224	; 0xe0
 8004398:	438a      	bics	r2, r1
 800439a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	2382      	movs	r3, #130	; 0x82
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d113      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d005      	beq.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2140      	movs	r1, #64	; 0x40
 80043cc:	438a      	bics	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	429a      	cmp	r2, r3
 80043da:	d110      	bne.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	491a      	ldr	r1, [pc, #104]	; (8004450 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	0189      	lsls	r1, r1, #6
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2251      	movs	r2, #81	; 0x51
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2250      	movs	r2, #80	; 0x50
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e017      	b.n	8004442 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3b01      	subs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	425a      	negs	r2, r3
 8004432:	4153      	adcs	r3, r2
 8004434:	b2db      	uxtb	r3, r3
 8004436:	001a      	movs	r2, r3
 8004438:	1dfb      	adds	r3, r7, #7
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d197      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b008      	add	sp, #32
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000000 	.word	0x20000000
 8004450:	ffffdfff 	.word	0xffffdfff

08004454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <SPI_EndRxTxTransaction+0x84>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	491d      	ldr	r1, [pc, #116]	; (80044dc <SPI_EndRxTxTransaction+0x88>)
 8004466:	0018      	movs	r0, r3
 8004468:	f7fb fe4e 	bl	8000108 <__udivsi3>
 800446c:	0003      	movs	r3, r0
 800446e:	001a      	movs	r2, r3
 8004470:	0013      	movs	r3, r2
 8004472:	015b      	lsls	r3, r3, #5
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	189b      	adds	r3, r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	2382      	movs	r3, #130	; 0x82
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	429a      	cmp	r2, r3
 8004488:	d112      	bne.n	80044b0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	0013      	movs	r3, r2
 8004494:	2200      	movs	r2, #0
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	f7ff ff4e 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d016      	beq.n	80044ce <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	2220      	movs	r2, #32
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e00f      	b.n	80044d0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d0f2      	beq.n	80044b0 <SPI_EndRxTxTransaction+0x5c>
 80044ca:	e000      	b.n	80044ce <SPI_EndRxTxTransaction+0x7a>
        break;
 80044cc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b006      	add	sp, #24
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000000 	.word	0x20000000
 80044dc:	016e3600 	.word	0x016e3600

080044e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <SPI_CloseRxTx_ISR+0xe8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4937      	ldr	r1, [pc, #220]	; (80045cc <SPI_CloseRxTx_ISR+0xec>)
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fb fe0a 	bl	8000108 <__udivsi3>
 80044f4:	0003      	movs	r3, r0
 80044f6:	001a      	movs	r2, r3
 80044f8:	2364      	movs	r3, #100	; 0x64
 80044fa:	4353      	muls	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044fe:	f7fd ff8d 	bl	800241c <HAL_GetTick>
 8004502:	0003      	movs	r3, r0
 8004504:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2120      	movs	r1, #32
 8004512:	438a      	bics	r2, r1
 8004514:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2220      	movs	r2, #32
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004528:	e008      	b.n	800453c <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3b01      	subs	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d0ec      	beq.n	8004516 <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2164      	movs	r1, #100	; 0x64
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff ff86 	bl	8004454 <SPI_EndRxTxTransaction>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d005      	beq.n	8004558 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2220      	movs	r2, #32
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	2b00      	cmp	r3, #0
 800457c:	d117      	bne.n	80045ae <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2251      	movs	r2, #81	; 0x51
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b04      	cmp	r3, #4
 8004588:	d108      	bne.n	800459c <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2251      	movs	r2, #81	; 0x51
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff fde5 	bl	8004164 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800459a:	e010      	b.n	80045be <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2251      	movs	r2, #81	; 0x51
 80045a0:	2101      	movs	r1, #1
 80045a2:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f002 fcfc 	bl	8006fa4 <HAL_SPI_TxRxCpltCallback>
}
 80045ac:	e007      	b.n	80045be <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2251      	movs	r2, #81	; 0x51
 80045b2:	2101      	movs	r1, #1
 80045b4:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff fddb 	bl	8004174 <HAL_SPI_ErrorCallback>
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b006      	add	sp, #24
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20000000 	.word	0x20000000
 80045cc:	00005dc0 	.word	0x00005dc0

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e032      	b.n	8004648 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2239      	movs	r2, #57	; 0x39
 80045e6:	5c9b      	ldrb	r3, [r3, r2]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2238      	movs	r2, #56	; 0x38
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f829 	bl	8004650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2239      	movs	r2, #57	; 0x39
 8004602:	2102      	movs	r1, #2
 8004604:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	0019      	movs	r1, r3
 8004610:	0010      	movs	r0, r2
 8004612:	f000 f971 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	223e      	movs	r2, #62	; 0x3e
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	223a      	movs	r2, #58	; 0x3a
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	223b      	movs	r2, #59	; 0x3b
 800462a:	2101      	movs	r1, #1
 800462c:	5499      	strb	r1, [r3, r2]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	223c      	movs	r2, #60	; 0x3c
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	223d      	movs	r2, #61	; 0x3d
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2239      	movs	r2, #57	; 0x39
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2239      	movs	r2, #57	; 0x39
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e031      	b.n	80046dc <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2239      	movs	r2, #57	; 0x39
 800467c:	2102      	movs	r1, #2
 800467e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	05db      	lsls	r3, r3, #23
 8004698:	429a      	cmp	r2, r3
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x46>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_TIM_Base_Start_IT+0x84>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2207      	movs	r2, #7
 80046ae:	4013      	ands	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d010      	beq.n	80046da <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2101      	movs	r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	e007      	b.n	80046da <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b004      	add	sp, #16
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40010800 	.word	0x40010800

080046e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d124      	bne.n	8004748 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	4013      	ands	r3, r2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d11d      	bne.n	8004748 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2203      	movs	r2, #3
 8004712:	4252      	negs	r2, r2
 8004714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2203      	movs	r2, #3
 8004724:	4013      	ands	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 f8cc 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 8004730:	e007      	b.n	8004742 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f8bf 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f8cb 	bl	80048d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2204      	movs	r2, #4
 8004750:	4013      	ands	r3, r2
 8004752:	2b04      	cmp	r3, #4
 8004754:	d125      	bne.n	80047a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2204      	movs	r2, #4
 800475e:	4013      	ands	r3, r2
 8004760:	2b04      	cmp	r3, #4
 8004762:	d11e      	bne.n	80047a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2205      	movs	r2, #5
 800476a:	4252      	negs	r2, r2
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	23c0      	movs	r3, #192	; 0xc0
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f89f 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 800478a:	e007      	b.n	800479c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f000 f892 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 f89e 	bl	80048d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2208      	movs	r2, #8
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d124      	bne.n	80047fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2208      	movs	r2, #8
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11d      	bne.n	80047fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2209      	movs	r2, #9
 80047c4:	4252      	negs	r2, r2
 80047c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2204      	movs	r2, #4
 80047cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	2203      	movs	r2, #3
 80047d6:	4013      	ands	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 f873 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 80047e2:	e007      	b.n	80047f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 f866 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 f872 	bl	80048d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2210      	movs	r2, #16
 8004802:	4013      	ands	r3, r2
 8004804:	2b10      	cmp	r3, #16
 8004806:	d125      	bne.n	8004854 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2210      	movs	r2, #16
 8004810:	4013      	ands	r3, r2
 8004812:	2b10      	cmp	r3, #16
 8004814:	d11e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2211      	movs	r2, #17
 800481c:	4252      	negs	r2, r2
 800481e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2208      	movs	r2, #8
 8004824:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	23c0      	movs	r3, #192	; 0xc0
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4013      	ands	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f846 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 800483c:	e007      	b.n	800484e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f839 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f000 f845 	bl	80048d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2201      	movs	r2, #1
 800485c:	4013      	ands	r3, r2
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10f      	bne.n	8004882 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	4013      	ands	r3, r2
 800486c:	2b01      	cmp	r3, #1
 800486e:	d108      	bne.n	8004882 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2202      	movs	r2, #2
 8004876:	4252      	negs	r2, r2
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f7fd fa9f 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	4013      	ands	r3, r2
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d10f      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2240      	movs	r2, #64	; 0x40
 8004898:	4013      	ands	r3, r2
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d108      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2241      	movs	r2, #65	; 0x41
 80048a4:	4252      	negs	r2, r2
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 f81c 	bl	80048e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	05db      	lsls	r3, r3, #23
 800490e:	429a      	cmp	r2, r3
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x22>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <TIM_Base_SetConfig+0x8c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2270      	movs	r2, #112	; 0x70
 800491e:	4393      	bics	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x46>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a12      	ldr	r2, [pc, #72]	; (8004984 <TIM_Base_SetConfig+0x8c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <TIM_Base_SetConfig+0x90>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	4393      	bics	r3, r2
 8004956:	001a      	movs	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	615a      	str	r2, [r3, #20]
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40010800 	.word	0x40010800
 8004988:	fffffcff 	.word	0xfffffcff

0800498c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e044      	b.n	8004a28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2278      	movs	r2, #120	; 0x78
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fd fc37 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2224      	movs	r2, #36	; 0x24
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2101      	movs	r1, #1
 80049c8:	438a      	bics	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fb2e 	bl	8005030 <UART_SetConfig>
 80049d4:	0003      	movs	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e024      	b.n	8004a28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 fd6b 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	490d      	ldr	r1, [pc, #52]	; (8004a30 <HAL_UART_Init+0xa4>)
 80049fa:	400a      	ands	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	212a      	movs	r1, #42	; 0x2a
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 fe03 	bl	800562c <UART_CheckIdleState>
 8004a26:	0003      	movs	r3, r0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	ffffb7ff 	.word	0xffffb7ff

08004a34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b0ab      	sub	sp, #172	; 0xac
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	22a4      	movs	r2, #164	; 0xa4
 8004a44:	18b9      	adds	r1, r7, r2
 8004a46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	20a0      	movs	r0, #160	; 0xa0
 8004a50:	1839      	adds	r1, r7, r0
 8004a52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	219c      	movs	r1, #156	; 0x9c
 8004a5c:	1879      	adds	r1, r7, r1
 8004a5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a60:	0011      	movs	r1, r2
 8004a62:	18bb      	adds	r3, r7, r2
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a99      	ldr	r2, [pc, #612]	; (8004ccc <HAL_UART_IRQHandler+0x298>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2298      	movs	r2, #152	; 0x98
 8004a6c:	18bc      	adds	r4, r7, r2
 8004a6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a70:	18bb      	adds	r3, r7, r2
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d114      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2220      	movs	r2, #32
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d100      	bne.n	8004a96 <HAL_UART_IRQHandler+0x62>
 8004a94:	e2a0      	b.n	8004fd8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	4798      	blx	r3
      }
      return;
 8004aa0:	e29a      	b.n	8004fd8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aa2:	2398      	movs	r3, #152	; 0x98
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d100      	bne.n	8004aae <HAL_UART_IRQHandler+0x7a>
 8004aac:	e114      	b.n	8004cd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004aae:	239c      	movs	r3, #156	; 0x9c
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004aba:	23a0      	movs	r3, #160	; 0xa0
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a83      	ldr	r2, [pc, #524]	; (8004cd0 <HAL_UART_IRQHandler+0x29c>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d100      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x94>
 8004ac6:	e107      	b.n	8004cd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ac8:	23a4      	movs	r3, #164	; 0xa4
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d012      	beq.n	8004afa <HAL_UART_IRQHandler+0xc6>
 8004ad4:	23a0      	movs	r3, #160	; 0xa0
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	; 0x84
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2201      	movs	r2, #1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2184      	movs	r1, #132	; 0x84
 8004af8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afa:	23a4      	movs	r3, #164	; 0xa4
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2202      	movs	r2, #2
 8004b02:	4013      	ands	r3, r2
 8004b04:	d011      	beq.n	8004b2a <HAL_UART_IRQHandler+0xf6>
 8004b06:	239c      	movs	r3, #156	; 0x9c
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2284      	movs	r2, #132	; 0x84
 8004b1e:	589b      	ldr	r3, [r3, r2]
 8004b20:	2204      	movs	r2, #4
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2184      	movs	r1, #132	; 0x84
 8004b28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b2a:	23a4      	movs	r3, #164	; 0xa4
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2204      	movs	r2, #4
 8004b32:	4013      	ands	r3, r2
 8004b34:	d011      	beq.n	8004b5a <HAL_UART_IRQHandler+0x126>
 8004b36:	239c      	movs	r3, #156	; 0x9c
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2284      	movs	r2, #132	; 0x84
 8004b4e:	589b      	ldr	r3, [r3, r2]
 8004b50:	2202      	movs	r2, #2
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2184      	movs	r1, #132	; 0x84
 8004b58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b5a:	23a4      	movs	r3, #164	; 0xa4
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	4013      	ands	r3, r2
 8004b64:	d017      	beq.n	8004b96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b66:	23a0      	movs	r3, #160	; 0xa0
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d105      	bne.n	8004b7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b72:	239c      	movs	r3, #156	; 0x9c
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2208      	movs	r2, #8
 8004b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2284      	movs	r2, #132	; 0x84
 8004b8a:	589b      	ldr	r3, [r3, r2]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2184      	movs	r1, #132	; 0x84
 8004b94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b96:	23a4      	movs	r3, #164	; 0xa4
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_UART_IRQHandler+0x198>
 8004ba4:	23a0      	movs	r3, #160	; 0xa0
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	04db      	lsls	r3, r3, #19
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d00c      	beq.n	8004bcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	589b      	ldr	r3, [r3, r2]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2184      	movs	r1, #132	; 0x84
 8004bca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2284      	movs	r2, #132	; 0x84
 8004bd0:	589b      	ldr	r3, [r3, r2]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d100      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x1a4>
 8004bd6:	e201      	b.n	8004fdc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bd8:	23a4      	movs	r3, #164	; 0xa4
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2220      	movs	r2, #32
 8004be0:	4013      	ands	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004be4:	23a0      	movs	r3, #160	; 0xa0
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	4013      	ands	r3, r2
 8004bee:	d008      	beq.n	8004c02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	0010      	movs	r0, r2
 8004c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2284      	movs	r2, #132	; 0x84
 8004c06:	589b      	ldr	r3, [r3, r2]
 8004c08:	2194      	movs	r1, #148	; 0x94
 8004c0a:	187a      	adds	r2, r7, r1
 8004c0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2240      	movs	r2, #64	; 0x40
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d004      	beq.n	8004c26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2228      	movs	r2, #40	; 0x28
 8004c22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c24:	d047      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 fe11 	bl	8005850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2240      	movs	r2, #64	; 0x40
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d137      	bne.n	8004cac <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c44:	2090      	movs	r0, #144	; 0x90
 8004c46:	183a      	adds	r2, r7, r0
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	438a      	bics	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	183b      	adds	r3, r7, r0
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_UART_IRQHandler+0x2a0>)
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fd fcbe 	bl	800260a <HAL_DMA_Abort_IT>
 8004c8e:	1e03      	subs	r3, r0, #0
 8004c90:	d01a      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e012      	b.n	8004cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f000 f9af 	bl	8005008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004caa:	e00d      	b.n	8004cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 f9aa 	bl	8005008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e008      	b.n	8004cc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 f9a5 	bl	8005008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2284      	movs	r2, #132	; 0x84
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004cc6:	e189      	b.n	8004fdc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	46c0      	nop			; (mov r8, r8)
    return;
 8004cca:	e187      	b.n	8004fdc <HAL_UART_IRQHandler+0x5a8>
 8004ccc:	0000080f 	.word	0x0000080f
 8004cd0:	04000120 	.word	0x04000120
 8004cd4:	08005919 	.word	0x08005919

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d000      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x2ae>
 8004ce0:	e13b      	b.n	8004f5a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce2:	23a4      	movs	r3, #164	; 0xa4
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	4013      	ands	r3, r2
 8004cec:	d100      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x2bc>
 8004cee:	e134      	b.n	8004f5a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cf0:	23a0      	movs	r3, #160	; 0xa0
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <HAL_UART_IRQHandler+0x2ca>
 8004cfc:	e12d      	b.n	8004f5a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2210      	movs	r2, #16
 8004d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2240      	movs	r2, #64	; 0x40
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d000      	beq.n	8004d16 <HAL_UART_IRQHandler+0x2e2>
 8004d14:	e0a1      	b.n	8004e5a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	217e      	movs	r1, #126	; 0x7e
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d100      	bne.n	8004d2e <HAL_UART_IRQHandler+0x2fa>
 8004d2c:	e158      	b.n	8004fe0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2258      	movs	r2, #88	; 0x58
 8004d32:	5a9b      	ldrh	r3, [r3, r2]
 8004d34:	187a      	adds	r2, r7, r1
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d300      	bcc.n	8004d3e <HAL_UART_IRQHandler+0x30a>
 8004d3c:	e150      	b.n	8004fe0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	215a      	movs	r1, #90	; 0x5a
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	4013      	ands	r3, r2
 8004d54:	d16f      	bne.n	8004e36 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d56:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d60:	2301      	movs	r3, #1
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	f383 8810 	msr	PRIMASK, r3
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	499e      	ldr	r1, [pc, #632]	; (8004ff0 <HAL_UART_IRQHandler+0x5bc>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f383 8810 	msr	PRIMASK, r3
}
 8004d86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d88:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	677b      	str	r3, [r7, #116]	; 0x74
 8004d92:	2301      	movs	r3, #1
 8004d94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d98:	f383 8810 	msr	PRIMASK, r3
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	438a      	bics	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db4:	f383 8810 	msr	PRIMASK, r3
}
 8004db8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dba:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2140      	movs	r1, #64	; 0x40
 8004ddc:	438a      	bics	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de6:	f383 8810 	msr	PRIMASK, r3
}
 8004dea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	2120      	movs	r1, #32
 8004df2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e04:	2301      	movs	r3, #1
 8004e06:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2110      	movs	r1, #16
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e22:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7fd fbaa 	bl	800258a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2258      	movs	r2, #88	; 0x58
 8004e40:	5a9a      	ldrh	r2, [r3, r2]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	215a      	movs	r1, #90	; 0x5a
 8004e46:	5a5b      	ldrh	r3, [r3, r1]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0011      	movs	r1, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f8e0 	bl	8005018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e58:	e0c2      	b.n	8004fe0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2258      	movs	r2, #88	; 0x58
 8004e5e:	5a99      	ldrh	r1, [r3, r2]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	225a      	movs	r2, #90	; 0x5a
 8004e64:	5a9b      	ldrh	r3, [r3, r2]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	208e      	movs	r0, #142	; 0x8e
 8004e6a:	183b      	adds	r3, r7, r0
 8004e6c:	1a8a      	subs	r2, r1, r2
 8004e6e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	225a      	movs	r2, #90	; 0x5a
 8004e74:	5a9b      	ldrh	r3, [r3, r2]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d100      	bne.n	8004e7e <HAL_UART_IRQHandler+0x44a>
 8004e7c:	e0b2      	b.n	8004fe4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d100      	bne.n	8004e88 <HAL_UART_IRQHandler+0x454>
 8004e86:	e0ad      	b.n	8004fe4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e90:	2488      	movs	r4, #136	; 0x88
 8004e92:	193a      	adds	r2, r7, r4
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	2301      	movs	r3, #1
 8004e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4951      	ldr	r1, [pc, #324]	; (8004ff4 <HAL_UART_IRQHandler+0x5c0>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f383 8810 	msr	PRIMASK, r3
}
 8004ebe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ec6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	2484      	movs	r4, #132	; 0x84
 8004eca:	193a      	adds	r2, r7, r4
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	193b      	adds	r3, r7, r4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	2120      	movs	r1, #32
 8004efe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f14:	2480      	movs	r4, #128	; 0x80
 8004f16:	193a      	adds	r2, r7, r4
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f383 8810 	msr	PRIMASK, r3
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2110      	movs	r1, #16
 8004f32:	438a      	bics	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	193b      	adds	r3, r7, r4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	f383 8810 	msr	PRIMASK, r3
}
 8004f42:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f4a:	183b      	adds	r3, r7, r0
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0011      	movs	r1, r2
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f860 	bl	8005018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f58:	e044      	b.n	8004fe4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f5a:	23a4      	movs	r3, #164	; 0xa4
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	035b      	lsls	r3, r3, #13
 8004f64:	4013      	ands	r3, r2
 8004f66:	d010      	beq.n	8004f8a <HAL_UART_IRQHandler+0x556>
 8004f68:	239c      	movs	r3, #156	; 0x9c
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	03db      	lsls	r3, r3, #15
 8004f72:	4013      	ands	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	0352      	lsls	r2, r2, #13
 8004f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 fd0a 	bl	800599c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f88:	e02f      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f8a:	23a4      	movs	r3, #164	; 0xa4
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	4013      	ands	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f96:	23a0      	movs	r3, #160	; 0xa0
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2280      	movs	r2, #128	; 0x80
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01e      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	4798      	blx	r3
    }
    return;
 8004fb4:	e018      	b.n	8004fe8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fb6:	23a4      	movs	r3, #164	; 0xa4
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2240      	movs	r2, #64	; 0x40
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_UART_IRQHandler+0x5b6>
 8004fc2:	23a0      	movs	r3, #160	; 0xa0
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2240      	movs	r2, #64	; 0x40
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00d      	beq.n	8004fea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fcb8 	bl	8005946 <UART_EndTransmit_IT>
    return;
 8004fd6:	e008      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	e006      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
    return;
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	e004      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	e002      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
      return;
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	e000      	b.n	8004fea <HAL_UART_IRQHandler+0x5b6>
    return;
 8004fe8:	46c0      	nop			; (mov r8, r8)
  }

}
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b02b      	add	sp, #172	; 0xac
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	fffffeff 	.word	0xfffffeff
 8004ff4:	fffffedf 	.word	0xfffffedf

08004ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	000a      	movs	r2, r1
 8005022:	1cbb      	adds	r3, r7, #2
 8005024:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b002      	add	sp, #8
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b08e      	sub	sp, #56	; 0x38
 8005034:	af00      	add	r7, sp, #0
 8005036:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005038:	231a      	movs	r3, #26
 800503a:	2218      	movs	r2, #24
 800503c:	189b      	adds	r3, r3, r2
 800503e:	19db      	adds	r3, r3, r7
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	431a      	orrs	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	4313      	orrs	r3, r2
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4ab4      	ldr	r2, [pc, #720]	; (8005334 <UART_SetConfig+0x304>)
 8005064:	4013      	ands	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4aaf      	ldr	r2, [pc, #700]	; (8005338 <UART_SetConfig+0x308>)
 800507a:	4013      	ands	r3, r2
 800507c:	0019      	movs	r1, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4aa9      	ldr	r2, [pc, #676]	; (800533c <UART_SetConfig+0x30c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a0:	4313      	orrs	r3, r2
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4aa5      	ldr	r2, [pc, #660]	; (8005340 <UART_SetConfig+0x310>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4aa1      	ldr	r2, [pc, #644]	; (8005344 <UART_SetConfig+0x314>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d131      	bne.n	8005128 <UART_SetConfig+0xf8>
 80050c4:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <UART_SetConfig+0x318>)
 80050c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c8:	220c      	movs	r2, #12
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d01d      	beq.n	800510c <UART_SetConfig+0xdc>
 80050d0:	d823      	bhi.n	800511a <UART_SetConfig+0xea>
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d00c      	beq.n	80050f0 <UART_SetConfig+0xc0>
 80050d6:	d820      	bhi.n	800511a <UART_SetConfig+0xea>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <UART_SetConfig+0xb2>
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d00e      	beq.n	80050fe <UART_SetConfig+0xce>
 80050e0:	e01b      	b.n	800511a <UART_SetConfig+0xea>
 80050e2:	231b      	movs	r3, #27
 80050e4:	2218      	movs	r2, #24
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	19db      	adds	r3, r3, r7
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e065      	b.n	80051bc <UART_SetConfig+0x18c>
 80050f0:	231b      	movs	r3, #27
 80050f2:	2218      	movs	r2, #24
 80050f4:	189b      	adds	r3, r3, r2
 80050f6:	19db      	adds	r3, r3, r7
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e05e      	b.n	80051bc <UART_SetConfig+0x18c>
 80050fe:	231b      	movs	r3, #27
 8005100:	2218      	movs	r2, #24
 8005102:	189b      	adds	r3, r3, r2
 8005104:	19db      	adds	r3, r3, r7
 8005106:	2204      	movs	r2, #4
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e057      	b.n	80051bc <UART_SetConfig+0x18c>
 800510c:	231b      	movs	r3, #27
 800510e:	2218      	movs	r2, #24
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2208      	movs	r2, #8
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e050      	b.n	80051bc <UART_SetConfig+0x18c>
 800511a:	231b      	movs	r3, #27
 800511c:	2218      	movs	r2, #24
 800511e:	189b      	adds	r3, r3, r2
 8005120:	19db      	adds	r3, r3, r7
 8005122:	2210      	movs	r2, #16
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e049      	b.n	80051bc <UART_SetConfig+0x18c>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a83      	ldr	r2, [pc, #524]	; (800533c <UART_SetConfig+0x30c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d13e      	bne.n	80051b0 <UART_SetConfig+0x180>
 8005132:	4b85      	ldr	r3, [pc, #532]	; (8005348 <UART_SetConfig+0x318>)
 8005134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005136:	23c0      	movs	r3, #192	; 0xc0
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4013      	ands	r3, r2
 800513c:	22c0      	movs	r2, #192	; 0xc0
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	4293      	cmp	r3, r2
 8005142:	d027      	beq.n	8005194 <UART_SetConfig+0x164>
 8005144:	22c0      	movs	r2, #192	; 0xc0
 8005146:	0112      	lsls	r2, r2, #4
 8005148:	4293      	cmp	r3, r2
 800514a:	d82a      	bhi.n	80051a2 <UART_SetConfig+0x172>
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	4293      	cmp	r3, r2
 8005152:	d011      	beq.n	8005178 <UART_SetConfig+0x148>
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	4293      	cmp	r3, r2
 800515a:	d822      	bhi.n	80051a2 <UART_SetConfig+0x172>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <UART_SetConfig+0x13a>
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	00d2      	lsls	r2, r2, #3
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <UART_SetConfig+0x156>
 8005168:	e01b      	b.n	80051a2 <UART_SetConfig+0x172>
 800516a:	231b      	movs	r3, #27
 800516c:	2218      	movs	r2, #24
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e021      	b.n	80051bc <UART_SetConfig+0x18c>
 8005178:	231b      	movs	r3, #27
 800517a:	2218      	movs	r2, #24
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2202      	movs	r2, #2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e01a      	b.n	80051bc <UART_SetConfig+0x18c>
 8005186:	231b      	movs	r3, #27
 8005188:	2218      	movs	r2, #24
 800518a:	189b      	adds	r3, r3, r2
 800518c:	19db      	adds	r3, r3, r7
 800518e:	2204      	movs	r2, #4
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	e013      	b.n	80051bc <UART_SetConfig+0x18c>
 8005194:	231b      	movs	r3, #27
 8005196:	2218      	movs	r2, #24
 8005198:	189b      	adds	r3, r3, r2
 800519a:	19db      	adds	r3, r3, r7
 800519c:	2208      	movs	r2, #8
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e00c      	b.n	80051bc <UART_SetConfig+0x18c>
 80051a2:	231b      	movs	r3, #27
 80051a4:	2218      	movs	r2, #24
 80051a6:	189b      	adds	r3, r3, r2
 80051a8:	19db      	adds	r3, r3, r7
 80051aa:	2210      	movs	r2, #16
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e005      	b.n	80051bc <UART_SetConfig+0x18c>
 80051b0:	231b      	movs	r3, #27
 80051b2:	2218      	movs	r2, #24
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	2210      	movs	r2, #16
 80051ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5e      	ldr	r2, [pc, #376]	; (800533c <UART_SetConfig+0x30c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d000      	beq.n	80051c8 <UART_SetConfig+0x198>
 80051c6:	e084      	b.n	80052d2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c8:	231b      	movs	r3, #27
 80051ca:	2218      	movs	r2, #24
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d01d      	beq.n	8005212 <UART_SetConfig+0x1e2>
 80051d6:	dc20      	bgt.n	800521a <UART_SetConfig+0x1ea>
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d015      	beq.n	8005208 <UART_SetConfig+0x1d8>
 80051dc:	dc1d      	bgt.n	800521a <UART_SetConfig+0x1ea>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <UART_SetConfig+0x1b8>
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d005      	beq.n	80051f2 <UART_SetConfig+0x1c2>
 80051e6:	e018      	b.n	800521a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe f972 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80051ec:	0003      	movs	r3, r0
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051f0:	e01c      	b.n	800522c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f2:	4b55      	ldr	r3, [pc, #340]	; (8005348 <UART_SetConfig+0x318>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2210      	movs	r2, #16
 80051f8:	4013      	ands	r3, r2
 80051fa:	d002      	beq.n	8005202 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051fc:	4b53      	ldr	r3, [pc, #332]	; (800534c <UART_SetConfig+0x31c>)
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005200:	e014      	b.n	800522c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005202:	4b53      	ldr	r3, [pc, #332]	; (8005350 <UART_SetConfig+0x320>)
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005206:	e011      	b.n	800522c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005208:	f7fe f8b2 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800520c:	0003      	movs	r3, r0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800521e:	231a      	movs	r3, #26
 8005220:	2218      	movs	r2, #24
 8005222:	189b      	adds	r3, r3, r2
 8005224:	19db      	adds	r3, r3, r7
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
        break;
 800522a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d100      	bne.n	8005234 <UART_SetConfig+0x204>
 8005232:	e12f      	b.n	8005494 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	0013      	movs	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	189b      	adds	r3, r3, r2
 800523e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005240:	429a      	cmp	r2, r3
 8005242:	d305      	bcc.n	8005250 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800524a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d906      	bls.n	800525e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005250:	231a      	movs	r3, #26
 8005252:	2218      	movs	r2, #24
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e11a      	b.n	8005494 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	6939      	ldr	r1, [r7, #16]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	000b      	movs	r3, r1
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	0010      	movs	r0, r2
 8005270:	0205      	lsls	r5, r0, #8
 8005272:	431d      	orrs	r5, r3
 8005274:	000b      	movs	r3, r1
 8005276:	021c      	lsls	r4, r3, #8
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68b8      	ldr	r0, [r7, #8]
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	1900      	adds	r0, r0, r4
 800528a:	4169      	adcs	r1, r5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f7fa ffc1 	bl	8000220 <__aeabi_uldivmod>
 800529e:	0002      	movs	r2, r0
 80052a0:	000b      	movs	r3, r1
 80052a2:	0013      	movs	r3, r2
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	23c0      	movs	r3, #192	; 0xc0
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d309      	bcc.n	80052c4 <UART_SetConfig+0x294>
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	035b      	lsls	r3, r3, #13
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d204      	bcs.n	80052c4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e0e7      	b.n	8005494 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80052c4:	231a      	movs	r3, #26
 80052c6:	2218      	movs	r2, #24
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e0e0      	b.n	8005494 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	429a      	cmp	r2, r3
 80052dc:	d000      	beq.n	80052e0 <UART_SetConfig+0x2b0>
 80052de:	e082      	b.n	80053e6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80052e0:	231b      	movs	r3, #27
 80052e2:	2218      	movs	r2, #24
 80052e4:	189b      	adds	r3, r3, r2
 80052e6:	19db      	adds	r3, r3, r7
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d834      	bhi.n	8005358 <UART_SetConfig+0x328>
 80052ee:	009a      	lsls	r2, r3, #2
 80052f0:	4b18      	ldr	r3, [pc, #96]	; (8005354 <UART_SetConfig+0x324>)
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe f8ea 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80052fc:	0003      	movs	r3, r0
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005300:	e033      	b.n	800536a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005302:	f7fe f8fb 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8005306:	0003      	movs	r3, r0
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800530a:	e02e      	b.n	800536a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530c:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <UART_SetConfig+0x318>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2210      	movs	r2, #16
 8005312:	4013      	ands	r3, r2
 8005314:	d002      	beq.n	800531c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <UART_SetConfig+0x31c>)
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800531a:	e026      	b.n	800536a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <UART_SetConfig+0x320>)
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005320:	e023      	b.n	800536a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fe f825 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8005326:	0003      	movs	r3, r0
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800532a:	e01e      	b.n	800536a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005332:	e01a      	b.n	800536a <UART_SetConfig+0x33a>
 8005334:	efff69f3 	.word	0xefff69f3
 8005338:	ffffcfff 	.word	0xffffcfff
 800533c:	40004800 	.word	0x40004800
 8005340:	fffff4ff 	.word	0xfffff4ff
 8005344:	40004400 	.word	0x40004400
 8005348:	40021000 	.word	0x40021000
 800534c:	003d0900 	.word	0x003d0900
 8005350:	00f42400 	.word	0x00f42400
 8005354:	08007844 	.word	0x08007844
      default:
        pclk = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800535c:	231a      	movs	r3, #26
 800535e:	2218      	movs	r2, #24
 8005360:	189b      	adds	r3, r3, r2
 8005362:	19db      	adds	r3, r3, r7
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
        break;
 8005368:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d100      	bne.n	8005372 <UART_SetConfig+0x342>
 8005370:	e090      	b.n	8005494 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	005a      	lsls	r2, r3, #1
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	18d2      	adds	r2, r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	0019      	movs	r1, r3
 8005384:	0010      	movs	r0, r2
 8005386:	f7fa febf 	bl	8000108 <__udivsi3>
 800538a:	0003      	movs	r3, r0
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d921      	bls.n	80053d8 <UART_SetConfig+0x3a8>
 8005394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	429a      	cmp	r2, r3
 800539c:	d21c      	bcs.n	80053d8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	200e      	movs	r0, #14
 80053a4:	2418      	movs	r4, #24
 80053a6:	1903      	adds	r3, r0, r4
 80053a8:	19db      	adds	r3, r3, r7
 80053aa:	210f      	movs	r1, #15
 80053ac:	438a      	bics	r2, r1
 80053ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2207      	movs	r2, #7
 80053b8:	4013      	ands	r3, r2
 80053ba:	b299      	uxth	r1, r3
 80053bc:	1903      	adds	r3, r0, r4
 80053be:	19db      	adds	r3, r3, r7
 80053c0:	1902      	adds	r2, r0, r4
 80053c2:	19d2      	adds	r2, r2, r7
 80053c4:	8812      	ldrh	r2, [r2, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1902      	adds	r2, r0, r4
 80053d0:	19d2      	adds	r2, r2, r7
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e05d      	b.n	8005494 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80053d8:	231a      	movs	r3, #26
 80053da:	2218      	movs	r2, #24
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	19db      	adds	r3, r3, r7
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e056      	b.n	8005494 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e6:	231b      	movs	r3, #27
 80053e8:	2218      	movs	r2, #24
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	19db      	adds	r3, r3, r7
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d822      	bhi.n	800543a <UART_SetConfig+0x40a>
 80053f4:	009a      	lsls	r2, r3, #2
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <UART_SetConfig+0x484>)
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fe:	f7fe f867 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8005402:	0003      	movs	r3, r0
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005406:	e021      	b.n	800544c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005408:	f7fe f878 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 800540c:	0003      	movs	r3, r0
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005410:	e01c      	b.n	800544c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005412:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <UART_SetConfig+0x488>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	4013      	ands	r3, r2
 800541a:	d002      	beq.n	8005422 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <UART_SetConfig+0x48c>)
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005420:	e014      	b.n	800544c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005422:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <UART_SetConfig+0x490>)
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005426:	e011      	b.n	800544c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005428:	f7fd ffa2 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800542c:	0003      	movs	r3, r0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005430:	e00c      	b.n	800544c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005438:	e008      	b.n	800544c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800543e:	231a      	movs	r3, #26
 8005440:	2218      	movs	r2, #24
 8005442:	189b      	adds	r3, r3, r2
 8005444:	19db      	adds	r3, r3, r7
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
        break;
 800544a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d020      	beq.n	8005494 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	085a      	lsrs	r2, r3, #1
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	18d2      	adds	r2, r2, r3
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0019      	movs	r1, r3
 8005462:	0010      	movs	r0, r2
 8005464:	f7fa fe50 	bl	8000108 <__udivsi3>
 8005468:	0003      	movs	r3, r0
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	2b0f      	cmp	r3, #15
 8005470:	d90a      	bls.n	8005488 <UART_SetConfig+0x458>
 8005472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	025b      	lsls	r3, r3, #9
 8005478:	429a      	cmp	r2, r3
 800547a:	d205      	bcs.n	8005488 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	b29a      	uxth	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e005      	b.n	8005494 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005488:	231a      	movs	r3, #26
 800548a:	2218      	movs	r2, #24
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2200      	movs	r2, #0
 800549e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80054a0:	231a      	movs	r3, #26
 80054a2:	2218      	movs	r2, #24
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	19db      	adds	r3, r3, r7
 80054a8:	781b      	ldrb	r3, [r3, #0]
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b00e      	add	sp, #56	; 0x38
 80054b0:	bdb0      	pop	{r4, r5, r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	08007868 	.word	0x08007868
 80054b8:	40021000 	.word	0x40021000
 80054bc:	003d0900 	.word	0x003d0900
 80054c0:	00f42400 	.word	0x00f42400

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2201      	movs	r2, #1
 80054d2:	4013      	ands	r3, r2
 80054d4:	d00b      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a4a      	ldr	r2, [pc, #296]	; (8005608 <UART_AdvFeatureConfig+0x144>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2202      	movs	r2, #2
 80054f4:	4013      	ands	r3, r2
 80054f6:	d00b      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4a43      	ldr	r2, [pc, #268]	; (800560c <UART_AdvFeatureConfig+0x148>)
 8005500:	4013      	ands	r3, r2
 8005502:	0019      	movs	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2204      	movs	r2, #4
 8005516:	4013      	ands	r3, r2
 8005518:	d00b      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a3b      	ldr	r2, [pc, #236]	; (8005610 <UART_AdvFeatureConfig+0x14c>)
 8005522:	4013      	ands	r3, r2
 8005524:	0019      	movs	r1, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2208      	movs	r2, #8
 8005538:	4013      	ands	r3, r2
 800553a:	d00b      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4a34      	ldr	r2, [pc, #208]	; (8005614 <UART_AdvFeatureConfig+0x150>)
 8005544:	4013      	ands	r3, r2
 8005546:	0019      	movs	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2210      	movs	r2, #16
 800555a:	4013      	ands	r3, r2
 800555c:	d00b      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <UART_AdvFeatureConfig+0x154>)
 8005566:	4013      	ands	r3, r2
 8005568:	0019      	movs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2220      	movs	r2, #32
 800557c:	4013      	ands	r3, r2
 800557e:	d00b      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <UART_AdvFeatureConfig+0x158>)
 8005588:	4013      	ands	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2240      	movs	r2, #64	; 0x40
 800559e:	4013      	ands	r3, r2
 80055a0:	d01d      	beq.n	80055de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <UART_AdvFeatureConfig+0x15c>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	0019      	movs	r1, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	035b      	lsls	r3, r3, #13
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10b      	bne.n	80055de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <UART_AdvFeatureConfig+0x160>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	0019      	movs	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	4013      	ands	r3, r2
 80055e6:	d00b      	beq.n	8005600 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <UART_AdvFeatureConfig+0x164>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	0019      	movs	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}
 8005608:	fffdffff 	.word	0xfffdffff
 800560c:	fffeffff 	.word	0xfffeffff
 8005610:	fffbffff 	.word	0xfffbffff
 8005614:	ffff7fff 	.word	0xffff7fff
 8005618:	ffffefff 	.word	0xffffefff
 800561c:	ffffdfff 	.word	0xffffdfff
 8005620:	ffefffff 	.word	0xffefffff
 8005624:	ff9fffff 	.word	0xff9fffff
 8005628:	fff7ffff 	.word	0xfff7ffff

0800562c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b092      	sub	sp, #72	; 0x48
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2284      	movs	r2, #132	; 0x84
 8005638:	2100      	movs	r1, #0
 800563a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800563c:	f7fc feee 	bl	800241c <HAL_GetTick>
 8005640:	0003      	movs	r3, r0
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2208      	movs	r2, #8
 800564c:	4013      	ands	r3, r2
 800564e:	2b08      	cmp	r3, #8
 8005650:	d12c      	bne.n	80056ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	0391      	lsls	r1, r2, #14
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4a46      	ldr	r2, [pc, #280]	; (8005774 <UART_CheckIdleState+0x148>)
 800565c:	9200      	str	r2, [sp, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	f000 f88c 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d021      	beq.n	80056ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005668:	f3ef 8310 	mrs	r3, PRIMASK
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38
 8005672:	2301      	movs	r3, #1
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	f383 8810 	msr	PRIMASK, r3
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	438a      	bics	r2, r1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	f383 8810 	msr	PRIMASK, r3
}
 8005698:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2278      	movs	r2, #120	; 0x78
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e05f      	b.n	800576c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d146      	bne.n	8005748 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	2280      	movs	r2, #128	; 0x80
 80056be:	03d1      	lsls	r1, r2, #15
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	; (8005774 <UART_CheckIdleState+0x148>)
 80056c4:	9200      	str	r2, [sp, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f000 f858 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d03b      	beq.n	8005748 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80056d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	2301      	movs	r3, #1
 80056dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f383 8810 	msr	PRIMASK, r3
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4921      	ldr	r1, [pc, #132]	; (8005778 <UART_CheckIdleState+0x14c>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	61bb      	str	r3, [r7, #24]
  return(result);
 8005708:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
 800570c:	2301      	movs	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2101      	movs	r1, #1
 8005724:	438a      	bics	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	2120      	movs	r1, #32
 800573a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2278      	movs	r2, #120	; 0x78
 8005740:	2100      	movs	r1, #0
 8005742:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e011      	b.n	800576c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2280      	movs	r2, #128	; 0x80
 8005752:	2120      	movs	r1, #32
 8005754:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2278      	movs	r2, #120	; 0x78
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b010      	add	sp, #64	; 0x40
 8005772:	bd80      	pop	{r7, pc}
 8005774:	01ffffff 	.word	0x01ffffff
 8005778:	fffffedf 	.word	0xfffffedf

0800577c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	1dfb      	adds	r3, r7, #7
 800578a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	e04b      	b.n	8005826 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	3301      	adds	r3, #1
 8005792:	d048      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005794:	f7fc fe42 	bl	800241c <HAL_GetTick>
 8005798:	0002      	movs	r2, r0
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e04b      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2204      	movs	r2, #4
 80057b6:	4013      	ands	r3, r2
 80057b8:	d035      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2208      	movs	r2, #8
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d111      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2208      	movs	r2, #8
 80057ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 f83c 	bl	8005850 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2284      	movs	r2, #132	; 0x84
 80057dc:	2108      	movs	r1, #8
 80057de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2278      	movs	r2, #120	; 0x78
 80057e4:	2100      	movs	r1, #0
 80057e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e02c      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	401a      	ands	r2, r3
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d112      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2280      	movs	r2, #128	; 0x80
 8005806:	0112      	lsls	r2, r2, #4
 8005808:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 f81f 	bl	8005850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2284      	movs	r2, #132	; 0x84
 8005816:	2120      	movs	r1, #32
 8005818:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2278      	movs	r2, #120	; 0x78
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e00f      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	425a      	negs	r2, r3
 8005836:	4153      	adcs	r3, r2
 8005838:	b2db      	uxtb	r3, r3
 800583a:	001a      	movs	r2, r3
 800583c:	1dfb      	adds	r3, r7, #7
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d0a4      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	0018      	movs	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	b004      	add	sp, #16
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005858:	f3ef 8310 	mrs	r3, PRIMASK
 800585c:	617b      	str	r3, [r7, #20]
  return(result);
 800585e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f383 8810 	msr	PRIMASK, r3
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4926      	ldr	r1, [pc, #152]	; (8005914 <UART_EndRxTransfer+0xc4>)
 800587a:	400a      	ands	r2, r1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f383 8810 	msr	PRIMASK, r3
}
 8005888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588a:	f3ef 8310 	mrs	r3, PRIMASK
 800588e:	623b      	str	r3, [r7, #32]
  return(result);
 8005890:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
 8005894:	2301      	movs	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f383 8810 	msr	PRIMASK, r3
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2101      	movs	r1, #1
 80058ac:	438a      	bics	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	f383 8810 	msr	PRIMASK, r3
}
 80058ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d118      	bne.n	80058f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c4:	f3ef 8310 	mrs	r3, PRIMASK
 80058c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ce:	2301      	movs	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f383 8810 	msr	PRIMASK, r3
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2110      	movs	r1, #16
 80058e6:	438a      	bics	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f383 8810 	msr	PRIMASK, r3
}
 80058f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	669a      	str	r2, [r3, #104]	; 0x68
}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	46bd      	mov	sp, r7
 800590e:	b00e      	add	sp, #56	; 0x38
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	fffffedf 	.word	0xfffffedf

08005918 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	225a      	movs	r2, #90	; 0x5a
 800592a:	2100      	movs	r1, #0
 800592c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2252      	movs	r2, #82	; 0x52
 8005932:	2100      	movs	r1, #0
 8005934:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0018      	movs	r0, r3
 800593a:	f7ff fb65 	bl	8005008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	60bb      	str	r3, [r7, #8]
  return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	2301      	movs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f383 8810 	msr	PRIMASK, r3
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2140      	movs	r1, #64	; 0x40
 8005970:	438a      	bics	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0018      	movs	r0, r3
 8005990:	f7ff fb32 	bl	8004ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b006      	add	sp, #24
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	0002      	movs	r2, r0
 80059b4:	1dbb      	adds	r3, r7, #6
 80059b6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059bc:	1dbb      	adds	r3, r7, #6
 80059be:	2200      	movs	r2, #0
 80059c0:	5e9b      	ldrsh	r3, [r3, r2]
 80059c2:	2b84      	cmp	r3, #132	; 0x84
 80059c4:	d006      	beq.n	80059d4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80059c6:	1dbb      	adds	r3, r7, #6
 80059c8:	2200      	movs	r2, #0
 80059ca:	5e9a      	ldrsh	r2, [r3, r2]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	18d3      	adds	r3, r2, r3
 80059d0:	3303      	adds	r3, #3
 80059d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b004      	add	sp, #16
 80059dc:	bd80      	pop	{r7, pc}

080059de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80059e2:	f000 fcbb 	bl	800635c <vTaskStartScheduler>
  
  return osOK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f0:	b089      	sub	sp, #36	; 0x24
 80059f2:	af04      	add	r7, sp, #16
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685c      	ldr	r4, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691e      	ldr	r6, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2208      	movs	r2, #8
 8005a08:	5e9b      	ldrsh	r3, [r3, r2]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7ff ffce 	bl	80059ac <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	9201      	str	r2, [sp, #4]
 8005a1e:	9000      	str	r0, [sp, #0]
 8005a20:	000b      	movs	r3, r1
 8005a22:	0032      	movs	r2, r6
 8005a24:	0029      	movs	r1, r5
 8005a26:	0020      	movs	r0, r4
 8005a28:	f000 fb4b 	bl	80060c2 <xTaskCreateStatic>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b005      	add	sp, #20
 8005a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <osDelay+0x16>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	e000      	b.n	8005a52 <osDelay+0x18>
 8005a50:	2301      	movs	r3, #1
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fc5c 	bl	8006310 <vTaskDelay>
  
  return osOK;
 8005a58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	001a      	movs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4252      	negs	r2, r2
 8005a7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	001a      	movs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b002      	add	sp, #8
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b004      	add	sp, #16
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	d103      	bne.n	8005b16 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e00c      	b.n	8005b30 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <vListInsert+0x2c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d2f6      	bcs.n	8005b1e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	601a      	str	r2, [r3, #0]
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b004      	add	sp, #16
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6852      	ldr	r2, [r2, #4]
 8005b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d103      	bne.n	8005b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b004      	add	sp, #16
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueGenericReset+0x18>
 8005bc8:	b672      	cpsid	i
 8005bca:	e7fe      	b.n	8005bca <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005bcc:	f001 f930 	bl	8006e30 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	434b      	muls	r3, r1
 8005bde:	18d2      	adds	r2, r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	1e59      	subs	r1, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	434b      	muls	r3, r1
 8005c02:	18d2      	adds	r2, r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2244      	movs	r2, #68	; 0x44
 8005c0c:	21ff      	movs	r1, #255	; 0xff
 8005c0e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2245      	movs	r2, #69	; 0x45
 8005c14:	21ff      	movs	r1, #255	; 0xff
 8005c16:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d013      	beq.n	8005c4e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3310      	adds	r3, #16
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fd9c 	bl	8006768 <xTaskRemoveFromEventList>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d00c      	beq.n	8005c4e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c34:	f001 f8ec 	bl	8006e10 <vPortYield>
 8005c38:	e009      	b.n	8005c4e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff ff0f 	bl	8005a62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3324      	adds	r3, #36	; 0x24
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff ff0a 	bl	8005a62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c4e:	f001 f901 	bl	8006e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c52:	2301      	movs	r3, #1
}
 8005c54:	0018      	movs	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b004      	add	sp, #16
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b089      	sub	sp, #36	; 0x24
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueGenericCreateStatic+0x18>
 8005c70:	b672      	cpsid	i
 8005c72:	e7fe      	b.n	8005c72 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericCreateStatic+0x22>
 8005c7a:	b672      	cpsid	i
 8005c7c:	e7fe      	b.n	8005c7c <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <xQueueGenericCreateStatic+0x2e>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <xQueueGenericCreateStatic+0x32>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericCreateStatic+0x34>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <xQueueGenericCreateStatic+0x3c>
 8005c94:	b672      	cpsid	i
 8005c96:	e7fe      	b.n	8005c96 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <xQueueGenericCreateStatic+0x48>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <xQueueGenericCreateStatic+0x4c>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <xQueueGenericCreateStatic+0x4e>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericCreateStatic+0x56>
 8005cae:	b672      	cpsid	i
 8005cb0:	e7fe      	b.n	8005cb0 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cb2:	2348      	movs	r3, #72	; 0x48
 8005cb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b48      	cmp	r3, #72	; 0x48
 8005cba:	d001      	beq.n	8005cc0 <xQueueGenericCreateStatic+0x64>
 8005cbc:	b672      	cpsid	i
 8005cbe:	e7fe      	b.n	8005cbe <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cc0:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <xQueueGenericCreateStatic+0x86>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ccc:	2328      	movs	r3, #40	; 0x28
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	781c      	ldrb	r4, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	0023      	movs	r3, r4
 8005cde:	f000 f805 	bl	8005cec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ce2:	697b      	ldr	r3, [r7, #20]
	}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b007      	add	sp, #28
 8005cea:	bd90      	pop	{r4, r7, pc}

08005cec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	1cfb      	adds	r3, r7, #3
 8005cfc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2101      	movs	r1, #1
 8005d22:	0018      	movs	r0, r3
 8005d24:	f7ff ff46 	bl	8005bb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b004      	add	sp, #16
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <xQueueGiveFromISR+0x18>
 8005d44:	b672      	cpsid	i
 8005d46:	e7fe      	b.n	8005d46 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <xQueueGiveFromISR+0x24>
 8005d50:	b672      	cpsid	i
 8005d52:	e7fe      	b.n	8005d52 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <xQueueGiveFromISR+0x34>
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <xQueueGiveFromISR+0x38>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <xQueueGiveFromISR+0x3a>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <xQueueGiveFromISR+0x42>
 8005d6e:	b672      	cpsid	i
 8005d70:	e7fe      	b.n	8005d70 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d72:	f001 f887 	bl	8006e84 <ulSetInterruptMaskFromISR>
 8005d76:	0003      	movs	r3, r0
 8005d78:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d22c      	bcs.n	8005de4 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d8a:	200f      	movs	r0, #15
 8005d8c:	183b      	adds	r3, r7, r0
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	2145      	movs	r1, #69	; 0x45
 8005d92:	5c52      	ldrb	r2, [r2, r1]
 8005d94:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d9e:	183b      	adds	r3, r7, r0
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	3301      	adds	r3, #1
 8005da6:	d111      	bne.n	8005dcc <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d016      	beq.n	8005dde <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	3324      	adds	r3, #36	; 0x24
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 fcd7 	bl	8006768 <xTaskRemoveFromEventList>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d00f      	beq.n	8005dde <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e008      	b.n	8005dde <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dcc:	230f      	movs	r3, #15
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	b259      	sxtb	r1, r3
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2245      	movs	r2, #69	; 0x45
 8005ddc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e001      	b.n	8005de8 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f001 f850 	bl	8006e90 <vClearInterruptMaskFromISR>

	return xReturn;
 8005df0:	69fb      	ldr	r3, [r7, #28]
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b008      	add	sp, #32
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b08a      	sub	sp, #40	; 0x28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xQueueSemaphoreTake+0x20>
 8005e16:	b672      	cpsid	i
 8005e18:	e7fe      	b.n	8005e18 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <xQueueSemaphoreTake+0x2c>
 8005e22:	b672      	cpsid	i
 8005e24:	e7fe      	b.n	8005e24 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e26:	f000 fe11 	bl	8006a4c <xTaskGetSchedulerState>
 8005e2a:	1e03      	subs	r3, r0, #0
 8005e2c:	d102      	bne.n	8005e34 <xQueueSemaphoreTake+0x3a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <xQueueSemaphoreTake+0x3e>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <xQueueSemaphoreTake+0x40>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <xQueueSemaphoreTake+0x48>
 8005e3e:	b672      	cpsid	i
 8005e40:	e7fe      	b.n	8005e40 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e42:	f000 fff5 	bl	8006e30 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01d      	beq.n	8005e8e <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e62:	f000 fee7 	bl	8006c34 <pvTaskIncrementMutexHeldCount>
 8005e66:	0002      	movs	r2, r0
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3310      	adds	r3, #16
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 fc75 	bl	8006768 <xTaskRemoveFromEventList>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e82:	f000 ffc5 	bl	8006e10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e86:	f000 ffe5 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e08b      	b.n	8005fa6 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <xQueueSemaphoreTake+0xa4>
 8005e9a:	b672      	cpsid	i
 8005e9c:	e7fe      	b.n	8005e9c <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e9e:	f000 ffd9 	bl	8006e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e07f      	b.n	8005fa6 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d106      	bne.n	8005eba <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eac:	230c      	movs	r3, #12
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 fcb5 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eba:	f000 ffcb 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ebe:	f000 fa9b 	bl	80063f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ec2:	f000 ffb5 	bl	8006e30 <vPortEnterCritical>
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2244      	movs	r2, #68	; 0x44
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	d103      	bne.n	8005eda <xQueueSemaphoreTake+0xe0>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2244      	movs	r2, #68	; 0x44
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5499      	strb	r1, [r3, r2]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2245      	movs	r2, #69	; 0x45
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	d103      	bne.n	8005eee <xQueueSemaphoreTake+0xf4>
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2245      	movs	r2, #69	; 0x45
 8005eea:	2100      	movs	r1, #0
 8005eec:	5499      	strb	r1, [r3, r2]
 8005eee:	f000 ffb1 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ef2:	003a      	movs	r2, r7
 8005ef4:	230c      	movs	r3, #12
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	0011      	movs	r1, r2
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fca4 	bl	8006848 <xTaskCheckForTimeOut>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d12e      	bne.n	8005f62 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f000 f8c5 	bl	8006096 <prvIsQueueEmpty>
 8005f0c:	1e03      	subs	r3, r0, #0
 8005f0e:	d021      	beq.n	8005f54 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005f18:	f000 ff8a 	bl	8006e30 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f000 fdaf 	bl	8006a84 <xTaskPriorityInherit>
 8005f26:	0003      	movs	r3, r0
 8005f28:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005f2a:	f000 ff93 	bl	8006e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	0011      	movs	r1, r2
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 fbf8 	bl	800672c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 f84b 	bl	8005fda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f44:	f000 fa64 	bl	8006410 <xTaskResumeAll>
 8005f48:	1e03      	subs	r3, r0, #0
 8005f4a:	d000      	beq.n	8005f4e <xQueueSemaphoreTake+0x154>
 8005f4c:	e779      	b.n	8005e42 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005f4e:	f000 ff5f 	bl	8006e10 <vPortYield>
 8005f52:	e776      	b.n	8005e42 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 f83f 	bl	8005fda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f5c:	f000 fa58 	bl	8006410 <xTaskResumeAll>
 8005f60:	e76f      	b.n	8005e42 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 f838 	bl	8005fda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6a:	f000 fa51 	bl	8006410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f890 	bl	8006096 <prvIsQueueEmpty>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d100      	bne.n	8005f7c <xQueueSemaphoreTake+0x182>
 8005f7a:	e762      	b.n	8005e42 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005f82:	f000 ff55 	bl	8006e30 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 f810 	bl	8005fae <prvGetDisinheritPriorityAfterTimeout>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	0011      	movs	r1, r2
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 fdda 	bl	8006b54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fa0:	f000 ff58 	bl	8006e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b00a      	add	sp, #40	; 0x28
 8005fac:	bd80      	pop	{r7, pc}

08005fae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2207      	movs	r2, #7
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e001      	b.n	8005fd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b004      	add	sp, #16
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fe2:	f000 ff25 	bl	8006e30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fe6:	230f      	movs	r3, #15
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	2145      	movs	r1, #69	; 0x45
 8005fee:	5c52      	ldrb	r2, [r2, r1]
 8005ff0:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ff2:	e013      	b.n	800601c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	0018      	movs	r0, r3
 8006002:	f000 fbb1 	bl	8006768 <xTaskRemoveFromEventList>
 8006006:	1e03      	subs	r3, r0, #0
 8006008:	d001      	beq.n	800600e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800600a:	f000 fc6d 	bl	80068e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800600e:	210f      	movs	r1, #15
 8006010:	187b      	adds	r3, r7, r1
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	3b01      	subs	r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	187b      	adds	r3, r7, r1
 800601a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800601c:	230f      	movs	r3, #15
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b25b      	sxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	dce5      	bgt.n	8005ff4 <prvUnlockQueue+0x1a>
 8006028:	e000      	b.n	800602c <prvUnlockQueue+0x52>
					break;
 800602a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2245      	movs	r2, #69	; 0x45
 8006030:	21ff      	movs	r1, #255	; 0xff
 8006032:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006034:	f000 ff0e 	bl	8006e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006038:	f000 fefa 	bl	8006e30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800603c:	230e      	movs	r3, #14
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	2144      	movs	r1, #68	; 0x44
 8006044:	5c52      	ldrb	r2, [r2, r1]
 8006046:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006048:	e013      	b.n	8006072 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3310      	adds	r3, #16
 8006056:	0018      	movs	r0, r3
 8006058:	f000 fb86 	bl	8006768 <xTaskRemoveFromEventList>
 800605c:	1e03      	subs	r3, r0, #0
 800605e:	d001      	beq.n	8006064 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006060:	f000 fc42 	bl	80068e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006064:	210e      	movs	r1, #14
 8006066:	187b      	adds	r3, r7, r1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	187b      	adds	r3, r7, r1
 8006070:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006072:	230e      	movs	r3, #14
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	b25b      	sxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	dce5      	bgt.n	800604a <prvUnlockQueue+0x70>
 800607e:	e000      	b.n	8006082 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006080:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2244      	movs	r2, #68	; 0x44
 8006086:	21ff      	movs	r1, #255	; 0xff
 8006088:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800608a:	f000 fee3 	bl	8006e54 <vPortExitCritical>
}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	b004      	add	sp, #16
 8006094:	bd80      	pop	{r7, pc}

08006096 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800609e:	f000 fec7 	bl	8006e30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e001      	b.n	80060b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f000 fece 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c2:	b590      	push	{r4, r7, lr}
 80060c4:	b08d      	sub	sp, #52	; 0x34
 80060c6:	af04      	add	r7, sp, #16
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <xTaskCreateStatic+0x18>
 80060d6:	b672      	cpsid	i
 80060d8:	e7fe      	b.n	80060d8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <xTaskCreateStatic+0x22>
 80060e0:	b672      	cpsid	i
 80060e2:	e7fe      	b.n	80060e2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060e4:	2354      	movs	r3, #84	; 0x54
 80060e6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b54      	cmp	r3, #84	; 0x54
 80060ec:	d001      	beq.n	80060f2 <xTaskCreateStatic+0x30>
 80060ee:	b672      	cpsid	i
 80060f0:	e7fe      	b.n	80060f0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060f2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01c      	beq.n	8006134 <xTaskCreateStatic+0x72>
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800610a:	683c      	ldr	r4, [r7, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	2300      	movs	r3, #0
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	2318      	movs	r3, #24
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	0023      	movs	r3, r4
 8006126:	f000 f80d 	bl	8006144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	0018      	movs	r0, r3
 800612e:	f000 f88b 	bl	8006248 <prvAddNewTaskToReadyList>
 8006132:	e001      	b.n	8006138 <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006138:	69bb      	ldr	r3, [r7, #24]
	}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b009      	add	sp, #36	; 0x24
 8006140:	bd90      	pop	{r4, r7, pc}
	...

08006144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	493a      	ldr	r1, [pc, #232]	; (8006244 <prvInitialiseNewTask+0x100>)
 800615a:	468c      	mov	ip, r1
 800615c:	4463      	add	r3, ip
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2207      	movs	r2, #7
 8006168:	4393      	bics	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2207      	movs	r2, #7
 8006170:	4013      	ands	r3, r2
 8006172:	d001      	beq.n	8006178 <prvInitialiseNewTask+0x34>
 8006174:	b672      	cpsid	i
 8006176:	e7fe      	b.n	8006176 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d020      	beq.n	80061c0 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e013      	b.n	80061ac <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	7818      	ldrb	r0, [r3, #0]
 800618c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618e:	2134      	movs	r1, #52	; 0x34
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	185b      	adds	r3, r3, r1
 8006196:	1c02      	adds	r2, r0, #0
 8006198:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	3301      	adds	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b0f      	cmp	r3, #15
 80061b0:	d9e8      	bls.n	8006184 <prvInitialiseNewTask+0x40>
 80061b2:	e000      	b.n	80061b6 <prvInitialiseNewTask+0x72>
			{
				break;
 80061b4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	2243      	movs	r2, #67	; 0x43
 80061ba:	2100      	movs	r1, #0
 80061bc:	5499      	strb	r1, [r3, r2]
 80061be:	e003      	b.n	80061c8 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2234      	movs	r2, #52	; 0x34
 80061c4:	2100      	movs	r1, #0
 80061c6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d901      	bls.n	80061d2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061ce:	2306      	movs	r3, #6
 80061d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2200      	movs	r2, #0
 80061e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	3304      	adds	r3, #4
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7ff fc58 	bl	8005a9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	3318      	adds	r3, #24
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7ff fc53 	bl	8005a9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2207      	movs	r2, #7
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	2200      	movs	r2, #0
 8006212:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2250      	movs	r2, #80	; 0x50
 8006218:	2100      	movs	r1, #0
 800621a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	0018      	movs	r0, r3
 8006224:	f000 fd6c 	bl	8006d00 <pxPortInitialiseStack>
 8006228:	0002      	movs	r2, r0
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	46bd      	mov	sp, r7
 800623e:	b006      	add	sp, #24
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	3fffffff 	.word	0x3fffffff

08006248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006250:	f000 fdee 	bl	8006e30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <prvAddNewTaskToReadyList+0xb0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <prvAddNewTaskToReadyList+0xb0>)
 800625c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800625e:	4b27      	ldr	r3, [pc, #156]	; (80062fc <prvAddNewTaskToReadyList+0xb4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006266:	4b25      	ldr	r3, [pc, #148]	; (80062fc <prvAddNewTaskToReadyList+0xb4>)
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <prvAddNewTaskToReadyList+0xb0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d110      	bne.n	8006296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006274:	f000 fb52 	bl	800691c <prvInitialiseTaskLists>
 8006278:	e00d      	b.n	8006296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800627a:	4b21      	ldr	r3, [pc, #132]	; (8006300 <prvAddNewTaskToReadyList+0xb8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006282:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <prvAddNewTaskToReadyList+0xb4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	429a      	cmp	r2, r3
 800628e:	d802      	bhi.n	8006296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006290:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <prvAddNewTaskToReadyList+0xb4>)
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006296:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <prvAddNewTaskToReadyList+0xbc>)
 800629e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4b18      	ldr	r3, [pc, #96]	; (8006308 <prvAddNewTaskToReadyList+0xc0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d903      	bls.n	80062b4 <prvAddNewTaskToReadyList+0x6c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b0:	4b15      	ldr	r3, [pc, #84]	; (8006308 <prvAddNewTaskToReadyList+0xc0>)
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	0013      	movs	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <prvAddNewTaskToReadyList+0xc4>)
 80062c2:	189a      	adds	r2, r3, r2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	0019      	movs	r1, r3
 80062ca:	0010      	movs	r0, r2
 80062cc:	f7ff fbf2 	bl	8005ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062d0:	f000 fdc0 	bl	8006e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <prvAddNewTaskToReadyList+0xb8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <prvAddNewTaskToReadyList+0xb4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d201      	bcs.n	80062ee <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062ea:	f000 fd91 	bl	8006e10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	200007b4 	.word	0x200007b4
 80062fc:	200006b4 	.word	0x200006b4
 8006300:	200007c0 	.word	0x200007c0
 8006304:	200007d0 	.word	0x200007d0
 8006308:	200007bc 	.word	0x200007bc
 800630c:	200006b8 	.word	0x200006b8

08006310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <vTaskDelay+0x48>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <vTaskDelay+0x1e>
 800632a:	b672      	cpsid	i
 800632c:	e7fe      	b.n	800632c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800632e:	f000 f863 	bl	80063f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2100      	movs	r1, #0
 8006336:	0018      	movs	r0, r3
 8006338:	f000 fc8e 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800633c:	f000 f868 	bl	8006410 <xTaskResumeAll>
 8006340:	0003      	movs	r3, r0
 8006342:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800634a:	f000 fd61 	bl	8006e10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	46bd      	mov	sp, r7
 8006352:	b004      	add	sp, #16
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	200007dc 	.word	0x200007dc

0800635c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b089      	sub	sp, #36	; 0x24
 8006360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800636a:	003a      	movs	r2, r7
 800636c:	1d39      	adds	r1, r7, #4
 800636e:	2308      	movs	r3, #8
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	0018      	movs	r0, r3
 8006374:	f7fb fb72 	bl	8001a5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006378:	683c      	ldr	r4, [r7, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4918      	ldr	r1, [pc, #96]	; (80063e0 <vTaskStartScheduler+0x84>)
 8006380:	4818      	ldr	r0, [pc, #96]	; (80063e4 <vTaskStartScheduler+0x88>)
 8006382:	9202      	str	r2, [sp, #8]
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	2300      	movs	r3, #0
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	0022      	movs	r2, r4
 800638e:	f7ff fe98 	bl	80060c2 <xTaskCreateStatic>
 8006392:	0002      	movs	r2, r0
 8006394:	4b14      	ldr	r3, [pc, #80]	; (80063e8 <vTaskStartScheduler+0x8c>)
 8006396:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006398:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <vTaskStartScheduler+0x8c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e001      	b.n	80063aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10d      	bne.n	80063cc <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80063b0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063b2:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <vTaskStartScheduler+0x90>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	4252      	negs	r2, r2
 80063b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <vTaskStartScheduler+0x94>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <vTaskStartScheduler+0x98>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063c6:	f000 fcff 	bl	8006dc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063ca:	e004      	b.n	80063d6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	d101      	bne.n	80063d6 <vTaskStartScheduler+0x7a>
 80063d2:	b672      	cpsid	i
 80063d4:	e7fe      	b.n	80063d4 <vTaskStartScheduler+0x78>
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b005      	add	sp, #20
 80063dc:	bd90      	pop	{r4, r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	0800778c 	.word	0x0800778c
 80063e4:	080068fd 	.word	0x080068fd
 80063e8:	200007d8 	.word	0x200007d8
 80063ec:	200007d4 	.word	0x200007d4
 80063f0:	200007c0 	.word	0x200007c0
 80063f4:	200007b8 	.word	0x200007b8

080063f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063fc:	4b03      	ldr	r3, [pc, #12]	; (800640c <vTaskSuspendAll+0x14>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	4b02      	ldr	r3, [pc, #8]	; (800640c <vTaskSuspendAll+0x14>)
 8006404:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200007dc 	.word	0x200007dc

08006410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800641e:	4b3a      	ldr	r3, [pc, #232]	; (8006508 <xTaskResumeAll+0xf8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <xTaskResumeAll+0x1a>
 8006426:	b672      	cpsid	i
 8006428:	e7fe      	b.n	8006428 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800642a:	f000 fd01 	bl	8006e30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <xTaskResumeAll+0xf8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	1e5a      	subs	r2, r3, #1
 8006434:	4b34      	ldr	r3, [pc, #208]	; (8006508 <xTaskResumeAll+0xf8>)
 8006436:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006438:	4b33      	ldr	r3, [pc, #204]	; (8006508 <xTaskResumeAll+0xf8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d15b      	bne.n	80064f8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006440:	4b32      	ldr	r3, [pc, #200]	; (800650c <xTaskResumeAll+0xfc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d057      	beq.n	80064f8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006448:	e02f      	b.n	80064aa <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <xTaskResumeAll+0x100>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3318      	adds	r3, #24
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fb84 	bl	8005b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	0018      	movs	r0, r3
 8006462:	f7ff fb7f 	bl	8005b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <xTaskResumeAll+0x104>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d903      	bls.n	800647a <xTaskResumeAll+0x6a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <xTaskResumeAll+0x104>)
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	0013      	movs	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	189b      	adds	r3, r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a24      	ldr	r2, [pc, #144]	; (8006518 <xTaskResumeAll+0x108>)
 8006488:	189a      	adds	r2, r3, r2
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3304      	adds	r3, #4
 800648e:	0019      	movs	r1, r3
 8006490:	0010      	movs	r0, r2
 8006492:	f7ff fb0f 	bl	8005ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <xTaskResumeAll+0x10c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d302      	bcc.n	80064aa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80064a4:	4b1e      	ldr	r3, [pc, #120]	; (8006520 <xTaskResumeAll+0x110>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064aa:	4b19      	ldr	r3, [pc, #100]	; (8006510 <xTaskResumeAll+0x100>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cb      	bne.n	800644a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064b8:	f000 faaa 	bl	8006a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <xTaskResumeAll+0x114>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00f      	beq.n	80064e8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064c8:	f000 f82e 	bl	8006528 <xTaskIncrementTick>
 80064cc:	1e03      	subs	r3, r0, #0
 80064ce:	d002      	beq.n	80064d6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80064d0:	4b13      	ldr	r3, [pc, #76]	; (8006520 <xTaskResumeAll+0x110>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3b01      	subs	r3, #1
 80064da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f2      	bne.n	80064c8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <xTaskResumeAll+0x114>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064e8:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <xTaskResumeAll+0x110>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064f4:	f000 fc8c 	bl	8006e10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064f8:	f000 fcac 	bl	8006e54 <vPortExitCritical>

	return xAlreadyYielded;
 80064fc:	68bb      	ldr	r3, [r7, #8]
}
 80064fe:	0018      	movs	r0, r3
 8006500:	46bd      	mov	sp, r7
 8006502:	b004      	add	sp, #16
 8006504:	bd80      	pop	{r7, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	200007dc 	.word	0x200007dc
 800650c:	200007b4 	.word	0x200007b4
 8006510:	20000774 	.word	0x20000774
 8006514:	200007bc 	.word	0x200007bc
 8006518:	200006b8 	.word	0x200006b8
 800651c:	200006b4 	.word	0x200006b4
 8006520:	200007c8 	.word	0x200007c8
 8006524:	200007c4 	.word	0x200007c4

08006528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006532:	4b4a      	ldr	r3, [pc, #296]	; (800665c <xTaskIncrementTick+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d000      	beq.n	800653c <xTaskIncrementTick+0x14>
 800653a:	e07e      	b.n	800663a <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800653c:	4b48      	ldr	r3, [pc, #288]	; (8006660 <xTaskIncrementTick+0x138>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006544:	4b46      	ldr	r3, [pc, #280]	; (8006660 <xTaskIncrementTick+0x138>)
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d117      	bne.n	8006580 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006550:	4b44      	ldr	r3, [pc, #272]	; (8006664 <xTaskIncrementTick+0x13c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <xTaskIncrementTick+0x36>
 800655a:	b672      	cpsid	i
 800655c:	e7fe      	b.n	800655c <xTaskIncrementTick+0x34>
 800655e:	4b41      	ldr	r3, [pc, #260]	; (8006664 <xTaskIncrementTick+0x13c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	4b40      	ldr	r3, [pc, #256]	; (8006668 <xTaskIncrementTick+0x140>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <xTaskIncrementTick+0x13c>)
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	4b3e      	ldr	r3, [pc, #248]	; (8006668 <xTaskIncrementTick+0x140>)
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	4b3e      	ldr	r3, [pc, #248]	; (800666c <xTaskIncrementTick+0x144>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	4b3c      	ldr	r3, [pc, #240]	; (800666c <xTaskIncrementTick+0x144>)
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f000 fa48 	bl	8006a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <xTaskIncrementTick+0x148>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d349      	bcc.n	800661e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658a:	4b36      	ldr	r3, [pc, #216]	; (8006664 <xTaskIncrementTick+0x13c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006594:	4b36      	ldr	r3, [pc, #216]	; (8006670 <xTaskIncrementTick+0x148>)
 8006596:	2201      	movs	r2, #1
 8006598:	4252      	negs	r2, r2
 800659a:	601a      	str	r2, [r3, #0]
					break;
 800659c:	e03f      	b.n	800661e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <xTaskIncrementTick+0x13c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d203      	bcs.n	80065be <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065b6:	4b2e      	ldr	r3, [pc, #184]	; (8006670 <xTaskIncrementTick+0x148>)
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065bc:	e02f      	b.n	800661e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	3304      	adds	r3, #4
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7ff face 	bl	8005b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3318      	adds	r3, #24
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff fac5 	bl	8005b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	4b25      	ldr	r3, [pc, #148]	; (8006674 <xTaskIncrementTick+0x14c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d903      	bls.n	80065ee <xTaskIncrementTick+0xc6>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b22      	ldr	r3, [pc, #136]	; (8006674 <xTaskIncrementTick+0x14c>)
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	0013      	movs	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a1f      	ldr	r2, [pc, #124]	; (8006678 <xTaskIncrementTick+0x150>)
 80065fc:	189a      	adds	r2, r3, r2
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3304      	adds	r3, #4
 8006602:	0019      	movs	r1, r3
 8006604:	0010      	movs	r0, r2
 8006606:	f7ff fa55 	bl	8005ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <xTaskIncrementTick+0x154>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d3b8      	bcc.n	800658a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661c:	e7b5      	b.n	800658a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <xTaskIncrementTick+0x154>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4914      	ldr	r1, [pc, #80]	; (8006678 <xTaskIncrementTick+0x150>)
 8006626:	0013      	movs	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	189b      	adds	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	585b      	ldr	r3, [r3, r1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d907      	bls.n	8006644 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e004      	b.n	8006644 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <xTaskIncrementTick+0x158>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <xTaskIncrementTick+0x158>)
 8006642:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <xTaskIncrementTick+0x15c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006650:	697b      	ldr	r3, [r7, #20]
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b006      	add	sp, #24
 8006658:	bd80      	pop	{r7, pc}
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	200007dc 	.word	0x200007dc
 8006660:	200007b8 	.word	0x200007b8
 8006664:	2000076c 	.word	0x2000076c
 8006668:	20000770 	.word	0x20000770
 800666c:	200007cc 	.word	0x200007cc
 8006670:	200007d4 	.word	0x200007d4
 8006674:	200007bc 	.word	0x200007bc
 8006678:	200006b8 	.word	0x200006b8
 800667c:	200006b4 	.word	0x200006b4
 8006680:	200007c4 	.word	0x200007c4
 8006684:	200007c8 	.word	0x200007c8

08006688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <vTaskSwitchContext+0x90>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006696:	4b21      	ldr	r3, [pc, #132]	; (800671c <vTaskSwitchContext+0x94>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800669c:	e037      	b.n	800670e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800669e:	4b1f      	ldr	r3, [pc, #124]	; (800671c <vTaskSwitchContext+0x94>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <vTaskSwitchContext+0x98>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	e007      	b.n	80066bc <vTaskSwitchContext+0x34>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <vTaskSwitchContext+0x2e>
 80066b2:	b672      	cpsid	i
 80066b4:	e7fe      	b.n	80066b4 <vTaskSwitchContext+0x2c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	4919      	ldr	r1, [pc, #100]	; (8006724 <vTaskSwitchContext+0x9c>)
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	0013      	movs	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	585b      	ldr	r3, [r3, r1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ee      	beq.n	80066ac <vTaskSwitchContext+0x24>
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	0013      	movs	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	189b      	adds	r3, r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4a12      	ldr	r2, [pc, #72]	; (8006724 <vTaskSwitchContext+0x9c>)
 80066da:	189b      	adds	r3, r3, r2
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d104      	bne.n	80066fe <vTaskSwitchContext+0x76>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	4b08      	ldr	r3, [pc, #32]	; (8006728 <vTaskSwitchContext+0xa0>)
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <vTaskSwitchContext+0x98>)
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	46bd      	mov	sp, r7
 8006712:	b002      	add	sp, #8
 8006714:	bd80      	pop	{r7, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	200007dc 	.word	0x200007dc
 800671c:	200007c8 	.word	0x200007c8
 8006720:	200007bc 	.word	0x200007bc
 8006724:	200006b8 	.word	0x200006b8
 8006728:	200006b4 	.word	0x200006b4

0800672c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <vTaskPlaceOnEventList+0x14>
 800673c:	b672      	cpsid	i
 800673e:	e7fe      	b.n	800673e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006740:	4b08      	ldr	r3, [pc, #32]	; (8006764 <vTaskPlaceOnEventList+0x38>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3318      	adds	r3, #24
 8006746:	001a      	movs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f7ff f9d3 	bl	8005af8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2101      	movs	r1, #1
 8006756:	0018      	movs	r0, r3
 8006758:	f000 fa7e 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200006b4 	.word	0x200006b4

08006768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xTaskRemoveFromEventList+0x1a>
 800677e:	b672      	cpsid	i
 8006780:	e7fe      	b.n	8006780 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3318      	adds	r3, #24
 8006786:	0018      	movs	r0, r3
 8006788:	f7ff f9ec 	bl	8005b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <xTaskRemoveFromEventList+0xa0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11d      	bne.n	80067d0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	3304      	adds	r3, #4
 8006798:	0018      	movs	r0, r3
 800679a:	f7ff f9e3 	bl	8005b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <xTaskRemoveFromEventList+0xa4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <xTaskRemoveFromEventList+0x4a>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <xTaskRemoveFromEventList+0xa4>)
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b6:	0013      	movs	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a14      	ldr	r2, [pc, #80]	; (8006810 <xTaskRemoveFromEventList+0xa8>)
 80067c0:	189a      	adds	r2, r3, r2
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3304      	adds	r3, #4
 80067c6:	0019      	movs	r1, r3
 80067c8:	0010      	movs	r0, r2
 80067ca:	f7ff f973 	bl	8005ab4 <vListInsertEnd>
 80067ce:	e007      	b.n	80067e0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3318      	adds	r3, #24
 80067d4:	001a      	movs	r2, r3
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <xTaskRemoveFromEventList+0xac>)
 80067d8:	0011      	movs	r1, r2
 80067da:	0018      	movs	r0, r3
 80067dc:	f7ff f96a 	bl	8005ab4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <xTaskRemoveFromEventList+0xb0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d905      	bls.n	80067fa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <xTaskRemoveFromEventList+0xb4>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e001      	b.n	80067fe <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	0018      	movs	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	b004      	add	sp, #16
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200007dc 	.word	0x200007dc
 800680c:	200007bc 	.word	0x200007bc
 8006810:	200006b8 	.word	0x200006b8
 8006814:	20000774 	.word	0x20000774
 8006818:	200006b4 	.word	0x200006b4
 800681c:	200007c8 	.word	0x200007c8

08006820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <vTaskInternalSetTimeOutState+0x20>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <vTaskInternalSetTimeOutState+0x24>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	605a      	str	r2, [r3, #4]
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b002      	add	sp, #8
 800683e:	bd80      	pop	{r7, pc}
 8006840:	200007cc 	.word	0x200007cc
 8006844:	200007b8 	.word	0x200007b8

08006848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <xTaskCheckForTimeOut+0x14>
 8006858:	b672      	cpsid	i
 800685a:	e7fe      	b.n	800685a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xTaskCheckForTimeOut+0x1e>
 8006862:	b672      	cpsid	i
 8006864:	e7fe      	b.n	8006864 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006866:	f000 fae3 	bl	8006e30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <xTaskCheckForTimeOut+0x98>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	d102      	bne.n	8006888 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e024      	b.n	80068d2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <xTaskCheckForTimeOut+0x9c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d007      	beq.n	80068a4 <xTaskCheckForTimeOut+0x5c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800689e:	2301      	movs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	e016      	b.n	80068d2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20c      	bcs.n	80068c8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1ad2      	subs	r2, r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	0018      	movs	r0, r3
 80068be:	f7ff ffaf 	bl	8006820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e004      	b.n	80068d2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80068d2:	f000 fabf 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 80068d6:	697b      	ldr	r3, [r7, #20]
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b006      	add	sp, #24
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	200007b8 	.word	0x200007b8
 80068e4:	200007cc 	.word	0x200007cc

080068e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <vTaskMissedYield+0x10>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	200007c8 	.word	0x200007c8

080068fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006904:	f000 f84e 	bl	80069a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006908:	4b03      	ldr	r3, [pc, #12]	; (8006918 <prvIdleTask+0x1c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d9f9      	bls.n	8006904 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006910:	f000 fa7e 	bl	8006e10 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006914:	e7f6      	b.n	8006904 <prvIdleTask+0x8>
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	200006b8 	.word	0x200006b8

0800691c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	e00c      	b.n	8006942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	0013      	movs	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	189b      	adds	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4a14      	ldr	r2, [pc, #80]	; (8006984 <prvInitialiseTaskLists+0x68>)
 8006934:	189b      	adds	r3, r3, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff f893 	bl	8005a62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3301      	adds	r3, #1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d9ef      	bls.n	8006928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <prvInitialiseTaskLists+0x6c>)
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff f889 	bl	8005a62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006950:	4b0e      	ldr	r3, [pc, #56]	; (800698c <prvInitialiseTaskLists+0x70>)
 8006952:	0018      	movs	r0, r3
 8006954:	f7ff f885 	bl	8005a62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <prvInitialiseTaskLists+0x74>)
 800695a:	0018      	movs	r0, r3
 800695c:	f7ff f881 	bl	8005a62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <prvInitialiseTaskLists+0x78>)
 8006962:	0018      	movs	r0, r3
 8006964:	f7ff f87d 	bl	8005a62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006968:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <prvInitialiseTaskLists+0x7c>)
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff f879 	bl	8005a62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <prvInitialiseTaskLists+0x80>)
 8006972:	4a05      	ldr	r2, [pc, #20]	; (8006988 <prvInitialiseTaskLists+0x6c>)
 8006974:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <prvInitialiseTaskLists+0x84>)
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <prvInitialiseTaskLists+0x70>)
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	46c0      	nop			; (mov r8, r8)
 800697e:	46bd      	mov	sp, r7
 8006980:	b002      	add	sp, #8
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200006b8 	.word	0x200006b8
 8006988:	20000744 	.word	0x20000744
 800698c:	20000758 	.word	0x20000758
 8006990:	20000774 	.word	0x20000774
 8006994:	20000788 	.word	0x20000788
 8006998:	200007a0 	.word	0x200007a0
 800699c:	2000076c 	.word	0x2000076c
 80069a0:	20000770 	.word	0x20000770

080069a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069aa:	e01a      	b.n	80069e2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80069ac:	f000 fa40 	bl	8006e30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b0:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <prvCheckTasksWaitingTermination+0x50>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	0018      	movs	r0, r3
 80069be:	f7ff f8d1 	bl	8005b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069c2:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1e5a      	subs	r2, r3, #1
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <prvCheckTasksWaitingTermination+0x54>)
 80069ca:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069d4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80069d6:	f000 fa3d 	bl	8006e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 f80f 	bl	8006a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <prvCheckTasksWaitingTermination+0x58>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e0      	bne.n	80069ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000788 	.word	0x20000788
 80069f8:	200007b4 	.word	0x200007b4
 80069fc:	2000079c 	.word	0x2000079c

08006a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a08:	46c0      	nop			; (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b002      	add	sp, #8
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <prvResetNextTaskUnblockTime+0x34>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <prvResetNextTaskUnblockTime+0x38>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	4252      	negs	r2, r2
 8006a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a28:	e008      	b.n	8006a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <prvResetNextTaskUnblockTime+0x34>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <prvResetNextTaskUnblockTime+0x38>)
 8006a3a:	601a      	str	r2, [r3, #0]
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b002      	add	sp, #8
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2000076c 	.word	0x2000076c
 8006a48:	200007d4 	.word	0x200007d4

08006a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <xTaskGetSchedulerState+0x30>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	e008      	b.n	8006a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <xTaskGetSchedulerState+0x34>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	e001      	b.n	8006a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a72:	687b      	ldr	r3, [r7, #4]
	}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200007c0 	.word	0x200007c0
 8006a80:	200007dc 	.word	0x200007dc

08006a84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d051      	beq.n	8006b3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <xTaskPriorityInherit+0xc4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d241      	bcs.n	8006b2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	db06      	blt.n	8006abe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <xTaskPriorityInherit+0xc4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	2207      	movs	r2, #7
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6959      	ldr	r1, [r3, #20]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	0013      	movs	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <xTaskPriorityInherit+0xc8>)
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d122      	bne.n	8006b1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7ff f842 	bl	8005b64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <xTaskPriorityInherit+0xc4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <xTaskPriorityInherit+0xcc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d903      	bls.n	8006afe <xTaskPriorityInherit+0x7a>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <xTaskPriorityInherit+0xcc>)
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	0013      	movs	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	189b      	adds	r3, r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <xTaskPriorityInherit+0xc8>)
 8006b0c:	189a      	adds	r2, r3, r2
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	3304      	adds	r3, #4
 8006b12:	0019      	movs	r1, r3
 8006b14:	0010      	movs	r0, r2
 8006b16:	f7fe ffcd 	bl	8005ab4 <vListInsertEnd>
 8006b1a:	e004      	b.n	8006b26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <xTaskPriorityInherit+0xc4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b26:	2301      	movs	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e008      	b.n	8006b3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <xTaskPriorityInherit+0xc4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d201      	bcs.n	8006b3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b40:	0018      	movs	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b004      	add	sp, #16
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200006b4 	.word	0x200006b4
 8006b4c:	200006b8 	.word	0x200006b8
 8006b50:	200007bc 	.word	0x200007bc

08006b54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d058      	beq.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8006b74:	b672      	cpsid	i
 8006b76:	e7fe      	b.n	8006b76 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d902      	bls.n	8006b88 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e002      	b.n	8006b8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d042      	beq.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d13d      	bne.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ba2:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d101      	bne.n	8006bb0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006bac:	b672      	cpsid	i
 8006bae:	e7fe      	b.n	8006bae <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	db04      	blt.n	8006bce <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	1ad2      	subs	r2, r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6959      	ldr	r1, [r3, #20]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0013      	movs	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	189b      	adds	r3, r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	4299      	cmp	r1, r3
 8006be2:	d11c      	bne.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3304      	adds	r3, #4
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7fe ffbb 	bl	8005b64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d903      	bls.n	8006c02 <vTaskPriorityDisinheritAfterTimeout+0xae>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	0013      	movs	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8006c10:	189a      	adds	r2, r3, r2
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3304      	adds	r3, #4
 8006c16:	0019      	movs	r1, r3
 8006c18:	0010      	movs	r0, r2
 8006c1a:	f7fe ff4b 	bl	8005ab4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b006      	add	sp, #24
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	200006b4 	.word	0x200006b4
 8006c2c:	200006b8 	.word	0x200006b8
 8006c30:	200007bc 	.word	0x200007bc

08006c34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <pvTaskIncrementMutexHeldCount+0x20>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <pvTaskIncrementMutexHeldCount+0x20>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c46:	3201      	adds	r2, #1
 8006c48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006c4a:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <pvTaskIncrementMutexHeldCount+0x20>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
	}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200006b4 	.word	0x200006b4

08006c58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c62:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c68:	4b20      	ldr	r3, [pc, #128]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7fe ff78 	bl	8005b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3301      	adds	r3, #1
 8006c78:	d10b      	bne.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7fe ff12 	bl	8005ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c90:	e026      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	18d3      	adds	r3, r2, r3
 8006c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d209      	bcs.n	8006cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006caa:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	0010      	movs	r0, r2
 8006cb8:	f7fe ff1e 	bl	8005af8 <vListInsert>
}
 8006cbc:	e010      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	0019      	movs	r1, r3
 8006cca:	0010      	movs	r0, r2
 8006ccc:	f7fe ff14 	bl	8005af8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d202      	bcs.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b004      	add	sp, #16
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200007b8 	.word	0x200007b8
 8006cec:	200006b4 	.word	0x200006b4
 8006cf0:	200007a0 	.word	0x200007a0
 8006cf4:	20000770 	.word	0x20000770
 8006cf8:	2000076c 	.word	0x2000076c
 8006cfc:	200007d4 	.word	0x200007d4

08006d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2280      	movs	r2, #128	; 0x80
 8006d16:	0452      	lsls	r2, r2, #17
 8006d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <pxPortInitialiseStack+0x50>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3b14      	subs	r3, #20
 8006d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b20      	subs	r3, #32
 8006d42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d44:	68fb      	ldr	r3, [r7, #12]
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	08006d55 	.word	0x08006d55

08006d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <prvTaskExitError+0x2c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	d001      	beq.n	8006d6a <prvTaskExitError+0x16>
 8006d66:	b672      	cpsid	i
 8006d68:	e7fe      	b.n	8006d68 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006d6a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0fc      	beq.n	8006d6e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b002      	add	sp, #8
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <pxCurrentTCBConst2>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	3020      	adds	r0, #32
 8006d98:	f380 8809 	msr	PSP, r0
 8006d9c:	2002      	movs	r0, #2
 8006d9e:	f380 8814 	msr	CONTROL, r0
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006da8:	46ae      	mov	lr, r5
 8006daa:	bc08      	pop	{r3}
 8006dac:	bc04      	pop	{r2}
 8006dae:	b662      	cpsie	i
 8006db0:	4718      	bx	r3
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46c0      	nop			; (mov r8, r8)

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	200006b4 	.word	0x200006b4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46c0      	nop			; (mov r8, r8)

08006dc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <xPortStartScheduler+0x40>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <xPortStartScheduler+0x40>)
 8006dd2:	21ff      	movs	r1, #255	; 0xff
 8006dd4:	0409      	lsls	r1, r1, #16
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <xPortStartScheduler+0x40>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <xPortStartScheduler+0x40>)
 8006de0:	21ff      	movs	r1, #255	; 0xff
 8006de2:	0609      	lsls	r1, r1, #24
 8006de4:	430a      	orrs	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006de8:	f000 f898 	bl	8006f1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <xPortStartScheduler+0x44>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006df2:	f7ff ffcd 	bl	8006d90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006df6:	f7ff fc47 	bl	8006688 <vTaskSwitchContext>
	prvTaskExitError();
 8006dfa:	f7ff ffab 	bl	8006d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	e000ed20 	.word	0xe000ed20
 8006e0c:	2000000c 	.word	0x2000000c

08006e10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <vPortYield+0x1c>)
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	0552      	lsls	r2, r2, #21
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006e1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006e20:	f3bf 8f6f 	isb	sy
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006e34:	b672      	cpsid	i
    uxCriticalNesting++;
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <vPortEnterCritical+0x20>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortEnterCritical+0x20>)
 8006e3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006e40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006e44:	f3bf 8f6f 	isb	sy
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <vPortExitCritical+0x10>
 8006e60:	b672      	cpsid	i
 8006e62:	e7fe      	b.n	8006e62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d100      	bne.n	8006e78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006e76:	b662      	cpsie	i
    }
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	2000000c 	.word	0x2000000c

08006e84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006e84:	f3ef 8010 	mrs	r0, PRIMASK
 8006e88:	b672      	cpsid	i
 8006e8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006e8c:	46c0      	nop			; (mov r8, r8)
 8006e8e:	0018      	movs	r0, r3

08006e90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006e90:	f380 8810 	msr	PRIMASK, r0
 8006e94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006e96:	46c0      	nop			; (mov r8, r8)
	...

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <pxCurrentTCBConst>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	3820      	subs	r0, #32
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eae:	4644      	mov	r4, r8
 8006eb0:	464d      	mov	r5, r9
 8006eb2:	4656      	mov	r6, sl
 8006eb4:	465f      	mov	r7, fp
 8006eb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eb8:	b508      	push	{r3, lr}
 8006eba:	b672      	cpsid	i
 8006ebc:	f7ff fbe4 	bl	8006688 <vTaskSwitchContext>
 8006ec0:	b662      	cpsie	i
 8006ec2:	bc0c      	pop	{r2, r3}
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	6808      	ldr	r0, [r1, #0]
 8006ec8:	3010      	adds	r0, #16
 8006eca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006ecc:	46a0      	mov	r8, r4
 8006ece:	46a9      	mov	r9, r5
 8006ed0:	46b2      	mov	sl, r6
 8006ed2:	46bb      	mov	fp, r7
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	3820      	subs	r0, #32
 8006eda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006edc:	4718      	bx	r3
 8006ede:	46c0      	nop			; (mov r8, r8)

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	200006b4 	.word	0x200006b4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46c0      	nop			; (mov r8, r8)

08006ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eee:	f7ff ffc9 	bl	8006e84 <ulSetInterruptMaskFromISR>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ef6:	f7ff fb17 	bl	8006528 <xTaskIncrementTick>
 8006efa:	1e03      	subs	r3, r0, #0
 8006efc:	d003      	beq.n	8006f06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <SysTick_Handler+0x30>)
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	0552      	lsls	r2, r2, #21
 8006f04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7ff ffc1 	bl	8006e90 <vClearInterruptMaskFromISR>
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b002      	add	sp, #8
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvSetupTimerInterrupt+0x34>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <prvSetupTimerInterrupt+0x38>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvSetupTimerInterrupt+0x3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	22fa      	movs	r2, #250	; 0xfa
 8006f32:	0091      	lsls	r1, r2, #2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7f9 f8e7 	bl	8000108 <__udivsi3>
 8006f3a:	0003      	movs	r3, r0
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <prvSetupTimerInterrupt+0x40>)
 8006f40:	3a01      	subs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <prvSetupTimerInterrupt+0x34>)
 8006f46:	2207      	movs	r2, #7
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	e000e010 	.word	0xe000e010
 8006f54:	e000e018 	.word	0xe000e018
 8006f58:	20000000 	.word	0x20000000
 8006f5c:	e000e014 	.word	0xe000e014

08006f60 <init>:
#define RADIO_SZ		1024
#define RADIO_PRIO	(6)

static TaskHandle_t radio_handle = NULL;

void init(void) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af04      	add	r7, sp, #16


	spi_init();
 8006f66:	f000 f86b 	bl	8007040 <spi_init>


	INIT_THREAD_CREATE(radio_handle, radio, radio_thread, NULL, RADIO_SZ, RADIO_PRIO);
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	00da      	lsls	r2, r3, #3
 8006f6e:	4908      	ldr	r1, [pc, #32]	; (8006f90 <init+0x30>)
 8006f70:	4808      	ldr	r0, [pc, #32]	; (8006f94 <init+0x34>)
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <init+0x38>)
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <init+0x3c>)
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2306      	movs	r3, #6
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f7ff f89f 	bl	80060c2 <xTaskCreateStatic>
 8006f84:	0002      	movs	r2, r0
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <init+0x40>)
 8006f88:	601a      	str	r2, [r3, #0]
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	08007794 	.word	0x08007794
 8006f94:	080076b9 	.word	0x080076b9
 8006f98:	200017e4 	.word	0x200017e4
 8006f9c:	200007e4 	.word	0x200007e4
 8006fa0:	200007e0 	.word	0x200007e0

08006fa4 <HAL_SPI_TxRxCpltCallback>:
static SemaphoreHandle_t spi_sem = NULL;
static StaticSemaphore_t spi_sem_buffer;



void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

	if(hspi->Instance == hspi1.Instance) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <HAL_SPI_TxRxCpltCallback+0x40>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d107      	bne.n	8006fcc <HAL_SPI_TxRxCpltCallback+0x28>
		xSemaphoreGiveFromISR(spi_sem, &xHigherPriorityTaskWoken);
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <HAL_SPI_TxRxCpltCallback+0x44>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	220c      	movs	r2, #12
 8006fc2:	18ba      	adds	r2, r7, r2
 8006fc4:	0011      	movs	r1, r2
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7fe feb2 	bl	8005d30 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_SPI_TxRxCpltCallback+0x36>
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <HAL_SPI_TxRxCpltCallback+0x48>)
 8006fd4:	2280      	movs	r2, #128	; 0x80
 8006fd6:	0552      	lsls	r2, r2, #21
 8006fd8:	601a      	str	r2, [r3, #0]

}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	20000508 	.word	0x20000508
 8006fe8:	20001838 	.word	0x20001838
 8006fec:	e000ed04 	.word	0xe000ed04

08006ff0 <HAL_GPIO_EXTI_Callback>:


static void (*radio_cb)(void) = NULL;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	0002      	movs	r2, r0
 8006ff8:	1dbb      	adds	r3, r7, #6
 8006ffa:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_8) {
 8006ffc:	1dbb      	adds	r3, r7, #6
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	429a      	cmp	r2, r3
 8007006:	d106      	bne.n	8007016 <HAL_GPIO_EXTI_Callback+0x26>
		if(radio_cb) {
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_GPIO_EXTI_Callback+0x30>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_GPIO_EXTI_Callback+0x26>
			radio_cb();
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <HAL_GPIO_EXTI_Callback+0x30>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4798      	blx	r3
		}
	}
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	b002      	add	sp, #8
 800701c:	bd80      	pop	{r7, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	20001884 	.word	0x20001884

08007024 <port_register_radio_cb>:


void port_register_radio_cb(void (*cb)(void)) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	radio_cb = cb;
 800702c:	4b03      	ldr	r3, [pc, #12]	; (800703c <port_register_radio_cb+0x18>)
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	b002      	add	sp, #8
 8007038:	bd80      	pop	{r7, pc}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	20001884 	.word	0x20001884

08007040 <spi_init>:



void spi_init() {
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af02      	add	r7, sp, #8
	spi_sem = xSemaphoreCreateBinaryStatic(&spi_sem_buffer);
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <spi_init+0x30>)
 8007048:	2203      	movs	r2, #3
 800704a:	9200      	str	r2, [sp, #0]
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	2001      	movs	r0, #1
 8007052:	f7fe fe03 	bl	8005c5c <xQueueGenericCreateStatic>
 8007056:	0002      	movs	r2, r0
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <spi_init+0x34>)
 800705a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800705c:	23a0      	movs	r3, #160	; 0xa0
 800705e:	05db      	lsls	r3, r3, #23
 8007060:	2201      	movs	r2, #1
 8007062:	2110      	movs	r1, #16
 8007064:	0018      	movs	r0, r3
 8007066:	f7fb fc85 	bl	8002974 <HAL_GPIO_WritePin>
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2000183c 	.word	0x2000183c
 8007074:	20001838 	.word	0x20001838

08007078 <spi_write_reg>:

error_t spi_write_reg(uint8_t addr, uint8_t data) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	0002      	movs	r2, r0
 8007080:	1dfb      	adds	r3, r7, #7
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	1dbb      	adds	r3, r7, #6
 8007086:	1c0a      	adds	r2, r1, #0
 8007088:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800708a:	23a0      	movs	r3, #160	; 0xa0
 800708c:	05db      	lsls	r3, r3, #23
 800708e:	2200      	movs	r2, #0
 8007090:	2110      	movs	r1, #16
 8007092:	0018      	movs	r0, r3
 8007094:	f7fb fc6e 	bl	8002974 <HAL_GPIO_WritePin>
	static uint8_t tx_data[2];
	static uint8_t rx_data[2];
	tx_data[0] = addr | 0x80; //write mode
 8007098:	1dfb      	adds	r3, r7, #7
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2280      	movs	r2, #128	; 0x80
 800709e:	4252      	negs	r2, r2
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <spi_write_reg+0x80>)
 80070a6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = data;
 80070a8:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <spi_write_reg+0x80>)
 80070aa:	1dba      	adds	r2, r7, #6
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_data, rx_data, 2);
 80070b0:	4a12      	ldr	r2, [pc, #72]	; (80070fc <spi_write_reg+0x84>)
 80070b2:	4911      	ldr	r1, [pc, #68]	; (80070f8 <spi_write_reg+0x80>)
 80070b4:	4812      	ldr	r0, [pc, #72]	; (8007100 <spi_write_reg+0x88>)
 80070b6:	2302      	movs	r3, #2
 80070b8:	f7fc feae 	bl	8003e18 <HAL_SPI_TransmitReceive_IT>
	//wait for done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <spi_write_reg+0x8c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	210a      	movs	r1, #10
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7fe fe99 	bl	8005dfa <xQueueSemaphoreTake>
 80070c8:	0003      	movs	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d108      	bne.n	80070e0 <spi_write_reg+0x68>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80070ce:	23a0      	movs	r3, #160	; 0xa0
 80070d0:	05db      	lsls	r3, r3, #23
 80070d2:	2201      	movs	r2, #1
 80070d4:	2110      	movs	r1, #16
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7fb fc4c 	bl	8002974 <HAL_GPIO_WritePin>
		return e_success;
 80070dc:	2300      	movs	r3, #0
 80070de:	e007      	b.n	80070f0 <spi_write_reg+0x78>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80070e0:	23a0      	movs	r3, #160	; 0xa0
 80070e2:	05db      	lsls	r3, r3, #23
 80070e4:	2201      	movs	r2, #1
 80070e6:	2110      	movs	r1, #16
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7fb fc43 	bl	8002974 <HAL_GPIO_WritePin>
		return e_failure;
 80070ee:	2301      	movs	r3, #1
	}
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b002      	add	sp, #8
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20001888 	.word	0x20001888
 80070fc:	2000188c 	.word	0x2000188c
 8007100:	20000508 	.word	0x20000508
 8007104:	20001838 	.word	0x20001838

08007108 <spi_read_reg>:


error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	0002      	movs	r2, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	1dfb      	adds	r3, r7, #7
 8007114:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007116:	23a0      	movs	r3, #160	; 0xa0
 8007118:	05db      	lsls	r3, r3, #23
 800711a:	2200      	movs	r2, #0
 800711c:	2110      	movs	r1, #16
 800711e:	0018      	movs	r0, r3
 8007120:	f7fb fc28 	bl	8002974 <HAL_GPIO_WritePin>
	static uint8_t tx_data[2];
	static uint8_t rx_data[2];
	tx_data[0] = addr;
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <spi_read_reg+0x7c>)
 8007126:	1dfa      	adds	r2, r7, #7
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 800712c:	4b15      	ldr	r3, [pc, #84]	; (8007184 <spi_read_reg+0x7c>)
 800712e:	2200      	movs	r2, #0
 8007130:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_data, rx_data, 2);
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <spi_read_reg+0x80>)
 8007134:	4913      	ldr	r1, [pc, #76]	; (8007184 <spi_read_reg+0x7c>)
 8007136:	4815      	ldr	r0, [pc, #84]	; (800718c <spi_read_reg+0x84>)
 8007138:	2302      	movs	r3, #2
 800713a:	f7fc fe6d 	bl	8003e18 <HAL_SPI_TransmitReceive_IT>
	//wait for done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 800713e:	4b14      	ldr	r3, [pc, #80]	; (8007190 <spi_read_reg+0x88>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	210a      	movs	r1, #10
 8007144:	0018      	movs	r0, r3
 8007146:	f7fe fe58 	bl	8005dfa <xQueueSemaphoreTake>
 800714a:	0003      	movs	r3, r0
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10c      	bne.n	800716a <spi_read_reg+0x62>
		*data = rx_data[1];
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <spi_read_reg+0x80>)
 8007152:	785a      	ldrb	r2, [r3, #1]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007158:	23a0      	movs	r3, #160	; 0xa0
 800715a:	05db      	lsls	r3, r3, #23
 800715c:	2201      	movs	r2, #1
 800715e:	2110      	movs	r1, #16
 8007160:	0018      	movs	r0, r3
 8007162:	f7fb fc07 	bl	8002974 <HAL_GPIO_WritePin>
		return e_success;
 8007166:	2300      	movs	r3, #0
 8007168:	e007      	b.n	800717a <spi_read_reg+0x72>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800716a:	23a0      	movs	r3, #160	; 0xa0
 800716c:	05db      	lsls	r3, r3, #23
 800716e:	2201      	movs	r2, #1
 8007170:	2110      	movs	r1, #16
 8007172:	0018      	movs	r0, r3
 8007174:	f7fb fbfe 	bl	8002974 <HAL_GPIO_WritePin>
		return e_failure;
 8007178:	2301      	movs	r3, #1
	}
}
 800717a:	0018      	movs	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	b002      	add	sp, #8
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	20001890 	.word	0x20001890
 8007188:	20001894 	.word	0x20001894
 800718c:	20000508 	.word	0x20000508
 8007190:	20001838 	.word	0x20001838

08007194 <spi_write_reg_burst>:

/*
 * Max data size 4 bytes
 */
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6039      	str	r1, [r7, #0]
 800719c:	0011      	movs	r1, r2
 800719e:	1dfb      	adds	r3, r7, #7
 80071a0:	1c02      	adds	r2, r0, #0
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	1dbb      	adds	r3, r7, #6
 80071a6:	1c0a      	adds	r2, r1, #0
 80071a8:	701a      	strb	r2, [r3, #0]
	static uint8_t tx_data[MAX_SPI_PACKET+1];
	static uint8_t rx_data[MAX_SPI_PACKET+1];
	tx_data[0] = addr | 0x80; //write mode
 80071aa:	1dfb      	adds	r3, r7, #7
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	4252      	negs	r2, r2
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <spi_write_reg_burst+0x9c>)
 80071b8:	701a      	strb	r2, [r3, #0]
	if(len <= MAX_SPI_PACKET) {
 80071ba:	1dbb      	adds	r3, r7, #6
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d830      	bhi.n	8007224 <spi_write_reg_burst+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80071c2:	23a0      	movs	r3, #160	; 0xa0
 80071c4:	05db      	lsls	r3, r3, #23
 80071c6:	2200      	movs	r2, #0
 80071c8:	2110      	movs	r1, #16
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7fb fbd2 	bl	8002974 <HAL_GPIO_WritePin>
		memcpy(tx_data+1, data, len);
 80071d0:	4818      	ldr	r0, [pc, #96]	; (8007234 <spi_write_reg_burst+0xa0>)
 80071d2:	1dbb      	adds	r3, r7, #6
 80071d4:	781a      	ldrb	r2, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	0019      	movs	r1, r3
 80071da:	f000 faa5 	bl	8007728 <memcpy>
		HAL_SPI_TransmitReceive_IT(&hspi1, tx_data, rx_data, len);
 80071de:	1dbb      	adds	r3, r7, #6
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4a14      	ldr	r2, [pc, #80]	; (8007238 <spi_write_reg_burst+0xa4>)
 80071e6:	4912      	ldr	r1, [pc, #72]	; (8007230 <spi_write_reg_burst+0x9c>)
 80071e8:	4814      	ldr	r0, [pc, #80]	; (800723c <spi_write_reg_burst+0xa8>)
 80071ea:	f7fc fe15 	bl	8003e18 <HAL_SPI_TransmitReceive_IT>
		//wait for done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <spi_write_reg_burst+0xac>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	210a      	movs	r1, #10
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fe fe00 	bl	8005dfa <xQueueSemaphoreTake>
 80071fa:	0003      	movs	r3, r0
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d108      	bne.n	8007212 <spi_write_reg_burst+0x7e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007200:	23a0      	movs	r3, #160	; 0xa0
 8007202:	05db      	lsls	r3, r3, #23
 8007204:	2201      	movs	r2, #1
 8007206:	2110      	movs	r1, #16
 8007208:	0018      	movs	r0, r3
 800720a:	f7fb fbb3 	bl	8002974 <HAL_GPIO_WritePin>
			return e_success;
 800720e:	2300      	movs	r3, #0
 8007210:	e009      	b.n	8007226 <spi_write_reg_burst+0x92>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007212:	23a0      	movs	r3, #160	; 0xa0
 8007214:	05db      	lsls	r3, r3, #23
 8007216:	2201      	movs	r2, #1
 8007218:	2110      	movs	r1, #16
 800721a:	0018      	movs	r0, r3
 800721c:	f7fb fbaa 	bl	8002974 <HAL_GPIO_WritePin>
			return e_failure;
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <spi_write_reg_burst+0x92>
		}
	} else {
		return e_failure;
 8007224:	2301      	movs	r3, #1
	}
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	20001898 	.word	0x20001898
 8007234:	20001899 	.word	0x20001899
 8007238:	2000191c 	.word	0x2000191c
 800723c:	20000508 	.word	0x20000508
 8007240:	20001838 	.word	0x20001838

08007244 <radio_init>:
#define MAX_PACKET_LEN 255




error_t radio_init() {
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af02      	add	r7, sp, #8
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 800724a:	4b23      	ldr	r3, [pc, #140]	; (80072d8 <radio_init+0x94>)
 800724c:	2203      	movs	r2, #3
 800724e:	9200      	str	r2, [sp, #0]
 8007250:	2200      	movs	r2, #0
 8007252:	2100      	movs	r1, #0
 8007254:	2001      	movs	r0, #1
 8007256:	f7fe fd01 	bl	8005c5c <xQueueGenericCreateStatic>
 800725a:	0002      	movs	r2, r0
 800725c:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <radio_init+0x98>)
 800725e:	601a      	str	r2, [r3, #0]
	port_register_radio_cb(radio_isr_handler);
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <radio_init+0x9c>)
 8007262:	0018      	movs	r0, r3
 8007264:	f7ff fede 	bl	8007024 <port_register_radio_cb>
	// set mode to lora
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	2001      	movs	r0, #1
 800726c:	f7ff ff04 	bl	8007078 <spi_write_reg>

	osDelay(10);
 8007270:	200a      	movs	r0, #10
 8007272:	f7fe fbe2 	bl	8005a3a <osDelay>

	uint8_t data;
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 8007276:	1dfb      	adds	r3, r7, #7
 8007278:	0019      	movs	r1, r3
 800727a:	2001      	movs	r0, #1
 800727c:	f7ff ff44 	bl	8007108 <spi_read_reg>
	if(data != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE)) {
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d001      	beq.n	800728c <radio_init+0x48>
		return e_failure; // No device present?
 8007288:	2301      	movs	r3, #1
 800728a:	e020      	b.n	80072ce <radio_init+0x8a>
	}

	spi_write_reg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 800728c:	2100      	movs	r1, #0
 800728e:	200e      	movs	r0, #14
 8007290:	f7ff fef2 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8007294:	2100      	movs	r1, #0
 8007296:	200f      	movs	r0, #15
 8007298:	f7ff feee 	bl	8007078 <spi_write_reg>


	//set idle mode
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 800729c:	2101      	movs	r1, #1
 800729e:	2001      	movs	r0, #1
 80072a0:	f7ff feea 	bl	8007078 <spi_write_reg>

	radio_config_t cfg = {
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	4a0f      	ldr	r2, [pc, #60]	; (80072e4 <radio_init+0xa0>)
 80072a8:	8811      	ldrh	r1, [r2, #0]
 80072aa:	8019      	strh	r1, [r3, #0]
 80072ac:	7892      	ldrb	r2, [r2, #2]
 80072ae:	709a      	strb	r2, [r3, #2]
		.bw = BW_62_5KHZ,
		.cr = CR_4_8,
		.sf = 12
	};

	radio_set_modem_params(cfg);
 80072b0:	1d3b      	adds	r3, r7, #4
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	f000 f8be 	bl	8007434 <radio_set_modem_params>


	radio_set_preamble_len(8);
 80072b8:	2008      	movs	r0, #8
 80072ba:	f000 f8a1 	bl	8007400 <radio_set_preamble_len>

	radio_set_frequency(868);
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <radio_init+0xa4>)
 80072c0:	1c18      	adds	r0, r3, #0
 80072c2:	f000 f865 	bl	8007390 <radio_set_frequency>

	radio_set_tx_power(20);
 80072c6:	2014      	movs	r0, #20
 80072c8:	f000 f826 	bl	8007318 <radio_set_tx_power>


	return e_success;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	0018      	movs	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b002      	add	sp, #8
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	200019a4 	.word	0x200019a4
 80072dc:	200019a0 	.word	0x200019a0
 80072e0:	08007681 	.word	0x08007681
 80072e4:	0800779c 	.word	0x0800779c
 80072e8:	44590000 	.word	0x44590000

080072ec <radio_set_idle>:



void radio_set_idle() {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
	//set idle mode
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 80072f0:	2101      	movs	r1, #1
 80072f2:	2001      	movs	r0, #1
 80072f4:	f7ff fec0 	bl	8007078 <spi_write_reg>
}
 80072f8:	46c0      	nop			; (mov r8, r8)
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <radio_set_tx>:
	//set rx mode
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
}

void radio_set_tx() {
 80072fe:	b580      	push	{r7, lr}
 8007300:	af00      	add	r7, sp, #0
	//set tx mode
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 8007302:	2103      	movs	r1, #3
 8007304:	2001      	movs	r0, #1
 8007306:	f7ff feb7 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 800730a:	2140      	movs	r1, #64	; 0x40
 800730c:	2040      	movs	r0, #64	; 0x40
 800730e:	f7ff feb3 	bl	8007078 <spi_write_reg>
}
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <radio_set_tx_power>:


void radio_set_tx_power(int8_t power) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	0002      	movs	r2, r0
 8007320:	1dfb      	adds	r3, r7, #7
 8007322:	701a      	strb	r2, [r3, #0]
	if (power > 20)
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b25b      	sxtb	r3, r3
 800732a:	2b14      	cmp	r3, #20
 800732c:	dd02      	ble.n	8007334 <radio_set_tx_power+0x1c>
	    power = 20;
 800732e:	1dfb      	adds	r3, r7, #7
 8007330:	2214      	movs	r2, #20
 8007332:	701a      	strb	r2, [r3, #0]
	if (power < 2)
 8007334:	1dfb      	adds	r3, r7, #7
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	dc02      	bgt.n	8007344 <radio_set_tx_power+0x2c>
	    power = 2;
 800733e:	1dfb      	adds	r3, r7, #7
 8007340:	2202      	movs	r2, #2
 8007342:	701a      	strb	r2, [r3, #0]

	// For RH_RF95_PA_DAC_ENABLE, manual says '+20dBm on PA_BOOST when OutputPower=0xf'
	// RH_RF95_PA_DAC_ENABLE actually adds about 3dBm to all power levels. We will use it
	// for 8, 19 and 20dBm
	if (power > 17)
 8007344:	1dfb      	adds	r3, r7, #7
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b25b      	sxtb	r3, r3
 800734a:	2b11      	cmp	r3, #17
 800734c:	dd0a      	ble.n	8007364 <radio_set_tx_power+0x4c>
	{
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 800734e:	2107      	movs	r1, #7
 8007350:	204d      	movs	r0, #77	; 0x4d
 8007352:	f7ff fe91 	bl	8007078 <spi_write_reg>
	    power -= 3;
 8007356:	1dfb      	adds	r3, r7, #7
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	3b03      	subs	r3, #3
 800735c:	b2da      	uxtb	r2, r3
 800735e:	1dfb      	adds	r3, r7, #7
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e003      	b.n	800736c <radio_set_tx_power+0x54>
	}
	else
	{
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 8007364:	2104      	movs	r1, #4
 8007366:	204d      	movs	r0, #77	; 0x4d
 8007368:	f7ff fe86 	bl	8007078 <spi_write_reg>
	}

	// RFM95/96/97/98 does not have RFO pins connected to anything. Only PA_BOOST
	// pin is connected, so must use PA_BOOST
	// Pout = 2 + OutputPower (+3dBm if DAC enabled)
	spi_write_reg(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
 800736c:	1dfb      	adds	r3, r7, #7
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	3b02      	subs	r3, #2
 8007372:	b2db      	uxtb	r3, r3
 8007374:	b25b      	sxtb	r3, r3
 8007376:	2280      	movs	r2, #128	; 0x80
 8007378:	4252      	negs	r2, r2
 800737a:	4313      	orrs	r3, r2
 800737c:	b25b      	sxtb	r3, r3
 800737e:	b2db      	uxtb	r3, r3
 8007380:	0019      	movs	r1, r3
 8007382:	2009      	movs	r0, #9
 8007384:	f7ff fe78 	bl	8007078 <spi_write_reg>
}
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b002      	add	sp, #8
 800738e:	bd80      	pop	{r7, pc}

08007390 <radio_set_frequency>:


void radio_set_frequency(float freq) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
	uint32_t frf = (freq * 1000000.0) / RH_RF95_FSTEP;
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7fa f9a3 	bl	80016e4 <__aeabi_f2d>
 800739e:	2200      	movs	r2, #0
 80073a0:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <radio_set_frequency+0x68>)
 80073a2:	f7f9 fb6b 	bl	8000a7c <__aeabi_dmul>
 80073a6:	0002      	movs	r2, r0
 80073a8:	000b      	movs	r3, r1
 80073aa:	0010      	movs	r0, r2
 80073ac:	0019      	movs	r1, r3
 80073ae:	2200      	movs	r2, #0
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <radio_set_frequency+0x6c>)
 80073b2:	f7f9 f86d 	bl	8000490 <__aeabi_ddiv>
 80073b6:	0002      	movs	r2, r0
 80073b8:	000b      	movs	r3, r1
 80073ba:	0010      	movs	r0, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	f7f8 ff7d 	bl	80002bc <__aeabi_d2uiz>
 80073c2:	0003      	movs	r3, r0
 80073c4:	60fb      	str	r3, [r7, #12]
	spi_write_reg(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	0019      	movs	r1, r3
 80073ce:	2006      	movs	r0, #6
 80073d0:	f7ff fe52 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	0019      	movs	r1, r3
 80073dc:	2007      	movs	r0, #7
 80073de:	f7ff fe4b 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	0019      	movs	r1, r3
 80073e8:	2008      	movs	r0, #8
 80073ea:	f7ff fe45 	bl	8007078 <spi_write_reg>
}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b004      	add	sp, #16
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	412e8480 	.word	0x412e8480
 80073fc:	404e8480 	.word	0x404e8480

08007400 <radio_set_preamble_len>:


void radio_set_preamble_len(uint16_t bytes) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	0002      	movs	r2, r0
 8007408:	1dbb      	adds	r3, r7, #6
 800740a:	801a      	strh	r2, [r3, #0]
	spi_write_reg(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 800740c:	1dbb      	adds	r3, r7, #6
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	b29b      	uxth	r3, r3
 8007414:	b2db      	uxtb	r3, r3
 8007416:	0019      	movs	r1, r3
 8007418:	2020      	movs	r0, #32
 800741a:	f7ff fe2d 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 800741e:	1dbb      	adds	r3, r7, #6
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	0019      	movs	r1, r3
 8007426:	2021      	movs	r0, #33	; 0x21
 8007428:	f7ff fe26 	bl	8007078 <spi_write_reg>
}
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}

08007434 <radio_set_modem_params>:

void radio_set_modem_params(radio_config_t cfg) {
 8007434:	b5b0      	push	{r4, r5, r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	6018      	str	r0, [r3, #0]

	uint8_t reg_1d, reg_1e, reg_26;


	switch(cfg.cr) {
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d017      	beq.n	8007476 <radio_set_modem_params+0x42>
 8007446:	dc1b      	bgt.n	8007480 <radio_set_modem_params+0x4c>
 8007448:	2b02      	cmp	r3, #2
 800744a:	d00f      	beq.n	800746c <radio_set_modem_params+0x38>
 800744c:	dc18      	bgt.n	8007480 <radio_set_modem_params+0x4c>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <radio_set_modem_params+0x24>
 8007452:	2b01      	cmp	r3, #1
 8007454:	d005      	beq.n	8007462 <radio_set_modem_params+0x2e>
 8007456:	e013      	b.n	8007480 <radio_set_modem_params+0x4c>
	case CR_4_5:
		reg_1d = RH_RF95_CODING_RATE_4_5;
 8007458:	230f      	movs	r3, #15
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	2202      	movs	r2, #2
 800745e:	701a      	strb	r2, [r3, #0]
		break;
 8007460:	e013      	b.n	800748a <radio_set_modem_params+0x56>
	case CR_4_6:
		reg_1d = RH_RF95_CODING_RATE_4_6;
 8007462:	230f      	movs	r3, #15
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	2204      	movs	r2, #4
 8007468:	701a      	strb	r2, [r3, #0]
		break;
 800746a:	e00e      	b.n	800748a <radio_set_modem_params+0x56>
	case CR_4_7:
		reg_1d = RH_RF95_CODING_RATE_4_7;
 800746c:	230f      	movs	r3, #15
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	2206      	movs	r2, #6
 8007472:	701a      	strb	r2, [r3, #0]
		break;
 8007474:	e009      	b.n	800748a <radio_set_modem_params+0x56>
	case CR_4_8:
		reg_1d = RH_RF95_CODING_RATE_4_8;
 8007476:	230f      	movs	r3, #15
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	2208      	movs	r2, #8
 800747c:	701a      	strb	r2, [r3, #0]
		break;
 800747e:	e004      	b.n	800748a <radio_set_modem_params+0x56>
	default:
		reg_1d = RH_RF95_CODING_RATE_4_5;
 8007480:	230f      	movs	r3, #15
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	2202      	movs	r2, #2
 8007486:	701a      	strb	r2, [r3, #0]
		break;
 8007488:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg.bw) {
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b09      	cmp	r3, #9
 8007490:	d854      	bhi.n	800753c <radio_set_modem_params+0x108>
 8007492:	009a      	lsls	r2, r3, #2
 8007494:	4b57      	ldr	r3, [pc, #348]	; (80075f4 <radio_set_modem_params+0x1c0>)
 8007496:	18d3      	adds	r3, r2, r3
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	469f      	mov	pc, r3
	case BW_7_8KHZ:
		reg_1d |= RH_RF95_BW_7_8KHZ;
 800749c:	220f      	movs	r2, #15
 800749e:	18bb      	adds	r3, r7, r2
 80074a0:	18ba      	adds	r2, r7, r2
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	701a      	strb	r2, [r3, #0]
		break;
 80074a6:	e051      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_10_4KHZ:
		reg_1d |= RH_RF95_BW_10_4KHZ;
 80074a8:	220f      	movs	r2, #15
 80074aa:	18bb      	adds	r3, r7, r2
 80074ac:	18ba      	adds	r2, r7, r2
 80074ae:	7812      	ldrb	r2, [r2, #0]
 80074b0:	2110      	movs	r1, #16
 80074b2:	430a      	orrs	r2, r1
 80074b4:	701a      	strb	r2, [r3, #0]
		break;
 80074b6:	e049      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_15_6KHZ:
		reg_1d |= RH_RF95_BW_15_6KHZ;
 80074b8:	220f      	movs	r2, #15
 80074ba:	18bb      	adds	r3, r7, r2
 80074bc:	18ba      	adds	r2, r7, r2
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	2120      	movs	r1, #32
 80074c2:	430a      	orrs	r2, r1
 80074c4:	701a      	strb	r2, [r3, #0]
		break;
 80074c6:	e041      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_20_8KHZ:
		reg_1d |= RH_RF95_BW_20_8KHZ;
 80074c8:	220f      	movs	r2, #15
 80074ca:	18bb      	adds	r3, r7, r2
 80074cc:	18ba      	adds	r2, r7, r2
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	2130      	movs	r1, #48	; 0x30
 80074d2:	430a      	orrs	r2, r1
 80074d4:	701a      	strb	r2, [r3, #0]
		break;
 80074d6:	e039      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_31_25KHZ:
		reg_1d |= RH_RF95_BW_31_25KHZ;
 80074d8:	220f      	movs	r2, #15
 80074da:	18bb      	adds	r3, r7, r2
 80074dc:	18ba      	adds	r2, r7, r2
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	430a      	orrs	r2, r1
 80074e4:	701a      	strb	r2, [r3, #0]
		break;
 80074e6:	e031      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_41_7KHZ:
		reg_1d |= RH_RF95_BW_41_7KHZ;
 80074e8:	220f      	movs	r2, #15
 80074ea:	18bb      	adds	r3, r7, r2
 80074ec:	18ba      	adds	r2, r7, r2
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	2150      	movs	r1, #80	; 0x50
 80074f2:	430a      	orrs	r2, r1
 80074f4:	701a      	strb	r2, [r3, #0]
		break;
 80074f6:	e029      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_62_5KHZ:
		reg_1d |= RH_RF95_BW_62_5KHZ;
 80074f8:	220f      	movs	r2, #15
 80074fa:	18bb      	adds	r3, r7, r2
 80074fc:	18ba      	adds	r2, r7, r2
 80074fe:	7812      	ldrb	r2, [r2, #0]
 8007500:	2160      	movs	r1, #96	; 0x60
 8007502:	430a      	orrs	r2, r1
 8007504:	701a      	strb	r2, [r3, #0]
		break;
 8007506:	e021      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_125KHZ:
		reg_1d |= RH_RF95_BW_125KHZ;
 8007508:	220f      	movs	r2, #15
 800750a:	18bb      	adds	r3, r7, r2
 800750c:	18ba      	adds	r2, r7, r2
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	2170      	movs	r1, #112	; 0x70
 8007512:	430a      	orrs	r2, r1
 8007514:	701a      	strb	r2, [r3, #0]
		break;
 8007516:	e019      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_250KHZ:
		reg_1d |= RH_RF95_BW_250KHZ;
 8007518:	220f      	movs	r2, #15
 800751a:	18bb      	adds	r3, r7, r2
 800751c:	18ba      	adds	r2, r7, r2
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	4249      	negs	r1, r1
 8007524:	430a      	orrs	r2, r1
 8007526:	701a      	strb	r2, [r3, #0]
		break;
 8007528:	e010      	b.n	800754c <radio_set_modem_params+0x118>
	case BW_500KHZ:
		reg_1d |= RH_RF95_BW_500KHZ;
 800752a:	220f      	movs	r2, #15
 800752c:	18bb      	adds	r3, r7, r2
 800752e:	18ba      	adds	r2, r7, r2
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	2170      	movs	r1, #112	; 0x70
 8007534:	4249      	negs	r1, r1
 8007536:	430a      	orrs	r2, r1
 8007538:	701a      	strb	r2, [r3, #0]
		break;
 800753a:	e007      	b.n	800754c <radio_set_modem_params+0x118>
	default:
		reg_1d |= RH_RF95_BW_125KHZ;
 800753c:	220f      	movs	r2, #15
 800753e:	18bb      	adds	r3, r7, r2
 8007540:	18ba      	adds	r2, r7, r2
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	2170      	movs	r1, #112	; 0x70
 8007546:	430a      	orrs	r2, r1
 8007548:	701a      	strb	r2, [r3, #0]
		break;
 800754a:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg.sf) {
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	789b      	ldrb	r3, [r3, #2]
 8007550:	3b06      	subs	r3, #6
 8007552:	2b06      	cmp	r3, #6
 8007554:	d827      	bhi.n	80075a6 <radio_set_modem_params+0x172>
 8007556:	009a      	lsls	r2, r3, #2
 8007558:	4b27      	ldr	r3, [pc, #156]	; (80075f8 <radio_set_modem_params+0x1c4>)
 800755a:	18d3      	adds	r3, r2, r3
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	469f      	mov	pc, r3
	case 6:
		reg_1e = RH_RF95_SPREADING_FACTOR_64CPS;
 8007560:	230e      	movs	r3, #14
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	2260      	movs	r2, #96	; 0x60
 8007566:	701a      	strb	r2, [r3, #0]
		break;
 8007568:	e021      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 7:
		reg_1e = RH_RF95_SPREADING_FACTOR_128CPS;
 800756a:	230e      	movs	r3, #14
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	2270      	movs	r2, #112	; 0x70
 8007570:	701a      	strb	r2, [r3, #0]
		break;
 8007572:	e01c      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 8:
		reg_1e = RH_RF95_SPREADING_FACTOR_256CPS;
 8007574:	230e      	movs	r3, #14
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	2280      	movs	r2, #128	; 0x80
 800757a:	701a      	strb	r2, [r3, #0]
		break;
 800757c:	e017      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 9:
		reg_1e = RH_RF95_SPREADING_FACTOR_512CPS;
 800757e:	230e      	movs	r3, #14
 8007580:	18fb      	adds	r3, r7, r3
 8007582:	2290      	movs	r2, #144	; 0x90
 8007584:	701a      	strb	r2, [r3, #0]
		break;
 8007586:	e012      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 10:
		reg_1e = RH_RF95_SPREADING_FACTOR_1024CPS;
 8007588:	230e      	movs	r3, #14
 800758a:	18fb      	adds	r3, r7, r3
 800758c:	22a0      	movs	r2, #160	; 0xa0
 800758e:	701a      	strb	r2, [r3, #0]
		break;
 8007590:	e00d      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 11:
		reg_1e = RH_RF95_SPREADING_FACTOR_2048CPS;
 8007592:	230e      	movs	r3, #14
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	22b0      	movs	r2, #176	; 0xb0
 8007598:	701a      	strb	r2, [r3, #0]
		break;
 800759a:	e008      	b.n	80075ae <radio_set_modem_params+0x17a>
	case 12:
		reg_1e = RH_RF95_SPREADING_FACTOR_4096CPS;
 800759c:	230e      	movs	r3, #14
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	22c0      	movs	r2, #192	; 0xc0
 80075a2:	701a      	strb	r2, [r3, #0]
		break;
 80075a4:	e003      	b.n	80075ae <radio_set_modem_params+0x17a>
	default:
		reg_1e = RH_RF95_SPREADING_FACTOR_64CPS;
 80075a6:	230e      	movs	r3, #14
 80075a8:	18fb      	adds	r3, r7, r3
 80075aa:	2260      	movs	r2, #96	; 0x60
 80075ac:	701a      	strb	r2, [r3, #0]
	}

	reg_1e |= RH_RF95_PAYLOAD_CRC_ON;
 80075ae:	240e      	movs	r4, #14
 80075b0:	193b      	adds	r3, r7, r4
 80075b2:	193a      	adds	r2, r7, r4
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	2104      	movs	r1, #4
 80075b8:	430a      	orrs	r2, r1
 80075ba:	701a      	strb	r2, [r3, #0]


	reg_26 = RH_RF95_AGC_AUTO_ON;
 80075bc:	250d      	movs	r5, #13
 80075be:	197b      	adds	r3, r7, r5
 80075c0:	2204      	movs	r2, #4
 80075c2:	701a      	strb	r2, [r3, #0]

	spi_write_reg(RH_RF95_REG_1D_MODEM_CONFIG1, reg_1d);
 80075c4:	230f      	movs	r3, #15
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	0019      	movs	r1, r3
 80075cc:	201d      	movs	r0, #29
 80075ce:	f7ff fd53 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_1E_MODEM_CONFIG2, reg_1e);
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	0019      	movs	r1, r3
 80075d8:	201e      	movs	r0, #30
 80075da:	f7ff fd4d 	bl	8007078 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_26_MODEM_CONFIG3, reg_26);
 80075de:	197b      	adds	r3, r7, r5
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	0019      	movs	r1, r3
 80075e4:	2026      	movs	r0, #38	; 0x26
 80075e6:	f7ff fd47 	bl	8007078 <spi_write_reg>



}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b004      	add	sp, #16
 80075f0:	bdb0      	pop	{r4, r5, r7, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	0800788c 	.word	0x0800788c
 80075f8:	080078b4 	.word	0x080078b4

080075fc <radio_transmit>:




error_t radio_transmit(uint8_t * data, uint16_t len) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	000a      	movs	r2, r1
 8007606:	1cbb      	adds	r3, r7, #2
 8007608:	801a      	strh	r2, [r3, #0]
	if (len > MAX_PACKET_LEN) {
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	2bff      	cmp	r3, #255	; 0xff
 8007610:	d901      	bls.n	8007616 <radio_transmit+0x1a>
		return e_failure;
 8007612:	2301      	movs	r3, #1
 8007614:	e02b      	b.n	800766e <radio_transmit+0x72>

	//TODO: Wait for packet to be sent

	//TODO: Wait for clear channel

	spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 8007616:	2100      	movs	r1, #0
 8007618:	200d      	movs	r0, #13
 800761a:	f7ff fd2d 	bl	8007078 <spi_write_reg>
	spi_write_reg_burst(RH_RF95_REG_00_FIFO, data, len);
 800761e:	1cbb      	adds	r3, r7, #2
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0019      	movs	r1, r3
 8007628:	2000      	movs	r0, #0
 800762a:	f7ff fdb3 	bl	8007194 <spi_write_reg_burst>
	spi_write_reg(RH_RF95_REG_22_PAYLOAD_LENGTH, len);
 800762e:	1cbb      	adds	r3, r7, #2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	0019      	movs	r1, r3
 8007636:	2022      	movs	r0, #34	; 0x22
 8007638:	f7ff fd1e 	bl	8007078 <spi_write_reg>


	radio_set_tx();
 800763c:	f7ff fe5f 	bl	80072fe <radio_set_tx>

	//wait for finished

	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) 0xffff ) == pdTRUE ) {
 8007640:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <radio_transmit+0x7c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <radio_transmit+0x80>)
 8007646:	0011      	movs	r1, r2
 8007648:	0018      	movs	r0, r3
 800764a:	f7fe fbd6 	bl	8005dfa <xQueueSemaphoreTake>
 800764e:	0003      	movs	r3, r0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10b      	bne.n	800766c <radio_transmit+0x70>

		uint8_t irq_flags;
		spi_read_reg(RH_RF95_REG_12_IRQ_FLAGS, &irq_flags);
 8007654:	230f      	movs	r3, #15
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	0019      	movs	r1, r3
 800765a:	2012      	movs	r0, #18
 800765c:	f7ff fd54 	bl	8007108 <spi_read_reg>
		spi_write_reg(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 8007660:	21ff      	movs	r1, #255	; 0xff
 8007662:	2012      	movs	r0, #18
 8007664:	f7ff fd08 	bl	8007078 <spi_write_reg>

		radio_set_idle();
 8007668:	f7ff fe40 	bl	80072ec <radio_set_idle>

	}

	return e_success;
 800766c:	2300      	movs	r3, #0


}
 800766e:	0018      	movs	r0, r3
 8007670:	46bd      	mov	sp, r7
 8007672:	b004      	add	sp, #16
 8007674:	bd80      	pop	{r7, pc}
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	200019a0 	.word	0x200019a0
 800767c:	0000ffff 	.word	0x0000ffff

08007680 <radio_isr_handler>:



void radio_isr_handler(void) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(radio_isr_sem, &xHigherPriorityTaskWoken);
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <radio_isr_handler+0x30>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	1d3a      	adds	r2, r7, #4
 8007690:	0011      	movs	r1, r2
 8007692:	0018      	movs	r0, r3
 8007694:	f7fe fb4c 	bl	8005d30 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <radio_isr_handler+0x26>
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <radio_isr_handler+0x34>)
 80076a0:	2280      	movs	r2, #128	; 0x80
 80076a2:	0552      	lsls	r2, r2, #21
 80076a4:	601a      	str	r2, [r3, #0]
}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b002      	add	sp, #8
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	200019a0 	.word	0x200019a0
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <radio_thread>:





void radio_thread(void * arg) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]


	radio_init();
 80076c0:	f7ff fdc0 	bl	8007244 <radio_init>

	for(;;) {

		static uint8_t data[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

		radio_transmit(data, 10);
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <radio_thread+0x20>)
 80076c6:	210a      	movs	r1, #10
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7ff ff97 	bl	80075fc <radio_transmit>



		osDelay(5000);
 80076ce:	4b03      	ldr	r3, [pc, #12]	; (80076dc <radio_thread+0x24>)
 80076d0:	0018      	movs	r0, r3
 80076d2:	f7fe f9b2 	bl	8005a3a <osDelay>
	for(;;) {
 80076d6:	e7f5      	b.n	80076c4 <radio_thread+0xc>
 80076d8:	20000010 	.word	0x20000010
 80076dc:	00001388 	.word	0x00001388

080076e0 <__libc_init_array>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	2600      	movs	r6, #0
 80076e4:	4d0c      	ldr	r5, [pc, #48]	; (8007718 <__libc_init_array+0x38>)
 80076e6:	4c0d      	ldr	r4, [pc, #52]	; (800771c <__libc_init_array+0x3c>)
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	d109      	bne.n	8007704 <__libc_init_array+0x24>
 80076f0:	2600      	movs	r6, #0
 80076f2:	f000 f82b 	bl	800774c <_init>
 80076f6:	4d0a      	ldr	r5, [pc, #40]	; (8007720 <__libc_init_array+0x40>)
 80076f8:	4c0a      	ldr	r4, [pc, #40]	; (8007724 <__libc_init_array+0x44>)
 80076fa:	1b64      	subs	r4, r4, r5
 80076fc:	10a4      	asrs	r4, r4, #2
 80076fe:	42a6      	cmp	r6, r4
 8007700:	d105      	bne.n	800770e <__libc_init_array+0x2e>
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	00b3      	lsls	r3, r6, #2
 8007706:	58eb      	ldr	r3, [r5, r3]
 8007708:	4798      	blx	r3
 800770a:	3601      	adds	r6, #1
 800770c:	e7ee      	b.n	80076ec <__libc_init_array+0xc>
 800770e:	00b3      	lsls	r3, r6, #2
 8007710:	58eb      	ldr	r3, [r5, r3]
 8007712:	4798      	blx	r3
 8007714:	3601      	adds	r6, #1
 8007716:	e7f2      	b.n	80076fe <__libc_init_array+0x1e>
 8007718:	080078d8 	.word	0x080078d8
 800771c:	080078d8 	.word	0x080078d8
 8007720:	080078d8 	.word	0x080078d8
 8007724:	080078dc 	.word	0x080078dc

08007728 <memcpy>:
 8007728:	2300      	movs	r3, #0
 800772a:	b510      	push	{r4, lr}
 800772c:	429a      	cmp	r2, r3
 800772e:	d100      	bne.n	8007732 <memcpy+0xa>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	5ccc      	ldrb	r4, [r1, r3]
 8007734:	54c4      	strb	r4, [r0, r3]
 8007736:	3301      	adds	r3, #1
 8007738:	e7f8      	b.n	800772c <memcpy+0x4>

0800773a <memset>:
 800773a:	0003      	movs	r3, r0
 800773c:	1882      	adds	r2, r0, r2
 800773e:	4293      	cmp	r3, r2
 8007740:	d100      	bne.n	8007744 <memset+0xa>
 8007742:	4770      	bx	lr
 8007744:	7019      	strb	r1, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	e7f9      	b.n	800773e <memset+0x4>
	...

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr
