
tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d70  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  20000098  080070e0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001324  080070e0  00021324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f0d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001492  00000000  00000000  00024fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00027608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c35f  00000000  00000000  00028b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003254  00000000  00000000  00034e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000380d3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000040a8  00000000  00000000  00038124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e18 	.word	0x08006e18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08006e18 	.word	0x08006e18

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_cdrcmple>:
 800025c:	4684      	mov	ip, r0
 800025e:	0010      	movs	r0, r2
 8000260:	4662      	mov	r2, ip
 8000262:	468c      	mov	ip, r1
 8000264:	0019      	movs	r1, r3
 8000266:	4663      	mov	r3, ip
 8000268:	e000      	b.n	800026c <__aeabi_cdcmpeq>
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_cdcmpeq>:
 800026c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800026e:	f000 fd4b 	bl	8000d08 <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	d401      	bmi.n	800027a <__aeabi_cdcmpeq+0xe>
 8000276:	2100      	movs	r1, #0
 8000278:	42c8      	cmn	r0, r1
 800027a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800027c <__aeabi_dcmpeq>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fc9b 	bl	8000bb8 <__eqdf2>
 8000282:	4240      	negs	r0, r0
 8000284:	3001      	adds	r0, #1
 8000286:	bd10      	pop	{r4, pc}

08000288 <__aeabi_dcmplt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fd3d 	bl	8000d08 <__ledf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	db01      	blt.n	8000296 <__aeabi_dcmplt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmple>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f000 fd33 	bl	8000d08 <__ledf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dd01      	ble.n	80002aa <__aeabi_dcmple+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dcmpgt>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f000 fcc3 	bl	8000c3c <__gedf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	dc01      	bgt.n	80002be <__aeabi_dcmpgt+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__aeabi_dcmpge>:
 80002c4:	b510      	push	{r4, lr}
 80002c6:	f000 fcb9 	bl	8000c3c <__gedf2>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	da01      	bge.n	80002d2 <__aeabi_dcmpge+0xe>
 80002ce:	2000      	movs	r0, #0
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	2001      	movs	r0, #1
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)

080002d8 <__aeabi_ldivmod>:
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d115      	bne.n	8000308 <__aeabi_ldivmod+0x30>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	d113      	bne.n	8000308 <__aeabi_ldivmod+0x30>
 80002e0:	2900      	cmp	r1, #0
 80002e2:	db06      	blt.n	80002f2 <__aeabi_ldivmod+0x1a>
 80002e4:	dc01      	bgt.n	80002ea <__aeabi_ldivmod+0x12>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d006      	beq.n	80002f8 <__aeabi_ldivmod+0x20>
 80002ea:	2000      	movs	r0, #0
 80002ec:	43c0      	mvns	r0, r0
 80002ee:	0841      	lsrs	r1, r0, #1
 80002f0:	e002      	b.n	80002f8 <__aeabi_ldivmod+0x20>
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	0609      	lsls	r1, r1, #24
 80002f6:	2000      	movs	r0, #0
 80002f8:	b407      	push	{r0, r1, r2}
 80002fa:	4802      	ldr	r0, [pc, #8]	; (8000304 <__aeabi_ldivmod+0x2c>)
 80002fc:	a101      	add	r1, pc, #4	; (adr r1, 8000304 <__aeabi_ldivmod+0x2c>)
 80002fe:	1840      	adds	r0, r0, r1
 8000300:	9002      	str	r0, [sp, #8]
 8000302:	bd03      	pop	{r0, r1, pc}
 8000304:	ffffff55 	.word	0xffffff55
 8000308:	b403      	push	{r0, r1}
 800030a:	4668      	mov	r0, sp
 800030c:	b501      	push	{r0, lr}
 800030e:	9802      	ldr	r0, [sp, #8]
 8000310:	f000 f93e 	bl	8000590 <__gnu_ldivmod_helper>
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	469e      	mov	lr, r3
 8000318:	b002      	add	sp, #8
 800031a:	bc0c      	pop	{r2, r3}
 800031c:	4770      	bx	lr
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_uldivmod>:
 8000320:	2b00      	cmp	r3, #0
 8000322:	d111      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000324:	2a00      	cmp	r2, #0
 8000326:	d10f      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000328:	2900      	cmp	r1, #0
 800032a:	d100      	bne.n	800032e <__aeabi_uldivmod+0xe>
 800032c:	2800      	cmp	r0, #0
 800032e:	d002      	beq.n	8000336 <__aeabi_uldivmod+0x16>
 8000330:	2100      	movs	r1, #0
 8000332:	43c9      	mvns	r1, r1
 8000334:	0008      	movs	r0, r1
 8000336:	b407      	push	{r0, r1, r2}
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <__aeabi_uldivmod+0x24>)
 800033a:	a102      	add	r1, pc, #8	; (adr r1, 8000344 <__aeabi_uldivmod+0x24>)
 800033c:	1840      	adds	r0, r0, r1
 800033e:	9002      	str	r0, [sp, #8]
 8000340:	bd03      	pop	{r0, r1, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	ffffff15 	.word	0xffffff15
 8000348:	b403      	push	{r0, r1}
 800034a:	4668      	mov	r0, sp
 800034c:	b501      	push	{r0, lr}
 800034e:	9802      	ldr	r0, [sp, #8]
 8000350:	f000 f852 	bl	80003f8 <__udivmoddi4>
 8000354:	9b01      	ldr	r3, [sp, #4]
 8000356:	469e      	mov	lr, r3
 8000358:	b002      	add	sp, #8
 800035a:	bc0c      	pop	{r2, r3}
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__aeabi_lmul>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	46ce      	mov	lr, r9
 8000364:	4647      	mov	r7, r8
 8000366:	b580      	push	{r7, lr}
 8000368:	0007      	movs	r7, r0
 800036a:	4699      	mov	r9, r3
 800036c:	0c3b      	lsrs	r3, r7, #16
 800036e:	469c      	mov	ip, r3
 8000370:	0413      	lsls	r3, r2, #16
 8000372:	0c1b      	lsrs	r3, r3, #16
 8000374:	001d      	movs	r5, r3
 8000376:	000e      	movs	r6, r1
 8000378:	4661      	mov	r1, ip
 800037a:	0400      	lsls	r0, r0, #16
 800037c:	0c14      	lsrs	r4, r2, #16
 800037e:	0c00      	lsrs	r0, r0, #16
 8000380:	4345      	muls	r5, r0
 8000382:	434b      	muls	r3, r1
 8000384:	4360      	muls	r0, r4
 8000386:	4361      	muls	r1, r4
 8000388:	18c0      	adds	r0, r0, r3
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	1820      	adds	r0, r4, r0
 800038e:	468c      	mov	ip, r1
 8000390:	4283      	cmp	r3, r0
 8000392:	d903      	bls.n	800039c <__aeabi_lmul+0x3c>
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	025b      	lsls	r3, r3, #9
 8000398:	4698      	mov	r8, r3
 800039a:	44c4      	add	ip, r8
 800039c:	4649      	mov	r1, r9
 800039e:	4379      	muls	r1, r7
 80003a0:	4372      	muls	r2, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	4463      	add	r3, ip
 80003a6:	042d      	lsls	r5, r5, #16
 80003a8:	0c2d      	lsrs	r5, r5, #16
 80003aa:	18c9      	adds	r1, r1, r3
 80003ac:	0400      	lsls	r0, r0, #16
 80003ae:	1940      	adds	r0, r0, r5
 80003b0:	1889      	adds	r1, r1, r2
 80003b2:	bcc0      	pop	{r6, r7}
 80003b4:	46b9      	mov	r9, r7
 80003b6:	46b0      	mov	r8, r6
 80003b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)

080003bc <__aeabi_d2uiz>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	2200      	movs	r2, #0
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <__aeabi_d2uiz+0x38>)
 80003c2:	0004      	movs	r4, r0
 80003c4:	000d      	movs	r5, r1
 80003c6:	f7ff ff7d 	bl	80002c4 <__aeabi_dcmpge>
 80003ca:	2800      	cmp	r0, #0
 80003cc:	d104      	bne.n	80003d8 <__aeabi_d2uiz+0x1c>
 80003ce:	0020      	movs	r0, r4
 80003d0:	0029      	movs	r1, r5
 80003d2:	f001 fafb 	bl	80019cc <__aeabi_d2iz>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <__aeabi_d2uiz+0x38>)
 80003da:	2200      	movs	r2, #0
 80003dc:	0020      	movs	r0, r4
 80003de:	0029      	movs	r1, r5
 80003e0:	f000 ff62 	bl	80012a8 <__aeabi_dsub>
 80003e4:	f001 faf2 	bl	80019cc <__aeabi_d2iz>
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	061b      	lsls	r3, r3, #24
 80003ec:	469c      	mov	ip, r3
 80003ee:	4460      	add	r0, ip
 80003f0:	e7f1      	b.n	80003d6 <__aeabi_d2uiz+0x1a>
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	41e00000 	.word	0x41e00000

080003f8 <__udivmoddi4>:
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fa:	4657      	mov	r7, sl
 80003fc:	464e      	mov	r6, r9
 80003fe:	4645      	mov	r5, r8
 8000400:	46de      	mov	lr, fp
 8000402:	b5e0      	push	{r5, r6, r7, lr}
 8000404:	0004      	movs	r4, r0
 8000406:	000d      	movs	r5, r1
 8000408:	4692      	mov	sl, r2
 800040a:	4699      	mov	r9, r3
 800040c:	b083      	sub	sp, #12
 800040e:	428b      	cmp	r3, r1
 8000410:	d830      	bhi.n	8000474 <__udivmoddi4+0x7c>
 8000412:	d02d      	beq.n	8000470 <__udivmoddi4+0x78>
 8000414:	4649      	mov	r1, r9
 8000416:	4650      	mov	r0, sl
 8000418:	f001 fb74 	bl	8001b04 <__clzdi2>
 800041c:	0029      	movs	r1, r5
 800041e:	0006      	movs	r6, r0
 8000420:	0020      	movs	r0, r4
 8000422:	f001 fb6f 	bl	8001b04 <__clzdi2>
 8000426:	1a33      	subs	r3, r6, r0
 8000428:	4698      	mov	r8, r3
 800042a:	3b20      	subs	r3, #32
 800042c:	469b      	mov	fp, r3
 800042e:	d433      	bmi.n	8000498 <__udivmoddi4+0xa0>
 8000430:	465a      	mov	r2, fp
 8000432:	4653      	mov	r3, sl
 8000434:	4093      	lsls	r3, r2
 8000436:	4642      	mov	r2, r8
 8000438:	001f      	movs	r7, r3
 800043a:	4653      	mov	r3, sl
 800043c:	4093      	lsls	r3, r2
 800043e:	001e      	movs	r6, r3
 8000440:	42af      	cmp	r7, r5
 8000442:	d83a      	bhi.n	80004ba <__udivmoddi4+0xc2>
 8000444:	42af      	cmp	r7, r5
 8000446:	d100      	bne.n	800044a <__udivmoddi4+0x52>
 8000448:	e078      	b.n	800053c <__udivmoddi4+0x144>
 800044a:	465b      	mov	r3, fp
 800044c:	1ba4      	subs	r4, r4, r6
 800044e:	41bd      	sbcs	r5, r7
 8000450:	2b00      	cmp	r3, #0
 8000452:	da00      	bge.n	8000456 <__udivmoddi4+0x5e>
 8000454:	e075      	b.n	8000542 <__udivmoddi4+0x14a>
 8000456:	2200      	movs	r2, #0
 8000458:	2300      	movs	r3, #0
 800045a:	9200      	str	r2, [sp, #0]
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	2301      	movs	r3, #1
 8000460:	465a      	mov	r2, fp
 8000462:	4093      	lsls	r3, r2
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	2301      	movs	r3, #1
 8000468:	4642      	mov	r2, r8
 800046a:	4093      	lsls	r3, r2
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	e028      	b.n	80004c2 <__udivmoddi4+0xca>
 8000470:	4282      	cmp	r2, r0
 8000472:	d9cf      	bls.n	8000414 <__udivmoddi4+0x1c>
 8000474:	2200      	movs	r2, #0
 8000476:	2300      	movs	r3, #0
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <__udivmoddi4+0x8e>
 8000482:	601c      	str	r4, [r3, #0]
 8000484:	605d      	str	r5, [r3, #4]
 8000486:	9800      	ldr	r0, [sp, #0]
 8000488:	9901      	ldr	r1, [sp, #4]
 800048a:	b003      	add	sp, #12
 800048c:	bcf0      	pop	{r4, r5, r6, r7}
 800048e:	46bb      	mov	fp, r7
 8000490:	46b2      	mov	sl, r6
 8000492:	46a9      	mov	r9, r5
 8000494:	46a0      	mov	r8, r4
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000498:	4642      	mov	r2, r8
 800049a:	2320      	movs	r3, #32
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	4652      	mov	r2, sl
 80004a0:	40da      	lsrs	r2, r3
 80004a2:	4641      	mov	r1, r8
 80004a4:	0013      	movs	r3, r2
 80004a6:	464a      	mov	r2, r9
 80004a8:	408a      	lsls	r2, r1
 80004aa:	0017      	movs	r7, r2
 80004ac:	4642      	mov	r2, r8
 80004ae:	431f      	orrs	r7, r3
 80004b0:	4653      	mov	r3, sl
 80004b2:	4093      	lsls	r3, r2
 80004b4:	001e      	movs	r6, r3
 80004b6:	42af      	cmp	r7, r5
 80004b8:	d9c4      	bls.n	8000444 <__udivmoddi4+0x4c>
 80004ba:	2200      	movs	r2, #0
 80004bc:	2300      	movs	r3, #0
 80004be:	9200      	str	r2, [sp, #0]
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	4643      	mov	r3, r8
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0d9      	beq.n	800047c <__udivmoddi4+0x84>
 80004c8:	07fb      	lsls	r3, r7, #31
 80004ca:	0872      	lsrs	r2, r6, #1
 80004cc:	431a      	orrs	r2, r3
 80004ce:	4646      	mov	r6, r8
 80004d0:	087b      	lsrs	r3, r7, #1
 80004d2:	e00e      	b.n	80004f2 <__udivmoddi4+0xfa>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d101      	bne.n	80004dc <__udivmoddi4+0xe4>
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d80c      	bhi.n	80004f6 <__udivmoddi4+0xfe>
 80004dc:	1aa4      	subs	r4, r4, r2
 80004de:	419d      	sbcs	r5, r3
 80004e0:	2001      	movs	r0, #1
 80004e2:	1924      	adds	r4, r4, r4
 80004e4:	416d      	adcs	r5, r5
 80004e6:	2100      	movs	r1, #0
 80004e8:	3e01      	subs	r6, #1
 80004ea:	1824      	adds	r4, r4, r0
 80004ec:	414d      	adcs	r5, r1
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d006      	beq.n	8000500 <__udivmoddi4+0x108>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d9ee      	bls.n	80004d4 <__udivmoddi4+0xdc>
 80004f6:	3e01      	subs	r6, #1
 80004f8:	1924      	adds	r4, r4, r4
 80004fa:	416d      	adcs	r5, r5
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d1f8      	bne.n	80004f2 <__udivmoddi4+0xfa>
 8000500:	9800      	ldr	r0, [sp, #0]
 8000502:	9901      	ldr	r1, [sp, #4]
 8000504:	465b      	mov	r3, fp
 8000506:	1900      	adds	r0, r0, r4
 8000508:	4169      	adcs	r1, r5
 800050a:	2b00      	cmp	r3, #0
 800050c:	db24      	blt.n	8000558 <__udivmoddi4+0x160>
 800050e:	002b      	movs	r3, r5
 8000510:	465a      	mov	r2, fp
 8000512:	4644      	mov	r4, r8
 8000514:	40d3      	lsrs	r3, r2
 8000516:	002a      	movs	r2, r5
 8000518:	40e2      	lsrs	r2, r4
 800051a:	001c      	movs	r4, r3
 800051c:	465b      	mov	r3, fp
 800051e:	0015      	movs	r5, r2
 8000520:	2b00      	cmp	r3, #0
 8000522:	db2a      	blt.n	800057a <__udivmoddi4+0x182>
 8000524:	0026      	movs	r6, r4
 8000526:	409e      	lsls	r6, r3
 8000528:	0033      	movs	r3, r6
 800052a:	0026      	movs	r6, r4
 800052c:	4647      	mov	r7, r8
 800052e:	40be      	lsls	r6, r7
 8000530:	0032      	movs	r2, r6
 8000532:	1a80      	subs	r0, r0, r2
 8000534:	4199      	sbcs	r1, r3
 8000536:	9000      	str	r0, [sp, #0]
 8000538:	9101      	str	r1, [sp, #4]
 800053a:	e79f      	b.n	800047c <__udivmoddi4+0x84>
 800053c:	42a3      	cmp	r3, r4
 800053e:	d8bc      	bhi.n	80004ba <__udivmoddi4+0xc2>
 8000540:	e783      	b.n	800044a <__udivmoddi4+0x52>
 8000542:	4642      	mov	r2, r8
 8000544:	2320      	movs	r3, #32
 8000546:	2100      	movs	r1, #0
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	2200      	movs	r2, #0
 800054c:	9100      	str	r1, [sp, #0]
 800054e:	9201      	str	r2, [sp, #4]
 8000550:	2201      	movs	r2, #1
 8000552:	40da      	lsrs	r2, r3
 8000554:	9201      	str	r2, [sp, #4]
 8000556:	e786      	b.n	8000466 <__udivmoddi4+0x6e>
 8000558:	4642      	mov	r2, r8
 800055a:	2320      	movs	r3, #32
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	4646      	mov	r6, r8
 8000562:	409a      	lsls	r2, r3
 8000564:	0023      	movs	r3, r4
 8000566:	40f3      	lsrs	r3, r6
 8000568:	4644      	mov	r4, r8
 800056a:	4313      	orrs	r3, r2
 800056c:	002a      	movs	r2, r5
 800056e:	40e2      	lsrs	r2, r4
 8000570:	001c      	movs	r4, r3
 8000572:	465b      	mov	r3, fp
 8000574:	0015      	movs	r5, r2
 8000576:	2b00      	cmp	r3, #0
 8000578:	dad4      	bge.n	8000524 <__udivmoddi4+0x12c>
 800057a:	4642      	mov	r2, r8
 800057c:	002f      	movs	r7, r5
 800057e:	2320      	movs	r3, #32
 8000580:	0026      	movs	r6, r4
 8000582:	4097      	lsls	r7, r2
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	40de      	lsrs	r6, r3
 8000588:	003b      	movs	r3, r7
 800058a:	4333      	orrs	r3, r6
 800058c:	e7cd      	b.n	800052a <__udivmoddi4+0x132>
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__gnu_ldivmod_helper>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	46ce      	mov	lr, r9
 8000594:	4647      	mov	r7, r8
 8000596:	b580      	push	{r7, lr}
 8000598:	4691      	mov	r9, r2
 800059a:	4698      	mov	r8, r3
 800059c:	0004      	movs	r4, r0
 800059e:	000d      	movs	r5, r1
 80005a0:	f001 fabc 	bl	8001b1c <__divdi3>
 80005a4:	0007      	movs	r7, r0
 80005a6:	000e      	movs	r6, r1
 80005a8:	0002      	movs	r2, r0
 80005aa:	000b      	movs	r3, r1
 80005ac:	4648      	mov	r0, r9
 80005ae:	4641      	mov	r1, r8
 80005b0:	f7ff fed6 	bl	8000360 <__aeabi_lmul>
 80005b4:	1a24      	subs	r4, r4, r0
 80005b6:	418d      	sbcs	r5, r1
 80005b8:	9b08      	ldr	r3, [sp, #32]
 80005ba:	0038      	movs	r0, r7
 80005bc:	0031      	movs	r1, r6
 80005be:	601c      	str	r4, [r3, #0]
 80005c0:	605d      	str	r5, [r3, #4]
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__aeabi_ddiv>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	4657      	mov	r7, sl
 80005d0:	464e      	mov	r6, r9
 80005d2:	4645      	mov	r5, r8
 80005d4:	46de      	mov	lr, fp
 80005d6:	b5e0      	push	{r5, r6, r7, lr}
 80005d8:	4681      	mov	r9, r0
 80005da:	0005      	movs	r5, r0
 80005dc:	030c      	lsls	r4, r1, #12
 80005de:	0048      	lsls	r0, r1, #1
 80005e0:	4692      	mov	sl, r2
 80005e2:	001f      	movs	r7, r3
 80005e4:	b085      	sub	sp, #20
 80005e6:	0b24      	lsrs	r4, r4, #12
 80005e8:	0d40      	lsrs	r0, r0, #21
 80005ea:	0fce      	lsrs	r6, r1, #31
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_ddiv+0x26>
 80005f0:	e156      	b.n	80008a0 <__aeabi_ddiv+0x2d4>
 80005f2:	4bd4      	ldr	r3, [pc, #848]	; (8000944 <__aeabi_ddiv+0x378>)
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d100      	bne.n	80005fa <__aeabi_ddiv+0x2e>
 80005f8:	e172      	b.n	80008e0 <__aeabi_ddiv+0x314>
 80005fa:	0f6b      	lsrs	r3, r5, #29
 80005fc:	00e4      	lsls	r4, r4, #3
 80005fe:	431c      	orrs	r4, r3
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	041b      	lsls	r3, r3, #16
 8000604:	4323      	orrs	r3, r4
 8000606:	4698      	mov	r8, r3
 8000608:	4bcf      	ldr	r3, [pc, #828]	; (8000948 <__aeabi_ddiv+0x37c>)
 800060a:	00ed      	lsls	r5, r5, #3
 800060c:	469b      	mov	fp, r3
 800060e:	2300      	movs	r3, #0
 8000610:	4699      	mov	r9, r3
 8000612:	4483      	add	fp, r0
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	033c      	lsls	r4, r7, #12
 8000618:	007b      	lsls	r3, r7, #1
 800061a:	4650      	mov	r0, sl
 800061c:	0b24      	lsrs	r4, r4, #12
 800061e:	0d5b      	lsrs	r3, r3, #21
 8000620:	0fff      	lsrs	r7, r7, #31
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_ddiv+0x5c>
 8000626:	e11f      	b.n	8000868 <__aeabi_ddiv+0x29c>
 8000628:	4ac6      	ldr	r2, [pc, #792]	; (8000944 <__aeabi_ddiv+0x378>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_ddiv+0x64>
 800062e:	e162      	b.n	80008f6 <__aeabi_ddiv+0x32a>
 8000630:	49c5      	ldr	r1, [pc, #788]	; (8000948 <__aeabi_ddiv+0x37c>)
 8000632:	0f42      	lsrs	r2, r0, #29
 8000634:	468c      	mov	ip, r1
 8000636:	00e4      	lsls	r4, r4, #3
 8000638:	4659      	mov	r1, fp
 800063a:	4314      	orrs	r4, r2
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	4463      	add	r3, ip
 8000640:	0412      	lsls	r2, r2, #16
 8000642:	1acb      	subs	r3, r1, r3
 8000644:	4314      	orrs	r4, r2
 8000646:	469b      	mov	fp, r3
 8000648:	00c2      	lsls	r2, r0, #3
 800064a:	2000      	movs	r0, #0
 800064c:	0033      	movs	r3, r6
 800064e:	407b      	eors	r3, r7
 8000650:	469a      	mov	sl, r3
 8000652:	464b      	mov	r3, r9
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d827      	bhi.n	80006a8 <__aeabi_ddiv+0xdc>
 8000658:	49bc      	ldr	r1, [pc, #752]	; (800094c <__aeabi_ddiv+0x380>)
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	58cb      	ldr	r3, [r1, r3]
 800065e:	469f      	mov	pc, r3
 8000660:	46b2      	mov	sl, r6
 8000662:	9b00      	ldr	r3, [sp, #0]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d016      	beq.n	8000696 <__aeabi_ddiv+0xca>
 8000668:	2b03      	cmp	r3, #3
 800066a:	d100      	bne.n	800066e <__aeabi_ddiv+0xa2>
 800066c:	e28e      	b.n	8000b8c <__aeabi_ddiv+0x5c0>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d000      	beq.n	8000674 <__aeabi_ddiv+0xa8>
 8000672:	e0d9      	b.n	8000828 <__aeabi_ddiv+0x25c>
 8000674:	2300      	movs	r3, #0
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	4652      	mov	r2, sl
 800067c:	051b      	lsls	r3, r3, #20
 800067e:	4323      	orrs	r3, r4
 8000680:	07d2      	lsls	r2, r2, #31
 8000682:	4313      	orrs	r3, r2
 8000684:	0028      	movs	r0, r5
 8000686:	0019      	movs	r1, r3
 8000688:	b005      	add	sp, #20
 800068a:	bcf0      	pop	{r4, r5, r6, r7}
 800068c:	46bb      	mov	fp, r7
 800068e:	46b2      	mov	sl, r6
 8000690:	46a9      	mov	r9, r5
 8000692:	46a0      	mov	r8, r4
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	2400      	movs	r4, #0
 8000698:	2500      	movs	r5, #0
 800069a:	4baa      	ldr	r3, [pc, #680]	; (8000944 <__aeabi_ddiv+0x378>)
 800069c:	e7ed      	b.n	800067a <__aeabi_ddiv+0xae>
 800069e:	46ba      	mov	sl, r7
 80006a0:	46a0      	mov	r8, r4
 80006a2:	0015      	movs	r5, r2
 80006a4:	9000      	str	r0, [sp, #0]
 80006a6:	e7dc      	b.n	8000662 <__aeabi_ddiv+0x96>
 80006a8:	4544      	cmp	r4, r8
 80006aa:	d200      	bcs.n	80006ae <__aeabi_ddiv+0xe2>
 80006ac:	e1c7      	b.n	8000a3e <__aeabi_ddiv+0x472>
 80006ae:	d100      	bne.n	80006b2 <__aeabi_ddiv+0xe6>
 80006b0:	e1c2      	b.n	8000a38 <__aeabi_ddiv+0x46c>
 80006b2:	2301      	movs	r3, #1
 80006b4:	425b      	negs	r3, r3
 80006b6:	469c      	mov	ip, r3
 80006b8:	002e      	movs	r6, r5
 80006ba:	4640      	mov	r0, r8
 80006bc:	2500      	movs	r5, #0
 80006be:	44e3      	add	fp, ip
 80006c0:	0223      	lsls	r3, r4, #8
 80006c2:	0e14      	lsrs	r4, r2, #24
 80006c4:	431c      	orrs	r4, r3
 80006c6:	0c1b      	lsrs	r3, r3, #16
 80006c8:	4699      	mov	r9, r3
 80006ca:	0423      	lsls	r3, r4, #16
 80006cc:	0c1f      	lsrs	r7, r3, #16
 80006ce:	0212      	lsls	r2, r2, #8
 80006d0:	4649      	mov	r1, r9
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9701      	str	r7, [sp, #4]
 80006d6:	f7ff fdbb 	bl	8000250 <__aeabi_uidivmod>
 80006da:	0002      	movs	r2, r0
 80006dc:	437a      	muls	r2, r7
 80006de:	040b      	lsls	r3, r1, #16
 80006e0:	0c31      	lsrs	r1, r6, #16
 80006e2:	4680      	mov	r8, r0
 80006e4:	4319      	orrs	r1, r3
 80006e6:	428a      	cmp	r2, r1
 80006e8:	d907      	bls.n	80006fa <__aeabi_ddiv+0x12e>
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	469c      	mov	ip, r3
 80006f0:	1909      	adds	r1, r1, r4
 80006f2:	44e0      	add	r8, ip
 80006f4:	428c      	cmp	r4, r1
 80006f6:	d800      	bhi.n	80006fa <__aeabi_ddiv+0x12e>
 80006f8:	e207      	b.n	8000b0a <__aeabi_ddiv+0x53e>
 80006fa:	1a88      	subs	r0, r1, r2
 80006fc:	4649      	mov	r1, r9
 80006fe:	f7ff fda7 	bl	8000250 <__aeabi_uidivmod>
 8000702:	0409      	lsls	r1, r1, #16
 8000704:	468c      	mov	ip, r1
 8000706:	0431      	lsls	r1, r6, #16
 8000708:	4666      	mov	r6, ip
 800070a:	9a01      	ldr	r2, [sp, #4]
 800070c:	0c09      	lsrs	r1, r1, #16
 800070e:	4342      	muls	r2, r0
 8000710:	0003      	movs	r3, r0
 8000712:	4331      	orrs	r1, r6
 8000714:	428a      	cmp	r2, r1
 8000716:	d904      	bls.n	8000722 <__aeabi_ddiv+0x156>
 8000718:	1909      	adds	r1, r1, r4
 800071a:	3b01      	subs	r3, #1
 800071c:	428c      	cmp	r4, r1
 800071e:	d800      	bhi.n	8000722 <__aeabi_ddiv+0x156>
 8000720:	e1ed      	b.n	8000afe <__aeabi_ddiv+0x532>
 8000722:	1a88      	subs	r0, r1, r2
 8000724:	4642      	mov	r2, r8
 8000726:	0412      	lsls	r2, r2, #16
 8000728:	431a      	orrs	r2, r3
 800072a:	4690      	mov	r8, r2
 800072c:	4641      	mov	r1, r8
 800072e:	9b00      	ldr	r3, [sp, #0]
 8000730:	040e      	lsls	r6, r1, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	001f      	movs	r7, r3
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	9b00      	ldr	r3, [sp, #0]
 800073a:	0c36      	lsrs	r6, r6, #16
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	0c19      	lsrs	r1, r3, #16
 8000740:	000b      	movs	r3, r1
 8000742:	4373      	muls	r3, r6
 8000744:	0c12      	lsrs	r2, r2, #16
 8000746:	437e      	muls	r6, r7
 8000748:	9103      	str	r1, [sp, #12]
 800074a:	4351      	muls	r1, r2
 800074c:	437a      	muls	r2, r7
 800074e:	0c1f      	lsrs	r7, r3, #16
 8000750:	46bc      	mov	ip, r7
 8000752:	1876      	adds	r6, r6, r1
 8000754:	4466      	add	r6, ip
 8000756:	42b1      	cmp	r1, r6
 8000758:	d903      	bls.n	8000762 <__aeabi_ddiv+0x196>
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	0249      	lsls	r1, r1, #9
 800075e:	468c      	mov	ip, r1
 8000760:	4462      	add	r2, ip
 8000762:	0c31      	lsrs	r1, r6, #16
 8000764:	188a      	adds	r2, r1, r2
 8000766:	0431      	lsls	r1, r6, #16
 8000768:	041e      	lsls	r6, r3, #16
 800076a:	0c36      	lsrs	r6, r6, #16
 800076c:	198e      	adds	r6, r1, r6
 800076e:	4290      	cmp	r0, r2
 8000770:	d302      	bcc.n	8000778 <__aeabi_ddiv+0x1ac>
 8000772:	d112      	bne.n	800079a <__aeabi_ddiv+0x1ce>
 8000774:	42b5      	cmp	r5, r6
 8000776:	d210      	bcs.n	800079a <__aeabi_ddiv+0x1ce>
 8000778:	4643      	mov	r3, r8
 800077a:	1e59      	subs	r1, r3, #1
 800077c:	9b00      	ldr	r3, [sp, #0]
 800077e:	469c      	mov	ip, r3
 8000780:	4465      	add	r5, ip
 8000782:	001f      	movs	r7, r3
 8000784:	429d      	cmp	r5, r3
 8000786:	419b      	sbcs	r3, r3
 8000788:	425b      	negs	r3, r3
 800078a:	191b      	adds	r3, r3, r4
 800078c:	18c0      	adds	r0, r0, r3
 800078e:	4284      	cmp	r4, r0
 8000790:	d200      	bcs.n	8000794 <__aeabi_ddiv+0x1c8>
 8000792:	e1a0      	b.n	8000ad6 <__aeabi_ddiv+0x50a>
 8000794:	d100      	bne.n	8000798 <__aeabi_ddiv+0x1cc>
 8000796:	e19b      	b.n	8000ad0 <__aeabi_ddiv+0x504>
 8000798:	4688      	mov	r8, r1
 800079a:	1bae      	subs	r6, r5, r6
 800079c:	42b5      	cmp	r5, r6
 800079e:	41ad      	sbcs	r5, r5
 80007a0:	1a80      	subs	r0, r0, r2
 80007a2:	426d      	negs	r5, r5
 80007a4:	1b40      	subs	r0, r0, r5
 80007a6:	4284      	cmp	r4, r0
 80007a8:	d100      	bne.n	80007ac <__aeabi_ddiv+0x1e0>
 80007aa:	e1d5      	b.n	8000b58 <__aeabi_ddiv+0x58c>
 80007ac:	4649      	mov	r1, r9
 80007ae:	f7ff fd4f 	bl	8000250 <__aeabi_uidivmod>
 80007b2:	9a01      	ldr	r2, [sp, #4]
 80007b4:	040b      	lsls	r3, r1, #16
 80007b6:	4342      	muls	r2, r0
 80007b8:	0c31      	lsrs	r1, r6, #16
 80007ba:	0005      	movs	r5, r0
 80007bc:	4319      	orrs	r1, r3
 80007be:	428a      	cmp	r2, r1
 80007c0:	d900      	bls.n	80007c4 <__aeabi_ddiv+0x1f8>
 80007c2:	e16c      	b.n	8000a9e <__aeabi_ddiv+0x4d2>
 80007c4:	1a88      	subs	r0, r1, r2
 80007c6:	4649      	mov	r1, r9
 80007c8:	f7ff fd42 	bl	8000250 <__aeabi_uidivmod>
 80007cc:	9a01      	ldr	r2, [sp, #4]
 80007ce:	0436      	lsls	r6, r6, #16
 80007d0:	4342      	muls	r2, r0
 80007d2:	0409      	lsls	r1, r1, #16
 80007d4:	0c36      	lsrs	r6, r6, #16
 80007d6:	0003      	movs	r3, r0
 80007d8:	430e      	orrs	r6, r1
 80007da:	42b2      	cmp	r2, r6
 80007dc:	d900      	bls.n	80007e0 <__aeabi_ddiv+0x214>
 80007de:	e153      	b.n	8000a88 <__aeabi_ddiv+0x4bc>
 80007e0:	9803      	ldr	r0, [sp, #12]
 80007e2:	1ab6      	subs	r6, r6, r2
 80007e4:	0002      	movs	r2, r0
 80007e6:	042d      	lsls	r5, r5, #16
 80007e8:	431d      	orrs	r5, r3
 80007ea:	9f02      	ldr	r7, [sp, #8]
 80007ec:	042b      	lsls	r3, r5, #16
 80007ee:	0c1b      	lsrs	r3, r3, #16
 80007f0:	435a      	muls	r2, r3
 80007f2:	437b      	muls	r3, r7
 80007f4:	469c      	mov	ip, r3
 80007f6:	0c29      	lsrs	r1, r5, #16
 80007f8:	4348      	muls	r0, r1
 80007fa:	0c13      	lsrs	r3, r2, #16
 80007fc:	4484      	add	ip, r0
 80007fe:	4463      	add	r3, ip
 8000800:	4379      	muls	r1, r7
 8000802:	4298      	cmp	r0, r3
 8000804:	d903      	bls.n	800080e <__aeabi_ddiv+0x242>
 8000806:	2080      	movs	r0, #128	; 0x80
 8000808:	0240      	lsls	r0, r0, #9
 800080a:	4684      	mov	ip, r0
 800080c:	4461      	add	r1, ip
 800080e:	0c18      	lsrs	r0, r3, #16
 8000810:	0412      	lsls	r2, r2, #16
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	0c12      	lsrs	r2, r2, #16
 8000816:	1841      	adds	r1, r0, r1
 8000818:	189b      	adds	r3, r3, r2
 800081a:	428e      	cmp	r6, r1
 800081c:	d200      	bcs.n	8000820 <__aeabi_ddiv+0x254>
 800081e:	e0ff      	b.n	8000a20 <__aeabi_ddiv+0x454>
 8000820:	d100      	bne.n	8000824 <__aeabi_ddiv+0x258>
 8000822:	e0fa      	b.n	8000a1a <__aeabi_ddiv+0x44e>
 8000824:	2301      	movs	r3, #1
 8000826:	431d      	orrs	r5, r3
 8000828:	4a49      	ldr	r2, [pc, #292]	; (8000950 <__aeabi_ddiv+0x384>)
 800082a:	445a      	add	r2, fp
 800082c:	2a00      	cmp	r2, #0
 800082e:	dc00      	bgt.n	8000832 <__aeabi_ddiv+0x266>
 8000830:	e0aa      	b.n	8000988 <__aeabi_ddiv+0x3bc>
 8000832:	076b      	lsls	r3, r5, #29
 8000834:	d000      	beq.n	8000838 <__aeabi_ddiv+0x26c>
 8000836:	e13d      	b.n	8000ab4 <__aeabi_ddiv+0x4e8>
 8000838:	08ed      	lsrs	r5, r5, #3
 800083a:	4643      	mov	r3, r8
 800083c:	01db      	lsls	r3, r3, #7
 800083e:	d506      	bpl.n	800084e <__aeabi_ddiv+0x282>
 8000840:	4642      	mov	r2, r8
 8000842:	4b44      	ldr	r3, [pc, #272]	; (8000954 <__aeabi_ddiv+0x388>)
 8000844:	401a      	ands	r2, r3
 8000846:	4690      	mov	r8, r2
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	00d2      	lsls	r2, r2, #3
 800084c:	445a      	add	r2, fp
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <__aeabi_ddiv+0x38c>)
 8000850:	429a      	cmp	r2, r3
 8000852:	dd00      	ble.n	8000856 <__aeabi_ddiv+0x28a>
 8000854:	e71f      	b.n	8000696 <__aeabi_ddiv+0xca>
 8000856:	4643      	mov	r3, r8
 8000858:	075b      	lsls	r3, r3, #29
 800085a:	431d      	orrs	r5, r3
 800085c:	4643      	mov	r3, r8
 800085e:	0552      	lsls	r2, r2, #21
 8000860:	025c      	lsls	r4, r3, #9
 8000862:	0b24      	lsrs	r4, r4, #12
 8000864:	0d53      	lsrs	r3, r2, #21
 8000866:	e708      	b.n	800067a <__aeabi_ddiv+0xae>
 8000868:	4652      	mov	r2, sl
 800086a:	4322      	orrs	r2, r4
 800086c:	d100      	bne.n	8000870 <__aeabi_ddiv+0x2a4>
 800086e:	e07b      	b.n	8000968 <__aeabi_ddiv+0x39c>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_ddiv+0x2aa>
 8000874:	e0fa      	b.n	8000a6c <__aeabi_ddiv+0x4a0>
 8000876:	0020      	movs	r0, r4
 8000878:	f001 f926 	bl	8001ac8 <__clzsi2>
 800087c:	0002      	movs	r2, r0
 800087e:	3a0b      	subs	r2, #11
 8000880:	231d      	movs	r3, #29
 8000882:	0001      	movs	r1, r0
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	4652      	mov	r2, sl
 8000888:	3908      	subs	r1, #8
 800088a:	40da      	lsrs	r2, r3
 800088c:	408c      	lsls	r4, r1
 800088e:	4314      	orrs	r4, r2
 8000890:	4652      	mov	r2, sl
 8000892:	408a      	lsls	r2, r1
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <__aeabi_ddiv+0x390>)
 8000896:	4458      	add	r0, fp
 8000898:	469b      	mov	fp, r3
 800089a:	4483      	add	fp, r0
 800089c:	2000      	movs	r0, #0
 800089e:	e6d5      	b.n	800064c <__aeabi_ddiv+0x80>
 80008a0:	464b      	mov	r3, r9
 80008a2:	4323      	orrs	r3, r4
 80008a4:	4698      	mov	r8, r3
 80008a6:	d044      	beq.n	8000932 <__aeabi_ddiv+0x366>
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_ddiv+0x2e2>
 80008ac:	e0ce      	b.n	8000a4c <__aeabi_ddiv+0x480>
 80008ae:	0020      	movs	r0, r4
 80008b0:	f001 f90a 	bl	8001ac8 <__clzsi2>
 80008b4:	0001      	movs	r1, r0
 80008b6:	0002      	movs	r2, r0
 80008b8:	390b      	subs	r1, #11
 80008ba:	231d      	movs	r3, #29
 80008bc:	1a5b      	subs	r3, r3, r1
 80008be:	4649      	mov	r1, r9
 80008c0:	0010      	movs	r0, r2
 80008c2:	40d9      	lsrs	r1, r3
 80008c4:	3808      	subs	r0, #8
 80008c6:	4084      	lsls	r4, r0
 80008c8:	000b      	movs	r3, r1
 80008ca:	464d      	mov	r5, r9
 80008cc:	4323      	orrs	r3, r4
 80008ce:	4698      	mov	r8, r3
 80008d0:	4085      	lsls	r5, r0
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <__aeabi_ddiv+0x394>)
 80008d4:	1a83      	subs	r3, r0, r2
 80008d6:	469b      	mov	fp, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	4699      	mov	r9, r3
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	e69a      	b.n	8000616 <__aeabi_ddiv+0x4a>
 80008e0:	464b      	mov	r3, r9
 80008e2:	4323      	orrs	r3, r4
 80008e4:	4698      	mov	r8, r3
 80008e6:	d11d      	bne.n	8000924 <__aeabi_ddiv+0x358>
 80008e8:	2308      	movs	r3, #8
 80008ea:	4699      	mov	r9, r3
 80008ec:	3b06      	subs	r3, #6
 80008ee:	2500      	movs	r5, #0
 80008f0:	4683      	mov	fp, r0
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	e68f      	b.n	8000616 <__aeabi_ddiv+0x4a>
 80008f6:	4652      	mov	r2, sl
 80008f8:	4322      	orrs	r2, r4
 80008fa:	d109      	bne.n	8000910 <__aeabi_ddiv+0x344>
 80008fc:	2302      	movs	r3, #2
 80008fe:	4649      	mov	r1, r9
 8000900:	4319      	orrs	r1, r3
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <__aeabi_ddiv+0x398>)
 8000904:	4689      	mov	r9, r1
 8000906:	469c      	mov	ip, r3
 8000908:	2400      	movs	r4, #0
 800090a:	2002      	movs	r0, #2
 800090c:	44e3      	add	fp, ip
 800090e:	e69d      	b.n	800064c <__aeabi_ddiv+0x80>
 8000910:	2303      	movs	r3, #3
 8000912:	464a      	mov	r2, r9
 8000914:	431a      	orrs	r2, r3
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <__aeabi_ddiv+0x398>)
 8000918:	4691      	mov	r9, r2
 800091a:	469c      	mov	ip, r3
 800091c:	4652      	mov	r2, sl
 800091e:	2003      	movs	r0, #3
 8000920:	44e3      	add	fp, ip
 8000922:	e693      	b.n	800064c <__aeabi_ddiv+0x80>
 8000924:	230c      	movs	r3, #12
 8000926:	4699      	mov	r9, r3
 8000928:	3b09      	subs	r3, #9
 800092a:	46a0      	mov	r8, r4
 800092c:	4683      	mov	fp, r0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	e671      	b.n	8000616 <__aeabi_ddiv+0x4a>
 8000932:	2304      	movs	r3, #4
 8000934:	4699      	mov	r9, r3
 8000936:	2300      	movs	r3, #0
 8000938:	469b      	mov	fp, r3
 800093a:	3301      	adds	r3, #1
 800093c:	2500      	movs	r5, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	e669      	b.n	8000616 <__aeabi_ddiv+0x4a>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	000007ff 	.word	0x000007ff
 8000948:	fffffc01 	.word	0xfffffc01
 800094c:	08006e30 	.word	0x08006e30
 8000950:	000003ff 	.word	0x000003ff
 8000954:	feffffff 	.word	0xfeffffff
 8000958:	000007fe 	.word	0x000007fe
 800095c:	000003f3 	.word	0x000003f3
 8000960:	fffffc0d 	.word	0xfffffc0d
 8000964:	fffff801 	.word	0xfffff801
 8000968:	4649      	mov	r1, r9
 800096a:	2301      	movs	r3, #1
 800096c:	4319      	orrs	r1, r3
 800096e:	4689      	mov	r9, r1
 8000970:	2400      	movs	r4, #0
 8000972:	2001      	movs	r0, #1
 8000974:	e66a      	b.n	800064c <__aeabi_ddiv+0x80>
 8000976:	2300      	movs	r3, #0
 8000978:	2480      	movs	r4, #128	; 0x80
 800097a:	469a      	mov	sl, r3
 800097c:	2500      	movs	r5, #0
 800097e:	4b8a      	ldr	r3, [pc, #552]	; (8000ba8 <__aeabi_ddiv+0x5dc>)
 8000980:	0324      	lsls	r4, r4, #12
 8000982:	e67a      	b.n	800067a <__aeabi_ddiv+0xae>
 8000984:	2501      	movs	r5, #1
 8000986:	426d      	negs	r5, r5
 8000988:	2301      	movs	r3, #1
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	2b38      	cmp	r3, #56	; 0x38
 800098e:	dd00      	ble.n	8000992 <__aeabi_ddiv+0x3c6>
 8000990:	e670      	b.n	8000674 <__aeabi_ddiv+0xa8>
 8000992:	2b1f      	cmp	r3, #31
 8000994:	dc00      	bgt.n	8000998 <__aeabi_ddiv+0x3cc>
 8000996:	e0bf      	b.n	8000b18 <__aeabi_ddiv+0x54c>
 8000998:	211f      	movs	r1, #31
 800099a:	4249      	negs	r1, r1
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	4641      	mov	r1, r8
 80009a0:	40d1      	lsrs	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	2b20      	cmp	r3, #32
 80009a6:	d004      	beq.n	80009b2 <__aeabi_ddiv+0x3e6>
 80009a8:	4641      	mov	r1, r8
 80009aa:	4b80      	ldr	r3, [pc, #512]	; (8000bac <__aeabi_ddiv+0x5e0>)
 80009ac:	445b      	add	r3, fp
 80009ae:	4099      	lsls	r1, r3
 80009b0:	430d      	orrs	r5, r1
 80009b2:	1e6b      	subs	r3, r5, #1
 80009b4:	419d      	sbcs	r5, r3
 80009b6:	2307      	movs	r3, #7
 80009b8:	432a      	orrs	r2, r5
 80009ba:	001d      	movs	r5, r3
 80009bc:	2400      	movs	r4, #0
 80009be:	4015      	ands	r5, r2
 80009c0:	4213      	tst	r3, r2
 80009c2:	d100      	bne.n	80009c6 <__aeabi_ddiv+0x3fa>
 80009c4:	e0d4      	b.n	8000b70 <__aeabi_ddiv+0x5a4>
 80009c6:	210f      	movs	r1, #15
 80009c8:	2300      	movs	r3, #0
 80009ca:	4011      	ands	r1, r2
 80009cc:	2904      	cmp	r1, #4
 80009ce:	d100      	bne.n	80009d2 <__aeabi_ddiv+0x406>
 80009d0:	e0cb      	b.n	8000b6a <__aeabi_ddiv+0x59e>
 80009d2:	1d11      	adds	r1, r2, #4
 80009d4:	4291      	cmp	r1, r2
 80009d6:	4192      	sbcs	r2, r2
 80009d8:	4252      	negs	r2, r2
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	000a      	movs	r2, r1
 80009de:	0219      	lsls	r1, r3, #8
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_ddiv+0x418>
 80009e2:	e0c2      	b.n	8000b6a <__aeabi_ddiv+0x59e>
 80009e4:	2301      	movs	r3, #1
 80009e6:	2400      	movs	r4, #0
 80009e8:	2500      	movs	r5, #0
 80009ea:	e646      	b.n	800067a <__aeabi_ddiv+0xae>
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	4641      	mov	r1, r8
 80009f0:	031b      	lsls	r3, r3, #12
 80009f2:	4219      	tst	r1, r3
 80009f4:	d008      	beq.n	8000a08 <__aeabi_ddiv+0x43c>
 80009f6:	421c      	tst	r4, r3
 80009f8:	d106      	bne.n	8000a08 <__aeabi_ddiv+0x43c>
 80009fa:	431c      	orrs	r4, r3
 80009fc:	0324      	lsls	r4, r4, #12
 80009fe:	46ba      	mov	sl, r7
 8000a00:	0015      	movs	r5, r2
 8000a02:	4b69      	ldr	r3, [pc, #420]	; (8000ba8 <__aeabi_ddiv+0x5dc>)
 8000a04:	0b24      	lsrs	r4, r4, #12
 8000a06:	e638      	b.n	800067a <__aeabi_ddiv+0xae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	0324      	lsls	r4, r4, #12
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	0324      	lsls	r4, r4, #12
 8000a12:	46b2      	mov	sl, r6
 8000a14:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <__aeabi_ddiv+0x5dc>)
 8000a16:	0b24      	lsrs	r4, r4, #12
 8000a18:	e62f      	b.n	800067a <__aeabi_ddiv+0xae>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_ddiv+0x454>
 8000a1e:	e703      	b.n	8000828 <__aeabi_ddiv+0x25c>
 8000a20:	19a6      	adds	r6, r4, r6
 8000a22:	1e68      	subs	r0, r5, #1
 8000a24:	42a6      	cmp	r6, r4
 8000a26:	d200      	bcs.n	8000a2a <__aeabi_ddiv+0x45e>
 8000a28:	e08d      	b.n	8000b46 <__aeabi_ddiv+0x57a>
 8000a2a:	428e      	cmp	r6, r1
 8000a2c:	d200      	bcs.n	8000a30 <__aeabi_ddiv+0x464>
 8000a2e:	e0a3      	b.n	8000b78 <__aeabi_ddiv+0x5ac>
 8000a30:	d100      	bne.n	8000a34 <__aeabi_ddiv+0x468>
 8000a32:	e0b3      	b.n	8000b9c <__aeabi_ddiv+0x5d0>
 8000a34:	0005      	movs	r5, r0
 8000a36:	e6f5      	b.n	8000824 <__aeabi_ddiv+0x258>
 8000a38:	42aa      	cmp	r2, r5
 8000a3a:	d900      	bls.n	8000a3e <__aeabi_ddiv+0x472>
 8000a3c:	e639      	b.n	80006b2 <__aeabi_ddiv+0xe6>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	07de      	lsls	r6, r3, #31
 8000a42:	0858      	lsrs	r0, r3, #1
 8000a44:	086b      	lsrs	r3, r5, #1
 8000a46:	431e      	orrs	r6, r3
 8000a48:	07ed      	lsls	r5, r5, #31
 8000a4a:	e639      	b.n	80006c0 <__aeabi_ddiv+0xf4>
 8000a4c:	4648      	mov	r0, r9
 8000a4e:	f001 f83b 	bl	8001ac8 <__clzsi2>
 8000a52:	0001      	movs	r1, r0
 8000a54:	0002      	movs	r2, r0
 8000a56:	3115      	adds	r1, #21
 8000a58:	3220      	adds	r2, #32
 8000a5a:	291c      	cmp	r1, #28
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_ddiv+0x494>
 8000a5e:	e72c      	b.n	80008ba <__aeabi_ddiv+0x2ee>
 8000a60:	464b      	mov	r3, r9
 8000a62:	3808      	subs	r0, #8
 8000a64:	4083      	lsls	r3, r0
 8000a66:	2500      	movs	r5, #0
 8000a68:	4698      	mov	r8, r3
 8000a6a:	e732      	b.n	80008d2 <__aeabi_ddiv+0x306>
 8000a6c:	f001 f82c 	bl	8001ac8 <__clzsi2>
 8000a70:	0003      	movs	r3, r0
 8000a72:	001a      	movs	r2, r3
 8000a74:	3215      	adds	r2, #21
 8000a76:	3020      	adds	r0, #32
 8000a78:	2a1c      	cmp	r2, #28
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_ddiv+0x4b2>
 8000a7c:	e700      	b.n	8000880 <__aeabi_ddiv+0x2b4>
 8000a7e:	4654      	mov	r4, sl
 8000a80:	3b08      	subs	r3, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	409c      	lsls	r4, r3
 8000a86:	e705      	b.n	8000894 <__aeabi_ddiv+0x2c8>
 8000a88:	1936      	adds	r6, r6, r4
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	42b4      	cmp	r4, r6
 8000a8e:	d900      	bls.n	8000a92 <__aeabi_ddiv+0x4c6>
 8000a90:	e6a6      	b.n	80007e0 <__aeabi_ddiv+0x214>
 8000a92:	42b2      	cmp	r2, r6
 8000a94:	d800      	bhi.n	8000a98 <__aeabi_ddiv+0x4cc>
 8000a96:	e6a3      	b.n	80007e0 <__aeabi_ddiv+0x214>
 8000a98:	1e83      	subs	r3, r0, #2
 8000a9a:	1936      	adds	r6, r6, r4
 8000a9c:	e6a0      	b.n	80007e0 <__aeabi_ddiv+0x214>
 8000a9e:	1909      	adds	r1, r1, r4
 8000aa0:	3d01      	subs	r5, #1
 8000aa2:	428c      	cmp	r4, r1
 8000aa4:	d900      	bls.n	8000aa8 <__aeabi_ddiv+0x4dc>
 8000aa6:	e68d      	b.n	80007c4 <__aeabi_ddiv+0x1f8>
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	d800      	bhi.n	8000aae <__aeabi_ddiv+0x4e2>
 8000aac:	e68a      	b.n	80007c4 <__aeabi_ddiv+0x1f8>
 8000aae:	1e85      	subs	r5, r0, #2
 8000ab0:	1909      	adds	r1, r1, r4
 8000ab2:	e687      	b.n	80007c4 <__aeabi_ddiv+0x1f8>
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	402b      	ands	r3, r5
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d100      	bne.n	8000abe <__aeabi_ddiv+0x4f2>
 8000abc:	e6bc      	b.n	8000838 <__aeabi_ddiv+0x26c>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	42ab      	cmp	r3, r5
 8000ac4:	419b      	sbcs	r3, r3
 8000ac6:	3504      	adds	r5, #4
 8000ac8:	425b      	negs	r3, r3
 8000aca:	08ed      	lsrs	r5, r5, #3
 8000acc:	4498      	add	r8, r3
 8000ace:	e6b4      	b.n	800083a <__aeabi_ddiv+0x26e>
 8000ad0:	42af      	cmp	r7, r5
 8000ad2:	d900      	bls.n	8000ad6 <__aeabi_ddiv+0x50a>
 8000ad4:	e660      	b.n	8000798 <__aeabi_ddiv+0x1cc>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	d804      	bhi.n	8000ae4 <__aeabi_ddiv+0x518>
 8000ada:	d000      	beq.n	8000ade <__aeabi_ddiv+0x512>
 8000adc:	e65c      	b.n	8000798 <__aeabi_ddiv+0x1cc>
 8000ade:	42ae      	cmp	r6, r5
 8000ae0:	d800      	bhi.n	8000ae4 <__aeabi_ddiv+0x518>
 8000ae2:	e659      	b.n	8000798 <__aeabi_ddiv+0x1cc>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	469c      	mov	ip, r3
 8000aea:	9b00      	ldr	r3, [sp, #0]
 8000aec:	44e0      	add	r8, ip
 8000aee:	469c      	mov	ip, r3
 8000af0:	4465      	add	r5, ip
 8000af2:	429d      	cmp	r5, r3
 8000af4:	419b      	sbcs	r3, r3
 8000af6:	425b      	negs	r3, r3
 8000af8:	191b      	adds	r3, r3, r4
 8000afa:	18c0      	adds	r0, r0, r3
 8000afc:	e64d      	b.n	800079a <__aeabi_ddiv+0x1ce>
 8000afe:	428a      	cmp	r2, r1
 8000b00:	d800      	bhi.n	8000b04 <__aeabi_ddiv+0x538>
 8000b02:	e60e      	b.n	8000722 <__aeabi_ddiv+0x156>
 8000b04:	1e83      	subs	r3, r0, #2
 8000b06:	1909      	adds	r1, r1, r4
 8000b08:	e60b      	b.n	8000722 <__aeabi_ddiv+0x156>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	d800      	bhi.n	8000b10 <__aeabi_ddiv+0x544>
 8000b0e:	e5f4      	b.n	80006fa <__aeabi_ddiv+0x12e>
 8000b10:	1e83      	subs	r3, r0, #2
 8000b12:	4698      	mov	r8, r3
 8000b14:	1909      	adds	r1, r1, r4
 8000b16:	e5f0      	b.n	80006fa <__aeabi_ddiv+0x12e>
 8000b18:	4925      	ldr	r1, [pc, #148]	; (8000bb0 <__aeabi_ddiv+0x5e4>)
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	4459      	add	r1, fp
 8000b1e:	408d      	lsls	r5, r1
 8000b20:	4642      	mov	r2, r8
 8000b22:	408a      	lsls	r2, r1
 8000b24:	1e69      	subs	r1, r5, #1
 8000b26:	418d      	sbcs	r5, r1
 8000b28:	4641      	mov	r1, r8
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	40d9      	lsrs	r1, r3
 8000b2e:	4302      	orrs	r2, r0
 8000b30:	432a      	orrs	r2, r5
 8000b32:	000b      	movs	r3, r1
 8000b34:	0751      	lsls	r1, r2, #29
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x56e>
 8000b38:	e751      	b.n	80009de <__aeabi_ddiv+0x412>
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	4011      	ands	r1, r2
 8000b3e:	2904      	cmp	r1, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_ddiv+0x578>
 8000b42:	e746      	b.n	80009d2 <__aeabi_ddiv+0x406>
 8000b44:	e74b      	b.n	80009de <__aeabi_ddiv+0x412>
 8000b46:	0005      	movs	r5, r0
 8000b48:	428e      	cmp	r6, r1
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_ddiv+0x582>
 8000b4c:	e66a      	b.n	8000824 <__aeabi_ddiv+0x258>
 8000b4e:	9a00      	ldr	r2, [sp, #0]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d000      	beq.n	8000b56 <__aeabi_ddiv+0x58a>
 8000b54:	e666      	b.n	8000824 <__aeabi_ddiv+0x258>
 8000b56:	e667      	b.n	8000828 <__aeabi_ddiv+0x25c>
 8000b58:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <__aeabi_ddiv+0x5e8>)
 8000b5a:	445a      	add	r2, fp
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_ddiv+0x596>
 8000b60:	e710      	b.n	8000984 <__aeabi_ddiv+0x3b8>
 8000b62:	2301      	movs	r3, #1
 8000b64:	2500      	movs	r5, #0
 8000b66:	4498      	add	r8, r3
 8000b68:	e667      	b.n	800083a <__aeabi_ddiv+0x26e>
 8000b6a:	075d      	lsls	r5, r3, #29
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	0b1c      	lsrs	r4, r3, #12
 8000b70:	08d2      	lsrs	r2, r2, #3
 8000b72:	2300      	movs	r3, #0
 8000b74:	4315      	orrs	r5, r2
 8000b76:	e580      	b.n	800067a <__aeabi_ddiv+0xae>
 8000b78:	9800      	ldr	r0, [sp, #0]
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	0042      	lsls	r2, r0, #1
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	41bf      	sbcs	r7, r7
 8000b82:	427f      	negs	r7, r7
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	1936      	adds	r6, r6, r4
 8000b88:	9200      	str	r2, [sp, #0]
 8000b8a:	e7dd      	b.n	8000b48 <__aeabi_ddiv+0x57c>
 8000b8c:	2480      	movs	r4, #128	; 0x80
 8000b8e:	4643      	mov	r3, r8
 8000b90:	0324      	lsls	r4, r4, #12
 8000b92:	431c      	orrs	r4, r3
 8000b94:	0324      	lsls	r4, r4, #12
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__aeabi_ddiv+0x5dc>)
 8000b98:	0b24      	lsrs	r4, r4, #12
 8000b9a:	e56e      	b.n	800067a <__aeabi_ddiv+0xae>
 8000b9c:	9a00      	ldr	r2, [sp, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3ea      	bcc.n	8000b78 <__aeabi_ddiv+0x5ac>
 8000ba2:	0005      	movs	r5, r0
 8000ba4:	e7d3      	b.n	8000b4e <__aeabi_ddiv+0x582>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	000007ff 	.word	0x000007ff
 8000bac:	0000043e 	.word	0x0000043e
 8000bb0:	0000041e 	.word	0x0000041e
 8000bb4:	000003ff 	.word	0x000003ff

08000bb8 <__eqdf2>:
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	464e      	mov	r6, r9
 8000bbc:	4645      	mov	r5, r8
 8000bbe:	46de      	mov	lr, fp
 8000bc0:	4657      	mov	r7, sl
 8000bc2:	4690      	mov	r8, r2
 8000bc4:	b5e0      	push	{r5, r6, r7, lr}
 8000bc6:	0017      	movs	r7, r2
 8000bc8:	031a      	lsls	r2, r3, #12
 8000bca:	0b12      	lsrs	r2, r2, #12
 8000bcc:	0005      	movs	r5, r0
 8000bce:	4684      	mov	ip, r0
 8000bd0:	4819      	ldr	r0, [pc, #100]	; (8000c38 <__eqdf2+0x80>)
 8000bd2:	030e      	lsls	r6, r1, #12
 8000bd4:	004c      	lsls	r4, r1, #1
 8000bd6:	4691      	mov	r9, r2
 8000bd8:	005a      	lsls	r2, r3, #1
 8000bda:	0fdb      	lsrs	r3, r3, #31
 8000bdc:	469b      	mov	fp, r3
 8000bde:	0b36      	lsrs	r6, r6, #12
 8000be0:	0d64      	lsrs	r4, r4, #21
 8000be2:	0fc9      	lsrs	r1, r1, #31
 8000be4:	0d52      	lsrs	r2, r2, #21
 8000be6:	4284      	cmp	r4, r0
 8000be8:	d019      	beq.n	8000c1e <__eqdf2+0x66>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	d010      	beq.n	8000c10 <__eqdf2+0x58>
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4294      	cmp	r4, r2
 8000bf2:	d10e      	bne.n	8000c12 <__eqdf2+0x5a>
 8000bf4:	454e      	cmp	r6, r9
 8000bf6:	d10c      	bne.n	8000c12 <__eqdf2+0x5a>
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	45c4      	cmp	ip, r8
 8000bfc:	d109      	bne.n	8000c12 <__eqdf2+0x5a>
 8000bfe:	4559      	cmp	r1, fp
 8000c00:	d017      	beq.n	8000c32 <__eqdf2+0x7a>
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d105      	bne.n	8000c12 <__eqdf2+0x5a>
 8000c06:	0030      	movs	r0, r6
 8000c08:	4328      	orrs	r0, r5
 8000c0a:	1e43      	subs	r3, r0, #1
 8000c0c:	4198      	sbcs	r0, r3
 8000c0e:	e000      	b.n	8000c12 <__eqdf2+0x5a>
 8000c10:	2001      	movs	r0, #1
 8000c12:	bcf0      	pop	{r4, r5, r6, r7}
 8000c14:	46bb      	mov	fp, r7
 8000c16:	46b2      	mov	sl, r6
 8000c18:	46a9      	mov	r9, r5
 8000c1a:	46a0      	mov	r8, r4
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1e:	0033      	movs	r3, r6
 8000c20:	2001      	movs	r0, #1
 8000c22:	432b      	orrs	r3, r5
 8000c24:	d1f5      	bne.n	8000c12 <__eqdf2+0x5a>
 8000c26:	42a2      	cmp	r2, r4
 8000c28:	d1f3      	bne.n	8000c12 <__eqdf2+0x5a>
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	433b      	orrs	r3, r7
 8000c2e:	d1f0      	bne.n	8000c12 <__eqdf2+0x5a>
 8000c30:	e7e2      	b.n	8000bf8 <__eqdf2+0x40>
 8000c32:	2000      	movs	r0, #0
 8000c34:	e7ed      	b.n	8000c12 <__eqdf2+0x5a>
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	000007ff 	.word	0x000007ff

08000c3c <__gedf2>:
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	4647      	mov	r7, r8
 8000c40:	46ce      	mov	lr, r9
 8000c42:	0004      	movs	r4, r0
 8000c44:	0018      	movs	r0, r3
 8000c46:	0016      	movs	r6, r2
 8000c48:	031b      	lsls	r3, r3, #12
 8000c4a:	0b1b      	lsrs	r3, r3, #12
 8000c4c:	4d2d      	ldr	r5, [pc, #180]	; (8000d04 <__gedf2+0xc8>)
 8000c4e:	004a      	lsls	r2, r1, #1
 8000c50:	4699      	mov	r9, r3
 8000c52:	b580      	push	{r7, lr}
 8000c54:	0043      	lsls	r3, r0, #1
 8000c56:	030f      	lsls	r7, r1, #12
 8000c58:	46a4      	mov	ip, r4
 8000c5a:	46b0      	mov	r8, r6
 8000c5c:	0b3f      	lsrs	r7, r7, #12
 8000c5e:	0d52      	lsrs	r2, r2, #21
 8000c60:	0fc9      	lsrs	r1, r1, #31
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	0fc0      	lsrs	r0, r0, #31
 8000c66:	42aa      	cmp	r2, r5
 8000c68:	d021      	beq.n	8000cae <__gedf2+0x72>
 8000c6a:	42ab      	cmp	r3, r5
 8000c6c:	d013      	beq.n	8000c96 <__gedf2+0x5a>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d122      	bne.n	8000cb8 <__gedf2+0x7c>
 8000c72:	433c      	orrs	r4, r7
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <__gedf2+0x42>
 8000c78:	464d      	mov	r5, r9
 8000c7a:	432e      	orrs	r6, r5
 8000c7c:	d022      	beq.n	8000cc4 <__gedf2+0x88>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d010      	beq.n	8000ca4 <__gedf2+0x68>
 8000c82:	4281      	cmp	r1, r0
 8000c84:	d022      	beq.n	8000ccc <__gedf2+0x90>
 8000c86:	2002      	movs	r0, #2
 8000c88:	3901      	subs	r1, #1
 8000c8a:	4008      	ands	r0, r1
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	bcc0      	pop	{r6, r7}
 8000c90:	46b9      	mov	r9, r7
 8000c92:	46b0      	mov	r8, r6
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	464d      	mov	r5, r9
 8000c98:	432e      	orrs	r6, r5
 8000c9a:	d129      	bne.n	8000cf0 <__gedf2+0xb4>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d1f0      	bne.n	8000c82 <__gedf2+0x46>
 8000ca0:	433c      	orrs	r4, r7
 8000ca2:	d1ee      	bne.n	8000c82 <__gedf2+0x46>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d1f2      	bne.n	8000c8e <__gedf2+0x52>
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4240      	negs	r0, r0
 8000cac:	e7ef      	b.n	8000c8e <__gedf2+0x52>
 8000cae:	003d      	movs	r5, r7
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	d11d      	bne.n	8000cf0 <__gedf2+0xb4>
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d0ee      	beq.n	8000c96 <__gedf2+0x5a>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e2      	bne.n	8000c82 <__gedf2+0x46>
 8000cbc:	464c      	mov	r4, r9
 8000cbe:	4326      	orrs	r6, r4
 8000cc0:	d1df      	bne.n	8000c82 <__gedf2+0x46>
 8000cc2:	e7e0      	b.n	8000c86 <__gedf2+0x4a>
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d0e1      	beq.n	8000c8e <__gedf2+0x52>
 8000cca:	e7dc      	b.n	8000c86 <__gedf2+0x4a>
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dc0a      	bgt.n	8000ce6 <__gedf2+0xaa>
 8000cd0:	dbe8      	blt.n	8000ca4 <__gedf2+0x68>
 8000cd2:	454f      	cmp	r7, r9
 8000cd4:	d8d7      	bhi.n	8000c86 <__gedf2+0x4a>
 8000cd6:	d00e      	beq.n	8000cf6 <__gedf2+0xba>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	454f      	cmp	r7, r9
 8000cdc:	d2d7      	bcs.n	8000c8e <__gedf2+0x52>
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d0e2      	beq.n	8000ca8 <__gedf2+0x6c>
 8000ce2:	0008      	movs	r0, r1
 8000ce4:	e7d3      	b.n	8000c8e <__gedf2+0x52>
 8000ce6:	4243      	negs	r3, r0
 8000ce8:	4158      	adcs	r0, r3
 8000cea:	0040      	lsls	r0, r0, #1
 8000cec:	3801      	subs	r0, #1
 8000cee:	e7ce      	b.n	8000c8e <__gedf2+0x52>
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	e7cb      	b.n	8000c8e <__gedf2+0x52>
 8000cf6:	45c4      	cmp	ip, r8
 8000cf8:	d8c5      	bhi.n	8000c86 <__gedf2+0x4a>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	45c4      	cmp	ip, r8
 8000cfe:	d2c6      	bcs.n	8000c8e <__gedf2+0x52>
 8000d00:	e7ed      	b.n	8000cde <__gedf2+0xa2>
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	000007ff 	.word	0x000007ff

08000d08 <__ledf2>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	0004      	movs	r4, r0
 8000d10:	0018      	movs	r0, r3
 8000d12:	0016      	movs	r6, r2
 8000d14:	031b      	lsls	r3, r3, #12
 8000d16:	0b1b      	lsrs	r3, r3, #12
 8000d18:	4d2c      	ldr	r5, [pc, #176]	; (8000dcc <__ledf2+0xc4>)
 8000d1a:	004a      	lsls	r2, r1, #1
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	0043      	lsls	r3, r0, #1
 8000d22:	030f      	lsls	r7, r1, #12
 8000d24:	46a4      	mov	ip, r4
 8000d26:	46b0      	mov	r8, r6
 8000d28:	0b3f      	lsrs	r7, r7, #12
 8000d2a:	0d52      	lsrs	r2, r2, #21
 8000d2c:	0fc9      	lsrs	r1, r1, #31
 8000d2e:	0d5b      	lsrs	r3, r3, #21
 8000d30:	0fc0      	lsrs	r0, r0, #31
 8000d32:	42aa      	cmp	r2, r5
 8000d34:	d00d      	beq.n	8000d52 <__ledf2+0x4a>
 8000d36:	42ab      	cmp	r3, r5
 8000d38:	d010      	beq.n	8000d5c <__ledf2+0x54>
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d127      	bne.n	8000d8e <__ledf2+0x86>
 8000d3e:	433c      	orrs	r4, r7
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <__ledf2+0x60>
 8000d44:	464d      	mov	r5, r9
 8000d46:	432e      	orrs	r6, r5
 8000d48:	d10e      	bne.n	8000d68 <__ledf2+0x60>
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	2c00      	cmp	r4, #0
 8000d4e:	d015      	beq.n	8000d7c <__ledf2+0x74>
 8000d50:	e00e      	b.n	8000d70 <__ledf2+0x68>
 8000d52:	003d      	movs	r5, r7
 8000d54:	4325      	orrs	r5, r4
 8000d56:	d110      	bne.n	8000d7a <__ledf2+0x72>
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d118      	bne.n	8000d8e <__ledf2+0x86>
 8000d5c:	464d      	mov	r5, r9
 8000d5e:	432e      	orrs	r6, r5
 8000d60:	d10b      	bne.n	8000d7a <__ledf2+0x72>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d102      	bne.n	8000d6c <__ledf2+0x64>
 8000d66:	433c      	orrs	r4, r7
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d00b      	beq.n	8000d84 <__ledf2+0x7c>
 8000d6c:	4281      	cmp	r1, r0
 8000d6e:	d014      	beq.n	8000d9a <__ledf2+0x92>
 8000d70:	2002      	movs	r0, #2
 8000d72:	3901      	subs	r1, #1
 8000d74:	4008      	ands	r0, r1
 8000d76:	3801      	subs	r0, #1
 8000d78:	e000      	b.n	8000d7c <__ledf2+0x74>
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	bcc0      	pop	{r6, r7}
 8000d7e:	46b9      	mov	r9, r7
 8000d80:	46b0      	mov	r8, r6
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d1f9      	bne.n	8000d7c <__ledf2+0x74>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	4240      	negs	r0, r0
 8000d8c:	e7f6      	b.n	8000d7c <__ledf2+0x74>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ec      	bne.n	8000d6c <__ledf2+0x64>
 8000d92:	464c      	mov	r4, r9
 8000d94:	4326      	orrs	r6, r4
 8000d96:	d1e9      	bne.n	8000d6c <__ledf2+0x64>
 8000d98:	e7ea      	b.n	8000d70 <__ledf2+0x68>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dd04      	ble.n	8000da8 <__ledf2+0xa0>
 8000d9e:	4243      	negs	r3, r0
 8000da0:	4158      	adcs	r0, r3
 8000da2:	0040      	lsls	r0, r0, #1
 8000da4:	3801      	subs	r0, #1
 8000da6:	e7e9      	b.n	8000d7c <__ledf2+0x74>
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbeb      	blt.n	8000d84 <__ledf2+0x7c>
 8000dac:	454f      	cmp	r7, r9
 8000dae:	d8df      	bhi.n	8000d70 <__ledf2+0x68>
 8000db0:	d006      	beq.n	8000dc0 <__ledf2+0xb8>
 8000db2:	2000      	movs	r0, #0
 8000db4:	454f      	cmp	r7, r9
 8000db6:	d2e1      	bcs.n	8000d7c <__ledf2+0x74>
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d0e5      	beq.n	8000d88 <__ledf2+0x80>
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	e7dd      	b.n	8000d7c <__ledf2+0x74>
 8000dc0:	45c4      	cmp	ip, r8
 8000dc2:	d8d5      	bhi.n	8000d70 <__ledf2+0x68>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	45c4      	cmp	ip, r8
 8000dc8:	d2d8      	bcs.n	8000d7c <__ledf2+0x74>
 8000dca:	e7f5      	b.n	8000db8 <__ledf2+0xb0>
 8000dcc:	000007ff 	.word	0x000007ff

08000dd0 <__aeabi_dmul>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	4645      	mov	r5, r8
 8000dd8:	46de      	mov	lr, fp
 8000dda:	b5e0      	push	{r5, r6, r7, lr}
 8000ddc:	4698      	mov	r8, r3
 8000dde:	030c      	lsls	r4, r1, #12
 8000de0:	004b      	lsls	r3, r1, #1
 8000de2:	0006      	movs	r6, r0
 8000de4:	4692      	mov	sl, r2
 8000de6:	b087      	sub	sp, #28
 8000de8:	0b24      	lsrs	r4, r4, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	0fcf      	lsrs	r7, r1, #31
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dmul+0x24>
 8000df2:	e15c      	b.n	80010ae <__aeabi_dmul+0x2de>
 8000df4:	4ad9      	ldr	r2, [pc, #868]	; (800115c <__aeabi_dmul+0x38c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dmul+0x2c>
 8000dfa:	e175      	b.n	80010e8 <__aeabi_dmul+0x318>
 8000dfc:	0f42      	lsrs	r2, r0, #29
 8000dfe:	00e4      	lsls	r4, r4, #3
 8000e00:	4314      	orrs	r4, r2
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0412      	lsls	r2, r2, #16
 8000e06:	4314      	orrs	r4, r2
 8000e08:	4ad5      	ldr	r2, [pc, #852]	; (8001160 <__aeabi_dmul+0x390>)
 8000e0a:	00c5      	lsls	r5, r0, #3
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	4699      	mov	r9, r3
 8000e16:	469b      	mov	fp, r3
 8000e18:	4643      	mov	r3, r8
 8000e1a:	4642      	mov	r2, r8
 8000e1c:	031e      	lsls	r6, r3, #12
 8000e1e:	0fd2      	lsrs	r2, r2, #31
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4650      	mov	r0, sl
 8000e24:	4690      	mov	r8, r2
 8000e26:	0b36      	lsrs	r6, r6, #12
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dmul+0x5e>
 8000e2c:	e120      	b.n	8001070 <__aeabi_dmul+0x2a0>
 8000e2e:	4acb      	ldr	r2, [pc, #812]	; (800115c <__aeabi_dmul+0x38c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dmul+0x66>
 8000e34:	e162      	b.n	80010fc <__aeabi_dmul+0x32c>
 8000e36:	49ca      	ldr	r1, [pc, #808]	; (8001160 <__aeabi_dmul+0x390>)
 8000e38:	0f42      	lsrs	r2, r0, #29
 8000e3a:	468c      	mov	ip, r1
 8000e3c:	9900      	ldr	r1, [sp, #0]
 8000e3e:	4463      	add	r3, ip
 8000e40:	00f6      	lsls	r6, r6, #3
 8000e42:	468c      	mov	ip, r1
 8000e44:	4316      	orrs	r6, r2
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	449c      	add	ip, r3
 8000e4a:	0412      	lsls	r2, r2, #16
 8000e4c:	4663      	mov	r3, ip
 8000e4e:	4316      	orrs	r6, r2
 8000e50:	00c2      	lsls	r2, r0, #3
 8000e52:	2000      	movs	r0, #0
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	9900      	ldr	r1, [sp, #0]
 8000e58:	4643      	mov	r3, r8
 8000e5a:	3101      	adds	r1, #1
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	4649      	mov	r1, r9
 8000e60:	407b      	eors	r3, r7
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	290f      	cmp	r1, #15
 8000e66:	d826      	bhi.n	8000eb6 <__aeabi_dmul+0xe6>
 8000e68:	4bbe      	ldr	r3, [pc, #760]	; (8001164 <__aeabi_dmul+0x394>)
 8000e6a:	0089      	lsls	r1, r1, #2
 8000e6c:	5859      	ldr	r1, [r3, r1]
 8000e6e:	468f      	mov	pc, r1
 8000e70:	4643      	mov	r3, r8
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	0034      	movs	r4, r6
 8000e76:	0015      	movs	r5, r2
 8000e78:	4683      	mov	fp, r0
 8000e7a:	465b      	mov	r3, fp
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d016      	beq.n	8000eae <__aeabi_dmul+0xde>
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dmul+0xb6>
 8000e84:	e203      	b.n	800128e <__aeabi_dmul+0x4be>
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d000      	beq.n	8000e8c <__aeabi_dmul+0xbc>
 8000e8a:	e0cd      	b.n	8001028 <__aeabi_dmul+0x258>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2400      	movs	r4, #0
 8000e90:	2500      	movs	r5, #0
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	0512      	lsls	r2, r2, #20
 8000e96:	4322      	orrs	r2, r4
 8000e98:	07db      	lsls	r3, r3, #31
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	0028      	movs	r0, r5
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	b007      	add	sp, #28
 8000ea2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea4:	46bb      	mov	fp, r7
 8000ea6:	46b2      	mov	sl, r6
 8000ea8:	46a9      	mov	r9, r5
 8000eaa:	46a0      	mov	r8, r4
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	2400      	movs	r4, #0
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	4aaa      	ldr	r2, [pc, #680]	; (800115c <__aeabi_dmul+0x38c>)
 8000eb4:	e7ed      	b.n	8000e92 <__aeabi_dmul+0xc2>
 8000eb6:	0c28      	lsrs	r0, r5, #16
 8000eb8:	042d      	lsls	r5, r5, #16
 8000eba:	0c2d      	lsrs	r5, r5, #16
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	0c11      	lsrs	r1, r2, #16
 8000ec0:	0412      	lsls	r2, r2, #16
 8000ec2:	0c12      	lsrs	r2, r2, #16
 8000ec4:	4353      	muls	r3, r2
 8000ec6:	4698      	mov	r8, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	002f      	movs	r7, r5
 8000ecc:	4343      	muls	r3, r0
 8000ece:	4699      	mov	r9, r3
 8000ed0:	434f      	muls	r7, r1
 8000ed2:	444f      	add	r7, r9
 8000ed4:	46bb      	mov	fp, r7
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	000b      	movs	r3, r1
 8000eda:	0c3f      	lsrs	r7, r7, #16
 8000edc:	46ba      	mov	sl, r7
 8000ede:	4343      	muls	r3, r0
 8000ee0:	44da      	add	sl, fp
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	45d1      	cmp	r9, sl
 8000ee6:	d904      	bls.n	8000ef2 <__aeabi_dmul+0x122>
 8000ee8:	2780      	movs	r7, #128	; 0x80
 8000eea:	027f      	lsls	r7, r7, #9
 8000eec:	46b9      	mov	r9, r7
 8000eee:	444b      	add	r3, r9
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	4653      	mov	r3, sl
 8000ef4:	0c1b      	lsrs	r3, r3, #16
 8000ef6:	469b      	mov	fp, r3
 8000ef8:	4653      	mov	r3, sl
 8000efa:	041f      	lsls	r7, r3, #16
 8000efc:	4643      	mov	r3, r8
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	4698      	mov	r8, r3
 8000f04:	003b      	movs	r3, r7
 8000f06:	4443      	add	r3, r8
 8000f08:	9304      	str	r3, [sp, #16]
 8000f0a:	0c33      	lsrs	r3, r6, #16
 8000f0c:	0436      	lsls	r6, r6, #16
 8000f0e:	0c36      	lsrs	r6, r6, #16
 8000f10:	4698      	mov	r8, r3
 8000f12:	0033      	movs	r3, r6
 8000f14:	4343      	muls	r3, r0
 8000f16:	4699      	mov	r9, r3
 8000f18:	4643      	mov	r3, r8
 8000f1a:	4343      	muls	r3, r0
 8000f1c:	002f      	movs	r7, r5
 8000f1e:	469a      	mov	sl, r3
 8000f20:	4643      	mov	r3, r8
 8000f22:	4377      	muls	r7, r6
 8000f24:	435d      	muls	r5, r3
 8000f26:	0c38      	lsrs	r0, r7, #16
 8000f28:	444d      	add	r5, r9
 8000f2a:	1945      	adds	r5, r0, r5
 8000f2c:	45a9      	cmp	r9, r5
 8000f2e:	d903      	bls.n	8000f38 <__aeabi_dmul+0x168>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	4699      	mov	r9, r3
 8000f36:	44ca      	add	sl, r9
 8000f38:	043f      	lsls	r7, r7, #16
 8000f3a:	0c28      	lsrs	r0, r5, #16
 8000f3c:	0c3f      	lsrs	r7, r7, #16
 8000f3e:	042d      	lsls	r5, r5, #16
 8000f40:	19ed      	adds	r5, r5, r7
 8000f42:	0c27      	lsrs	r7, r4, #16
 8000f44:	0424      	lsls	r4, r4, #16
 8000f46:	0c24      	lsrs	r4, r4, #16
 8000f48:	0003      	movs	r3, r0
 8000f4a:	0020      	movs	r0, r4
 8000f4c:	4350      	muls	r0, r2
 8000f4e:	437a      	muls	r2, r7
 8000f50:	4691      	mov	r9, r2
 8000f52:	003a      	movs	r2, r7
 8000f54:	4453      	add	r3, sl
 8000f56:	9305      	str	r3, [sp, #20]
 8000f58:	0c03      	lsrs	r3, r0, #16
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	434a      	muls	r2, r1
 8000f5e:	4361      	muls	r1, r4
 8000f60:	4449      	add	r1, r9
 8000f62:	4451      	add	r1, sl
 8000f64:	44ab      	add	fp, r5
 8000f66:	4589      	cmp	r9, r1
 8000f68:	d903      	bls.n	8000f72 <__aeabi_dmul+0x1a2>
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	025b      	lsls	r3, r3, #9
 8000f6e:	4699      	mov	r9, r3
 8000f70:	444a      	add	r2, r9
 8000f72:	0400      	lsls	r0, r0, #16
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	0c00      	lsrs	r0, r0, #16
 8000f78:	0409      	lsls	r1, r1, #16
 8000f7a:	1809      	adds	r1, r1, r0
 8000f7c:	0020      	movs	r0, r4
 8000f7e:	4699      	mov	r9, r3
 8000f80:	4643      	mov	r3, r8
 8000f82:	4370      	muls	r0, r6
 8000f84:	435c      	muls	r4, r3
 8000f86:	437e      	muls	r6, r7
 8000f88:	435f      	muls	r7, r3
 8000f8a:	0c03      	lsrs	r3, r0, #16
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	19a4      	adds	r4, r4, r6
 8000f90:	4444      	add	r4, r8
 8000f92:	444a      	add	r2, r9
 8000f94:	9703      	str	r7, [sp, #12]
 8000f96:	42a6      	cmp	r6, r4
 8000f98:	d904      	bls.n	8000fa4 <__aeabi_dmul+0x1d4>
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4447      	add	r7, r8
 8000fa2:	9703      	str	r7, [sp, #12]
 8000fa4:	0423      	lsls	r3, r4, #16
 8000fa6:	9e02      	ldr	r6, [sp, #8]
 8000fa8:	469a      	mov	sl, r3
 8000faa:	9b05      	ldr	r3, [sp, #20]
 8000fac:	445e      	add	r6, fp
 8000fae:	4698      	mov	r8, r3
 8000fb0:	42ae      	cmp	r6, r5
 8000fb2:	41ad      	sbcs	r5, r5
 8000fb4:	1876      	adds	r6, r6, r1
 8000fb6:	428e      	cmp	r6, r1
 8000fb8:	4189      	sbcs	r1, r1
 8000fba:	0400      	lsls	r0, r0, #16
 8000fbc:	0c00      	lsrs	r0, r0, #16
 8000fbe:	4450      	add	r0, sl
 8000fc0:	4440      	add	r0, r8
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	1947      	adds	r7, r0, r5
 8000fc6:	46b8      	mov	r8, r7
 8000fc8:	4693      	mov	fp, r2
 8000fca:	4249      	negs	r1, r1
 8000fcc:	4689      	mov	r9, r1
 8000fce:	44c3      	add	fp, r8
 8000fd0:	44d9      	add	r9, fp
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	4180      	sbcs	r0, r0
 8000fd6:	45a8      	cmp	r8, r5
 8000fd8:	41ad      	sbcs	r5, r5
 8000fda:	4593      	cmp	fp, r2
 8000fdc:	4192      	sbcs	r2, r2
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	4189      	sbcs	r1, r1
 8000fe2:	426d      	negs	r5, r5
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	4328      	orrs	r0, r5
 8000fe8:	0c24      	lsrs	r4, r4, #16
 8000fea:	4252      	negs	r2, r2
 8000fec:	4249      	negs	r1, r1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	9b03      	ldr	r3, [sp, #12]
 8000ff2:	1900      	adds	r0, r0, r4
 8000ff4:	1880      	adds	r0, r0, r2
 8000ff6:	18c7      	adds	r7, r0, r3
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	0ddc      	lsrs	r4, r3, #23
 8000ffc:	9b04      	ldr	r3, [sp, #16]
 8000ffe:	0275      	lsls	r5, r6, #9
 8001000:	431d      	orrs	r5, r3
 8001002:	1e6a      	subs	r2, r5, #1
 8001004:	4195      	sbcs	r5, r2
 8001006:	464b      	mov	r3, r9
 8001008:	0df6      	lsrs	r6, r6, #23
 800100a:	027f      	lsls	r7, r7, #9
 800100c:	4335      	orrs	r5, r6
 800100e:	025a      	lsls	r2, r3, #9
 8001010:	433c      	orrs	r4, r7
 8001012:	4315      	orrs	r5, r2
 8001014:	01fb      	lsls	r3, r7, #7
 8001016:	d400      	bmi.n	800101a <__aeabi_dmul+0x24a>
 8001018:	e11c      	b.n	8001254 <__aeabi_dmul+0x484>
 800101a:	2101      	movs	r1, #1
 800101c:	086a      	lsrs	r2, r5, #1
 800101e:	400d      	ands	r5, r1
 8001020:	4315      	orrs	r5, r2
 8001022:	07e2      	lsls	r2, r4, #31
 8001024:	4315      	orrs	r5, r2
 8001026:	0864      	lsrs	r4, r4, #1
 8001028:	494f      	ldr	r1, [pc, #316]	; (8001168 <__aeabi_dmul+0x398>)
 800102a:	4461      	add	r1, ip
 800102c:	2900      	cmp	r1, #0
 800102e:	dc00      	bgt.n	8001032 <__aeabi_dmul+0x262>
 8001030:	e0b0      	b.n	8001194 <__aeabi_dmul+0x3c4>
 8001032:	076b      	lsls	r3, r5, #29
 8001034:	d009      	beq.n	800104a <__aeabi_dmul+0x27a>
 8001036:	220f      	movs	r2, #15
 8001038:	402a      	ands	r2, r5
 800103a:	2a04      	cmp	r2, #4
 800103c:	d005      	beq.n	800104a <__aeabi_dmul+0x27a>
 800103e:	1d2a      	adds	r2, r5, #4
 8001040:	42aa      	cmp	r2, r5
 8001042:	41ad      	sbcs	r5, r5
 8001044:	426d      	negs	r5, r5
 8001046:	1964      	adds	r4, r4, r5
 8001048:	0015      	movs	r5, r2
 800104a:	01e3      	lsls	r3, r4, #7
 800104c:	d504      	bpl.n	8001058 <__aeabi_dmul+0x288>
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <__aeabi_dmul+0x39c>)
 8001052:	00c9      	lsls	r1, r1, #3
 8001054:	4014      	ands	r4, r2
 8001056:	4461      	add	r1, ip
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <__aeabi_dmul+0x3a0>)
 800105a:	4291      	cmp	r1, r2
 800105c:	dd00      	ble.n	8001060 <__aeabi_dmul+0x290>
 800105e:	e726      	b.n	8000eae <__aeabi_dmul+0xde>
 8001060:	0762      	lsls	r2, r4, #29
 8001062:	08ed      	lsrs	r5, r5, #3
 8001064:	0264      	lsls	r4, r4, #9
 8001066:	0549      	lsls	r1, r1, #21
 8001068:	4315      	orrs	r5, r2
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d4a      	lsrs	r2, r1, #21
 800106e:	e710      	b.n	8000e92 <__aeabi_dmul+0xc2>
 8001070:	4652      	mov	r2, sl
 8001072:	4332      	orrs	r2, r6
 8001074:	d100      	bne.n	8001078 <__aeabi_dmul+0x2a8>
 8001076:	e07f      	b.n	8001178 <__aeabi_dmul+0x3a8>
 8001078:	2e00      	cmp	r6, #0
 800107a:	d100      	bne.n	800107e <__aeabi_dmul+0x2ae>
 800107c:	e0dc      	b.n	8001238 <__aeabi_dmul+0x468>
 800107e:	0030      	movs	r0, r6
 8001080:	f000 fd22 	bl	8001ac8 <__clzsi2>
 8001084:	0002      	movs	r2, r0
 8001086:	3a0b      	subs	r2, #11
 8001088:	231d      	movs	r3, #29
 800108a:	0001      	movs	r1, r0
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4652      	mov	r2, sl
 8001090:	3908      	subs	r1, #8
 8001092:	40da      	lsrs	r2, r3
 8001094:	408e      	lsls	r6, r1
 8001096:	4316      	orrs	r6, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	9b00      	ldr	r3, [sp, #0]
 800109e:	4935      	ldr	r1, [pc, #212]	; (8001174 <__aeabi_dmul+0x3a4>)
 80010a0:	1a18      	subs	r0, r3, r0
 80010a2:	0003      	movs	r3, r0
 80010a4:	468c      	mov	ip, r1
 80010a6:	4463      	add	r3, ip
 80010a8:	2000      	movs	r0, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	e6d3      	b.n	8000e56 <__aeabi_dmul+0x86>
 80010ae:	0025      	movs	r5, r4
 80010b0:	4305      	orrs	r5, r0
 80010b2:	d04a      	beq.n	800114a <__aeabi_dmul+0x37a>
 80010b4:	2c00      	cmp	r4, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_dmul+0x2ea>
 80010b8:	e0b0      	b.n	800121c <__aeabi_dmul+0x44c>
 80010ba:	0020      	movs	r0, r4
 80010bc:	f000 fd04 	bl	8001ac8 <__clzsi2>
 80010c0:	0001      	movs	r1, r0
 80010c2:	0002      	movs	r2, r0
 80010c4:	390b      	subs	r1, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	0010      	movs	r0, r2
 80010ca:	1a5b      	subs	r3, r3, r1
 80010cc:	0031      	movs	r1, r6
 80010ce:	0035      	movs	r5, r6
 80010d0:	3808      	subs	r0, #8
 80010d2:	4084      	lsls	r4, r0
 80010d4:	40d9      	lsrs	r1, r3
 80010d6:	4085      	lsls	r5, r0
 80010d8:	430c      	orrs	r4, r1
 80010da:	4826      	ldr	r0, [pc, #152]	; (8001174 <__aeabi_dmul+0x3a4>)
 80010dc:	1a83      	subs	r3, r0, r2
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	4699      	mov	r9, r3
 80010e4:	469b      	mov	fp, r3
 80010e6:	e697      	b.n	8000e18 <__aeabi_dmul+0x48>
 80010e8:	0005      	movs	r5, r0
 80010ea:	4325      	orrs	r5, r4
 80010ec:	d126      	bne.n	800113c <__aeabi_dmul+0x36c>
 80010ee:	2208      	movs	r2, #8
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2302      	movs	r3, #2
 80010f4:	2400      	movs	r4, #0
 80010f6:	4691      	mov	r9, r2
 80010f8:	469b      	mov	fp, r3
 80010fa:	e68d      	b.n	8000e18 <__aeabi_dmul+0x48>
 80010fc:	4652      	mov	r2, sl
 80010fe:	9b00      	ldr	r3, [sp, #0]
 8001100:	4332      	orrs	r2, r6
 8001102:	d110      	bne.n	8001126 <__aeabi_dmul+0x356>
 8001104:	4915      	ldr	r1, [pc, #84]	; (800115c <__aeabi_dmul+0x38c>)
 8001106:	2600      	movs	r6, #0
 8001108:	468c      	mov	ip, r1
 800110a:	4463      	add	r3, ip
 800110c:	4649      	mov	r1, r9
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2302      	movs	r3, #2
 8001112:	4319      	orrs	r1, r3
 8001114:	4689      	mov	r9, r1
 8001116:	2002      	movs	r0, #2
 8001118:	e69d      	b.n	8000e56 <__aeabi_dmul+0x86>
 800111a:	465b      	mov	r3, fp
 800111c:	9701      	str	r7, [sp, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d000      	beq.n	8001124 <__aeabi_dmul+0x354>
 8001122:	e6ad      	b.n	8000e80 <__aeabi_dmul+0xb0>
 8001124:	e6c3      	b.n	8000eae <__aeabi_dmul+0xde>
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <__aeabi_dmul+0x38c>)
 8001128:	2003      	movs	r0, #3
 800112a:	4694      	mov	ip, r2
 800112c:	4463      	add	r3, ip
 800112e:	464a      	mov	r2, r9
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2303      	movs	r3, #3
 8001134:	431a      	orrs	r2, r3
 8001136:	4691      	mov	r9, r2
 8001138:	4652      	mov	r2, sl
 800113a:	e68c      	b.n	8000e56 <__aeabi_dmul+0x86>
 800113c:	220c      	movs	r2, #12
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2303      	movs	r3, #3
 8001142:	0005      	movs	r5, r0
 8001144:	4691      	mov	r9, r2
 8001146:	469b      	mov	fp, r3
 8001148:	e666      	b.n	8000e18 <__aeabi_dmul+0x48>
 800114a:	2304      	movs	r3, #4
 800114c:	4699      	mov	r9, r3
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	2400      	movs	r4, #0
 8001156:	469b      	mov	fp, r3
 8001158:	e65e      	b.n	8000e18 <__aeabi_dmul+0x48>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	000007ff 	.word	0x000007ff
 8001160:	fffffc01 	.word	0xfffffc01
 8001164:	08006e70 	.word	0x08006e70
 8001168:	000003ff 	.word	0x000003ff
 800116c:	feffffff 	.word	0xfeffffff
 8001170:	000007fe 	.word	0x000007fe
 8001174:	fffffc0d 	.word	0xfffffc0d
 8001178:	4649      	mov	r1, r9
 800117a:	2301      	movs	r3, #1
 800117c:	4319      	orrs	r1, r3
 800117e:	4689      	mov	r9, r1
 8001180:	2600      	movs	r6, #0
 8001182:	2001      	movs	r0, #1
 8001184:	e667      	b.n	8000e56 <__aeabi_dmul+0x86>
 8001186:	2300      	movs	r3, #0
 8001188:	2480      	movs	r4, #128	; 0x80
 800118a:	2500      	movs	r5, #0
 800118c:	4a43      	ldr	r2, [pc, #268]	; (800129c <__aeabi_dmul+0x4cc>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	0324      	lsls	r4, r4, #12
 8001192:	e67e      	b.n	8000e92 <__aeabi_dmul+0xc2>
 8001194:	2001      	movs	r0, #1
 8001196:	1a40      	subs	r0, r0, r1
 8001198:	2838      	cmp	r0, #56	; 0x38
 800119a:	dd00      	ble.n	800119e <__aeabi_dmul+0x3ce>
 800119c:	e676      	b.n	8000e8c <__aeabi_dmul+0xbc>
 800119e:	281f      	cmp	r0, #31
 80011a0:	dd5b      	ble.n	800125a <__aeabi_dmul+0x48a>
 80011a2:	221f      	movs	r2, #31
 80011a4:	0023      	movs	r3, r4
 80011a6:	4252      	negs	r2, r2
 80011a8:	1a51      	subs	r1, r2, r1
 80011aa:	40cb      	lsrs	r3, r1
 80011ac:	0019      	movs	r1, r3
 80011ae:	2820      	cmp	r0, #32
 80011b0:	d003      	beq.n	80011ba <__aeabi_dmul+0x3ea>
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <__aeabi_dmul+0x4d0>)
 80011b4:	4462      	add	r2, ip
 80011b6:	4094      	lsls	r4, r2
 80011b8:	4325      	orrs	r5, r4
 80011ba:	1e6a      	subs	r2, r5, #1
 80011bc:	4195      	sbcs	r5, r2
 80011be:	002a      	movs	r2, r5
 80011c0:	430a      	orrs	r2, r1
 80011c2:	2107      	movs	r1, #7
 80011c4:	000d      	movs	r5, r1
 80011c6:	2400      	movs	r4, #0
 80011c8:	4015      	ands	r5, r2
 80011ca:	4211      	tst	r1, r2
 80011cc:	d05b      	beq.n	8001286 <__aeabi_dmul+0x4b6>
 80011ce:	210f      	movs	r1, #15
 80011d0:	2400      	movs	r4, #0
 80011d2:	4011      	ands	r1, r2
 80011d4:	2904      	cmp	r1, #4
 80011d6:	d053      	beq.n	8001280 <__aeabi_dmul+0x4b0>
 80011d8:	1d11      	adds	r1, r2, #4
 80011da:	4291      	cmp	r1, r2
 80011dc:	4192      	sbcs	r2, r2
 80011de:	4252      	negs	r2, r2
 80011e0:	18a4      	adds	r4, r4, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	0223      	lsls	r3, r4, #8
 80011e6:	d54b      	bpl.n	8001280 <__aeabi_dmul+0x4b0>
 80011e8:	2201      	movs	r2, #1
 80011ea:	2400      	movs	r4, #0
 80011ec:	2500      	movs	r5, #0
 80011ee:	e650      	b.n	8000e92 <__aeabi_dmul+0xc2>
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	031b      	lsls	r3, r3, #12
 80011f4:	421c      	tst	r4, r3
 80011f6:	d009      	beq.n	800120c <__aeabi_dmul+0x43c>
 80011f8:	421e      	tst	r6, r3
 80011fa:	d107      	bne.n	800120c <__aeabi_dmul+0x43c>
 80011fc:	4333      	orrs	r3, r6
 80011fe:	031c      	lsls	r4, r3, #12
 8001200:	4643      	mov	r3, r8
 8001202:	0015      	movs	r5, r2
 8001204:	0b24      	lsrs	r4, r4, #12
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <__aeabi_dmul+0x4cc>)
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	e642      	b.n	8000e92 <__aeabi_dmul+0xc2>
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	0312      	lsls	r2, r2, #12
 8001210:	4314      	orrs	r4, r2
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <__aeabi_dmul+0x4cc>)
 8001216:	0b24      	lsrs	r4, r4, #12
 8001218:	9701      	str	r7, [sp, #4]
 800121a:	e63a      	b.n	8000e92 <__aeabi_dmul+0xc2>
 800121c:	f000 fc54 	bl	8001ac8 <__clzsi2>
 8001220:	0001      	movs	r1, r0
 8001222:	0002      	movs	r2, r0
 8001224:	3115      	adds	r1, #21
 8001226:	3220      	adds	r2, #32
 8001228:	291c      	cmp	r1, #28
 800122a:	dc00      	bgt.n	800122e <__aeabi_dmul+0x45e>
 800122c:	e74b      	b.n	80010c6 <__aeabi_dmul+0x2f6>
 800122e:	0034      	movs	r4, r6
 8001230:	3808      	subs	r0, #8
 8001232:	2500      	movs	r5, #0
 8001234:	4084      	lsls	r4, r0
 8001236:	e750      	b.n	80010da <__aeabi_dmul+0x30a>
 8001238:	f000 fc46 	bl	8001ac8 <__clzsi2>
 800123c:	0003      	movs	r3, r0
 800123e:	001a      	movs	r2, r3
 8001240:	3215      	adds	r2, #21
 8001242:	3020      	adds	r0, #32
 8001244:	2a1c      	cmp	r2, #28
 8001246:	dc00      	bgt.n	800124a <__aeabi_dmul+0x47a>
 8001248:	e71e      	b.n	8001088 <__aeabi_dmul+0x2b8>
 800124a:	4656      	mov	r6, sl
 800124c:	3b08      	subs	r3, #8
 800124e:	2200      	movs	r2, #0
 8001250:	409e      	lsls	r6, r3
 8001252:	e723      	b.n	800109c <__aeabi_dmul+0x2cc>
 8001254:	9b00      	ldr	r3, [sp, #0]
 8001256:	469c      	mov	ip, r3
 8001258:	e6e6      	b.n	8001028 <__aeabi_dmul+0x258>
 800125a:	4912      	ldr	r1, [pc, #72]	; (80012a4 <__aeabi_dmul+0x4d4>)
 800125c:	0022      	movs	r2, r4
 800125e:	4461      	add	r1, ip
 8001260:	002e      	movs	r6, r5
 8001262:	408d      	lsls	r5, r1
 8001264:	408a      	lsls	r2, r1
 8001266:	40c6      	lsrs	r6, r0
 8001268:	1e69      	subs	r1, r5, #1
 800126a:	418d      	sbcs	r5, r1
 800126c:	4332      	orrs	r2, r6
 800126e:	432a      	orrs	r2, r5
 8001270:	40c4      	lsrs	r4, r0
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d0b6      	beq.n	80011e4 <__aeabi_dmul+0x414>
 8001276:	210f      	movs	r1, #15
 8001278:	4011      	ands	r1, r2
 800127a:	2904      	cmp	r1, #4
 800127c:	d1ac      	bne.n	80011d8 <__aeabi_dmul+0x408>
 800127e:	e7b1      	b.n	80011e4 <__aeabi_dmul+0x414>
 8001280:	0765      	lsls	r5, r4, #29
 8001282:	0264      	lsls	r4, r4, #9
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	08d2      	lsrs	r2, r2, #3
 8001288:	4315      	orrs	r5, r2
 800128a:	2200      	movs	r2, #0
 800128c:	e601      	b.n	8000e92 <__aeabi_dmul+0xc2>
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	0312      	lsls	r2, r2, #12
 8001292:	4314      	orrs	r4, r2
 8001294:	0324      	lsls	r4, r4, #12
 8001296:	4a01      	ldr	r2, [pc, #4]	; (800129c <__aeabi_dmul+0x4cc>)
 8001298:	0b24      	lsrs	r4, r4, #12
 800129a:	e5fa      	b.n	8000e92 <__aeabi_dmul+0xc2>
 800129c:	000007ff 	.word	0x000007ff
 80012a0:	0000043e 	.word	0x0000043e
 80012a4:	0000041e 	.word	0x0000041e

080012a8 <__aeabi_dsub>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	4657      	mov	r7, sl
 80012ac:	464e      	mov	r6, r9
 80012ae:	4645      	mov	r5, r8
 80012b0:	46de      	mov	lr, fp
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	001e      	movs	r6, r3
 80012b6:	0017      	movs	r7, r2
 80012b8:	004a      	lsls	r2, r1, #1
 80012ba:	030b      	lsls	r3, r1, #12
 80012bc:	0d52      	lsrs	r2, r2, #21
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	4690      	mov	r8, r2
 80012c2:	0f42      	lsrs	r2, r0, #29
 80012c4:	431a      	orrs	r2, r3
 80012c6:	0fcd      	lsrs	r5, r1, #31
 80012c8:	4ccd      	ldr	r4, [pc, #820]	; (8001600 <__aeabi_dsub+0x358>)
 80012ca:	0331      	lsls	r1, r6, #12
 80012cc:	00c3      	lsls	r3, r0, #3
 80012ce:	4694      	mov	ip, r2
 80012d0:	0070      	lsls	r0, r6, #1
 80012d2:	0f7a      	lsrs	r2, r7, #29
 80012d4:	0a49      	lsrs	r1, r1, #9
 80012d6:	00ff      	lsls	r7, r7, #3
 80012d8:	469a      	mov	sl, r3
 80012da:	46b9      	mov	r9, r7
 80012dc:	0d40      	lsrs	r0, r0, #21
 80012de:	0ff6      	lsrs	r6, r6, #31
 80012e0:	4311      	orrs	r1, r2
 80012e2:	42a0      	cmp	r0, r4
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dsub+0x40>
 80012e6:	e0b1      	b.n	800144c <__aeabi_dsub+0x1a4>
 80012e8:	2201      	movs	r2, #1
 80012ea:	4056      	eors	r6, r2
 80012ec:	46b3      	mov	fp, r6
 80012ee:	42b5      	cmp	r5, r6
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dsub+0x4c>
 80012f2:	e088      	b.n	8001406 <__aeabi_dsub+0x15e>
 80012f4:	4642      	mov	r2, r8
 80012f6:	1a12      	subs	r2, r2, r0
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_dsub+0x56>
 80012fc:	e0ae      	b.n	800145c <__aeabi_dsub+0x1b4>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x5c>
 8001302:	e0c1      	b.n	8001488 <__aeabi_dsub+0x1e0>
 8001304:	48be      	ldr	r0, [pc, #760]	; (8001600 <__aeabi_dsub+0x358>)
 8001306:	4580      	cmp	r8, r0
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x64>
 800130a:	e151      	b.n	80015b0 <__aeabi_dsub+0x308>
 800130c:	2080      	movs	r0, #128	; 0x80
 800130e:	0400      	lsls	r0, r0, #16
 8001310:	4301      	orrs	r1, r0
 8001312:	2a38      	cmp	r2, #56	; 0x38
 8001314:	dd00      	ble.n	8001318 <__aeabi_dsub+0x70>
 8001316:	e17b      	b.n	8001610 <__aeabi_dsub+0x368>
 8001318:	2a1f      	cmp	r2, #31
 800131a:	dd00      	ble.n	800131e <__aeabi_dsub+0x76>
 800131c:	e1ee      	b.n	80016fc <__aeabi_dsub+0x454>
 800131e:	2020      	movs	r0, #32
 8001320:	003e      	movs	r6, r7
 8001322:	1a80      	subs	r0, r0, r2
 8001324:	000c      	movs	r4, r1
 8001326:	40d6      	lsrs	r6, r2
 8001328:	40d1      	lsrs	r1, r2
 800132a:	4087      	lsls	r7, r0
 800132c:	4662      	mov	r2, ip
 800132e:	4084      	lsls	r4, r0
 8001330:	1a52      	subs	r2, r2, r1
 8001332:	1e78      	subs	r0, r7, #1
 8001334:	4187      	sbcs	r7, r0
 8001336:	4694      	mov	ip, r2
 8001338:	4334      	orrs	r4, r6
 800133a:	4327      	orrs	r7, r4
 800133c:	1bdc      	subs	r4, r3, r7
 800133e:	42a3      	cmp	r3, r4
 8001340:	419b      	sbcs	r3, r3
 8001342:	4662      	mov	r2, ip
 8001344:	425b      	negs	r3, r3
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4699      	mov	r9, r3
 800134a:	464b      	mov	r3, r9
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	d400      	bmi.n	8001352 <__aeabi_dsub+0xaa>
 8001350:	e118      	b.n	8001584 <__aeabi_dsub+0x2dc>
 8001352:	464b      	mov	r3, r9
 8001354:	0258      	lsls	r0, r3, #9
 8001356:	0a43      	lsrs	r3, r0, #9
 8001358:	4699      	mov	r9, r3
 800135a:	464b      	mov	r3, r9
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dsub+0xba>
 8001360:	e137      	b.n	80015d2 <__aeabi_dsub+0x32a>
 8001362:	4648      	mov	r0, r9
 8001364:	f000 fbb0 	bl	8001ac8 <__clzsi2>
 8001368:	0001      	movs	r1, r0
 800136a:	3908      	subs	r1, #8
 800136c:	2320      	movs	r3, #32
 800136e:	0022      	movs	r2, r4
 8001370:	4648      	mov	r0, r9
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	40da      	lsrs	r2, r3
 8001376:	4088      	lsls	r0, r1
 8001378:	408c      	lsls	r4, r1
 800137a:	4643      	mov	r3, r8
 800137c:	4310      	orrs	r0, r2
 800137e:	4588      	cmp	r8, r1
 8001380:	dd00      	ble.n	8001384 <__aeabi_dsub+0xdc>
 8001382:	e136      	b.n	80015f2 <__aeabi_dsub+0x34a>
 8001384:	1ac9      	subs	r1, r1, r3
 8001386:	1c4b      	adds	r3, r1, #1
 8001388:	2b1f      	cmp	r3, #31
 800138a:	dd00      	ble.n	800138e <__aeabi_dsub+0xe6>
 800138c:	e0ea      	b.n	8001564 <__aeabi_dsub+0x2bc>
 800138e:	2220      	movs	r2, #32
 8001390:	0026      	movs	r6, r4
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	0001      	movs	r1, r0
 8001396:	4094      	lsls	r4, r2
 8001398:	40de      	lsrs	r6, r3
 800139a:	40d8      	lsrs	r0, r3
 800139c:	2300      	movs	r3, #0
 800139e:	4091      	lsls	r1, r2
 80013a0:	1e62      	subs	r2, r4, #1
 80013a2:	4194      	sbcs	r4, r2
 80013a4:	4681      	mov	r9, r0
 80013a6:	4698      	mov	r8, r3
 80013a8:	4331      	orrs	r1, r6
 80013aa:	430c      	orrs	r4, r1
 80013ac:	0763      	lsls	r3, r4, #29
 80013ae:	d009      	beq.n	80013c4 <__aeabi_dsub+0x11c>
 80013b0:	230f      	movs	r3, #15
 80013b2:	4023      	ands	r3, r4
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d005      	beq.n	80013c4 <__aeabi_dsub+0x11c>
 80013b8:	1d23      	adds	r3, r4, #4
 80013ba:	42a3      	cmp	r3, r4
 80013bc:	41a4      	sbcs	r4, r4
 80013be:	4264      	negs	r4, r4
 80013c0:	44a1      	add	r9, r4
 80013c2:	001c      	movs	r4, r3
 80013c4:	464b      	mov	r3, r9
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	d400      	bmi.n	80013cc <__aeabi_dsub+0x124>
 80013ca:	e0de      	b.n	800158a <__aeabi_dsub+0x2e2>
 80013cc:	4641      	mov	r1, r8
 80013ce:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <__aeabi_dsub+0x358>)
 80013d0:	3101      	adds	r1, #1
 80013d2:	4299      	cmp	r1, r3
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dsub+0x130>
 80013d6:	e0e7      	b.n	80015a8 <__aeabi_dsub+0x300>
 80013d8:	464b      	mov	r3, r9
 80013da:	488a      	ldr	r0, [pc, #552]	; (8001604 <__aeabi_dsub+0x35c>)
 80013dc:	08e4      	lsrs	r4, r4, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	0018      	movs	r0, r3
 80013e2:	0549      	lsls	r1, r1, #21
 80013e4:	075b      	lsls	r3, r3, #29
 80013e6:	0240      	lsls	r0, r0, #9
 80013e8:	4323      	orrs	r3, r4
 80013ea:	0d4a      	lsrs	r2, r1, #21
 80013ec:	0b04      	lsrs	r4, r0, #12
 80013ee:	0512      	lsls	r2, r2, #20
 80013f0:	07ed      	lsls	r5, r5, #31
 80013f2:	4322      	orrs	r2, r4
 80013f4:	432a      	orrs	r2, r5
 80013f6:	0018      	movs	r0, r3
 80013f8:	0011      	movs	r1, r2
 80013fa:	bcf0      	pop	{r4, r5, r6, r7}
 80013fc:	46bb      	mov	fp, r7
 80013fe:	46b2      	mov	sl, r6
 8001400:	46a9      	mov	r9, r5
 8001402:	46a0      	mov	r8, r4
 8001404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001406:	4642      	mov	r2, r8
 8001408:	1a12      	subs	r2, r2, r0
 800140a:	2a00      	cmp	r2, #0
 800140c:	dd52      	ble.n	80014b4 <__aeabi_dsub+0x20c>
 800140e:	2800      	cmp	r0, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_dsub+0x16c>
 8001412:	e09c      	b.n	800154e <__aeabi_dsub+0x2a6>
 8001414:	45a0      	cmp	r8, r4
 8001416:	d100      	bne.n	800141a <__aeabi_dsub+0x172>
 8001418:	e0ca      	b.n	80015b0 <__aeabi_dsub+0x308>
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	0400      	lsls	r0, r0, #16
 800141e:	4301      	orrs	r1, r0
 8001420:	2a38      	cmp	r2, #56	; 0x38
 8001422:	dd00      	ble.n	8001426 <__aeabi_dsub+0x17e>
 8001424:	e149      	b.n	80016ba <__aeabi_dsub+0x412>
 8001426:	2a1f      	cmp	r2, #31
 8001428:	dc00      	bgt.n	800142c <__aeabi_dsub+0x184>
 800142a:	e197      	b.n	800175c <__aeabi_dsub+0x4b4>
 800142c:	0010      	movs	r0, r2
 800142e:	000e      	movs	r6, r1
 8001430:	3820      	subs	r0, #32
 8001432:	40c6      	lsrs	r6, r0
 8001434:	2a20      	cmp	r2, #32
 8001436:	d004      	beq.n	8001442 <__aeabi_dsub+0x19a>
 8001438:	2040      	movs	r0, #64	; 0x40
 800143a:	1a82      	subs	r2, r0, r2
 800143c:	4091      	lsls	r1, r2
 800143e:	430f      	orrs	r7, r1
 8001440:	46b9      	mov	r9, r7
 8001442:	464c      	mov	r4, r9
 8001444:	1e62      	subs	r2, r4, #1
 8001446:	4194      	sbcs	r4, r2
 8001448:	4334      	orrs	r4, r6
 800144a:	e13a      	b.n	80016c2 <__aeabi_dsub+0x41a>
 800144c:	000a      	movs	r2, r1
 800144e:	433a      	orrs	r2, r7
 8001450:	d028      	beq.n	80014a4 <__aeabi_dsub+0x1fc>
 8001452:	46b3      	mov	fp, r6
 8001454:	42b5      	cmp	r5, r6
 8001456:	d02b      	beq.n	80014b0 <__aeabi_dsub+0x208>
 8001458:	4a6b      	ldr	r2, [pc, #428]	; (8001608 <__aeabi_dsub+0x360>)
 800145a:	4442      	add	r2, r8
 800145c:	2a00      	cmp	r2, #0
 800145e:	d05d      	beq.n	800151c <__aeabi_dsub+0x274>
 8001460:	4642      	mov	r2, r8
 8001462:	4644      	mov	r4, r8
 8001464:	1a82      	subs	r2, r0, r2
 8001466:	2c00      	cmp	r4, #0
 8001468:	d000      	beq.n	800146c <__aeabi_dsub+0x1c4>
 800146a:	e0f5      	b.n	8001658 <__aeabi_dsub+0x3b0>
 800146c:	4665      	mov	r5, ip
 800146e:	431d      	orrs	r5, r3
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x1cc>
 8001472:	e19c      	b.n	80017ae <__aeabi_dsub+0x506>
 8001474:	1e55      	subs	r5, r2, #1
 8001476:	2a01      	cmp	r2, #1
 8001478:	d100      	bne.n	800147c <__aeabi_dsub+0x1d4>
 800147a:	e1fb      	b.n	8001874 <__aeabi_dsub+0x5cc>
 800147c:	4c60      	ldr	r4, [pc, #384]	; (8001600 <__aeabi_dsub+0x358>)
 800147e:	42a2      	cmp	r2, r4
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x1dc>
 8001482:	e1bd      	b.n	8001800 <__aeabi_dsub+0x558>
 8001484:	002a      	movs	r2, r5
 8001486:	e0f0      	b.n	800166a <__aeabi_dsub+0x3c2>
 8001488:	0008      	movs	r0, r1
 800148a:	4338      	orrs	r0, r7
 800148c:	d100      	bne.n	8001490 <__aeabi_dsub+0x1e8>
 800148e:	e0c3      	b.n	8001618 <__aeabi_dsub+0x370>
 8001490:	1e50      	subs	r0, r2, #1
 8001492:	2a01      	cmp	r2, #1
 8001494:	d100      	bne.n	8001498 <__aeabi_dsub+0x1f0>
 8001496:	e1a8      	b.n	80017ea <__aeabi_dsub+0x542>
 8001498:	4c59      	ldr	r4, [pc, #356]	; (8001600 <__aeabi_dsub+0x358>)
 800149a:	42a2      	cmp	r2, r4
 800149c:	d100      	bne.n	80014a0 <__aeabi_dsub+0x1f8>
 800149e:	e087      	b.n	80015b0 <__aeabi_dsub+0x308>
 80014a0:	0002      	movs	r2, r0
 80014a2:	e736      	b.n	8001312 <__aeabi_dsub+0x6a>
 80014a4:	2201      	movs	r2, #1
 80014a6:	4056      	eors	r6, r2
 80014a8:	46b3      	mov	fp, r6
 80014aa:	42b5      	cmp	r5, r6
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dsub+0x208>
 80014ae:	e721      	b.n	80012f4 <__aeabi_dsub+0x4c>
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <__aeabi_dsub+0x360>)
 80014b2:	4442      	add	r2, r8
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_dsub+0x212>
 80014b8:	e0b5      	b.n	8001626 <__aeabi_dsub+0x37e>
 80014ba:	4642      	mov	r2, r8
 80014bc:	4644      	mov	r4, r8
 80014be:	1a82      	subs	r2, r0, r2
 80014c0:	2c00      	cmp	r4, #0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dsub+0x21e>
 80014c4:	e138      	b.n	8001738 <__aeabi_dsub+0x490>
 80014c6:	4e4e      	ldr	r6, [pc, #312]	; (8001600 <__aeabi_dsub+0x358>)
 80014c8:	42b0      	cmp	r0, r6
 80014ca:	d100      	bne.n	80014ce <__aeabi_dsub+0x226>
 80014cc:	e1de      	b.n	800188c <__aeabi_dsub+0x5e4>
 80014ce:	2680      	movs	r6, #128	; 0x80
 80014d0:	4664      	mov	r4, ip
 80014d2:	0436      	lsls	r6, r6, #16
 80014d4:	4334      	orrs	r4, r6
 80014d6:	46a4      	mov	ip, r4
 80014d8:	2a38      	cmp	r2, #56	; 0x38
 80014da:	dd00      	ble.n	80014de <__aeabi_dsub+0x236>
 80014dc:	e196      	b.n	800180c <__aeabi_dsub+0x564>
 80014de:	2a1f      	cmp	r2, #31
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_dsub+0x23c>
 80014e2:	e224      	b.n	800192e <__aeabi_dsub+0x686>
 80014e4:	2620      	movs	r6, #32
 80014e6:	1ab4      	subs	r4, r6, r2
 80014e8:	46a2      	mov	sl, r4
 80014ea:	4664      	mov	r4, ip
 80014ec:	4656      	mov	r6, sl
 80014ee:	40b4      	lsls	r4, r6
 80014f0:	46a1      	mov	r9, r4
 80014f2:	001c      	movs	r4, r3
 80014f4:	464e      	mov	r6, r9
 80014f6:	40d4      	lsrs	r4, r2
 80014f8:	4326      	orrs	r6, r4
 80014fa:	0034      	movs	r4, r6
 80014fc:	4656      	mov	r6, sl
 80014fe:	40b3      	lsls	r3, r6
 8001500:	1e5e      	subs	r6, r3, #1
 8001502:	41b3      	sbcs	r3, r6
 8001504:	431c      	orrs	r4, r3
 8001506:	4663      	mov	r3, ip
 8001508:	40d3      	lsrs	r3, r2
 800150a:	18c9      	adds	r1, r1, r3
 800150c:	19e4      	adds	r4, r4, r7
 800150e:	42bc      	cmp	r4, r7
 8001510:	41bf      	sbcs	r7, r7
 8001512:	427f      	negs	r7, r7
 8001514:	46b9      	mov	r9, r7
 8001516:	4680      	mov	r8, r0
 8001518:	4489      	add	r9, r1
 800151a:	e0d8      	b.n	80016ce <__aeabi_dsub+0x426>
 800151c:	4640      	mov	r0, r8
 800151e:	4c3b      	ldr	r4, [pc, #236]	; (800160c <__aeabi_dsub+0x364>)
 8001520:	3001      	adds	r0, #1
 8001522:	4220      	tst	r0, r4
 8001524:	d000      	beq.n	8001528 <__aeabi_dsub+0x280>
 8001526:	e0b4      	b.n	8001692 <__aeabi_dsub+0x3ea>
 8001528:	4640      	mov	r0, r8
 800152a:	2800      	cmp	r0, #0
 800152c:	d000      	beq.n	8001530 <__aeabi_dsub+0x288>
 800152e:	e144      	b.n	80017ba <__aeabi_dsub+0x512>
 8001530:	4660      	mov	r0, ip
 8001532:	4318      	orrs	r0, r3
 8001534:	d100      	bne.n	8001538 <__aeabi_dsub+0x290>
 8001536:	e190      	b.n	800185a <__aeabi_dsub+0x5b2>
 8001538:	0008      	movs	r0, r1
 800153a:	4338      	orrs	r0, r7
 800153c:	d000      	beq.n	8001540 <__aeabi_dsub+0x298>
 800153e:	e1aa      	b.n	8001896 <__aeabi_dsub+0x5ee>
 8001540:	4661      	mov	r1, ip
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	0749      	lsls	r1, r1, #29
 8001546:	430b      	orrs	r3, r1
 8001548:	4661      	mov	r1, ip
 800154a:	08cc      	lsrs	r4, r1, #3
 800154c:	e027      	b.n	800159e <__aeabi_dsub+0x2f6>
 800154e:	0008      	movs	r0, r1
 8001550:	4338      	orrs	r0, r7
 8001552:	d061      	beq.n	8001618 <__aeabi_dsub+0x370>
 8001554:	1e50      	subs	r0, r2, #1
 8001556:	2a01      	cmp	r2, #1
 8001558:	d100      	bne.n	800155c <__aeabi_dsub+0x2b4>
 800155a:	e139      	b.n	80017d0 <__aeabi_dsub+0x528>
 800155c:	42a2      	cmp	r2, r4
 800155e:	d027      	beq.n	80015b0 <__aeabi_dsub+0x308>
 8001560:	0002      	movs	r2, r0
 8001562:	e75d      	b.n	8001420 <__aeabi_dsub+0x178>
 8001564:	0002      	movs	r2, r0
 8001566:	391f      	subs	r1, #31
 8001568:	40ca      	lsrs	r2, r1
 800156a:	0011      	movs	r1, r2
 800156c:	2b20      	cmp	r3, #32
 800156e:	d003      	beq.n	8001578 <__aeabi_dsub+0x2d0>
 8001570:	2240      	movs	r2, #64	; 0x40
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4098      	lsls	r0, r3
 8001576:	4304      	orrs	r4, r0
 8001578:	1e63      	subs	r3, r4, #1
 800157a:	419c      	sbcs	r4, r3
 800157c:	2300      	movs	r3, #0
 800157e:	4699      	mov	r9, r3
 8001580:	4698      	mov	r8, r3
 8001582:	430c      	orrs	r4, r1
 8001584:	0763      	lsls	r3, r4, #29
 8001586:	d000      	beq.n	800158a <__aeabi_dsub+0x2e2>
 8001588:	e712      	b.n	80013b0 <__aeabi_dsub+0x108>
 800158a:	464b      	mov	r3, r9
 800158c:	464a      	mov	r2, r9
 800158e:	08e4      	lsrs	r4, r4, #3
 8001590:	075b      	lsls	r3, r3, #29
 8001592:	4323      	orrs	r3, r4
 8001594:	08d4      	lsrs	r4, r2, #3
 8001596:	4642      	mov	r2, r8
 8001598:	4919      	ldr	r1, [pc, #100]	; (8001600 <__aeabi_dsub+0x358>)
 800159a:	428a      	cmp	r2, r1
 800159c:	d00e      	beq.n	80015bc <__aeabi_dsub+0x314>
 800159e:	0324      	lsls	r4, r4, #12
 80015a0:	0552      	lsls	r2, r2, #21
 80015a2:	0b24      	lsrs	r4, r4, #12
 80015a4:	0d52      	lsrs	r2, r2, #21
 80015a6:	e722      	b.n	80013ee <__aeabi_dsub+0x146>
 80015a8:	000a      	movs	r2, r1
 80015aa:	2400      	movs	r4, #0
 80015ac:	2300      	movs	r3, #0
 80015ae:	e71e      	b.n	80013ee <__aeabi_dsub+0x146>
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	4662      	mov	r2, ip
 80015b4:	0752      	lsls	r2, r2, #29
 80015b6:	4313      	orrs	r3, r2
 80015b8:	4662      	mov	r2, ip
 80015ba:	08d4      	lsrs	r4, r2, #3
 80015bc:	001a      	movs	r2, r3
 80015be:	4322      	orrs	r2, r4
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x31c>
 80015c2:	e1fc      	b.n	80019be <__aeabi_dsub+0x716>
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	0312      	lsls	r2, r2, #12
 80015c8:	4314      	orrs	r4, r2
 80015ca:	0324      	lsls	r4, r4, #12
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <__aeabi_dsub+0x358>)
 80015ce:	0b24      	lsrs	r4, r4, #12
 80015d0:	e70d      	b.n	80013ee <__aeabi_dsub+0x146>
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fa78 	bl	8001ac8 <__clzsi2>
 80015d8:	0001      	movs	r1, r0
 80015da:	3118      	adds	r1, #24
 80015dc:	291f      	cmp	r1, #31
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_dsub+0x33a>
 80015e0:	e6c4      	b.n	800136c <__aeabi_dsub+0xc4>
 80015e2:	3808      	subs	r0, #8
 80015e4:	4084      	lsls	r4, r0
 80015e6:	4643      	mov	r3, r8
 80015e8:	0020      	movs	r0, r4
 80015ea:	2400      	movs	r4, #0
 80015ec:	4588      	cmp	r8, r1
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_dsub+0x34a>
 80015f0:	e6c8      	b.n	8001384 <__aeabi_dsub+0xdc>
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__aeabi_dsub+0x35c>)
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	4010      	ands	r0, r2
 80015f8:	4698      	mov	r8, r3
 80015fa:	4681      	mov	r9, r0
 80015fc:	e6d6      	b.n	80013ac <__aeabi_dsub+0x104>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	000007ff 	.word	0x000007ff
 8001604:	ff7fffff 	.word	0xff7fffff
 8001608:	fffff801 	.word	0xfffff801
 800160c:	000007fe 	.word	0x000007fe
 8001610:	430f      	orrs	r7, r1
 8001612:	1e7a      	subs	r2, r7, #1
 8001614:	4197      	sbcs	r7, r2
 8001616:	e691      	b.n	800133c <__aeabi_dsub+0x94>
 8001618:	4661      	mov	r1, ip
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	0749      	lsls	r1, r1, #29
 800161e:	430b      	orrs	r3, r1
 8001620:	4661      	mov	r1, ip
 8001622:	08cc      	lsrs	r4, r1, #3
 8001624:	e7b8      	b.n	8001598 <__aeabi_dsub+0x2f0>
 8001626:	4640      	mov	r0, r8
 8001628:	4cd3      	ldr	r4, [pc, #844]	; (8001978 <__aeabi_dsub+0x6d0>)
 800162a:	3001      	adds	r0, #1
 800162c:	4220      	tst	r0, r4
 800162e:	d000      	beq.n	8001632 <__aeabi_dsub+0x38a>
 8001630:	e0a2      	b.n	8001778 <__aeabi_dsub+0x4d0>
 8001632:	4640      	mov	r0, r8
 8001634:	2800      	cmp	r0, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dsub+0x392>
 8001638:	e101      	b.n	800183e <__aeabi_dsub+0x596>
 800163a:	4660      	mov	r0, ip
 800163c:	4318      	orrs	r0, r3
 800163e:	d100      	bne.n	8001642 <__aeabi_dsub+0x39a>
 8001640:	e15e      	b.n	8001900 <__aeabi_dsub+0x658>
 8001642:	0008      	movs	r0, r1
 8001644:	4338      	orrs	r0, r7
 8001646:	d000      	beq.n	800164a <__aeabi_dsub+0x3a2>
 8001648:	e15f      	b.n	800190a <__aeabi_dsub+0x662>
 800164a:	4661      	mov	r1, ip
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	0749      	lsls	r1, r1, #29
 8001650:	430b      	orrs	r3, r1
 8001652:	4661      	mov	r1, ip
 8001654:	08cc      	lsrs	r4, r1, #3
 8001656:	e7a2      	b.n	800159e <__aeabi_dsub+0x2f6>
 8001658:	4dc8      	ldr	r5, [pc, #800]	; (800197c <__aeabi_dsub+0x6d4>)
 800165a:	42a8      	cmp	r0, r5
 800165c:	d100      	bne.n	8001660 <__aeabi_dsub+0x3b8>
 800165e:	e0cf      	b.n	8001800 <__aeabi_dsub+0x558>
 8001660:	2580      	movs	r5, #128	; 0x80
 8001662:	4664      	mov	r4, ip
 8001664:	042d      	lsls	r5, r5, #16
 8001666:	432c      	orrs	r4, r5
 8001668:	46a4      	mov	ip, r4
 800166a:	2a38      	cmp	r2, #56	; 0x38
 800166c:	dc56      	bgt.n	800171c <__aeabi_dsub+0x474>
 800166e:	2a1f      	cmp	r2, #31
 8001670:	dd00      	ble.n	8001674 <__aeabi_dsub+0x3cc>
 8001672:	e0d1      	b.n	8001818 <__aeabi_dsub+0x570>
 8001674:	2520      	movs	r5, #32
 8001676:	001e      	movs	r6, r3
 8001678:	1aad      	subs	r5, r5, r2
 800167a:	4664      	mov	r4, ip
 800167c:	40ab      	lsls	r3, r5
 800167e:	40ac      	lsls	r4, r5
 8001680:	40d6      	lsrs	r6, r2
 8001682:	1e5d      	subs	r5, r3, #1
 8001684:	41ab      	sbcs	r3, r5
 8001686:	4334      	orrs	r4, r6
 8001688:	4323      	orrs	r3, r4
 800168a:	4664      	mov	r4, ip
 800168c:	40d4      	lsrs	r4, r2
 800168e:	1b09      	subs	r1, r1, r4
 8001690:	e049      	b.n	8001726 <__aeabi_dsub+0x47e>
 8001692:	4660      	mov	r0, ip
 8001694:	1bdc      	subs	r4, r3, r7
 8001696:	1a46      	subs	r6, r0, r1
 8001698:	42a3      	cmp	r3, r4
 800169a:	4180      	sbcs	r0, r0
 800169c:	4240      	negs	r0, r0
 800169e:	4681      	mov	r9, r0
 80016a0:	0030      	movs	r0, r6
 80016a2:	464e      	mov	r6, r9
 80016a4:	1b80      	subs	r0, r0, r6
 80016a6:	4681      	mov	r9, r0
 80016a8:	0200      	lsls	r0, r0, #8
 80016aa:	d476      	bmi.n	800179a <__aeabi_dsub+0x4f2>
 80016ac:	464b      	mov	r3, r9
 80016ae:	4323      	orrs	r3, r4
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dsub+0x40c>
 80016b2:	e652      	b.n	800135a <__aeabi_dsub+0xb2>
 80016b4:	2400      	movs	r4, #0
 80016b6:	2500      	movs	r5, #0
 80016b8:	e771      	b.n	800159e <__aeabi_dsub+0x2f6>
 80016ba:	4339      	orrs	r1, r7
 80016bc:	000c      	movs	r4, r1
 80016be:	1e62      	subs	r2, r4, #1
 80016c0:	4194      	sbcs	r4, r2
 80016c2:	18e4      	adds	r4, r4, r3
 80016c4:	429c      	cmp	r4, r3
 80016c6:	419b      	sbcs	r3, r3
 80016c8:	425b      	negs	r3, r3
 80016ca:	4463      	add	r3, ip
 80016cc:	4699      	mov	r9, r3
 80016ce:	464b      	mov	r3, r9
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	d400      	bmi.n	80016d6 <__aeabi_dsub+0x42e>
 80016d4:	e756      	b.n	8001584 <__aeabi_dsub+0x2dc>
 80016d6:	2301      	movs	r3, #1
 80016d8:	469c      	mov	ip, r3
 80016da:	4ba8      	ldr	r3, [pc, #672]	; (800197c <__aeabi_dsub+0x6d4>)
 80016dc:	44e0      	add	r8, ip
 80016de:	4598      	cmp	r8, r3
 80016e0:	d038      	beq.n	8001754 <__aeabi_dsub+0x4ac>
 80016e2:	464b      	mov	r3, r9
 80016e4:	48a6      	ldr	r0, [pc, #664]	; (8001980 <__aeabi_dsub+0x6d8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	4003      	ands	r3, r0
 80016ea:	0018      	movs	r0, r3
 80016ec:	0863      	lsrs	r3, r4, #1
 80016ee:	4014      	ands	r4, r2
 80016f0:	431c      	orrs	r4, r3
 80016f2:	07c3      	lsls	r3, r0, #31
 80016f4:	431c      	orrs	r4, r3
 80016f6:	0843      	lsrs	r3, r0, #1
 80016f8:	4699      	mov	r9, r3
 80016fa:	e657      	b.n	80013ac <__aeabi_dsub+0x104>
 80016fc:	0010      	movs	r0, r2
 80016fe:	000e      	movs	r6, r1
 8001700:	3820      	subs	r0, #32
 8001702:	40c6      	lsrs	r6, r0
 8001704:	2a20      	cmp	r2, #32
 8001706:	d004      	beq.n	8001712 <__aeabi_dsub+0x46a>
 8001708:	2040      	movs	r0, #64	; 0x40
 800170a:	1a82      	subs	r2, r0, r2
 800170c:	4091      	lsls	r1, r2
 800170e:	430f      	orrs	r7, r1
 8001710:	46b9      	mov	r9, r7
 8001712:	464f      	mov	r7, r9
 8001714:	1e7a      	subs	r2, r7, #1
 8001716:	4197      	sbcs	r7, r2
 8001718:	4337      	orrs	r7, r6
 800171a:	e60f      	b.n	800133c <__aeabi_dsub+0x94>
 800171c:	4662      	mov	r2, ip
 800171e:	431a      	orrs	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	1e5a      	subs	r2, r3, #1
 8001724:	4193      	sbcs	r3, r2
 8001726:	1afc      	subs	r4, r7, r3
 8001728:	42a7      	cmp	r7, r4
 800172a:	41bf      	sbcs	r7, r7
 800172c:	427f      	negs	r7, r7
 800172e:	1bcb      	subs	r3, r1, r7
 8001730:	4699      	mov	r9, r3
 8001732:	465d      	mov	r5, fp
 8001734:	4680      	mov	r8, r0
 8001736:	e608      	b.n	800134a <__aeabi_dsub+0xa2>
 8001738:	4666      	mov	r6, ip
 800173a:	431e      	orrs	r6, r3
 800173c:	d100      	bne.n	8001740 <__aeabi_dsub+0x498>
 800173e:	e0be      	b.n	80018be <__aeabi_dsub+0x616>
 8001740:	1e56      	subs	r6, r2, #1
 8001742:	2a01      	cmp	r2, #1
 8001744:	d100      	bne.n	8001748 <__aeabi_dsub+0x4a0>
 8001746:	e109      	b.n	800195c <__aeabi_dsub+0x6b4>
 8001748:	4c8c      	ldr	r4, [pc, #560]	; (800197c <__aeabi_dsub+0x6d4>)
 800174a:	42a2      	cmp	r2, r4
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x4a8>
 800174e:	e119      	b.n	8001984 <__aeabi_dsub+0x6dc>
 8001750:	0032      	movs	r2, r6
 8001752:	e6c1      	b.n	80014d8 <__aeabi_dsub+0x230>
 8001754:	4642      	mov	r2, r8
 8001756:	2400      	movs	r4, #0
 8001758:	2300      	movs	r3, #0
 800175a:	e648      	b.n	80013ee <__aeabi_dsub+0x146>
 800175c:	2020      	movs	r0, #32
 800175e:	000c      	movs	r4, r1
 8001760:	1a80      	subs	r0, r0, r2
 8001762:	003e      	movs	r6, r7
 8001764:	4087      	lsls	r7, r0
 8001766:	4084      	lsls	r4, r0
 8001768:	40d6      	lsrs	r6, r2
 800176a:	1e78      	subs	r0, r7, #1
 800176c:	4187      	sbcs	r7, r0
 800176e:	40d1      	lsrs	r1, r2
 8001770:	4334      	orrs	r4, r6
 8001772:	433c      	orrs	r4, r7
 8001774:	448c      	add	ip, r1
 8001776:	e7a4      	b.n	80016c2 <__aeabi_dsub+0x41a>
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <__aeabi_dsub+0x6d4>)
 800177a:	4290      	cmp	r0, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_dsub+0x4d8>
 800177e:	e0e9      	b.n	8001954 <__aeabi_dsub+0x6ac>
 8001780:	19df      	adds	r7, r3, r7
 8001782:	429f      	cmp	r7, r3
 8001784:	419b      	sbcs	r3, r3
 8001786:	4461      	add	r1, ip
 8001788:	425b      	negs	r3, r3
 800178a:	18c9      	adds	r1, r1, r3
 800178c:	07cc      	lsls	r4, r1, #31
 800178e:	087f      	lsrs	r7, r7, #1
 8001790:	084b      	lsrs	r3, r1, #1
 8001792:	4699      	mov	r9, r3
 8001794:	4680      	mov	r8, r0
 8001796:	433c      	orrs	r4, r7
 8001798:	e6f4      	b.n	8001584 <__aeabi_dsub+0x2dc>
 800179a:	1afc      	subs	r4, r7, r3
 800179c:	42a7      	cmp	r7, r4
 800179e:	41bf      	sbcs	r7, r7
 80017a0:	4663      	mov	r3, ip
 80017a2:	427f      	negs	r7, r7
 80017a4:	1ac9      	subs	r1, r1, r3
 80017a6:	1bcb      	subs	r3, r1, r7
 80017a8:	4699      	mov	r9, r3
 80017aa:	465d      	mov	r5, fp
 80017ac:	e5d5      	b.n	800135a <__aeabi_dsub+0xb2>
 80017ae:	08ff      	lsrs	r7, r7, #3
 80017b0:	074b      	lsls	r3, r1, #29
 80017b2:	465d      	mov	r5, fp
 80017b4:	433b      	orrs	r3, r7
 80017b6:	08cc      	lsrs	r4, r1, #3
 80017b8:	e6ee      	b.n	8001598 <__aeabi_dsub+0x2f0>
 80017ba:	4662      	mov	r2, ip
 80017bc:	431a      	orrs	r2, r3
 80017be:	d000      	beq.n	80017c2 <__aeabi_dsub+0x51a>
 80017c0:	e082      	b.n	80018c8 <__aeabi_dsub+0x620>
 80017c2:	000b      	movs	r3, r1
 80017c4:	433b      	orrs	r3, r7
 80017c6:	d11b      	bne.n	8001800 <__aeabi_dsub+0x558>
 80017c8:	2480      	movs	r4, #128	; 0x80
 80017ca:	2500      	movs	r5, #0
 80017cc:	0324      	lsls	r4, r4, #12
 80017ce:	e6f9      	b.n	80015c4 <__aeabi_dsub+0x31c>
 80017d0:	19dc      	adds	r4, r3, r7
 80017d2:	429c      	cmp	r4, r3
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	4461      	add	r1, ip
 80017d8:	4689      	mov	r9, r1
 80017da:	425b      	negs	r3, r3
 80017dc:	4499      	add	r9, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	d444      	bmi.n	800186e <__aeabi_dsub+0x5c6>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4698      	mov	r8, r3
 80017e8:	e6cc      	b.n	8001584 <__aeabi_dsub+0x2dc>
 80017ea:	1bdc      	subs	r4, r3, r7
 80017ec:	4662      	mov	r2, ip
 80017ee:	42a3      	cmp	r3, r4
 80017f0:	419b      	sbcs	r3, r3
 80017f2:	1a51      	subs	r1, r2, r1
 80017f4:	425b      	negs	r3, r3
 80017f6:	1acb      	subs	r3, r1, r3
 80017f8:	4699      	mov	r9, r3
 80017fa:	2301      	movs	r3, #1
 80017fc:	4698      	mov	r8, r3
 80017fe:	e5a4      	b.n	800134a <__aeabi_dsub+0xa2>
 8001800:	08ff      	lsrs	r7, r7, #3
 8001802:	074b      	lsls	r3, r1, #29
 8001804:	465d      	mov	r5, fp
 8001806:	433b      	orrs	r3, r7
 8001808:	08cc      	lsrs	r4, r1, #3
 800180a:	e6d7      	b.n	80015bc <__aeabi_dsub+0x314>
 800180c:	4662      	mov	r2, ip
 800180e:	431a      	orrs	r2, r3
 8001810:	0014      	movs	r4, r2
 8001812:	1e63      	subs	r3, r4, #1
 8001814:	419c      	sbcs	r4, r3
 8001816:	e679      	b.n	800150c <__aeabi_dsub+0x264>
 8001818:	0015      	movs	r5, r2
 800181a:	4664      	mov	r4, ip
 800181c:	3d20      	subs	r5, #32
 800181e:	40ec      	lsrs	r4, r5
 8001820:	46a0      	mov	r8, r4
 8001822:	2a20      	cmp	r2, #32
 8001824:	d005      	beq.n	8001832 <__aeabi_dsub+0x58a>
 8001826:	2540      	movs	r5, #64	; 0x40
 8001828:	4664      	mov	r4, ip
 800182a:	1aaa      	subs	r2, r5, r2
 800182c:	4094      	lsls	r4, r2
 800182e:	4323      	orrs	r3, r4
 8001830:	469a      	mov	sl, r3
 8001832:	4654      	mov	r4, sl
 8001834:	1e63      	subs	r3, r4, #1
 8001836:	419c      	sbcs	r4, r3
 8001838:	4643      	mov	r3, r8
 800183a:	4323      	orrs	r3, r4
 800183c:	e773      	b.n	8001726 <__aeabi_dsub+0x47e>
 800183e:	4662      	mov	r2, ip
 8001840:	431a      	orrs	r2, r3
 8001842:	d023      	beq.n	800188c <__aeabi_dsub+0x5e4>
 8001844:	000a      	movs	r2, r1
 8001846:	433a      	orrs	r2, r7
 8001848:	d000      	beq.n	800184c <__aeabi_dsub+0x5a4>
 800184a:	e0a0      	b.n	800198e <__aeabi_dsub+0x6e6>
 800184c:	4662      	mov	r2, ip
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	0752      	lsls	r2, r2, #29
 8001852:	4313      	orrs	r3, r2
 8001854:	4662      	mov	r2, ip
 8001856:	08d4      	lsrs	r4, r2, #3
 8001858:	e6b0      	b.n	80015bc <__aeabi_dsub+0x314>
 800185a:	000b      	movs	r3, r1
 800185c:	433b      	orrs	r3, r7
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x5ba>
 8001860:	e728      	b.n	80016b4 <__aeabi_dsub+0x40c>
 8001862:	08ff      	lsrs	r7, r7, #3
 8001864:	074b      	lsls	r3, r1, #29
 8001866:	465d      	mov	r5, fp
 8001868:	433b      	orrs	r3, r7
 800186a:	08cc      	lsrs	r4, r1, #3
 800186c:	e697      	b.n	800159e <__aeabi_dsub+0x2f6>
 800186e:	2302      	movs	r3, #2
 8001870:	4698      	mov	r8, r3
 8001872:	e736      	b.n	80016e2 <__aeabi_dsub+0x43a>
 8001874:	1afc      	subs	r4, r7, r3
 8001876:	42a7      	cmp	r7, r4
 8001878:	41bf      	sbcs	r7, r7
 800187a:	4663      	mov	r3, ip
 800187c:	427f      	negs	r7, r7
 800187e:	1ac9      	subs	r1, r1, r3
 8001880:	1bcb      	subs	r3, r1, r7
 8001882:	4699      	mov	r9, r3
 8001884:	2301      	movs	r3, #1
 8001886:	465d      	mov	r5, fp
 8001888:	4698      	mov	r8, r3
 800188a:	e55e      	b.n	800134a <__aeabi_dsub+0xa2>
 800188c:	074b      	lsls	r3, r1, #29
 800188e:	08ff      	lsrs	r7, r7, #3
 8001890:	433b      	orrs	r3, r7
 8001892:	08cc      	lsrs	r4, r1, #3
 8001894:	e692      	b.n	80015bc <__aeabi_dsub+0x314>
 8001896:	1bdc      	subs	r4, r3, r7
 8001898:	4660      	mov	r0, ip
 800189a:	42a3      	cmp	r3, r4
 800189c:	41b6      	sbcs	r6, r6
 800189e:	1a40      	subs	r0, r0, r1
 80018a0:	4276      	negs	r6, r6
 80018a2:	1b80      	subs	r0, r0, r6
 80018a4:	4681      	mov	r9, r0
 80018a6:	0200      	lsls	r0, r0, #8
 80018a8:	d560      	bpl.n	800196c <__aeabi_dsub+0x6c4>
 80018aa:	1afc      	subs	r4, r7, r3
 80018ac:	42a7      	cmp	r7, r4
 80018ae:	41bf      	sbcs	r7, r7
 80018b0:	4663      	mov	r3, ip
 80018b2:	427f      	negs	r7, r7
 80018b4:	1ac9      	subs	r1, r1, r3
 80018b6:	1bcb      	subs	r3, r1, r7
 80018b8:	4699      	mov	r9, r3
 80018ba:	465d      	mov	r5, fp
 80018bc:	e576      	b.n	80013ac <__aeabi_dsub+0x104>
 80018be:	08ff      	lsrs	r7, r7, #3
 80018c0:	074b      	lsls	r3, r1, #29
 80018c2:	433b      	orrs	r3, r7
 80018c4:	08cc      	lsrs	r4, r1, #3
 80018c6:	e667      	b.n	8001598 <__aeabi_dsub+0x2f0>
 80018c8:	000a      	movs	r2, r1
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	433a      	orrs	r2, r7
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dsub+0x62a>
 80018d0:	e66f      	b.n	80015b2 <__aeabi_dsub+0x30a>
 80018d2:	4662      	mov	r2, ip
 80018d4:	0752      	lsls	r2, r2, #29
 80018d6:	4313      	orrs	r3, r2
 80018d8:	4662      	mov	r2, ip
 80018da:	08d4      	lsrs	r4, r2, #3
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	0312      	lsls	r2, r2, #12
 80018e0:	4214      	tst	r4, r2
 80018e2:	d007      	beq.n	80018f4 <__aeabi_dsub+0x64c>
 80018e4:	08c8      	lsrs	r0, r1, #3
 80018e6:	4210      	tst	r0, r2
 80018e8:	d104      	bne.n	80018f4 <__aeabi_dsub+0x64c>
 80018ea:	465d      	mov	r5, fp
 80018ec:	0004      	movs	r4, r0
 80018ee:	08fb      	lsrs	r3, r7, #3
 80018f0:	0749      	lsls	r1, r1, #29
 80018f2:	430b      	orrs	r3, r1
 80018f4:	0f5a      	lsrs	r2, r3, #29
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	0752      	lsls	r2, r2, #29
 80018fc:	4313      	orrs	r3, r2
 80018fe:	e65d      	b.n	80015bc <__aeabi_dsub+0x314>
 8001900:	074b      	lsls	r3, r1, #29
 8001902:	08ff      	lsrs	r7, r7, #3
 8001904:	433b      	orrs	r3, r7
 8001906:	08cc      	lsrs	r4, r1, #3
 8001908:	e649      	b.n	800159e <__aeabi_dsub+0x2f6>
 800190a:	19dc      	adds	r4, r3, r7
 800190c:	429c      	cmp	r4, r3
 800190e:	419b      	sbcs	r3, r3
 8001910:	4461      	add	r1, ip
 8001912:	4689      	mov	r9, r1
 8001914:	425b      	negs	r3, r3
 8001916:	4499      	add	r9, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x678>
 800191e:	e631      	b.n	8001584 <__aeabi_dsub+0x2dc>
 8001920:	464a      	mov	r2, r9
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <__aeabi_dsub+0x6d8>)
 8001924:	401a      	ands	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	4691      	mov	r9, r2
 800192a:	4698      	mov	r8, r3
 800192c:	e62a      	b.n	8001584 <__aeabi_dsub+0x2dc>
 800192e:	0016      	movs	r6, r2
 8001930:	4664      	mov	r4, ip
 8001932:	3e20      	subs	r6, #32
 8001934:	40f4      	lsrs	r4, r6
 8001936:	46a0      	mov	r8, r4
 8001938:	2a20      	cmp	r2, #32
 800193a:	d005      	beq.n	8001948 <__aeabi_dsub+0x6a0>
 800193c:	2640      	movs	r6, #64	; 0x40
 800193e:	4664      	mov	r4, ip
 8001940:	1ab2      	subs	r2, r6, r2
 8001942:	4094      	lsls	r4, r2
 8001944:	4323      	orrs	r3, r4
 8001946:	469a      	mov	sl, r3
 8001948:	4654      	mov	r4, sl
 800194a:	1e63      	subs	r3, r4, #1
 800194c:	419c      	sbcs	r4, r3
 800194e:	4643      	mov	r3, r8
 8001950:	431c      	orrs	r4, r3
 8001952:	e5db      	b.n	800150c <__aeabi_dsub+0x264>
 8001954:	0002      	movs	r2, r0
 8001956:	2400      	movs	r4, #0
 8001958:	2300      	movs	r3, #0
 800195a:	e548      	b.n	80013ee <__aeabi_dsub+0x146>
 800195c:	19dc      	adds	r4, r3, r7
 800195e:	42bc      	cmp	r4, r7
 8001960:	41bf      	sbcs	r7, r7
 8001962:	4461      	add	r1, ip
 8001964:	4689      	mov	r9, r1
 8001966:	427f      	negs	r7, r7
 8001968:	44b9      	add	r9, r7
 800196a:	e738      	b.n	80017de <__aeabi_dsub+0x536>
 800196c:	464b      	mov	r3, r9
 800196e:	4323      	orrs	r3, r4
 8001970:	d100      	bne.n	8001974 <__aeabi_dsub+0x6cc>
 8001972:	e69f      	b.n	80016b4 <__aeabi_dsub+0x40c>
 8001974:	e606      	b.n	8001584 <__aeabi_dsub+0x2dc>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	000007fe 	.word	0x000007fe
 800197c:	000007ff 	.word	0x000007ff
 8001980:	ff7fffff 	.word	0xff7fffff
 8001984:	08ff      	lsrs	r7, r7, #3
 8001986:	074b      	lsls	r3, r1, #29
 8001988:	433b      	orrs	r3, r7
 800198a:	08cc      	lsrs	r4, r1, #3
 800198c:	e616      	b.n	80015bc <__aeabi_dsub+0x314>
 800198e:	4662      	mov	r2, ip
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	0752      	lsls	r2, r2, #29
 8001994:	4313      	orrs	r3, r2
 8001996:	4662      	mov	r2, ip
 8001998:	08d4      	lsrs	r4, r2, #3
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4214      	tst	r4, r2
 80019a0:	d007      	beq.n	80019b2 <__aeabi_dsub+0x70a>
 80019a2:	08c8      	lsrs	r0, r1, #3
 80019a4:	4210      	tst	r0, r2
 80019a6:	d104      	bne.n	80019b2 <__aeabi_dsub+0x70a>
 80019a8:	465d      	mov	r5, fp
 80019aa:	0004      	movs	r4, r0
 80019ac:	08fb      	lsrs	r3, r7, #3
 80019ae:	0749      	lsls	r1, r1, #29
 80019b0:	430b      	orrs	r3, r1
 80019b2:	0f5a      	lsrs	r2, r3, #29
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	0752      	lsls	r2, r2, #29
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	e5fe      	b.n	80015bc <__aeabi_dsub+0x314>
 80019be:	2300      	movs	r3, #0
 80019c0:	4a01      	ldr	r2, [pc, #4]	; (80019c8 <__aeabi_dsub+0x720>)
 80019c2:	001c      	movs	r4, r3
 80019c4:	e513      	b.n	80013ee <__aeabi_dsub+0x146>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_d2iz>:
 80019cc:	000a      	movs	r2, r1
 80019ce:	b530      	push	{r4, r5, lr}
 80019d0:	4c13      	ldr	r4, [pc, #76]	; (8001a20 <__aeabi_d2iz+0x54>)
 80019d2:	0053      	lsls	r3, r2, #1
 80019d4:	0309      	lsls	r1, r1, #12
 80019d6:	0005      	movs	r5, r0
 80019d8:	0b09      	lsrs	r1, r1, #12
 80019da:	2000      	movs	r0, #0
 80019dc:	0d5b      	lsrs	r3, r3, #21
 80019de:	0fd2      	lsrs	r2, r2, #31
 80019e0:	42a3      	cmp	r3, r4
 80019e2:	dd04      	ble.n	80019ee <__aeabi_d2iz+0x22>
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <__aeabi_d2iz+0x58>)
 80019e6:	4283      	cmp	r3, r0
 80019e8:	dd02      	ble.n	80019f0 <__aeabi_d2iz+0x24>
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <__aeabi_d2iz+0x5c>)
 80019ec:	18d0      	adds	r0, r2, r3
 80019ee:	bd30      	pop	{r4, r5, pc}
 80019f0:	2080      	movs	r0, #128	; 0x80
 80019f2:	0340      	lsls	r0, r0, #13
 80019f4:	4301      	orrs	r1, r0
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <__aeabi_d2iz+0x60>)
 80019f8:	1ac0      	subs	r0, r0, r3
 80019fa:	281f      	cmp	r0, #31
 80019fc:	dd08      	ble.n	8001a10 <__aeabi_d2iz+0x44>
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <__aeabi_d2iz+0x64>)
 8001a00:	1ac3      	subs	r3, r0, r3
 8001a02:	40d9      	lsrs	r1, r3
 8001a04:	000b      	movs	r3, r1
 8001a06:	4258      	negs	r0, r3
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d1f0      	bne.n	80019ee <__aeabi_d2iz+0x22>
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	e7ee      	b.n	80019ee <__aeabi_d2iz+0x22>
 8001a10:	4c08      	ldr	r4, [pc, #32]	; (8001a34 <__aeabi_d2iz+0x68>)
 8001a12:	40c5      	lsrs	r5, r0
 8001a14:	46a4      	mov	ip, r4
 8001a16:	4463      	add	r3, ip
 8001a18:	4099      	lsls	r1, r3
 8001a1a:	000b      	movs	r3, r1
 8001a1c:	432b      	orrs	r3, r5
 8001a1e:	e7f2      	b.n	8001a06 <__aeabi_d2iz+0x3a>
 8001a20:	000003fe 	.word	0x000003fe
 8001a24:	0000041d 	.word	0x0000041d
 8001a28:	7fffffff 	.word	0x7fffffff
 8001a2c:	00000433 	.word	0x00000433
 8001a30:	00000413 	.word	0x00000413
 8001a34:	fffffbed 	.word	0xfffffbed

08001a38 <__aeabi_f2d>:
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	0043      	lsls	r3, r0, #1
 8001a3c:	0246      	lsls	r6, r0, #9
 8001a3e:	0fc4      	lsrs	r4, r0, #31
 8001a40:	20fe      	movs	r0, #254	; 0xfe
 8001a42:	0e1b      	lsrs	r3, r3, #24
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	0a75      	lsrs	r5, r6, #9
 8001a48:	4208      	tst	r0, r1
 8001a4a:	d00c      	beq.n	8001a66 <__aeabi_f2d+0x2e>
 8001a4c:	22e0      	movs	r2, #224	; 0xe0
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4694      	mov	ip, r2
 8001a52:	076d      	lsls	r5, r5, #29
 8001a54:	0b36      	lsrs	r6, r6, #12
 8001a56:	4463      	add	r3, ip
 8001a58:	051b      	lsls	r3, r3, #20
 8001a5a:	4333      	orrs	r3, r6
 8001a5c:	07e4      	lsls	r4, r4, #31
 8001a5e:	4323      	orrs	r3, r4
 8001a60:	0028      	movs	r0, r5
 8001a62:	0019      	movs	r1, r3
 8001a64:	bd70      	pop	{r4, r5, r6, pc}
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d114      	bne.n	8001a94 <__aeabi_f2d+0x5c>
 8001a6a:	2d00      	cmp	r5, #0
 8001a6c:	d01b      	beq.n	8001aa6 <__aeabi_f2d+0x6e>
 8001a6e:	0028      	movs	r0, r5
 8001a70:	f000 f82a 	bl	8001ac8 <__clzsi2>
 8001a74:	280a      	cmp	r0, #10
 8001a76:	dc1c      	bgt.n	8001ab2 <__aeabi_f2d+0x7a>
 8001a78:	230b      	movs	r3, #11
 8001a7a:	002e      	movs	r6, r5
 8001a7c:	1a1b      	subs	r3, r3, r0
 8001a7e:	40de      	lsrs	r6, r3
 8001a80:	0003      	movs	r3, r0
 8001a82:	3315      	adds	r3, #21
 8001a84:	409d      	lsls	r5, r3
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <__aeabi_f2d+0x88>)
 8001a88:	0336      	lsls	r6, r6, #12
 8001a8a:	1a12      	subs	r2, r2, r0
 8001a8c:	0552      	lsls	r2, r2, #21
 8001a8e:	0b36      	lsrs	r6, r6, #12
 8001a90:	0d53      	lsrs	r3, r2, #21
 8001a92:	e7e1      	b.n	8001a58 <__aeabi_f2d+0x20>
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	d009      	beq.n	8001aac <__aeabi_f2d+0x74>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0b36      	lsrs	r6, r6, #12
 8001a9c:	0312      	lsls	r2, r2, #12
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <__aeabi_f2d+0x8c>)
 8001aa0:	076d      	lsls	r5, r5, #29
 8001aa2:	4316      	orrs	r6, r2
 8001aa4:	e7d8      	b.n	8001a58 <__aeabi_f2d+0x20>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	e7d5      	b.n	8001a58 <__aeabi_f2d+0x20>
 8001aac:	2600      	movs	r6, #0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <__aeabi_f2d+0x8c>)
 8001ab0:	e7d2      	b.n	8001a58 <__aeabi_f2d+0x20>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	3b0b      	subs	r3, #11
 8001ab6:	409d      	lsls	r5, r3
 8001ab8:	002e      	movs	r6, r5
 8001aba:	2500      	movs	r5, #0
 8001abc:	e7e3      	b.n	8001a86 <__aeabi_f2d+0x4e>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	00000389 	.word	0x00000389
 8001ac4:	000007ff 	.word	0x000007ff

08001ac8 <__clzsi2>:
 8001ac8:	211c      	movs	r1, #28
 8001aca:	2301      	movs	r3, #1
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	4298      	cmp	r0, r3
 8001ad0:	d301      	bcc.n	8001ad6 <__clzsi2+0xe>
 8001ad2:	0c00      	lsrs	r0, r0, #16
 8001ad4:	3910      	subs	r1, #16
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	d301      	bcc.n	8001ae0 <__clzsi2+0x18>
 8001adc:	0a00      	lsrs	r0, r0, #8
 8001ade:	3908      	subs	r1, #8
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	d301      	bcc.n	8001aea <__clzsi2+0x22>
 8001ae6:	0900      	lsrs	r0, r0, #4
 8001ae8:	3904      	subs	r1, #4
 8001aea:	a202      	add	r2, pc, #8	; (adr r2, 8001af4 <__clzsi2+0x2c>)
 8001aec:	5c10      	ldrb	r0, [r2, r0]
 8001aee:	1840      	adds	r0, r0, r1
 8001af0:	4770      	bx	lr
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	02020304 	.word	0x02020304
 8001af8:	01010101 	.word	0x01010101
	...

08001b04 <__clzdi2>:
 8001b04:	b510      	push	{r4, lr}
 8001b06:	2900      	cmp	r1, #0
 8001b08:	d103      	bne.n	8001b12 <__clzdi2+0xe>
 8001b0a:	f7ff ffdd 	bl	8001ac8 <__clzsi2>
 8001b0e:	3020      	adds	r0, #32
 8001b10:	e002      	b.n	8001b18 <__clzdi2+0x14>
 8001b12:	0008      	movs	r0, r1
 8001b14:	f7ff ffd8 	bl	8001ac8 <__clzsi2>
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)

08001b1c <__divdi3>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	4657      	mov	r7, sl
 8001b20:	464e      	mov	r6, r9
 8001b22:	4645      	mov	r5, r8
 8001b24:	46de      	mov	lr, fp
 8001b26:	b5e0      	push	{r5, r6, r7, lr}
 8001b28:	000f      	movs	r7, r1
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	0006      	movs	r6, r0
 8001b30:	4698      	mov	r8, r3
 8001b32:	0010      	movs	r0, r2
 8001b34:	b083      	sub	sp, #12
 8001b36:	2f00      	cmp	r7, #0
 8001b38:	da07      	bge.n	8001b4a <__divdi3+0x2e>
 8001b3a:	0033      	movs	r3, r6
 8001b3c:	003c      	movs	r4, r7
 8001b3e:	2700      	movs	r7, #0
 8001b40:	425e      	negs	r6, r3
 8001b42:	41a7      	sbcs	r7, r4
 8001b44:	2301      	movs	r3, #1
 8001b46:	425b      	negs	r3, r3
 8001b48:	4698      	mov	r8, r3
 8001b4a:	2900      	cmp	r1, #0
 8001b4c:	da07      	bge.n	8001b5e <__divdi3+0x42>
 8001b4e:	4643      	mov	r3, r8
 8001b50:	43db      	mvns	r3, r3
 8001b52:	000c      	movs	r4, r1
 8001b54:	4698      	mov	r8, r3
 8001b56:	0003      	movs	r3, r0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4258      	negs	r0, r3
 8001b5c:	41a1      	sbcs	r1, r4
 8001b5e:	0034      	movs	r4, r6
 8001b60:	003d      	movs	r5, r7
 8001b62:	4682      	mov	sl, r0
 8001b64:	4689      	mov	r9, r1
 8001b66:	42b9      	cmp	r1, r7
 8001b68:	d86a      	bhi.n	8001c40 <__divdi3+0x124>
 8001b6a:	d067      	beq.n	8001c3c <__divdi3+0x120>
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	4650      	mov	r0, sl
 8001b70:	f7ff ffc8 	bl	8001b04 <__clzdi2>
 8001b74:	4683      	mov	fp, r0
 8001b76:	0039      	movs	r1, r7
 8001b78:	0030      	movs	r0, r6
 8001b7a:	f7ff ffc3 	bl	8001b04 <__clzdi2>
 8001b7e:	465b      	mov	r3, fp
 8001b80:	1a1b      	subs	r3, r3, r0
 8001b82:	469c      	mov	ip, r3
 8001b84:	3b20      	subs	r3, #32
 8001b86:	469b      	mov	fp, r3
 8001b88:	d46b      	bmi.n	8001c62 <__divdi3+0x146>
 8001b8a:	4658      	mov	r0, fp
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	4081      	lsls	r1, r0
 8001b90:	4660      	mov	r0, ip
 8001b92:	000b      	movs	r3, r1
 8001b94:	4651      	mov	r1, sl
 8001b96:	4081      	lsls	r1, r0
 8001b98:	000a      	movs	r2, r1
 8001b9a:	42bb      	cmp	r3, r7
 8001b9c:	d900      	bls.n	8001ba0 <__divdi3+0x84>
 8001b9e:	e072      	b.n	8001c86 <__divdi3+0x16a>
 8001ba0:	42bb      	cmp	r3, r7
 8001ba2:	d100      	bne.n	8001ba6 <__divdi3+0x8a>
 8001ba4:	e079      	b.n	8001c9a <__divdi3+0x17e>
 8001ba6:	0034      	movs	r4, r6
 8001ba8:	003d      	movs	r5, r7
 8001baa:	4659      	mov	r1, fp
 8001bac:	1aa4      	subs	r4, r4, r2
 8001bae:	419d      	sbcs	r5, r3
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	da00      	bge.n	8001bb6 <__divdi3+0x9a>
 8001bb4:	e074      	b.n	8001ca0 <__divdi3+0x184>
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2000      	movs	r0, #0
 8001bba:	2601      	movs	r6, #1
 8001bbc:	9000      	str	r0, [sp, #0]
 8001bbe:	9101      	str	r1, [sp, #4]
 8001bc0:	4659      	mov	r1, fp
 8001bc2:	408e      	lsls	r6, r1
 8001bc4:	9601      	str	r6, [sp, #4]
 8001bc6:	4661      	mov	r1, ip
 8001bc8:	2601      	movs	r6, #1
 8001bca:	408e      	lsls	r6, r1
 8001bcc:	4661      	mov	r1, ip
 8001bce:	9600      	str	r6, [sp, #0]
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d05f      	beq.n	8001c94 <__divdi3+0x178>
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	0856      	lsrs	r6, r2, #1
 8001bd8:	430e      	orrs	r6, r1
 8001bda:	085f      	lsrs	r7, r3, #1
 8001bdc:	4661      	mov	r1, ip
 8001bde:	2201      	movs	r2, #1
 8001be0:	2300      	movs	r3, #0
 8001be2:	e00c      	b.n	8001bfe <__divdi3+0xe2>
 8001be4:	42af      	cmp	r7, r5
 8001be6:	d101      	bne.n	8001bec <__divdi3+0xd0>
 8001be8:	42a6      	cmp	r6, r4
 8001bea:	d80a      	bhi.n	8001c02 <__divdi3+0xe6>
 8001bec:	1ba4      	subs	r4, r4, r6
 8001bee:	41bd      	sbcs	r5, r7
 8001bf0:	1924      	adds	r4, r4, r4
 8001bf2:	416d      	adcs	r5, r5
 8001bf4:	3901      	subs	r1, #1
 8001bf6:	18a4      	adds	r4, r4, r2
 8001bf8:	415d      	adcs	r5, r3
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	d006      	beq.n	8001c0c <__divdi3+0xf0>
 8001bfe:	42af      	cmp	r7, r5
 8001c00:	d9f0      	bls.n	8001be4 <__divdi3+0xc8>
 8001c02:	3901      	subs	r1, #1
 8001c04:	1924      	adds	r4, r4, r4
 8001c06:	416d      	adcs	r5, r5
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d1f8      	bne.n	8001bfe <__divdi3+0xe2>
 8001c0c:	9800      	ldr	r0, [sp, #0]
 8001c0e:	9901      	ldr	r1, [sp, #4]
 8001c10:	465b      	mov	r3, fp
 8001c12:	1900      	adds	r0, r0, r4
 8001c14:	4169      	adcs	r1, r5
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db4d      	blt.n	8001cb6 <__divdi3+0x19a>
 8001c1a:	002e      	movs	r6, r5
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	40de      	lsrs	r6, r3
 8001c20:	4663      	mov	r3, ip
 8001c22:	40dc      	lsrs	r4, r3
 8001c24:	465b      	mov	r3, fp
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db55      	blt.n	8001cd6 <__divdi3+0x1ba>
 8001c2a:	0034      	movs	r4, r6
 8001c2c:	409c      	lsls	r4, r3
 8001c2e:	0023      	movs	r3, r4
 8001c30:	4664      	mov	r4, ip
 8001c32:	40a6      	lsls	r6, r4
 8001c34:	0032      	movs	r2, r6
 8001c36:	1a80      	subs	r0, r0, r2
 8001c38:	4199      	sbcs	r1, r3
 8001c3a:	e003      	b.n	8001c44 <__divdi3+0x128>
 8001c3c:	42b0      	cmp	r0, r6
 8001c3e:	d995      	bls.n	8001b6c <__divdi3+0x50>
 8001c40:	2000      	movs	r0, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	4643      	mov	r3, r8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d004      	beq.n	8001c54 <__divdi3+0x138>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4258      	negs	r0, r3
 8001c52:	41a1      	sbcs	r1, r4
 8001c54:	b003      	add	sp, #12
 8001c56:	bcf0      	pop	{r4, r5, r6, r7}
 8001c58:	46bb      	mov	fp, r7
 8001c5a:	46b2      	mov	sl, r6
 8001c5c:	46a9      	mov	r9, r5
 8001c5e:	46a0      	mov	r8, r4
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c62:	4662      	mov	r2, ip
 8001c64:	4648      	mov	r0, r9
 8001c66:	2320      	movs	r3, #32
 8001c68:	4651      	mov	r1, sl
 8001c6a:	4090      	lsls	r0, r2
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	40d9      	lsrs	r1, r3
 8001c70:	0003      	movs	r3, r0
 8001c72:	9100      	str	r1, [sp, #0]
 8001c74:	9900      	ldr	r1, [sp, #0]
 8001c76:	4660      	mov	r0, ip
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	4081      	lsls	r1, r0
 8001c7e:	000a      	movs	r2, r1
 8001c80:	42bb      	cmp	r3, r7
 8001c82:	d800      	bhi.n	8001c86 <__divdi3+0x16a>
 8001c84:	e78c      	b.n	8001ba0 <__divdi3+0x84>
 8001c86:	2100      	movs	r1, #0
 8001c88:	2000      	movs	r0, #0
 8001c8a:	9000      	str	r0, [sp, #0]
 8001c8c:	9101      	str	r1, [sp, #4]
 8001c8e:	4661      	mov	r1, ip
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d19f      	bne.n	8001bd4 <__divdi3+0xb8>
 8001c94:	9800      	ldr	r0, [sp, #0]
 8001c96:	9901      	ldr	r1, [sp, #4]
 8001c98:	e7d4      	b.n	8001c44 <__divdi3+0x128>
 8001c9a:	42b1      	cmp	r1, r6
 8001c9c:	d8f3      	bhi.n	8001c86 <__divdi3+0x16a>
 8001c9e:	e782      	b.n	8001ba6 <__divdi3+0x8a>
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	2620      	movs	r6, #32
 8001ca4:	2701      	movs	r7, #1
 8001ca6:	1a76      	subs	r6, r6, r1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	40f7      	lsrs	r7, r6
 8001cae:	9000      	str	r0, [sp, #0]
 8001cb0:	9101      	str	r1, [sp, #4]
 8001cb2:	9701      	str	r7, [sp, #4]
 8001cb4:	e787      	b.n	8001bc6 <__divdi3+0xaa>
 8001cb6:	4662      	mov	r2, ip
 8001cb8:	2320      	movs	r3, #32
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	002a      	movs	r2, r5
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0026      	movs	r6, r4
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	4662      	mov	r2, ip
 8001cc6:	40d6      	lsrs	r6, r2
 8001cc8:	002c      	movs	r4, r5
 8001cca:	431e      	orrs	r6, r3
 8001ccc:	4663      	mov	r3, ip
 8001cce:	40dc      	lsrs	r4, r3
 8001cd0:	465b      	mov	r3, fp
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	daa9      	bge.n	8001c2a <__divdi3+0x10e>
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	2320      	movs	r3, #32
 8001cda:	0035      	movs	r5, r6
 8001cdc:	4094      	lsls	r4, r2
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	40dd      	lsrs	r5, r3
 8001ce2:	0023      	movs	r3, r4
 8001ce4:	432b      	orrs	r3, r5
 8001ce6:	e7a3      	b.n	8001c30 <__divdi3+0x114>

08001ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ce8:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	2001      	movs	r0, #1
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <MX_DMA_Init+0x38>)
 8001cee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cf0:	4301      	orrs	r1, r0
 8001cf2:	6311      	str	r1, [r2, #48]	; 0x30
 8001cf4:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001cf6:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf8:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001cfa:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cfc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001cfe:	3009      	adds	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d00:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001d02:	f000 fbc1 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d06:	200a      	movs	r0, #10
 8001d08:	f000 fbe8 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2103      	movs	r1, #3
 8001d10:	200b      	movs	r0, #11
 8001d12:	f000 fbb9 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001d16:	200b      	movs	r0, #11
 8001d18:	f000 fbe0 	bl	80024dc <HAL_NVIC_EnableIRQ>

}
 8001d1c:	bd07      	pop	{r0, r1, r2, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40021000 	.word	0x40021000

08001d24 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <vApplicationGetIdleTaskMemory+0x10>)
 8001d26:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <vApplicationGetIdleTaskMemory+0x14>)
 8001d2a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001d30:	4770      	bx	lr
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	200002b4 	.word	0x200002b4
 8001d38:	200000b4 	.word	0x200000b4

08001d3c <MX_FREERTOS_Init>:
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
#endif
  /* USER CODE END RTOS_THREADS */

}
 8001d3c:	4770      	bx	lr
	...

08001d40 <MX_GPIO_Init>:
/** Configure pins
     PA9   ------> I2C1_SCL
     PA10   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	2214      	movs	r2, #20
 8001d46:	2100      	movs	r1, #0
 8001d48:	a805      	add	r0, sp, #20
 8001d4a:	f003 ffa7 	bl	8005c9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4e:	2004      	movs	r0, #4
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d56:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	4301      	orrs	r1, r0
 8001d5a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PC0 PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4002      	ands	r2, r0
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d68:	307c      	adds	r0, #124	; 0x7c
 8001d6a:	4301      	orrs	r1, r0
 8001d6c:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2102      	movs	r1, #2
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d74:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d76:	4002      	ands	r2, r0
 8001d78:	9202      	str	r2, [sp, #8]
 8001d7a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d7e:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	433a      	orrs	r2, r7
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	403a      	ands	r2, r7
 8001d88:	9203      	str	r2, [sp, #12]
 8001d8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	400b      	ands	r3, r1
 8001d98:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d9a:	310e      	adds	r1, #14
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d9e:	f000 fd75 	bl	800288c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	a905      	add	r1, sp, #20
 8001da6:	482b      	ldr	r0, [pc, #172]	; (8001e54 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001da8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001daa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f000 fcb5 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db2:	a905      	add	r1, sp, #20
 8001db4:	4828      	ldr	r0, [pc, #160]	; (8001e58 <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dbc:	f000 fcae 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <MX_GPIO_Init+0x11c>)
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	0030      	movs	r0, r6
 8001dc4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11
 8001dc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f000 fca6 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd0:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	0030      	movs	r0, r6
 8001dd4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f000 fc9d 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001de2:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	4f1e      	ldr	r7, [pc, #120]	; (8001e60 <MX_GPIO_Init+0x120>)
 8001de6:	a905      	add	r1, sp, #20
 8001de8:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f000 fc94 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001df4:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001df8:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dfc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f000 fc8b 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0c:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001e14:	3b11      	subs	r3, #17
 8001e16:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f000 fc7e 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e26:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2a:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f000 fc73 	bl	800271c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001e36:	0022      	movs	r2, r4
 8001e38:	0029      	movs	r1, r5
 8001e3a:	2007      	movs	r0, #7
 8001e3c:	f000 fb24 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e40:	2007      	movs	r0, #7
 8001e42:	f000 fb4b 	bl	80024dc <HAL_NVIC_EnableIRQ>

}
 8001e46:	b00b      	add	sp, #44	; 0x2c
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	0000e001 	.word	0x0000e001
 8001e54:	50000800 	.word	0x50000800
 8001e58:	50001c00 	.word	0x50001c00
 8001e5c:	00009903 	.word	0x00009903
 8001e60:	50000400 	.word	0x50000400

08001e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e64:	b500      	push	{lr}
 8001e66:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e68:	2230      	movs	r2, #48	; 0x30
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	a80c      	add	r0, sp, #48	; 0x30
 8001e6e:	f003 ff15 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e72:	2214      	movs	r2, #20
 8001e74:	2100      	movs	r1, #0
 8001e76:	4668      	mov	r0, sp
 8001e78:	f003 ff10 	bl	8005c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	2218      	movs	r2, #24
 8001e7e:	2100      	movs	r1, #0
 8001e80:	a805      	add	r0, sp, #20
 8001e82:	f003 ff0b 	bl	8005c9c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e86:	4919      	ldr	r1, [pc, #100]	; (8001eec <SystemClock_Config+0x88>)
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <SystemClock_Config+0x8c>)
 8001e8a:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e8e:	401a      	ands	r2, r3
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e98:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001e9a:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e9c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e9e:	3b0f      	subs	r3, #15
 8001ea0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ea2:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001ea4:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ea6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001ea8:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eaa:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eac:	f000 fd48 	bl	8002940 <HAL_RCC_OscConfig>
 8001eb0:	1e01      	subs	r1, r0, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
 8001eb6:	e7fe      	b.n	8001eb6 <SystemClock_Config+0x52>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001eba:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebc:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec0:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec4:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec6:	f000 ff89 	bl	8002ddc <HAL_RCC_ClockConfig>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x6e>
 8001ece:	b672      	cpsid	i
 8001ed0:	e7fe      	b.n	8001ed0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8001ed2:	2306      	movs	r3, #6
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed4:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ed6:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8001eda:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	f001 f88c 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x84>
 8001ee4:	b672      	cpsid	i
 8001ee6:	e7fe      	b.n	8001ee6 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
}
 8001ee8:	b019      	add	sp, #100	; 0x64
 8001eea:	bd00      	pop	{pc}
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	ffffe7ff 	.word	0xffffe7ff

08001ef4 <main>:
{
 8001ef4:	b510      	push	{r4, lr}
  HAL_Init();
 8001ef6:	f000 faa1 	bl	800243c <HAL_Init>
  SystemClock_Config();
 8001efa:	f7ff ffb3 	bl	8001e64 <SystemClock_Config>
  MX_GPIO_Init();
 8001efe:	f7ff ff1f 	bl	8001d40 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001f02:	f000 f98b 	bl	800221c <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 8001f06:	f7ff feef 	bl	8001ce8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001f0a:	f000 f815 	bl	8001f38 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f0e:	f000 f9a3 	bl	8002258 <MX_USART2_UART_Init>
  init();
 8001f12:	f003 faeb 	bl	80054ec <init>
  MX_FREERTOS_Init();
 8001f16:	f7ff ff11 	bl	8001d3c <MX_FREERTOS_Init>
  osKernelStart();
 8001f1a:	f002 fd5c 	bl	80049d6 <osKernelStart>
 8001f1e:	e7fe      	b.n	8001f1e <main+0x2a>

08001f20 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	6802      	ldr	r2, [r0, #0]
{
 8001f24:	b510      	push	{r4, lr}
  if (htim->Instance == TIM2) {
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d101      	bne.n	8001f30 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001f2c:	f000 fa9a 	bl	8002464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f30:	bd10      	pop	{r4, pc}

08001f32 <Error_Handler>:
 8001f32:	b672      	cpsid	i
 8001f34:	e7fe      	b.n	8001f34 <Error_Handler+0x2>
	...

08001f38 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <MX_SPI1_Init+0x38>)
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_SPI1_Init+0x3c>)
{
 8001f3c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001f3e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f40:	2382      	movs	r3, #130	; 0x82
 8001f42:	005b      	lsls	r3, r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f44:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f46:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f48:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4a:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f50:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f52:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f54:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f56:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f58:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f5c:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001f60:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f62:	f001 f9c3 	bl	80032ec <HAL_SPI_Init>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d001      	beq.n	8001f6e <MX_SPI1_Init+0x36>
  {
    Error_Handler();
 8001f6a:	f7ff ffe2 	bl	8001f32 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f6e:	bd10      	pop	{r4, pc}
 8001f70:	20000390 	.word	0x20000390
 8001f74:	40013000 	.word	0x40013000

08001f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	2214      	movs	r2, #20
 8001f80:	2100      	movs	r1, #0
 8001f82:	a801      	add	r0, sp, #4
 8001f84:	f003 fe8a 	bl	8005c9c <memset>
  if(spiHandle->Instance==SPI1)
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_SPI_MspInit+0xbc>)
 8001f8a:	682a      	ldr	r2, [r5, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d14e      	bne.n	800202e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f90:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2601      	movs	r6, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_SPI_MspInit+0xc0>)
 8001f96:	0152      	lsls	r2, r2, #5
 8001f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4332      	orrs	r2, r6
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4033      	ands	r3, r6
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fb2:	23e0      	movs	r3, #224	; 0xe0
 8001fb4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	3bde      	subs	r3, #222	; 0xde
 8001fb8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	199b      	adds	r3, r3, r6
 8001fbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f000 fbad 	bl	800271c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001fc2:	4c1e      	ldr	r4, [pc, #120]	; (800203c <HAL_SPI_MspInit+0xc4>)
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc6:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001fc8:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fca:	2310      	movs	r3, #16
 8001fcc:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fce:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fd0:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001fd2:	6066      	str	r6, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd8:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fdc:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fde:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fe0:	f000 fa88 	bl	80024f4 <HAL_DMA_Init>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001fe8:	f7ff ffa3 	bl	8001f32 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_SPI_MspInit+0xcc>)
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fee:	64ac      	str	r4, [r5, #72]	; 0x48
 8001ff0:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001ff2:	4c15      	ldr	r4, [pc, #84]	; (8002048 <HAL_SPI_MspInit+0xd0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001ff6:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ffe:	0020      	movs	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002000:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	6122      	str	r2, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002006:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002008:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800200a:	61e3      	str	r3, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800200e:	f000 fa71 	bl	80024f4 <HAL_DMA_Init>
 8002012:	2800      	cmp	r0, #0
 8002014:	d001      	beq.n	800201a <HAL_SPI_MspInit+0xa2>
    {
      Error_Handler();
 8002016:	f7ff ff8c 	bl	8001f32 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 800201a:	2019      	movs	r0, #25
 800201c:	2200      	movs	r2, #0
 800201e:	2103      	movs	r1, #3
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002020:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002022:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002024:	f000 fa30 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002028:	2019      	movs	r0, #25
 800202a:	f000 fa57 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800202e:	b006      	add	sp, #24
 8002030:	bd70      	pop	{r4, r5, r6, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40013000 	.word	0x40013000
 8002038:	40021000 	.word	0x40021000
 800203c:	20000348 	.word	0x20000348
 8002040:	40020030 	.word	0x40020030
 8002044:	4002001c 	.word	0x4002001c
 8002048:	20000300 	.word	0x20000300

0800204c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	2201      	movs	r2, #1
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_MspInit+0x24>)
{
 8002050:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002054:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800205e:	0552      	lsls	r2, r2, #21
 8002060:	430a      	orrs	r2, r1
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002064:	2103      	movs	r1, #3
 8002066:	2200      	movs	r2, #0
 8002068:	4240      	negs	r0, r0
 800206a:	f000 fa0d 	bl	8002488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b530      	push	{r4, r5, lr}

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	2401      	movs	r4, #1
{
 8002078:	b087      	sub	sp, #28
 800207a:	0001      	movs	r1, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800207c:	2200      	movs	r2, #0
 800207e:	200f      	movs	r0, #15
 8002080:	f000 fa02 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002084:	200f      	movs	r0, #15
 8002086:	f000 fa29 	bl	80024dc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_InitTick+0x60>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800208c:	4669      	mov	r1, sp
  __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002090:	a801      	add	r0, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	4323      	orrs	r3, r4
 8002094:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002096:	f000 ff8f 	bl	8002fb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800209a:	f000 ff6d 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	4d0d      	ldr	r5, [pc, #52]	; (80020d8 <HAL_InitTick+0x64>)
 80020a2:	05db      	lsls	r3, r3, #23
 80020a4:	602b      	str	r3, [r5, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_InitTick+0x68>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020a8:	490d      	ldr	r1, [pc, #52]	; (80020e0 <HAL_InitTick+0x6c>)
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80020aa:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ac:	f7fe f84a 	bl	8000144 <__udivsi3>
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 80020b0:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b2:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80020b4:	6068      	str	r0, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80020b6:	0028      	movs	r0, r5
  htim2.Init.ClockDivision = 0;
 80020b8:	612b      	str	r3, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	60ab      	str	r3, [r5, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80020bc:	f001 febb 	bl	8003e36 <HAL_TIM_Base_Init>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d103      	bne.n	80020cc <HAL_InitTick+0x58>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80020c4:	0028      	movs	r0, r5
 80020c6:	f001 fedb 	bl	8003e80 <HAL_TIM_Base_Start_IT>
 80020ca:	0004      	movs	r4, r0
  }

  /* Return function status */
  return HAL_ERROR;
}
 80020cc:	0020      	movs	r0, r4
 80020ce:	b007      	add	sp, #28
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40021000 	.word	0x40021000
 80020d8:	200003e8 	.word	0x200003e8
 80020dc:	000003e7 	.word	0x000003e7
 80020e0:	000f4240 	.word	0x000f4240

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	e7fe      	b.n	80020e4 <NMI_Handler>

080020e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler>

080020e8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020e8:	2080      	movs	r0, #128	; 0x80
{
 80020ea:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020ec:	0040      	lsls	r0, r0, #1
 80020ee:	f000 fbd3 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80020f2:	2080      	movs	r0, #128	; 0x80
 80020f4:	0080      	lsls	r0, r0, #2
 80020f6:	f000 fbcf 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020fa:	bd10      	pop	{r4, pc}

080020fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80020fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80020fe:	4803      	ldr	r0, [pc, #12]	; (800210c <DMA1_Channel2_3_IRQHandler+0x10>)
 8002100:	f000 fac1 	bl	8002686 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002106:	f000 fabe 	bl	8002686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800210a:	bd10      	pop	{r4, pc}
 800210c:	20000300 	.word	0x20000300
 8002110:	20000348 	.word	0x20000348

08002114 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002114:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8002118:	f000 fab5 	bl	8002686 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800211e:	f000 fab2 	bl	8002686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002122:	bd10      	pop	{r4, pc}
 8002124:	20000474 	.word	0x20000474
 8002128:	2000042c 	.word	0x2000042c

0800212c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800212c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM2_IRQHandler+0xc>)
 8002130:	f001 fed0 	bl	8003ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	200003e8 	.word	0x200003e8

0800213c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800213c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800213e:	4802      	ldr	r0, [pc, #8]	; (8002148 <SPI1_IRQHandler+0xc>)
 8002140:	f001 fdba 	bl	8003cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002144:	bd10      	pop	{r4, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	20000390 	.word	0x20000390

0800214c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800214c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800214e:	4802      	ldr	r0, [pc, #8]	; (8002158 <USART2_IRQHandler+0xc>)
 8002150:	f001 ffb8 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002154:	bd10      	pop	{r4, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	20000544 	.word	0x20000544

0800215c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 800215c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800215e:	4802      	ldr	r0, [pc, #8]	; (8002168 <LPUART1_IRQHandler+0xc>)
 8002160:	f001 ffb0 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002164:	bd10      	pop	{r4, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	200004bc 	.word	0x200004bc

0800216c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800216c:	2001      	movs	r0, #1
 800216e:	4770      	bx	lr

08002170 <_kill>:

int _kill(int pid, int sig)
{
 8002170:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002172:	f003 fd69 	bl	8005c48 <__errno>
 8002176:	2316      	movs	r3, #22
 8002178:	6003      	str	r3, [r0, #0]
	return -1;
 800217a:	2001      	movs	r0, #1
}
 800217c:	4240      	negs	r0, r0
 800217e:	bd10      	pop	{r4, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002182:	f003 fd61 	bl	8005c48 <__errno>
 8002186:	2316      	movs	r3, #22
 8002188:	6003      	str	r3, [r0, #0]
 800218a:	e7fe      	b.n	800218a <_exit+0xa>

0800218c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	000e      	movs	r6, r1
 8002190:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2500      	movs	r5, #0
 8002194:	42a5      	cmp	r5, r4
 8002196:	db01      	blt.n	800219c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002198:	0020      	movs	r0, r4
 800219a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800219c:	e000      	b.n	80021a0 <_read+0x14>
 800219e:	bf00      	nop
 80021a0:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	3501      	adds	r5, #1
 80021a4:	e7f6      	b.n	8002194 <_read+0x8>

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b570      	push	{r4, r5, r6, lr}
 80021a8:	000e      	movs	r6, r1
 80021aa:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ac:	2500      	movs	r5, #0
 80021ae:	42a5      	cmp	r5, r4
 80021b0:	db01      	blt.n	80021b6 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80021b2:	0020      	movs	r0, r4
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80021b6:	5d70      	ldrb	r0, [r6, r5]
 80021b8:	e000      	b.n	80021bc <_write+0x16>
 80021ba:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	3501      	adds	r5, #1
 80021be:	e7f6      	b.n	80021ae <_write+0x8>

080021c0 <_close>:

int _close(int file)
{
	return -1;
 80021c0:	2001      	movs	r0, #1
}
 80021c2:	4240      	negs	r0, r0
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	019b      	lsls	r3, r3, #6
	return 0;
}
 80021ca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80021cc:	604b      	str	r3, [r1, #4]
}
 80021ce:	4770      	bx	lr

080021d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80021d0:	2001      	movs	r0, #1
 80021d2:	4770      	bx	lr

080021d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80021d4:	2000      	movs	r0, #0
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <_sbrk+0x30>)
 80021da:	490c      	ldr	r1, [pc, #48]	; (800220c <_sbrk+0x34>)
{
 80021dc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021de:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <_sbrk+0x38>)
{
 80021e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80021e4:	6810      	ldr	r0, [r2, #0]
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d101      	bne.n	80021ee <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80021ea:	480a      	ldr	r0, [pc, #40]	; (8002214 <_sbrk+0x3c>)
 80021ec:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	6810      	ldr	r0, [r2, #0]
 80021f0:	18c3      	adds	r3, r0, r3
 80021f2:	428b      	cmp	r3, r1
 80021f4:	d906      	bls.n	8002204 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80021f6:	f003 fd27 	bl	8005c48 <__errno>
 80021fa:	230c      	movs	r3, #12
 80021fc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021fe:	2001      	movs	r0, #1
 8002200:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002202:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002204:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002206:	e7fc      	b.n	8002202 <_sbrk+0x2a>
 8002208:	00000400 	.word	0x00000400
 800220c:	20002000 	.word	0x20002000
 8002210:	20000428 	.word	0x20000428
 8002214:	20001328 	.word	0x20001328

08002218 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	4770      	bx	lr
	...

0800221c <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <MX_LPUART1_UART_Init+0x30>)
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_LPUART1_UART_Init+0x34>)
{
 8002220:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8002222:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_LPUART1_UART_Init+0x38>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002226:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 209700;
 8002228:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	055b      	lsls	r3, r3, #21
 800222e:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002230:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002232:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002236:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002238:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800223e:	f002 fb0f 	bl	8004860 <HAL_UART_Init>
 8002242:	2800      	cmp	r0, #0
 8002244:	d001      	beq.n	800224a <MX_LPUART1_UART_Init+0x2e>
  {
    Error_Handler();
 8002246:	f7ff fe74 	bl	8001f32 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800224a:	bd10      	pop	{r4, pc}
 800224c:	200004bc 	.word	0x200004bc
 8002250:	40004800 	.word	0x40004800
 8002254:	00033324 	.word	0x00033324

08002258 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <MX_USART2_UART_Init+0x30>)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_USART2_UART_Init+0x34>)
{
 800225c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800225e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002260:	2396      	movs	r3, #150	; 0x96
 8002262:	019b      	lsls	r3, r3, #6
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002264:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 8002266:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002268:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800226e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002270:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002274:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002276:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002278:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227a:	f002 faf1 	bl	8004860 <HAL_UART_Init>
 800227e:	2800      	cmp	r0, #0
 8002280:	d001      	beq.n	8002286 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8002282:	f7ff fe56 	bl	8001f32 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002286:	bd10      	pop	{r4, pc}
 8002288:	20000544 	.word	0x20000544
 800228c:	40004400 	.word	0x40004400

08002290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	0005      	movs	r5, r0
 8002294:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	2214      	movs	r2, #20
 8002298:	2100      	movs	r1, #0
 800229a:	a803      	add	r0, sp, #12
 800229c:	f003 fcfe 	bl	8005c9c <memset>
  if(uartHandle->Instance==LPUART1)
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <HAL_UART_MspInit+0x108>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d123      	bne.n	80022f0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022ac:	02d2      	lsls	r2, r2, #11
 80022ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2403      	movs	r4, #3
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022b2:	430a      	orrs	r2, r1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2202      	movs	r2, #2
 80022b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	4839      	ldr	r0, [pc, #228]	; (80023a0 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4311      	orrs	r1, r2
 80022be:	62d9      	str	r1, [r3, #44]	; 0x2c
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	4013      	ands	r3, r2
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ca:	23c0      	movs	r3, #192	; 0xc0
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80022d0:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80022d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f000 fa20 	bl	800271c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 0);
 80022dc:	201d      	movs	r0, #29
 80022de:	2200      	movs	r2, #0
 80022e0:	0021      	movs	r1, r4
 80022e2:	f000 f8d1 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80022e6:	201d      	movs	r0, #29

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022e8:	f000 f8f8 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022ec:	b008      	add	sp, #32
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 80022f0:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_UART_MspInit+0x114>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d1fa      	bne.n	80022ec <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022fa:	0292      	lsls	r2, r2, #10
 80022fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002300:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002308:	2604      	movs	r6, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	400b      	ands	r3, r1
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002318:	230c      	movs	r3, #12
 800231a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	3b0a      	subs	r3, #10
 800231e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002326:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f000 f9f8 	bl	800271c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800232c:	4c1e      	ldr	r4, [pc, #120]	; (80023a8 <HAL_UART_MspInit+0x118>)
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_UART_MspInit+0x11c>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8002332:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002334:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002338:	0020      	movs	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800233a:	3a60      	subs	r2, #96	; 0x60
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 800233c:	6066      	str	r6, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002340:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002342:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002344:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002346:	61e2      	str	r2, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002348:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800234a:	f000 f8d3 	bl	80024f4 <HAL_DMA_Init>
 800234e:	2800      	cmp	r0, #0
 8002350:	d001      	beq.n	8002356 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002352:	f7ff fdee 	bl	8001f32 <Error_Handler>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_UART_MspInit+0x120>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002358:	676c      	str	r4, [r5, #116]	; 0x74
 800235a:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800235c:	4c15      	ldr	r4, [pc, #84]	; (80023b4 <HAL_UART_MspInit+0x124>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800235e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002360:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8002362:	2304      	movs	r3, #4
 8002364:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002366:	330c      	adds	r3, #12
 8002368:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800236c:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002370:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002372:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002374:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002376:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002378:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800237a:	f000 f8bb 	bl	80024f4 <HAL_DMA_Init>
 800237e:	2800      	cmp	r0, #0
 8002380:	d001      	beq.n	8002386 <HAL_UART_MspInit+0xf6>
      Error_Handler();
 8002382:	f7ff fdd6 	bl	8001f32 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002386:	201c      	movs	r0, #28
 8002388:	2200      	movs	r2, #0
 800238a:	2103      	movs	r1, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800238c:	672c      	str	r4, [r5, #112]	; 0x70
 800238e:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002390:	f000 f87a 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002394:	201c      	movs	r0, #28
 8002396:	e7a7      	b.n	80022e8 <HAL_UART_MspInit+0x58>
 8002398:	40004800 	.word	0x40004800
 800239c:	40021000 	.word	0x40021000
 80023a0:	50000400 	.word	0x50000400
 80023a4:	40004400 	.word	0x40004400
 80023a8:	2000042c 	.word	0x2000042c
 80023ac:	40020058 	.word	0x40020058
 80023b0:	40020044 	.word	0x40020044
 80023b4:	20000474 	.word	0x20000474

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80023b8:	4813      	ldr	r0, [pc, #76]	; (8002408 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80023ba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023bc:	f7ff ff2c 	bl	8002218 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <LoopForever+0x6>)
    LDR R1, [R0]
 80023c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80023c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <LoopForever+0xa>)
    CMP R1, R2
 80023c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80023ca:	d105      	bne.n	80023d8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80023ce:	4912      	ldr	r1, [pc, #72]	; (8002418 <LoopForever+0x12>)
    STR R1, [R0]
 80023d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80023d2:	4812      	ldr	r0, [pc, #72]	; (800241c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80023d4:	4912      	ldr	r1, [pc, #72]	; (8002420 <LoopForever+0x1a>)
    STR R1, [R0]
 80023d6:	6001      	str	r1, [r0, #0]

080023d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d8:	4812      	ldr	r0, [pc, #72]	; (8002424 <LoopForever+0x1e>)
  ldr r1, =_edata
 80023da:	4913      	ldr	r1, [pc, #76]	; (8002428 <LoopForever+0x22>)
  ldr r2, =_sidata
 80023dc:	4a13      	ldr	r2, [pc, #76]	; (800242c <LoopForever+0x26>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80023f0:	4c10      	ldr	r4, [pc, #64]	; (8002434 <LoopForever+0x2e>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fe:	f003 fc29 	bl	8005c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002402:	f7ff fd77 	bl	8001ef4 <main>

08002406 <LoopForever>:

LoopForever:
    b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
   ldr   r0, =_estack
 8002408:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 800240c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002410:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002414:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002418:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800241c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002420:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800242c:	08007048 	.word	0x08007048
  ldr r2, =_sbss
 8002430:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002434:	20001324 	.word	0x20001324

08002438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC1_IRQHandler>
	...

0800243c <HAL_Init>:
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800243c:	2340      	movs	r3, #64	; 0x40
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_Init+0x24>)
{
 8002440:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002442:	6811      	ldr	r1, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002444:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002446:	430b      	orrs	r3, r1
 8002448:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244a:	f7ff fe13 	bl	8002074 <HAL_InitTick>
 800244e:	1e04      	subs	r4, r0, #0
 8002450:	d103      	bne.n	800245a <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002452:	f7ff fdfb 	bl	800204c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8002456:	0020      	movs	r0, r4
 8002458:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800245a:	2401      	movs	r4, #1
 800245c:	e7fb      	b.n	8002456 <HAL_Init+0x1a>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40022000 	.word	0x40022000

08002464 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <HAL_IncTick+0x10>)
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_IncTick+0x14>)
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	185b      	adds	r3, r3, r1
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	4770      	bx	lr
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	200005cc 	.word	0x200005cc
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800247c:	4b01      	ldr	r3, [pc, #4]	; (8002484 <HAL_GetTick+0x8>)
 800247e:	6818      	ldr	r0, [r3, #0]
}
 8002480:	4770      	bx	lr
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	200005cc 	.word	0x200005cc

08002488 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002488:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248a:	25ff      	movs	r5, #255	; 0xff
 800248c:	2403      	movs	r4, #3
 800248e:	002a      	movs	r2, r5
 8002490:	4004      	ands	r4, r0
 8002492:	00e4      	lsls	r4, r4, #3
 8002494:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002496:	0189      	lsls	r1, r1, #6
 8002498:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80024a0:	2800      	cmp	r0, #0
 80024a2:	db0a      	blt.n	80024ba <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a4:	24c0      	movs	r4, #192	; 0xc0
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_NVIC_SetPriority+0x4c>)
 80024a8:	0880      	lsrs	r0, r0, #2
 80024aa:	0080      	lsls	r0, r0, #2
 80024ac:	18c0      	adds	r0, r0, r3
 80024ae:	00a4      	lsls	r4, r4, #2
 80024b0:	5903      	ldr	r3, [r0, r4]
 80024b2:	401a      	ands	r2, r3
 80024b4:	4311      	orrs	r1, r2
 80024b6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80024b8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ba:	200f      	movs	r0, #15
 80024bc:	4003      	ands	r3, r0
 80024be:	3b08      	subs	r3, #8
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <HAL_NVIC_SetPriority+0x50>)
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	181b      	adds	r3, r3, r0
 80024c8:	69d8      	ldr	r0, [r3, #28]
 80024ca:	4002      	ands	r2, r0
 80024cc:	4311      	orrs	r1, r2
 80024ce:	61d9      	str	r1, [r3, #28]
 80024d0:	e7f2      	b.n	80024b8 <HAL_NVIC_SetPriority+0x30>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024dc:	2800      	cmp	r0, #0
 80024de:	db05      	blt.n	80024ec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e0:	231f      	movs	r3, #31
 80024e2:	4018      	ands	r0, r3
 80024e4:	3b1e      	subs	r3, #30
 80024e6:	4083      	lsls	r3, r0
 80024e8:	4a01      	ldr	r2, [pc, #4]	; (80024f0 <HAL_NVIC_EnableIRQ+0x14>)
 80024ea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024ec:	4770      	bx	lr
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80024f8:	2001      	movs	r0, #1
  if(hdma == NULL)
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	d035      	beq.n	800256a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024fe:	6825      	ldr	r5, [r4, #0]
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_DMA_Init+0x78>)
 8002502:	2114      	movs	r1, #20
 8002504:	18e8      	adds	r0, r5, r3
 8002506:	f7fd fe1d 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800250c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800250e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002514:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002516:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002518:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800251c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800251e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002520:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002524:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	433b      	orrs	r3, r7
 8002528:	6967      	ldr	r7, [r4, #20]
 800252a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252c:	69a7      	ldr	r7, [r4, #24]
 800252e:	433b      	orrs	r3, r7
 8002530:	69e7      	ldr	r7, [r4, #28]
 8002532:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	6a27      	ldr	r7, [r4, #32]
 8002536:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002538:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800253a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	01db      	lsls	r3, r3, #7
 8002540:	4299      	cmp	r1, r3
 8002542:	d00c      	beq.n	800255e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002544:	251c      	movs	r5, #28
 8002546:	4028      	ands	r0, r5
 8002548:	3d0d      	subs	r5, #13
 800254a:	4085      	lsls	r5, r0
 800254c:	490a      	ldr	r1, [pc, #40]	; (8002578 <HAL_DMA_Init+0x84>)
 800254e:	680b      	ldr	r3, [r1, #0]
 8002550:	43ab      	bics	r3, r5
 8002552:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002554:	6863      	ldr	r3, [r4, #4]
 8002556:	680d      	ldr	r5, [r1, #0]
 8002558:	4083      	lsls	r3, r0
 800255a:	432b      	orrs	r3, r5
 800255c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002560:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002564:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002566:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002568:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256c:	bffdfff8 	.word	0xbffdfff8
 8002570:	40020000 	.word	0x40020000
 8002574:	ffff800f 	.word	0xffff800f
 8002578:	400200a8 	.word	0x400200a8

0800257c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800257e:	1d45      	adds	r5, r0, #5
{
 8002580:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002582:	7feb      	ldrb	r3, [r5, #31]
{
 8002584:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002586:	2002      	movs	r0, #2
 8002588:	2b01      	cmp	r3, #1
 800258a:	d029      	beq.n	80025e0 <HAL_DMA_Start_IT+0x64>
 800258c:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800258e:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002590:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2600      	movs	r6, #0
 8002596:	469c      	mov	ip, r3
 8002598:	4660      	mov	r0, ip
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2801      	cmp	r0, #1
 800259e:	d12a      	bne.n	80025f6 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	3001      	adds	r0, #1
 80025a2:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025a4:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a6:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025a8:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80025aa:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025ac:	361c      	adds	r6, #28
 80025ae:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80025b0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025b2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80025b4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025b6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80025b8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ba:	9b01      	ldr	r3, [sp, #4]
 80025bc:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025be:	68a3      	ldr	r3, [r4, #8]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d10e      	bne.n	80025e2 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025c4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025c6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80025c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ce:	230e      	movs	r3, #14
 80025d0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025d2:	4313      	orrs	r3, r2
 80025d4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80025d6:	2301      	movs	r3, #1
 80025d8:	6802      	ldr	r2, [r0, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2000      	movs	r0, #0
}
 80025e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80025e2:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80025e4:	60c2      	str	r2, [r0, #12]
 80025e6:	e7ef      	b.n	80025c8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e8:	2204      	movs	r2, #4
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	4393      	bics	r3, r2
 80025ee:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025f0:	6802      	ldr	r2, [r0, #0]
 80025f2:	230a      	movs	r3, #10
 80025f4:	e7ed      	b.n	80025d2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80025f6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80025f8:	77ee      	strb	r6, [r5, #31]
 80025fa:	e7f1      	b.n	80025e0 <HAL_DMA_Start_IT+0x64>

080025fc <HAL_DMA_Abort>:
{
 80025fc:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	1d85      	adds	r5, r0, #6
 8002600:	7feb      	ldrb	r3, [r5, #31]
 8002602:	1d44      	adds	r4, r0, #5
 8002604:	2b02      	cmp	r3, #2
 8002606:	d005      	beq.n	8002614 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	2304      	movs	r3, #4
 800260a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800260c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800260e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002610:	77e3      	strb	r3, [r4, #31]
}
 8002612:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002614:	210e      	movs	r1, #14
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	438a      	bics	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800261e:	2201      	movs	r2, #1
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	4391      	bics	r1, r2
 8002624:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002626:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002628:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800262a:	201c      	movs	r0, #28
 800262c:	4003      	ands	r3, r0
 800262e:	0010      	movs	r0, r2
 8002630:	4098      	lsls	r0, r3
 8002632:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002634:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8002638:	77e0      	strb	r0, [r4, #31]
    return status;
 800263a:	e7ea      	b.n	8002612 <HAL_DMA_Abort+0x16>

0800263c <HAL_DMA_Abort_IT>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800263e:	1d84      	adds	r4, r0, #6
 8002640:	7fe3      	ldrb	r3, [r4, #31]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	2304      	movs	r3, #4
 8002648:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800264a:	3b03      	subs	r3, #3
}
 800264c:	0018      	movs	r0, r3
 800264e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002650:	210e      	movs	r1, #14
 8002652:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002654:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	438a      	bics	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800265c:	2201      	movs	r2, #1
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	4391      	bics	r1, r2
 8002662:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002664:	231c      	movs	r3, #28
 8002666:	402b      	ands	r3, r5
 8002668:	0015      	movs	r5, r2
 800266a:	409d      	lsls	r5, r3
 800266c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800266e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002670:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002672:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002674:	2400      	movs	r4, #0
 8002676:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8002678:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800267c:	42a2      	cmp	r2, r4
 800267e:	d0e5      	beq.n	800264c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002680:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	0023      	movs	r3, r4
 8002684:	e7e2      	b.n	800264c <HAL_DMA_Abort_IT+0x10>

08002686 <HAL_DMA_IRQHandler>:
{
 8002686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002688:	221c      	movs	r2, #28
 800268a:	2704      	movs	r7, #4
 800268c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800268e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002690:	4032      	ands	r2, r6
 8002692:	003e      	movs	r6, r7
 8002694:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002696:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800269c:	4235      	tst	r5, r6
 800269e:	d00d      	beq.n	80026bc <HAL_DMA_IRQHandler+0x36>
 80026a0:	423c      	tst	r4, r7
 80026a2:	d00b      	beq.n	80026bc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	0692      	lsls	r2, r2, #26
 80026a8:	d402      	bmi.n	80026b0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	43ba      	bics	r2, r7
 80026ae:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80026b2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80026b8:	4798      	blx	r3
  return;
 80026ba:	e017      	b.n	80026ec <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80026bc:	2702      	movs	r7, #2
 80026be:	003e      	movs	r6, r7
 80026c0:	4096      	lsls	r6, r2
 80026c2:	4235      	tst	r5, r6
 80026c4:	d013      	beq.n	80026ee <HAL_DMA_IRQHandler+0x68>
 80026c6:	423c      	tst	r4, r7
 80026c8:	d011      	beq.n	80026ee <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	0692      	lsls	r2, r2, #26
 80026ce:	d406      	bmi.n	80026de <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d0:	240a      	movs	r4, #10
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	43a2      	bics	r2, r4
 80026d6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80026d8:	2201      	movs	r2, #1
 80026da:	1d83      	adds	r3, r0, #6
 80026dc:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80026de:	2200      	movs	r2, #0
 80026e0:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80026e2:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80026e4:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80026e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d1e5      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x32>
}
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80026ee:	2608      	movs	r6, #8
 80026f0:	0037      	movs	r7, r6
 80026f2:	4097      	lsls	r7, r2
 80026f4:	423d      	tst	r5, r7
 80026f6:	d0f9      	beq.n	80026ec <HAL_DMA_IRQHandler+0x66>
 80026f8:	4234      	tst	r4, r6
 80026fa:	d0f7      	beq.n	80026ec <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fc:	250e      	movs	r5, #14
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	43ac      	bics	r4, r5
 8002702:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002704:	2301      	movs	r3, #1
 8002706:	001c      	movs	r4, r3
 8002708:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800270a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800270c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800270e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002710:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002712:	2200      	movs	r2, #0
 8002714:	1d43      	adds	r3, r0, #5
 8002716:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002718:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800271a:	e7e5      	b.n	80026e8 <HAL_DMA_IRQHandler+0x62>

0800271c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800271c:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_GPIO_Init+0x158>)
{
 800271e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002720:	1882      	adds	r2, r0, r2
 8002722:	1e54      	subs	r4, r2, #1
 8002724:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8002726:	2300      	movs	r3, #0
{
 8002728:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800272a:	3205      	adds	r2, #5
 800272c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800272e:	680a      	ldr	r2, [r1, #0]
 8002730:	0014      	movs	r4, r2
 8002732:	40dc      	lsrs	r4, r3
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8002736:	b005      	add	sp, #20
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800273a:	2701      	movs	r7, #1
 800273c:	003c      	movs	r4, r7
 800273e:	0015      	movs	r5, r2
 8002740:	409c      	lsls	r4, r3
 8002742:	4025      	ands	r5, r4
 8002744:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8002746:	4222      	tst	r2, r4
 8002748:	d100      	bne.n	800274c <HAL_GPIO_Init+0x30>
 800274a:	e090      	b.n	800286e <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800274c:	684a      	ldr	r2, [r1, #4]
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	2203      	movs	r2, #3
 8002752:	9d00      	ldr	r5, [sp, #0]
 8002754:	4015      	ands	r5, r2
 8002756:	46ac      	mov	ip, r5
 8002758:	005d      	lsls	r5, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800275a:	40aa      	lsls	r2, r5
 800275c:	43d2      	mvns	r2, r2
 800275e:	9202      	str	r2, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002760:	4662      	mov	r2, ip
 8002762:	3a01      	subs	r2, #1
 8002764:	42ba      	cmp	r2, r7
 8002766:	d828      	bhi.n	80027ba <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8002768:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800276a:	9a02      	ldr	r2, [sp, #8]
 800276c:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276e:	68ca      	ldr	r2, [r1, #12]
 8002770:	40aa      	lsls	r2, r5
 8002772:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8002774:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002776:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	43a2      	bics	r2, r4
 800277a:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	9a00      	ldr	r2, [sp, #0]
 800277e:	0912      	lsrs	r2, r2, #4
 8002780:	403a      	ands	r2, r7
 8002782:	409a      	lsls	r2, r3
 8002784:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002786:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 8002788:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800278a:	9a02      	ldr	r2, [sp, #8]
 800278c:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278e:	688a      	ldr	r2, [r1, #8]
 8002790:	40aa      	lsls	r2, r5
 8002792:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002794:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	4662      	mov	r2, ip
 8002798:	2a02      	cmp	r2, #2
 800279a:	d111      	bne.n	80027c0 <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800279c:	2407      	movs	r4, #7
 800279e:	270f      	movs	r7, #15
 80027a0:	401c      	ands	r4, r3
 80027a2:	00a4      	lsls	r4, r4, #2
 80027a4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	1882      	adds	r2, r0, r2
 80027ac:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027ae:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027b0:	690f      	ldr	r7, [r1, #16]
 80027b2:	40a7      	lsls	r7, r4
 80027b4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80027b6:	6216      	str	r6, [r2, #32]
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ba:	4662      	mov	r2, ip
 80027bc:	2a03      	cmp	r2, #3
 80027be:	d1e3      	bne.n	8002788 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80027c0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027c2:	9c02      	ldr	r4, [sp, #8]
 80027c4:	4014      	ands	r4, r2
 80027c6:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c8:	4664      	mov	r4, ip
 80027ca:	40ac      	lsls	r4, r5
 80027cc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80027ce:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d0:	22c0      	movs	r2, #192	; 0xc0
 80027d2:	9c00      	ldr	r4, [sp, #0]
 80027d4:	0292      	lsls	r2, r2, #10
 80027d6:	4214      	tst	r4, r2
 80027d8:	d049      	beq.n	800286e <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2701      	movs	r7, #1
 80027dc:	4c26      	ldr	r4, [pc, #152]	; (8002878 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027de:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027e2:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e4:	433a      	orrs	r2, r7
 80027e6:	6362      	str	r2, [r4, #52]	; 0x34
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80027ea:	089c      	lsrs	r4, r3, #2
 80027ec:	00a4      	lsls	r4, r4, #2
 80027ee:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027f0:	220f      	movs	r2, #15
 80027f2:	00ad      	lsls	r5, r5, #2
 80027f4:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027f8:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80027fa:	22a0      	movs	r2, #160	; 0xa0
 80027fc:	05d2      	lsls	r2, r2, #23
 80027fe:	4694      	mov	ip, r2
 8002800:	2200      	movs	r2, #0
 8002802:	4560      	cmp	r0, ip
 8002804:	d009      	beq.n	800281a <HAL_GPIO_Init+0xfe>
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_GPIO_Init+0x164>)
 8002808:	4694      	mov	ip, r2
 800280a:	003a      	movs	r2, r7
 800280c:	4560      	cmp	r0, ip
 800280e:	d004      	beq.n	800281a <HAL_GPIO_Init+0xfe>
 8002810:	4f1c      	ldr	r7, [pc, #112]	; (8002884 <HAL_GPIO_Init+0x168>)
 8002812:	1892      	adds	r2, r2, r2
 8002814:	42b8      	cmp	r0, r7
 8002816:	d000      	beq.n	800281a <HAL_GPIO_Init+0xfe>
 8002818:	9a03      	ldr	r2, [sp, #12]
 800281a:	40aa      	lsls	r2, r5
 800281c:	4316      	orrs	r6, r2
        temp = EXTI->RTSR;
 800281e:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002820:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 8002822:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002824:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 8002826:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002828:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800282a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800282c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	02ff      	lsls	r7, r7, #11
 8002830:	d401      	bmi.n	8002836 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8002832:	0035      	movs	r5, r6
 8002834:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002836:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002838:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800283a:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800283e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	02bf      	lsls	r7, r7, #10
 8002842:	d401      	bmi.n	8002848 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8002844:	0035      	movs	r5, r6
 8002846:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8002848:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800284a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800284c:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8002850:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002852:	03bf      	lsls	r7, r7, #14
 8002854:	d401      	bmi.n	800285a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8002856:	0035      	movs	r5, r6
 8002858:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800285a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800285c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800285e:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002860:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8002862:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002864:	03ff      	lsls	r7, r7, #15
 8002866:	d401      	bmi.n	800286c <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8002868:	4025      	ands	r5, r4
 800286a:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800286c:	6016      	str	r6, [r2, #0]
    position++;
 800286e:	3301      	adds	r3, #1
 8002870:	e75d      	b.n	800272e <HAL_GPIO_Init+0x12>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	afffe400 	.word	0xafffe400
 8002878:	40021000 	.word	0x40021000
 800287c:	40010000 	.word	0x40010000
 8002880:	50000400 	.word	0x50000400
 8002884:	50000800 	.word	0x50000800
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288c:	2a00      	cmp	r2, #0
 800288e:	d001      	beq.n	8002894 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002890:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002892:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002894:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002896:	e7fc      	b.n	8002892 <HAL_GPIO_WritePin+0x6>

08002898 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800289a:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	4210      	tst	r0, r2
 80028a0:	d002      	beq.n	80028a8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a4:	f002 ffc2 	bl	800582c <HAL_GPIO_EXTI_Callback>
  }
}
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80028b4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80028b6:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	4022      	ands	r2, r4
 80028ba:	2a08      	cmp	r2, #8
 80028bc:	d031      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x72>
 80028be:	2a0c      	cmp	r2, #12
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x26>
 80028c2:	2a04      	cmp	r2, #4
 80028c4:	d125      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c6:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028ca:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80028cc:	17c0      	asrs	r0, r0, #31
 80028ce:	4018      	ands	r0, r3
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_RCC_GetSysClockFreq+0x80>)
 80028d2:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80028d4:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028d6:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028d8:	4816      	ldr	r0, [pc, #88]	; (8002934 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028da:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028dc:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028e0:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028e4:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e6:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028e8:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ea:	4211      	tst	r1, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_RCC_GetSysClockFreq+0x88>)
 80028f0:	2300      	movs	r3, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	f7fd fd34 	bl	8000360 <__aeabi_lmul>
 80028f8:	0022      	movs	r2, r4
 80028fa:	2300      	movs	r3, #0
 80028fc:	f7fd fd10 	bl	8000320 <__aeabi_uldivmod>
 8002900:	e7e8      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2310      	movs	r3, #16
 8002906:	421a      	tst	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0x8c>)
 800290c:	e7f0      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_GetSysClockFreq+0x80>)
 8002910:	e7ee      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002912:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002914:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002916:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800291c:	3301      	adds	r3, #1
 800291e:	4098      	lsls	r0, r3
      break;
 8002920:	e7d8      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_RCC_GetSysClockFreq+0x88>)
 8002924:	e7d6      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x24>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	ff48e500 	.word	0xff48e500
 8002930:	00f42400 	.word	0x00f42400
 8002934:	08006ec8 	.word	0x08006ec8
 8002938:	007a1200 	.word	0x007a1200
 800293c:	003d0900 	.word	0x003d0900

08002940 <HAL_RCC_OscConfig>:
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	0005      	movs	r5, r0
 8002944:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002946:	2800      	cmp	r0, #0
 8002948:	d056      	beq.n	80029f8 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	230c      	movs	r3, #12
 800294c:	4cb6      	ldr	r4, [pc, #728]	; (8002c28 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002950:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002952:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002954:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	025b      	lsls	r3, r3, #9
 800295a:	0019      	movs	r1, r3
 800295c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	07d2      	lsls	r2, r2, #31
 8002960:	d43e      	bmi.n	80029e0 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	682b      	ldr	r3, [r5, #0]
 8002964:	079b      	lsls	r3, r3, #30
 8002966:	d500      	bpl.n	800296a <HAL_RCC_OscConfig+0x2a>
 8002968:	e087      	b.n	8002a7a <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	06db      	lsls	r3, r3, #27
 800296e:	d529      	bpl.n	80029c4 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	2e00      	cmp	r6, #0
 8002972:	d000      	beq.n	8002976 <HAL_RCC_OscConfig+0x36>
 8002974:	e0e0      	b.n	8002b38 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	059b      	lsls	r3, r3, #22
 800297a:	d502      	bpl.n	8002982 <HAL_RCC_OscConfig+0x42>
 800297c:	69ab      	ldr	r3, [r5, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d03a      	beq.n	80029f8 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002982:	6862      	ldr	r2, [r4, #4]
 8002984:	49a9      	ldr	r1, [pc, #676]	; (8002c2c <HAL_RCC_OscConfig+0x2ec>)
 8002986:	6a2b      	ldr	r3, [r5, #32]
 8002988:	400a      	ands	r2, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	6861      	ldr	r1, [r4, #4]
 8002990:	69ea      	ldr	r2, [r5, #28]
 8002992:	0209      	lsls	r1, r1, #8
 8002994:	0a09      	lsrs	r1, r1, #8
 8002996:	0612      	lsls	r2, r2, #24
 8002998:	430a      	orrs	r2, r1
 800299a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	3301      	adds	r3, #1
 80029a2:	0212      	lsls	r2, r2, #8
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029a8:	68e1      	ldr	r1, [r4, #12]
 80029aa:	060a      	lsls	r2, r1, #24
 80029ac:	49a0      	ldr	r1, [pc, #640]	; (8002c30 <HAL_RCC_OscConfig+0x2f0>)
 80029ae:	0f12      	lsrs	r2, r2, #28
 80029b0:	5c8a      	ldrb	r2, [r1, r2]
 80029b2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029b4:	4a9f      	ldr	r2, [pc, #636]	; (8002c34 <HAL_RCC_OscConfig+0x2f4>)
 80029b6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80029b8:	4b9f      	ldr	r3, [pc, #636]	; (8002c38 <HAL_RCC_OscConfig+0x2f8>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f7ff fb5a 	bl	8002074 <HAL_InitTick>
        if(status != HAL_OK)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d130      	bne.n	8002a26 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	071b      	lsls	r3, r3, #28
 80029c8:	d500      	bpl.n	80029cc <HAL_RCC_OscConfig+0x8c>
 80029ca:	e0ec      	b.n	8002ba6 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	075b      	lsls	r3, r3, #29
 80029d0:	d500      	bpl.n	80029d4 <HAL_RCC_OscConfig+0x94>
 80029d2:	e10e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d000      	beq.n	80029dc <HAL_RCC_OscConfig+0x9c>
 80029da:	e192      	b.n	8002d02 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80029dc:	2000      	movs	r0, #0
 80029de:	e022      	b.n	8002a26 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	2e08      	cmp	r6, #8
 80029e2:	d003      	beq.n	80029ec <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029e4:	2e0c      	cmp	r6, #12
 80029e6:	d109      	bne.n	80029fc <HAL_RCC_OscConfig+0xbc>
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	d007      	beq.n	80029fc <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	039b      	lsls	r3, r3, #14
 80029f0:	d5b7      	bpl.n	8002962 <HAL_RCC_OscConfig+0x22>
 80029f2:	686b      	ldr	r3, [r5, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1b4      	bne.n	8002962 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	686a      	ldr	r2, [r5, #4]
 80029fe:	428a      	cmp	r2, r1
 8002a00:	d113      	bne.n	8002a2a <HAL_RCC_OscConfig+0xea>
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a08:	f7ff fd38 	bl	800247c <HAL_GetTick>
 8002a0c:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	0292      	lsls	r2, r2, #10
 8002a14:	4213      	tst	r3, r2
 8002a16:	d1a4      	bne.n	8002962 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fd30 	bl	800247c <HAL_GetTick>
 8002a1c:	9b00      	ldr	r3, [sp, #0]
 8002a1e:	1ac0      	subs	r0, r0, r3
 8002a20:	2864      	cmp	r0, #100	; 0x64
 8002a22:	d9f4      	bls.n	8002a0e <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8002a24:	2003      	movs	r0, #3
}
 8002a26:	b005      	add	sp, #20
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	21a0      	movs	r1, #160	; 0xa0
 8002a2c:	02c9      	lsls	r1, r1, #11
 8002a2e:	428a      	cmp	r2, r1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0xfe>
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	6821      	ldr	r1, [r4, #0]
 8002a36:	02d2      	lsls	r2, r2, #11
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	6022      	str	r2, [r4, #0]
 8002a3c:	e7e1      	b.n	8002a02 <HAL_RCC_OscConfig+0xc2>
 8002a3e:	6821      	ldr	r1, [r4, #0]
 8002a40:	487e      	ldr	r0, [pc, #504]	; (8002c3c <HAL_RCC_OscConfig+0x2fc>)
 8002a42:	4001      	ands	r1, r0
 8002a44:	6021      	str	r1, [r4, #0]
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	400b      	ands	r3, r1
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	497c      	ldr	r1, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x300>)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	400b      	ands	r3, r1
 8002a54:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d1d6      	bne.n	8002a08 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fd0f 	bl	800247c <HAL_GetTick>
 8002a5e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	0292      	lsls	r2, r2, #10
 8002a66:	4213      	tst	r3, r2
 8002a68:	d100      	bne.n	8002a6c <HAL_RCC_OscConfig+0x12c>
 8002a6a:	e77a      	b.n	8002962 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff fd06 	bl	800247c <HAL_GetTick>
 8002a70:	9b00      	ldr	r3, [sp, #0]
 8002a72:	1ac0      	subs	r0, r0, r3
 8002a74:	2864      	cmp	r0, #100	; 0x64
 8002a76:	d9f3      	bls.n	8002a60 <HAL_RCC_OscConfig+0x120>
 8002a78:	e7d4      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a7a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002a7c:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a7e:	4213      	tst	r3, r2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a82:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002a84:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a86:	4311      	orrs	r1, r2
 8002a88:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8a:	2e04      	cmp	r6, #4
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8e:	2e0c      	cmp	r6, #12
 8002a90:	d124      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
 8002a92:	2f00      	cmp	r7, #0
 8002a94:	d122      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	0752      	lsls	r2, r2, #29
 8002a9a:	d501      	bpl.n	8002aa0 <HAL_RCC_OscConfig+0x160>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ab      	beq.n	80029f8 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	6861      	ldr	r1, [r4, #4]
 8002aa2:	692a      	ldr	r2, [r5, #16]
 8002aa4:	4867      	ldr	r0, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x304>)
 8002aa6:	0212      	lsls	r2, r2, #8
 8002aa8:	4001      	ands	r1, r0
 8002aaa:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002aac:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab8:	f7ff fefa 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002abc:	68e3      	ldr	r3, [r4, #12]
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x2f0>)
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	0f1b      	lsrs	r3, r3, #28
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	40d8      	lsrs	r0, r3
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_OscConfig+0x2f4>)
 8002aca:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002acc:	4b5a      	ldr	r3, [pc, #360]	; (8002c38 <HAL_RCC_OscConfig+0x2f8>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	f7ff fad0 	bl	8002074 <HAL_InitTick>
      if(status != HAL_OK)
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d100      	bne.n	8002ada <HAL_RCC_OscConfig+0x19a>
 8002ad8:	e747      	b.n	800296a <HAL_RCC_OscConfig+0x2a>
 8002ada:	e7a4      	b.n	8002a26 <HAL_RCC_OscConfig+0xe6>
      if(hsi_state != RCC_HSI_OFF)
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d019      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ae0:	2109      	movs	r1, #9
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002aea:	f7ff fcc7 	bl	800247c <HAL_GetTick>
 8002aee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af0:	2204      	movs	r2, #4
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	4213      	tst	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	6862      	ldr	r2, [r4, #4]
 8002afa:	692b      	ldr	r3, [r5, #16]
 8002afc:	4951      	ldr	r1, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x304>)
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	400a      	ands	r2, r1
 8002b02:	4313      	orrs	r3, r2
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	e730      	b.n	800296a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b08:	f7ff fcb8 	bl	800247c <HAL_GetTick>
 8002b0c:	1bc0      	subs	r0, r0, r7
 8002b0e:	2802      	cmp	r0, #2
 8002b10:	d9ee      	bls.n	8002af0 <HAL_RCC_OscConfig+0x1b0>
 8002b12:	e787      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8002b14:	2201      	movs	r2, #1
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4393      	bics	r3, r2
 8002b1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fcae 	bl	800247c <HAL_GetTick>
 8002b20:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b22:	2204      	movs	r2, #4
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	4213      	tst	r3, r2
 8002b28:	d100      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
 8002b2a:	e71e      	b.n	800296a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fca6 	bl	800247c <HAL_GetTick>
 8002b30:	1bc0      	subs	r0, r0, r7
 8002b32:	2802      	cmp	r0, #2
 8002b34:	d9f5      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1e2>
 8002b36:	e775      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b38:	69ab      	ldr	r3, [r5, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d020      	beq.n	8002b80 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	6822      	ldr	r2, [r4, #0]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4313      	orrs	r3, r2
 8002b46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b48:	f7ff fc98 	bl	800247c <HAL_GetTick>
 8002b4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4213      	tst	r3, r2
 8002b56:	d00d      	beq.n	8002b74 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x2ec>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	6a2a      	ldr	r2, [r5, #32]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b64:	6862      	ldr	r2, [r4, #4]
 8002b66:	69eb      	ldr	r3, [r5, #28]
 8002b68:	0212      	lsls	r2, r2, #8
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	0a12      	lsrs	r2, r2, #8
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	6063      	str	r3, [r4, #4]
 8002b72:	e727      	b.n	80029c4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b74:	f7ff fc82 	bl	800247c <HAL_GetTick>
 8002b78:	1bc0      	subs	r0, r0, r7
 8002b7a:	2802      	cmp	r0, #2
 8002b7c:	d9e7      	bls.n	8002b4e <HAL_RCC_OscConfig+0x20e>
 8002b7e:	e751      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_RCC_OscConfig+0x308>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b88:	f7ff fc78 	bl	800247c <HAL_GetTick>
 8002b8c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	0092      	lsls	r2, r2, #2
 8002b94:	4213      	tst	r3, r2
 8002b96:	d100      	bne.n	8002b9a <HAL_RCC_OscConfig+0x25a>
 8002b98:	e714      	b.n	80029c4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9a:	f7ff fc6f 	bl	800247c <HAL_GetTick>
 8002b9e:	1bc0      	subs	r0, r0, r7
 8002ba0:	2802      	cmp	r0, #2
 8002ba2:	d9f4      	bls.n	8002b8e <HAL_RCC_OscConfig+0x24e>
 8002ba4:	e73e      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	696a      	ldr	r2, [r5, #20]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	d010      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8002bae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fc62 	bl	800247c <HAL_GetTick>
 8002bb8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bba:	2202      	movs	r2, #2
 8002bbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002bbe:	4213      	tst	r3, r2
 8002bc0:	d000      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x284>
 8002bc2:	e703      	b.n	80029cc <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fc5a 	bl	800247c <HAL_GetTick>
 8002bc8:	1bc0      	subs	r0, r0, r7
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	d9f5      	bls.n	8002bba <HAL_RCC_OscConfig+0x27a>
 8002bce:	e729      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8002bd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002bd2:	439a      	bics	r2, r3
 8002bd4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002bd6:	f7ff fc51 	bl	800247c <HAL_GetTick>
 8002bda:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bdc:	2202      	movs	r2, #2
 8002bde:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002be0:	4213      	tst	r3, r2
 8002be2:	d100      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2a6>
 8002be4:	e6f2      	b.n	80029cc <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7ff fc49 	bl	800247c <HAL_GetTick>
 8002bea:	1bc0      	subs	r0, r0, r7
 8002bec:	2802      	cmp	r0, #2
 8002bee:	d9f5      	bls.n	8002bdc <HAL_RCC_OscConfig+0x29c>
 8002bf0:	e718      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002bf8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfc:	421a      	tst	r2, r3
 8002bfe:	d104      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c02:	4313      	orrs	r3, r2
 8002c04:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	4f0f      	ldr	r7, [pc, #60]	; (8002c4c <HAL_RCC_OscConfig+0x30c>)
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4213      	tst	r3, r2
 8002c14:	d01c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	68ab      	ldr	r3, [r5, #8]
 8002c1a:	0052      	lsls	r2, r2, #1
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d12b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x338>
 8002c20:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c22:	4313      	orrs	r3, r2
 8002c24:	6523      	str	r3, [r4, #80]	; 0x50
 8002c26:	e04c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x382>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	ffff1fff 	.word	0xffff1fff
 8002c30:	08006eb0 	.word	0x08006eb0
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	fffeffff 	.word	0xfffeffff
 8002c40:	fffbffff 	.word	0xfffbffff
 8002c44:	ffffe0ff 	.word	0xffffe0ff
 8002c48:	fffffeff 	.word	0xfffffeff
 8002c4c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	0052      	lsls	r2, r2, #1
 8002c56:	4313      	orrs	r3, r2
 8002c58:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fc0f 	bl	800247c <HAL_GetTick>
 8002c5e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	0052      	lsls	r2, r2, #1
 8002c66:	4213      	tst	r3, r2
 8002c68:	d1d5      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7ff fc07 	bl	800247c <HAL_GetTick>
 8002c6e:	9b01      	ldr	r3, [sp, #4]
 8002c70:	1ac0      	subs	r0, r0, r3
 8002c72:	2864      	cmp	r0, #100	; 0x64
 8002c74:	d9f4      	bls.n	8002c60 <HAL_RCC_OscConfig+0x320>
 8002c76:	e6d5      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d116      	bne.n	8002caa <HAL_RCC_OscConfig+0x36a>
 8002c7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c7e:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x484>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	6523      	str	r3, [r4, #80]	; 0x50
 8002c84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c86:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_RCC_OscConfig+0x488>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fbf6 	bl	800247c <HAL_GetTick>
 8002c90:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4213      	tst	r3, r2
 8002c9a:	d01a      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7ff fbee 	bl	800247c <HAL_GetTick>
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCC_OscConfig+0x48c>)
 8002ca2:	1bc0      	subs	r0, r0, r7
 8002ca4:	4298      	cmp	r0, r3
 8002ca6:	d9f4      	bls.n	8002c92 <HAL_RCC_OscConfig+0x352>
 8002ca8:	e6bc      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002caa:	21a0      	movs	r1, #160	; 0xa0
 8002cac:	00c9      	lsls	r1, r1, #3
 8002cae:	428b      	cmp	r3, r1
 8002cb0:	d118      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x3a4>
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6523      	str	r3, [r4, #80]	; 0x50
 8002cbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fbdb 	bl	800247c <HAL_GetTick>
 8002cc6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4213      	tst	r3, r2
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8002cd2:	9b00      	ldr	r3, [sp, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d000      	beq.n	8002cda <HAL_RCC_OscConfig+0x39a>
 8002cd8:	e67c      	b.n	80029d4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x490>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ce2:	e677      	b.n	80029d4 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ce6:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x484>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	6523      	str	r3, [r4, #80]	; 0x50
 8002cec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002cee:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <HAL_RCC_OscConfig+0x488>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	e797      	b.n	8002c24 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7ff fbc2 	bl	800247c <HAL_GetTick>
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCC_OscConfig+0x48c>)
 8002cfa:	1bc0      	subs	r0, r0, r7
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	d9e3      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x388>
 8002d00:	e690      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d02:	2e0c      	cmp	r6, #12
 8002d04:	d043      	beq.n	8002d8e <HAL_RCC_OscConfig+0x44e>
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_RCC_OscConfig+0x494>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d12e      	bne.n	8002d6a <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d0e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4013      	ands	r3, r2
 8002d12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d14:	f7ff fbb2 	bl	800247c <HAL_GetTick>
 8002d18:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d1a:	04bf      	lsls	r7, r7, #18
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	423b      	tst	r3, r7
 8002d20:	d11d      	bne.n	8002d5e <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d22:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002d24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d26:	68e2      	ldr	r2, [r4, #12]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	492b      	ldr	r1, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d2c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2e:	400a      	ands	r2, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d34:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	045b      	lsls	r3, r3, #17
 8002d40:	4313      	orrs	r3, r2
 8002d42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d44:	f7ff fb9a 	bl	800247c <HAL_GetTick>
 8002d48:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	4233      	tst	r3, r6
 8002d4e:	d000      	beq.n	8002d52 <HAL_RCC_OscConfig+0x412>
 8002d50:	e644      	b.n	80029dc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff fb93 	bl	800247c <HAL_GetTick>
 8002d56:	1b40      	subs	r0, r0, r5
 8002d58:	2802      	cmp	r0, #2
 8002d5a:	d9f6      	bls.n	8002d4a <HAL_RCC_OscConfig+0x40a>
 8002d5c:	e662      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7ff fb8d 	bl	800247c <HAL_GetTick>
 8002d62:	1b80      	subs	r0, r0, r6
 8002d64:	2802      	cmp	r0, #2
 8002d66:	d9d9      	bls.n	8002d1c <HAL_RCC_OscConfig+0x3dc>
 8002d68:	e65c      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d6c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4013      	ands	r3, r2
 8002d70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d72:	f7ff fb83 	bl	800247c <HAL_GetTick>
 8002d76:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d78:	04b6      	lsls	r6, r6, #18
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	4233      	tst	r3, r6
 8002d7e:	d100      	bne.n	8002d82 <HAL_RCC_OscConfig+0x442>
 8002d80:	e62c      	b.n	80029dc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7ff fb7b 	bl	800247c <HAL_GetTick>
 8002d86:	1b40      	subs	r0, r0, r5
 8002d88:	2802      	cmp	r0, #2
 8002d8a:	d9f6      	bls.n	8002d7a <HAL_RCC_OscConfig+0x43a>
 8002d8c:	e64a      	b.n	8002a24 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 8002d8e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d100      	bne.n	8002d96 <HAL_RCC_OscConfig+0x456>
 8002d94:	e647      	b.n	8002a26 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002d98:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002d9c:	0252      	lsls	r2, r2, #9
 8002d9e:	401a      	ands	r2, r3
 8002da0:	428a      	cmp	r2, r1
 8002da2:	d000      	beq.n	8002da6 <HAL_RCC_OscConfig+0x466>
 8002da4:	e628      	b.n	80029f8 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002da6:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002daa:	0392      	lsls	r2, r2, #14
 8002dac:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	428a      	cmp	r2, r1
 8002db0:	d000      	beq.n	8002db4 <HAL_RCC_OscConfig+0x474>
 8002db2:	e621      	b.n	80029f8 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002db4:	22c0      	movs	r2, #192	; 0xc0
 8002db6:	0412      	lsls	r2, r2, #16
 8002db8:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x482>
 8002dc0:	e60c      	b.n	80029dc <HAL_RCC_OscConfig+0x9c>
 8002dc2:	e619      	b.n	80029f8 <HAL_RCC_OscConfig+0xb8>
 8002dc4:	fffffeff 	.word	0xfffffeff
 8002dc8:	fffffbff 	.word	0xfffffbff
 8002dcc:	00001388 	.word	0x00001388
 8002dd0:	efffffff 	.word	0xefffffff
 8002dd4:	feffffff 	.word	0xfeffffff
 8002dd8:	ff02ffff 	.word	0xff02ffff

08002ddc <HAL_RCC_ClockConfig>:
{
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	1e04      	subs	r4, r0, #0
 8002de0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
}
 8002de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	2501      	movs	r5, #1
 8002dea:	4e5b      	ldr	r6, [pc, #364]	; (8002f58 <HAL_RCC_ClockConfig+0x17c>)
 8002dec:	9a01      	ldr	r2, [sp, #4]
 8002dee:	6833      	ldr	r3, [r6, #0]
 8002df0:	402b      	ands	r3, r5
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d331      	bcc.n	8002e5a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	0793      	lsls	r3, r2, #30
 8002dfa:	d443      	bmi.n	8002e84 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfc:	07d3      	lsls	r3, r2, #31
 8002dfe:	d449      	bmi.n	8002e94 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	2501      	movs	r5, #1
 8002e02:	6833      	ldr	r3, [r6, #0]
 8002e04:	9a01      	ldr	r2, [sp, #4]
 8002e06:	402b      	ands	r3, r5
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d909      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	6833      	ldr	r3, [r6, #0]
 8002e0e:	43ab      	bics	r3, r5
 8002e10:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002e12:	f7ff fb33 	bl	800247c <HAL_GetTick>
 8002e16:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	422b      	tst	r3, r5
 8002e1c:	d000      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x44>
 8002e1e:	e08c      	b.n	8002f3a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	4d4e      	ldr	r5, [pc, #312]	; (8002f5c <HAL_RCC_ClockConfig+0x180>)
 8002e24:	0753      	lsls	r3, r2, #29
 8002e26:	d500      	bpl.n	8002e2a <HAL_RCC_ClockConfig+0x4e>
 8002e28:	e08f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	0713      	lsls	r3, r2, #28
 8002e2c:	d506      	bpl.n	8002e3c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	68e9      	ldr	r1, [r5, #12]
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_RCC_ClockConfig+0x184>)
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	400a      	ands	r2, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3c:	f7ff fd38 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002e40:	68eb      	ldr	r3, [r5, #12]
 8002e42:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_RCC_ClockConfig+0x188>)
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	0f1b      	lsrs	r3, r3, #28
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	40d8      	lsrs	r0, r3
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_ClockConfig+0x18c>)
 8002e4e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002e50:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCC_ClockConfig+0x190>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	f7ff f90e 	bl	8002074 <HAL_InitTick>
 8002e58:	e7c5      	b.n	8002de6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	6833      	ldr	r3, [r6, #0]
 8002e5c:	9a01      	ldr	r2, [sp, #4]
 8002e5e:	43ab      	bics	r3, r5
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002e64:	f7ff fb0a 	bl	800247c <HAL_GetTick>
 8002e68:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	6833      	ldr	r3, [r6, #0]
 8002e6c:	9a01      	ldr	r2, [sp, #4]
 8002e6e:	402b      	ands	r3, r5
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d0c0      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7ff fb02 	bl	800247c <HAL_GetTick>
 8002e78:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002e7a:	1bc0      	subs	r0, r0, r7
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	d9f4      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002e80:	2003      	movs	r0, #3
 8002e82:	e7b0      	b.n	8002de6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	20f0      	movs	r0, #240	; 0xf0
 8002e86:	4935      	ldr	r1, [pc, #212]	; (8002f5c <HAL_RCC_ClockConfig+0x180>)
 8002e88:	68cb      	ldr	r3, [r1, #12]
 8002e8a:	4383      	bics	r3, r0
 8002e8c:	68a0      	ldr	r0, [r4, #8]
 8002e8e:	4303      	orrs	r3, r0
 8002e90:	60cb      	str	r3, [r1, #12]
 8002e92:	e7b3      	b.n	8002dfc <HAL_RCC_ClockConfig+0x20>
 8002e94:	4d31      	ldr	r5, [pc, #196]	; (8002f5c <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e98:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	2a02      	cmp	r2, #2
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e9e:	039b      	lsls	r3, r3, #14
 8002ea0:	d5a0      	bpl.n	8002de4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	68eb      	ldr	r3, [r5, #12]
 8002ea6:	438b      	bics	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002eac:	f7ff fae6 	bl	800247c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002eb2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d118      	bne.n	8002eea <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb8:	220c      	movs	r2, #12
 8002eba:	68eb      	ldr	r3, [r5, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d09e      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7ff fadb 	bl	800247c <HAL_GetTick>
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002ec8:	1bc0      	subs	r0, r0, r7
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d9f4      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0xdc>
 8002ece:	e7d7      	b.n	8002e80 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed0:	2a03      	cmp	r2, #3
 8002ed2:	d102      	bne.n	8002eda <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	d4e4      	bmi.n	8002ea2 <HAL_RCC_ClockConfig+0xc6>
 8002ed8:	e784      	b.n	8002de4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eda:	2a01      	cmp	r2, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	075b      	lsls	r3, r3, #29
 8002ee0:	d4df      	bmi.n	8002ea2 <HAL_RCC_ClockConfig+0xc6>
 8002ee2:	e77f      	b.n	8002de4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ee4:	059b      	lsls	r3, r3, #22
 8002ee6:	d4dc      	bmi.n	8002ea2 <HAL_RCC_ClockConfig+0xc6>
 8002ee8:	e77c      	b.n	8002de4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	68eb      	ldr	r3, [r5, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d083      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7ff fac0 	bl	800247c <HAL_GetTick>
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002efe:	1bc0      	subs	r0, r0, r7
 8002f00:	4298      	cmp	r0, r3
 8002f02:	d9f4      	bls.n	8002eee <HAL_RCC_ClockConfig+0x112>
 8002f04:	e7bc      	b.n	8002e80 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d011      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	68eb      	ldr	r3, [r5, #12]
 8002f0e:	4213      	tst	r3, r2
 8002f10:	d100      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x138>
 8002f12:	e775      	b.n	8002e00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7ff fab2 	bl	800247c <HAL_GetTick>
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002f1a:	1bc0      	subs	r0, r0, r7
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d9f4      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x12e>
 8002f20:	e7ae      	b.n	8002e80 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7ff faab 	bl	800247c <HAL_GetTick>
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002f28:	1bc0      	subs	r0, r0, r7
 8002f2a:	4298      	cmp	r0, r3
 8002f2c:	d8a8      	bhi.n	8002e80 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	220c      	movs	r2, #12
 8002f30:	68eb      	ldr	r3, [r5, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d1f4      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x146>
 8002f38:	e762      	b.n	8002e00 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3a:	f7ff fa9f 	bl	800247c <HAL_GetTick>
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_ClockConfig+0x194>)
 8002f40:	1bc0      	subs	r0, r0, r7
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d800      	bhi.n	8002f48 <HAL_RCC_ClockConfig+0x16c>
 8002f46:	e767      	b.n	8002e18 <HAL_RCC_ClockConfig+0x3c>
 8002f48:	e79a      	b.n	8002e80 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4a:	68eb      	ldr	r3, [r5, #12]
 8002f4c:	4909      	ldr	r1, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x198>)
 8002f4e:	400b      	ands	r3, r1
 8002f50:	68e1      	ldr	r1, [r4, #12]
 8002f52:	430b      	orrs	r3, r1
 8002f54:	60eb      	str	r3, [r5, #12]
 8002f56:	e768      	b.n	8002e2a <HAL_RCC_ClockConfig+0x4e>
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	ffffc7ff 	.word	0xffffc7ff
 8002f64:	08006eb0 	.word	0x08006eb0
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	00001388 	.word	0x00001388
 8002f74:	fffff8ff 	.word	0xfffff8ff

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	055b      	lsls	r3, r3, #21
 8002f80:	0f5b      	lsrs	r3, r3, #29
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f86:	6810      	ldr	r0, [r2, #0]
 8002f88:	40d8      	lsrs	r0, r3
}
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08006ec0 	.word	0x08006ec0
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	049b      	lsls	r3, r3, #18
 8002fa0:	0f5b      	lsrs	r3, r3, #29
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002fa6:	6810      	ldr	r0, [r2, #0]
 8002fa8:	40d8      	lsrs	r0, r3
}
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08006ec0 	.word	0x08006ec0
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fb8:	230f      	movs	r3, #15
{
 8002fba:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fbc:	2403      	movs	r4, #3

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fbe:	25e0      	movs	r5, #224	; 0xe0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fc2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	68d3      	ldr	r3, [r2, #12]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fc6:	00ed      	lsls	r5, r5, #3
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc8:	4023      	ands	r3, r4
 8002fca:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fcc:	68d3      	ldr	r3, [r2, #12]
 8002fce:	34ed      	adds	r4, #237	; 0xed
 8002fd0:	4023      	ands	r3, r4
 8002fd2:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fd4:	68d4      	ldr	r4, [r2, #12]
 8002fd6:	402c      	ands	r4, r5
 8002fd8:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fda:	68d3      	ldr	r3, [r2, #12]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fdc:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	402b      	ands	r3, r5
 8002fe2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_RCC_GetClockConfig+0x3c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
}
 8002fec:	bd30      	pop	{r4, r5, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff8:	6803      	ldr	r3, [r0, #0]
{
 8002ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ffc:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	d52c      	bpl.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x64>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003002:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8003004:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4c53      	ldr	r4, [pc, #332]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003008:	055b      	lsls	r3, r3, #21
 800300a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800300c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	421a      	tst	r2, r3
 8003010:	d104      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003014:	4313      	orrs	r3, r2
 8003016:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	2780      	movs	r7, #128	; 0x80
 800301e:	4e4e      	ldr	r6, [pc, #312]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003020:	007f      	lsls	r7, r7, #1
 8003022:	6833      	ldr	r3, [r6, #0]
 8003024:	423b      	tst	r3, r7
 8003026:	d040      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003028:	686b      	ldr	r3, [r5, #4]
 800302a:	21c0      	movs	r1, #192	; 0xc0
 800302c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800302e:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003030:	0389      	lsls	r1, r1, #14
 8003032:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003034:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003036:	4290      	cmp	r0, r2
 8003038:	d148      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800303a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800303c:	22c0      	movs	r2, #192	; 0xc0
 800303e:	0008      	movs	r0, r1
 8003040:	0292      	lsls	r2, r2, #10
 8003042:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003044:	4211      	tst	r1, r2
 8003046:	d14c      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	069b      	lsls	r3, r3, #26
 800304c:	d45e      	bmi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800304e:	9b00      	ldr	r3, [sp, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d103      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003056:	4a41      	ldr	r2, [pc, #260]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003058:	4013      	ands	r3, r2
 800305a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800305c:	682a      	ldr	r2, [r5, #0]
 800305e:	0793      	lsls	r3, r2, #30
 8003060:	d506      	bpl.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003062:	200c      	movs	r0, #12
 8003064:	493b      	ldr	r1, [pc, #236]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003066:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003068:	4383      	bics	r3, r0
 800306a:	68a8      	ldr	r0, [r5, #8]
 800306c:	4303      	orrs	r3, r0
 800306e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003070:	0753      	lsls	r3, r2, #29
 8003072:	d506      	bpl.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003076:	483a      	ldr	r0, [pc, #232]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003078:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800307a:	4003      	ands	r3, r0
 800307c:	68e8      	ldr	r0, [r5, #12]
 800307e:	4303      	orrs	r3, r0
 8003080:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003082:	0713      	lsls	r3, r2, #28
 8003084:	d506      	bpl.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003086:	4933      	ldr	r1, [pc, #204]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003088:	4836      	ldr	r0, [pc, #216]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800308a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800308c:	4003      	ands	r3, r0
 800308e:	6928      	ldr	r0, [r5, #16]
 8003090:	4303      	orrs	r3, r0
 8003092:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003094:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003096:	0613      	lsls	r3, r2, #24
 8003098:	d517      	bpl.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800309c:	4932      	ldr	r1, [pc, #200]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800309e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80030a0:	400b      	ands	r3, r1
 80030a2:	6969      	ldr	r1, [r5, #20]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030aa:	6833      	ldr	r3, [r6, #0]
 80030ac:	433b      	orrs	r3, r7
 80030ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80030b0:	f7ff f9e4 	bl	800247c <HAL_GetTick>
 80030b4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	6833      	ldr	r3, [r6, #0]
 80030b8:	423b      	tst	r3, r7
 80030ba:	d1b5      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7ff f9de 	bl	800247c <HAL_GetTick>
 80030c0:	9b01      	ldr	r3, [sp, #4]
 80030c2:	1ac0      	subs	r0, r0, r3
 80030c4:	2864      	cmp	r0, #100	; 0x64
 80030c6:	d9f6      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80030c8:	2003      	movs	r0, #3
}
 80030ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80030cc:	22c0      	movs	r2, #192	; 0xc0
 80030ce:	0019      	movs	r1, r3
 80030d0:	0292      	lsls	r2, r2, #10
 80030d2:	4011      	ands	r1, r2
 80030d4:	4291      	cmp	r1, r2
 80030d6:	d1b0      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030d8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030dc:	0392      	lsls	r2, r2, #14
 80030de:	d5ac      	bpl.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030e0:	e7f3      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030e2:	4013      	ands	r3, r2
 80030e4:	4283      	cmp	r3, r0
 80030e6:	d0af      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	069b      	lsls	r3, r3, #26
 80030ec:	d5af      	bpl.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80030f4:	0312      	lsls	r2, r2, #12
 80030f6:	4302      	orrs	r2, r0
 80030f8:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x174>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	481c      	ldr	r0, [pc, #112]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x178>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003100:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003102:	4002      	ands	r2, r0
 8003104:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003106:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003108:	05cb      	lsls	r3, r1, #23
 800310a:	d412      	bmi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310c:	6869      	ldr	r1, [r5, #4]
 800310e:	23c0      	movs	r3, #192	; 0xc0
 8003110:	000a      	movs	r2, r1
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	401a      	ands	r2, r3
 8003116:	429a      	cmp	r2, r3
 8003118:	d107      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	4815      	ldr	r0, [pc, #84]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800311e:	4003      	ands	r3, r0
 8003120:	20c0      	movs	r0, #192	; 0xc0
 8003122:	0380      	lsls	r0, r0, #14
 8003124:	4001      	ands	r1, r0
 8003126:	430b      	orrs	r3, r1
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800312c:	431a      	orrs	r2, r3
 800312e:	6522      	str	r2, [r4, #80]	; 0x50
 8003130:	e78d      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8003132:	f7ff f9a3 	bl	800247c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003136:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003138:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313a:	00bf      	lsls	r7, r7, #2
 800313c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800313e:	423b      	tst	r3, r7
 8003140:	d000      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003142:	e781      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7ff f99a 	bl	800247c <HAL_GetTick>
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800314a:	1b80      	subs	r0, r0, r6
 800314c:	4298      	cmp	r0, r3
 800314e:	d9f5      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8003150:	e7ba      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	efffffff 	.word	0xefffffff
 8003160:	fffff3ff 	.word	0xfffff3ff
 8003164:	ffffcfff 	.word	0xffffcfff
 8003168:	fff3ffff 	.word	0xfff3ffff
 800316c:	fffcffff 	.word	0xfffcffff
 8003170:	fff7ffff 	.word	0xfff7ffff
 8003174:	ffcfffff 	.word	0xffcfffff
 8003178:	00001388 	.word	0x00001388

0800317c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317e:	001d      	movs	r5, r3
 8003180:	0017      	movs	r7, r2
 8003182:	b085      	sub	sp, #20
 8003184:	000e      	movs	r6, r1
 8003186:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003188:	f7ff f978 	bl	800247c <HAL_GetTick>
 800318c:	19ed      	adds	r5, r5, r7
 800318e:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003190:	f7ff f974 	bl	800247c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003196:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	015b      	lsls	r3, r3, #5
 800319c:	0d1b      	lsrs	r3, r3, #20
 800319e:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a0:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80031a2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a4:	6893      	ldr	r3, [r2, #8]
 80031a6:	4033      	ands	r3, r6
 80031a8:	429e      	cmp	r6, r3
 80031aa:	d001      	beq.n	80031b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80031ac:	2000      	movs	r0, #0
 80031ae:	e032      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	1c7b      	adds	r3, r7, #1
 80031b2:	d0f7      	beq.n	80031a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031b4:	f7ff f962 	bl	800247c <HAL_GetTick>
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	1ac0      	subs	r0, r0, r3
 80031bc:	42a8      	cmp	r0, r5
 80031be:	d32c      	bcc.n	800321a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c0:	21e0      	movs	r1, #224	; 0xe0
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	438a      	bics	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ca:	2282      	movs	r2, #130	; 0x82
 80031cc:	6861      	ldr	r1, [r4, #4]
 80031ce:	0052      	lsls	r2, r2, #1
 80031d0:	4291      	cmp	r1, r2
 80031d2:	d10c      	bne.n	80031ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	68a2      	ldr	r2, [r4, #8]
 80031d8:	0209      	lsls	r1, r1, #8
 80031da:	428a      	cmp	r2, r1
 80031dc:	d003      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	00c9      	lsls	r1, r1, #3
 80031e2:	428a      	cmp	r2, r1
 80031e4:	d103      	bne.n	80031ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	438a      	bics	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031f2:	0189      	lsls	r1, r1, #6
 80031f4:	428a      	cmp	r2, r1
 80031f6:	d106      	bne.n	8003206 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80031f8:	6819      	ldr	r1, [r3, #0]
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80031fc:	4001      	ands	r1, r0
 80031fe:	6019      	str	r1, [r3, #0]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003206:	0023      	movs	r3, r4
 8003208:	2201      	movs	r2, #1
 800320a:	3351      	adds	r3, #81	; 0x51
 800320c:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800320e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003210:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003212:	3450      	adds	r4, #80	; 0x50
 8003214:	7023      	strb	r3, [r4, #0]
}
 8003216:	b005      	add	sp, #20
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800321a:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	4193      	sbcs	r3, r2
 8003220:	425b      	negs	r3, r3
 8003222:	401d      	ands	r5, r3
      count--;
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	e7ba      	b.n	80031a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	20000000 	.word	0x20000000
 8003230:	ffffdfff 	.word	0xffffdfff

08003234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003238:	2282      	movs	r2, #130	; 0x82
{
 800323a:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323c:	6840      	ldr	r0, [r0, #4]
 800323e:	0052      	lsls	r2, r2, #1
 8003240:	4290      	cmp	r0, r2
 8003242:	d11e      	bne.n	8003282 <SPI_EndRxTransaction+0x4e>
 8003244:	2080      	movs	r0, #128	; 0x80
 8003246:	2580      	movs	r5, #128	; 0x80
 8003248:	68a2      	ldr	r2, [r4, #8]
 800324a:	0200      	lsls	r0, r0, #8
 800324c:	00ed      	lsls	r5, r5, #3
 800324e:	4282      	cmp	r2, r0
 8003250:	d001      	beq.n	8003256 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003252:	42aa      	cmp	r2, r5
 8003254:	d106      	bne.n	8003264 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003256:	2740      	movs	r7, #64	; 0x40
 8003258:	6826      	ldr	r6, [r4, #0]
 800325a:	6830      	ldr	r0, [r6, #0]
 800325c:	43b8      	bics	r0, r7
 800325e:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003260:	42aa      	cmp	r2, r5
 8003262:	d00e      	beq.n	8003282 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	000a      	movs	r2, r1
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0020      	movs	r0, r4
 800326a:	f7ff ff87 	bl	800317c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800326e:	2800      	cmp	r0, #0
 8003270:	d101      	bne.n	8003276 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003272:	2000      	movs	r0, #0
}
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003276:	2320      	movs	r3, #32
 8003278:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800327a:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327c:	4313      	orrs	r3, r2
 800327e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003280:	e7f8      	b.n	8003274 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	000a      	movs	r2, r1
 8003284:	2101      	movs	r1, #1
 8003286:	e7ef      	b.n	8003268 <SPI_EndRxTransaction+0x34>

08003288 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <SPI_EndRxTxTransaction+0x5c>)
{
 800328a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800328c:	0004      	movs	r4, r0
 800328e:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	4915      	ldr	r1, [pc, #84]	; (80032e8 <SPI_EndRxTxTransaction+0x60>)
{
 8003294:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003296:	f7fc ff55 	bl	8000144 <__udivsi3>
 800329a:	23fa      	movs	r3, #250	; 0xfa
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4343      	muls	r3, r0
 80032a0:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a2:	2382      	movs	r3, #130	; 0x82
 80032a4:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032a6:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d10d      	bne.n	80032ca <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ae:	0033      	movs	r3, r6
 80032b0:	002a      	movs	r2, r5
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	0020      	movs	r0, r4
 80032b6:	f7ff ff61 	bl	800317c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d00f      	beq.n	80032de <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032be:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80032c4:	4313      	orrs	r3, r2
 80032c6:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80032c8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <SPI_EndRxTxTransaction+0x56>
      count--;
 80032d0:	9b01      	ldr	r3, [sp, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4213      	tst	r3, r2
 80032dc:	d1f5      	bne.n	80032ca <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80032de:	2000      	movs	r0, #0
 80032e0:	e7f2      	b.n	80032c8 <SPI_EndRxTxTransaction+0x40>
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000000 	.word	0x20000000
 80032e8:	016e3600 	.word	0x016e3600

080032ec <HAL_SPI_Init>:
{
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	0004      	movs	r4, r0
    return HAL_ERROR;
 80032f0:	2001      	movs	r0, #1
  if (hspi == NULL)
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d050      	beq.n	8003398 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d14e      	bne.n	800339a <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fc:	2282      	movs	r2, #130	; 0x82
 80032fe:	6861      	ldr	r1, [r4, #4]
 8003300:	0052      	lsls	r2, r2, #1
 8003302:	4291      	cmp	r1, r2
 8003304:	d000      	beq.n	8003308 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003306:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003308:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800330e:	3551      	adds	r5, #81	; 0x51
 8003310:	782b      	ldrb	r3, [r5, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003318:	0023      	movs	r3, r4
 800331a:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 800331c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800331e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003320:	f7fe fe2a 	bl	8001f78 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8003326:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003328:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800332a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800332c:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800332e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003330:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003332:	4393      	bics	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003336:	2382      	movs	r3, #130	; 0x82
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4033      	ands	r3, r6
 800333c:	2684      	movs	r6, #132	; 0x84
 800333e:	0236      	lsls	r6, r6, #8
 8003340:	403e      	ands	r6, r7
 8003342:	4333      	orrs	r3, r6
 8003344:	2680      	movs	r6, #128	; 0x80
 8003346:	68e7      	ldr	r7, [r4, #12]
 8003348:	0136      	lsls	r6, r6, #4
 800334a:	403e      	ands	r6, r7
 800334c:	4333      	orrs	r3, r6
 800334e:	6926      	ldr	r6, [r4, #16]
 8003350:	69a2      	ldr	r2, [r4, #24]
 8003352:	4030      	ands	r0, r6
 8003354:	2601      	movs	r6, #1
 8003356:	4303      	orrs	r3, r0
 8003358:	6960      	ldr	r0, [r4, #20]
 800335a:	69e7      	ldr	r7, [r4, #28]
 800335c:	4030      	ands	r0, r6
 800335e:	4303      	orrs	r3, r0
 8003360:	2080      	movs	r0, #128	; 0x80
 8003362:	0080      	lsls	r0, r0, #2
 8003364:	4010      	ands	r0, r2
 8003366:	4303      	orrs	r3, r0
 8003368:	2038      	movs	r0, #56	; 0x38
 800336a:	4038      	ands	r0, r7
 800336c:	4303      	orrs	r3, r0
 800336e:	2080      	movs	r0, #128	; 0x80
 8003370:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003372:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003374:	4038      	ands	r0, r7
 8003376:	4303      	orrs	r3, r0
 8003378:	2080      	movs	r0, #128	; 0x80
 800337a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800337c:	0180      	lsls	r0, r0, #6
 800337e:	4038      	ands	r0, r7
 8003380:	4303      	orrs	r3, r0
 8003382:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003384:	2304      	movs	r3, #4
 8003386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003388:	401a      	ands	r2, r3
 800338a:	330c      	adds	r3, #12
 800338c:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003390:	431a      	orrs	r2, r3
 8003392:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003394:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003396:	702e      	strb	r6, [r5, #0]
}
 8003398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339e:	6163      	str	r3, [r4, #20]
 80033a0:	e7b2      	b.n	8003308 <HAL_SPI_Init+0x1c>
	...

080033a4 <HAL_SPI_Transmit_IT>:
{
 80033a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80033a6:	0004      	movs	r4, r0
 80033a8:	3450      	adds	r4, #80	; 0x50
 80033aa:	7825      	ldrb	r5, [r4, #0]
{
 80033ac:	0003      	movs	r3, r0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ae:	68c6      	ldr	r6, [r0, #12]
  __HAL_LOCK(hspi);
 80033b0:	2002      	movs	r0, #2
 80033b2:	2d01      	cmp	r5, #1
 80033b4:	d039      	beq.n	800342a <HAL_SPI_Transmit_IT+0x86>
 80033b6:	2501      	movs	r5, #1
    errorcode = HAL_ERROR;
 80033b8:	0028      	movs	r0, r5
  __HAL_LOCK(hspi);
 80033ba:	7025      	strb	r5, [r4, #0]
  if ((pData == NULL) || (Size == 0U))
 80033bc:	2900      	cmp	r1, #0
 80033be:	d032      	beq.n	8003426 <HAL_SPI_Transmit_IT+0x82>
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d030      	beq.n	8003426 <HAL_SPI_Transmit_IT+0x82>
  if (hspi->State != HAL_SPI_STATE_READY)
 80033c4:	001d      	movs	r5, r3
 80033c6:	3551      	adds	r5, #81	; 0x51
 80033c8:	782f      	ldrb	r7, [r5, #0]
    errorcode = HAL_BUSY;
 80033ca:	1800      	adds	r0, r0, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033cc:	2f01      	cmp	r7, #1
 80033ce:	d12a      	bne.n	8003426 <HAL_SPI_Transmit_IT+0x82>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033d0:	3001      	adds	r0, #1
 80033d2:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d4:	2000      	movs	r0, #0
  hspi->TxXferSize  = Size;
 80033d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d8:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033da:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033de:	6398      	str	r0, [r3, #56]	; 0x38
    hspi->TxISR = SPI_TxISR_16BIT;
 80033e0:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_SPI_Transmit_IT+0x88>)
  hspi->RxXferSize  = 0U;
 80033e2:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033e4:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033e6:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e8:	4286      	cmp	r6, r0
 80033ea:	d100      	bne.n	80033ee <HAL_SPI_Transmit_IT+0x4a>
    hspi->TxISR = SPI_TxISR_8BIT;
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <HAL_SPI_Transmit_IT+0x8c>)
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_SPI_DISABLE(hspi);
 80033f2:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0209      	lsls	r1, r1, #8
 80033f8:	428b      	cmp	r3, r1
 80033fa:	d108      	bne.n	800340e <HAL_SPI_Transmit_IT+0x6a>
    __HAL_SPI_DISABLE(hspi);
 80033fc:	2140      	movs	r1, #64	; 0x40
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	438b      	bics	r3, r1
 8003402:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	01db      	lsls	r3, r3, #7
 800340a:	430b      	orrs	r3, r1
 800340c:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800340e:	23a0      	movs	r3, #160	; 0xa0
 8003410:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003412:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003414:	430b      	orrs	r3, r1
 8003416:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003418:	2340      	movs	r3, #64	; 0x40
 800341a:	6811      	ldr	r1, [r2, #0]
 800341c:	4219      	tst	r1, r3
 800341e:	d102      	bne.n	8003426 <HAL_SPI_Transmit_IT+0x82>
    __HAL_SPI_ENABLE(hspi);
 8003420:	6811      	ldr	r1, [r2, #0]
 8003422:	430b      	orrs	r3, r1
 8003424:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	7023      	strb	r3, [r4, #0]
}
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	08003931 	.word	0x08003931
 8003430:	0800390d 	.word	0x0800390d

08003434 <HAL_SPI_TransmitReceive_IT>:
{
 8003434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003436:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003438:	0025      	movs	r5, r4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343a:	68c0      	ldr	r0, [r0, #12]
  __HAL_LOCK(hspi);
 800343c:	3550      	adds	r5, #80	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343e:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hspi);
 8003440:	782e      	ldrb	r6, [r5, #0]
 8003442:	2002      	movs	r0, #2
 8003444:	2e01      	cmp	r6, #1
 8003446:	d040      	beq.n	80034ca <HAL_SPI_TransmitReceive_IT+0x96>
  tmp_state           = hspi->State;
 8003448:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 800344a:	3801      	subs	r0, #1
 800344c:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 800344e:	3651      	adds	r6, #81	; 0x51
 8003450:	7830      	ldrb	r0, [r6, #0]
 8003452:	b2c7      	uxtb	r7, r0
 8003454:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003456:	2801      	cmp	r0, #1
 8003458:	d00d      	beq.n	8003476 <HAL_SPI_TransmitReceive_IT+0x42>
 800345a:	2082      	movs	r0, #130	; 0x82
 800345c:	0040      	lsls	r0, r0, #1
 800345e:	4684      	mov	ip, r0
 8003460:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8003462:	3803      	subs	r0, #3
 8003464:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003466:	4567      	cmp	r7, ip
 8003468:	d12d      	bne.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800346a:	68a7      	ldr	r7, [r4, #8]
 800346c:	2f00      	cmp	r7, #0
 800346e:	d12a      	bne.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
 8003470:	9f01      	ldr	r7, [sp, #4]
 8003472:	2f04      	cmp	r7, #4
 8003474:	d127      	bne.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
    errorcode = HAL_ERROR;
 8003476:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003478:	2900      	cmp	r1, #0
 800347a:	d024      	beq.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
 800347c:	2a00      	cmp	r2, #0
 800347e:	d022      	beq.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003484:	7830      	ldrb	r0, [r6, #0]
 8003486:	2804      	cmp	r0, #4
 8003488:	d001      	beq.n	800348e <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800348a:	2005      	movs	r0, #5
 800348c:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348e:	2000      	movs	r0, #0
  hspi->TxXferSize  = Size;
 8003490:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003492:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
 8003494:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003496:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8003498:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800349a:	9b00      	ldr	r3, [sp, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800349c:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800349e:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a0:	4283      	cmp	r3, r0
 80034a2:	d013      	beq.n	80034cc <HAL_SPI_TransmitReceive_IT+0x98>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_SPI_TransmitReceive_IT+0xa0>)
 80034a6:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_SPI_TransmitReceive_IT+0xa4>)
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034aa:	22e0      	movs	r2, #224	; 0xe0
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80034ac:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ae:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034b0:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	4211      	tst	r1, r2
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_TransmitReceive_IT+0x92>
    __HAL_SPI_ENABLE(hspi);
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	702b      	strb	r3, [r5, #0]
}
 80034ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_SPI_TransmitReceive_IT+0xa8>)
 80034ce:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_SPI_TransmitReceive_IT+0xac>)
 80034d2:	e7ea      	b.n	80034aa <HAL_SPI_TransmitReceive_IT+0x76>
 80034d4:	08003b29 	.word	0x08003b29
 80034d8:	08003af9 	.word	0x08003af9
 80034dc:	08003ac5 	.word	0x08003ac5
 80034e0:	08003a91 	.word	0x08003a91

080034e4 <HAL_SPI_Receive_IT>:
{
 80034e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e6:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80034e8:	0002      	movs	r2, r0
 80034ea:	3251      	adds	r2, #81	; 0x51
 80034ec:	7815      	ldrb	r5, [r2, #0]
 80034ee:	b2ec      	uxtb	r4, r5
 80034f0:	2d01      	cmp	r5, #1
 80034f2:	d14a      	bne.n	800358a <HAL_SPI_Receive_IT+0xa6>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80034f4:	6885      	ldr	r5, [r0, #8]
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_SPI_Receive_IT+0x30>
 80034fa:	2682      	movs	r6, #130	; 0x82
 80034fc:	6847      	ldr	r7, [r0, #4]
 80034fe:	0076      	lsls	r6, r6, #1
 8003500:	42b7      	cmp	r7, r6
 8003502:	d107      	bne.n	8003514 <HAL_SPI_Receive_IT+0x30>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003504:	2404      	movs	r4, #4
 8003506:	7014      	strb	r4, [r2, #0]
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003508:	000a      	movs	r2, r1
 800350a:	f7ff ff93 	bl	8003434 <HAL_SPI_TransmitReceive_IT>
 800350e:	0004      	movs	r4, r0
}
 8003510:	0020      	movs	r0, r4
 8003512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8003514:	0007      	movs	r7, r0
 8003516:	3750      	adds	r7, #80	; 0x50
 8003518:	783e      	ldrb	r6, [r7, #0]
 800351a:	2e01      	cmp	r6, #1
 800351c:	d037      	beq.n	800358e <HAL_SPI_Receive_IT+0xaa>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351e:	68c6      	ldr	r6, [r0, #12]
 8003520:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hspi);
 8003522:	2601      	movs	r6, #1
 8003524:	703e      	strb	r6, [r7, #0]
  if ((pData == NULL) || (Size == 0U))
 8003526:	2900      	cmp	r1, #0
 8003528:	d02b      	beq.n	8003582 <HAL_SPI_Receive_IT+0x9e>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d029      	beq.n	8003582 <HAL_SPI_Receive_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800352e:	2404      	movs	r4, #4
 8003530:	7014      	strb	r4, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003532:	2200      	movs	r2, #0
 8003534:	6542      	str	r2, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003536:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->RxXferCount = Size;
 8003538:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800353a:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800353c:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->TxISR       = NULL;
 800353e:	6442      	str	r2, [r0, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003540:	9a01      	ldr	r2, [sp, #4]
  hspi->RxXferSize  = Size;
 8003542:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003544:	6381      	str	r1, [r0, #56]	; 0x38
    hspi->RxISR = SPI_RxISR_16BIT;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_SPI_Receive_IT+0xb0>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003548:	2a00      	cmp	r2, #0
 800354a:	d100      	bne.n	800354e <HAL_SPI_Receive_IT+0x6a>
    hspi->RxISR = SPI_RxISR_8BIT;
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_SPI_Receive_IT+0xb4>)
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	6403      	str	r3, [r0, #64]	; 0x40
 8003552:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8003554:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	4295      	cmp	r5, r2
 8003558:	d107      	bne.n	800356a <HAL_SPI_Receive_IT+0x86>
    __HAL_SPI_DISABLE(hspi);
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	438a      	bics	r2, r1
 8003560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	490d      	ldr	r1, [pc, #52]	; (800359c <HAL_SPI_Receive_IT+0xb8>)
 8003566:	400a      	ands	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800356a:	2260      	movs	r2, #96	; 0x60
 800356c:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800356e:	2400      	movs	r4, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	4211      	tst	r1, r2
 800357a:	d102      	bne.n	8003582 <HAL_SPI_Receive_IT+0x9e>
    __HAL_SPI_ENABLE(hspi);
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003582:	2200      	movs	r2, #0
 8003584:	3050      	adds	r0, #80	; 0x50
 8003586:	7002      	strb	r2, [r0, #0]
  return errorcode;
 8003588:	e7c2      	b.n	8003510 <HAL_SPI_Receive_IT+0x2c>
    errorcode = HAL_BUSY;
 800358a:	2402      	movs	r4, #2
 800358c:	e7f9      	b.n	8003582 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800358e:	2402      	movs	r4, #2
 8003590:	e7be      	b.n	8003510 <HAL_SPI_Receive_IT+0x2c>
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	080039cf 	.word	0x080039cf
 8003598:	080039ab 	.word	0x080039ab
 800359c:	ffffbfff 	.word	0xffffbfff

080035a0 <HAL_SPI_Transmit_DMA>:
{
 80035a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 80035a2:	0005      	movs	r5, r0
 80035a4:	3550      	adds	r5, #80	; 0x50
 80035a6:	782b      	ldrb	r3, [r5, #0]
{
 80035a8:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80035aa:	2602      	movs	r6, #2
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d03c      	beq.n	800362a <HAL_SPI_Transmit_DMA+0x8a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	702b      	strb	r3, [r5, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80035b4:	0003      	movs	r3, r0
 80035b6:	3351      	adds	r3, #81	; 0x51
 80035b8:	7818      	ldrb	r0, [r3, #0]
 80035ba:	b2c6      	uxtb	r6, r0
 80035bc:	2801      	cmp	r0, #1
 80035be:	d148      	bne.n	8003652 <HAL_SPI_Transmit_DMA+0xb2>
  if ((pData == NULL) || (Size == 0U))
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d030      	beq.n	8003626 <HAL_SPI_Transmit_DMA+0x86>
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	d02e      	beq.n	8003626 <HAL_SPI_Transmit_DMA+0x86>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035c8:	3002      	adds	r0, #2
 80035ca:	7018      	strb	r0, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035d0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035d2:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80035d4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035d6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035da:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	68a0      	ldr	r0, [r4, #8]
  hspi->TxXferSize  = Size;
 80035e0:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035e2:	6321      	str	r1, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 80035e4:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4298      	cmp	r0, r3
 80035ea:	d108      	bne.n	80035fe <HAL_SPI_Transmit_DMA+0x5e>
    __HAL_SPI_DISABLE(hspi);
 80035ec:	2040      	movs	r0, #64	; 0x40
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	4383      	bics	r3, r0
 80035f2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	6810      	ldr	r0, [r2, #0]
 80035f8:	01db      	lsls	r3, r3, #7
 80035fa:	4303      	orrs	r3, r0
 80035fc:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80035fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <HAL_SPI_Transmit_DMA+0xb8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003602:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003604:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_SPI_Transmit_DMA+0xbc>)
 8003608:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_SPI_Transmit_DMA+0xc0>)
 800360c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8003612:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003616:	f7fe ffb1 	bl	800257c <HAL_DMA_Start_IT>
 800361a:	2800      	cmp	r0, #0
 800361c:	d007      	beq.n	800362e <HAL_SPI_Transmit_DMA+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800361e:	2310      	movs	r3, #16
 8003620:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003622:	4313      	orrs	r3, r2
 8003624:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003626:	2300      	movs	r3, #0
 8003628:	702b      	strb	r3, [r5, #0]
}
 800362a:	0030      	movs	r0, r6
 800362c:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	4211      	tst	r1, r2
 8003636:	d102      	bne.n	800363e <HAL_SPI_Transmit_DMA+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800363e:	2220      	movs	r2, #32
 8003640:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003642:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003648:	2202      	movs	r2, #2
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	e7e9      	b.n	8003626 <HAL_SPI_Transmit_DMA+0x86>
    errorcode = HAL_BUSY;
 8003652:	2602      	movs	r6, #2
 8003654:	e7e7      	b.n	8003626 <HAL_SPI_Transmit_DMA+0x86>
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	08003857 	.word	0x08003857
 800365c:	08003b7d 	.word	0x08003b7d
 8003660:	08003b59 	.word	0x08003b59

08003664 <HAL_SPI_TransmitReceive_DMA>:
{
 8003664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8003666:	0005      	movs	r5, r0
 8003668:	3550      	adds	r5, #80	; 0x50
 800366a:	782e      	ldrb	r6, [r5, #0]
{
 800366c:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 800366e:	2002      	movs	r0, #2
 8003670:	2e01      	cmp	r6, #1
 8003672:	d047      	beq.n	8003704 <HAL_SPI_TransmitReceive_DMA+0xa0>
  tmp_state           = hspi->State;
 8003674:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8003676:	3801      	subs	r0, #1
 8003678:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 800367a:	3651      	adds	r6, #81	; 0x51
 800367c:	7830      	ldrb	r0, [r6, #0]
 800367e:	b2c7      	uxtb	r7, r0
 8003680:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003682:	2801      	cmp	r0, #1
 8003684:	d00d      	beq.n	80036a2 <HAL_SPI_TransmitReceive_DMA+0x3e>
 8003686:	2082      	movs	r0, #130	; 0x82
 8003688:	0040      	lsls	r0, r0, #1
 800368a:	4684      	mov	ip, r0
 800368c:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 800368e:	3803      	subs	r0, #3
 8003690:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003692:	4567      	cmp	r7, ip
 8003694:	d134      	bne.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003696:	68a7      	ldr	r7, [r4, #8]
 8003698:	2f00      	cmp	r7, #0
 800369a:	d131      	bne.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
 800369c:	9f01      	ldr	r7, [sp, #4]
 800369e:	2f04      	cmp	r7, #4
 80036a0:	d12e      	bne.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
    errorcode = HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d02b      	beq.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d029      	beq.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d027      	beq.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036b0:	7830      	ldrb	r0, [r6, #0]
 80036b2:	2804      	cmp	r0, #4
 80036b4:	d001      	beq.n	80036ba <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036b6:	2005      	movs	r0, #5
 80036b8:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ba:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036bc:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036be:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80036c0:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80036c2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80036c4:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 80036c6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036c8:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036ca:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80036ce:	7833      	ldrb	r3, [r6, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80036d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d117      	bne.n	8003706 <HAL_SPI_TransmitReceive_DMA+0xa2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_SPI_TransmitReceive_DMA+0xf0>)
 80036d8:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <HAL_SPI_TransmitReceive_DMA+0xf4>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80036dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <HAL_SPI_TransmitReceive_DMA+0xf8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80036e0:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80036e2:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 80036e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80036ea:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 80036ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80036ee:	f7fe ff45 	bl	800257c <HAL_DMA_Start_IT>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d00b      	beq.n	800370e <HAL_SPI_TransmitReceive_DMA+0xaa>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036f6:	2310      	movs	r3, #16
    errorcode = HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80036fc:	4313      	orrs	r3, r2
 80036fe:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003700:	2300      	movs	r3, #0
 8003702:	702b      	strb	r3, [r5, #0]
}
 8003704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_SPI_TransmitReceive_DMA+0xfc>)
 8003708:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_SPI_TransmitReceive_DMA+0x100>)
 800370c:	e7e6      	b.n	80036dc <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800370e:	2601      	movs	r6, #1
 8003710:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003712:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003714:	6851      	ldr	r1, [r2, #4]
 8003716:	4331      	orrs	r1, r6
 8003718:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800371a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800371c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800371e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003720:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8003722:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003724:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 8003726:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003728:	320c      	adds	r2, #12
 800372a:	f7fe ff27 	bl	800257c <HAL_DMA_Start_IT>
 800372e:	2800      	cmp	r0, #0
 8003730:	d1e1      	bne.n	80036f6 <HAL_SPI_TransmitReceive_DMA+0x92>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	4211      	tst	r1, r2
 800373a:	d102      	bne.n	8003742 <HAL_SPI_TransmitReceive_DMA+0xde>
    __HAL_SPI_ENABLE(hspi);
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003742:	2220      	movs	r2, #32
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800374a:	2202      	movs	r2, #2
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e7d5      	b.n	8003700 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8003754:	08003863 	.word	0x08003863
 8003758:	08003beb 	.word	0x08003beb
 800375c:	08003b59 	.word	0x08003b59
 8003760:	0800386f 	.word	0x0800386f
 8003764:	08003c59 	.word	0x08003c59

08003768 <HAL_SPI_Receive_DMA>:
{
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800376c:	0002      	movs	r2, r0
 800376e:	3251      	adds	r2, #81	; 0x51
{
 8003770:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003772:	7810      	ldrb	r0, [r2, #0]
 8003774:	b2c5      	uxtb	r5, r0
 8003776:	2801      	cmp	r0, #1
 8003778:	d15f      	bne.n	800383a <HAL_SPI_Receive_DMA+0xd2>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800377a:	68a0      	ldr	r0, [r4, #8]
 800377c:	2800      	cmp	r0, #0
 800377e:	d10d      	bne.n	800379c <HAL_SPI_Receive_DMA+0x34>
 8003780:	2682      	movs	r6, #130	; 0x82
 8003782:	6867      	ldr	r7, [r4, #4]
 8003784:	0076      	lsls	r6, r6, #1
 8003786:	42b7      	cmp	r7, r6
 8003788:	d108      	bne.n	800379c <HAL_SPI_Receive_DMA+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800378a:	3004      	adds	r0, #4
 800378c:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800378e:	000a      	movs	r2, r1
 8003790:	0020      	movs	r0, r4
 8003792:	f7ff ff67 	bl	8003664 <HAL_SPI_TransmitReceive_DMA>
 8003796:	0005      	movs	r5, r0
}
 8003798:	0028      	movs	r0, r5
 800379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800379c:	0026      	movs	r6, r4
 800379e:	3650      	adds	r6, #80	; 0x50
 80037a0:	7837      	ldrb	r7, [r6, #0]
 80037a2:	2f01      	cmp	r7, #1
 80037a4:	d04b      	beq.n	800383e <HAL_SPI_Receive_DMA+0xd6>
 80037a6:	2701      	movs	r7, #1
 80037a8:	7037      	strb	r7, [r6, #0]
  if ((pData == NULL) || (Size == 0U))
 80037aa:	2900      	cmp	r1, #0
 80037ac:	d02f      	beq.n	800380e <HAL_SPI_Receive_DMA+0xa6>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02d      	beq.n	800380e <HAL_SPI_Receive_DMA+0xa6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037b2:	2604      	movs	r6, #4
 80037b4:	7016      	strb	r6, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b6:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 80037b8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ba:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80037bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037be:	2380      	movs	r3, #128	; 0x80
    __HAL_SPI_DISABLE(hspi);
 80037c0:	6826      	ldr	r6, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037c2:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxISR       = NULL;
 80037c4:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037c6:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80037c8:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ca:	86e2      	strh	r2, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	4298      	cmp	r0, r3
 80037d0:	d107      	bne.n	80037e2 <HAL_SPI_Receive_DMA+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	3240      	adds	r2, #64	; 0x40
 80037d6:	4393      	bics	r3, r2
 80037d8:	6033      	str	r3, [r6, #0]
    SPI_1LINE_RX(hspi);
 80037da:	6833      	ldr	r3, [r6, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_SPI_Receive_DMA+0xdc>)
 80037de:	4013      	ands	r3, r2
 80037e0:	6033      	str	r3, [r6, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80037e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_SPI_Receive_DMA+0xe0>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037e6:	360c      	adds	r6, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80037e8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037ec:	000a      	movs	r2, r1
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80037ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_SPI_Receive_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037f2:	0031      	movs	r1, r6
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80037f4:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 80037fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037fe:	f7fe febd 	bl	800257c <HAL_DMA_Start_IT>
 8003802:	2800      	cmp	r0, #0
 8003804:	d007      	beq.n	8003816 <HAL_SPI_Receive_DMA+0xae>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003806:	2310      	movs	r3, #16
 8003808:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800380a:	4313      	orrs	r3, r2
 800380c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 800380e:	2300      	movs	r3, #0
 8003810:	3450      	adds	r4, #80	; 0x50
 8003812:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8003814:	e7c0      	b.n	8003798 <HAL_SPI_Receive_DMA+0x30>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003816:	2240      	movs	r2, #64	; 0x40
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	4211      	tst	r1, r2
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Receive_DMA+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003826:	2220      	movs	r2, #32
 8003828:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800382a:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003830:	2201      	movs	r2, #1
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	e7e9      	b.n	800380e <HAL_SPI_Receive_DMA+0xa6>
    errorcode = HAL_BUSY;
 800383a:	2502      	movs	r5, #2
 800383c:	e7e7      	b.n	800380e <HAL_SPI_Receive_DMA+0xa6>
  __HAL_LOCK(hspi);
 800383e:	2502      	movs	r5, #2
 8003840:	e7aa      	b.n	8003798 <HAL_SPI_Receive_DMA+0x30>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	ffffbfff 	.word	0xffffbfff
 8003848:	08003863 	.word	0x08003863
 800384c:	08003beb 	.word	0x08003beb
 8003850:	08003b59 	.word	0x08003b59

08003854 <HAL_SPI_TxHalfCpltCallback>:
 8003854:	4770      	bx	lr

08003856 <SPI_DMAHalfTransmitCplt>:
{
 8003856:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003858:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800385a:	f7ff fffb 	bl	8003854 <HAL_SPI_TxHalfCpltCallback>
}
 800385e:	bd10      	pop	{r4, pc}

08003860 <HAL_SPI_RxHalfCpltCallback>:
 8003860:	4770      	bx	lr

08003862 <SPI_DMAHalfReceiveCplt>:
{
 8003862:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003864:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003866:	f7ff fffb 	bl	8003860 <HAL_SPI_RxHalfCpltCallback>
}
 800386a:	bd10      	pop	{r4, pc}

0800386c <HAL_SPI_TxRxHalfCpltCallback>:
 800386c:	4770      	bx	lr

0800386e <SPI_DMAHalfTransmitReceiveCplt>:
{
 800386e:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003870:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003872:	f7ff fffb 	bl	800386c <HAL_SPI_TxRxHalfCpltCallback>
}
 8003876:	bd10      	pop	{r4, pc}

08003878 <HAL_SPI_ErrorCallback>:
 8003878:	4770      	bx	lr
	...

0800387c <SPI_CloseTx_ISR>:
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <SPI_CloseTx_ISR+0x88>)
{
 800387e:	b513      	push	{r0, r1, r4, lr}
 8003880:	0004      	movs	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003882:	4921      	ldr	r1, [pc, #132]	; (8003908 <SPI_CloseTx_ISR+0x8c>)
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	f7fc fc5d 	bl	8000144 <__udivsi3>
 800388a:	2364      	movs	r3, #100	; 0x64
 800388c:	4343      	muls	r3, r0
 800388e:	9300      	str	r3, [sp, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003890:	f7fe fdf4 	bl	800247c <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003896:	2002      	movs	r0, #2
 8003898:	6823      	ldr	r3, [r4, #0]
    if (count == 0U)
 800389a:	9900      	ldr	r1, [sp, #0]
 800389c:	2900      	cmp	r1, #0
 800389e:	d126      	bne.n	80038ee <SPI_CloseTx_ISR+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038a2:	3120      	adds	r1, #32
 80038a4:	4301      	orrs	r1, r0
 80038a6:	6561      	str	r1, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80038a8:	20a0      	movs	r0, #160	; 0xa0
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	4381      	bics	r1, r0
 80038ae:	6059      	str	r1, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038b0:	0020      	movs	r0, r4
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	f7ff fce8 	bl	8003288 <SPI_EndRxTxTransaction>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d003      	beq.n	80038c4 <SPI_CloseTx_ISR+0x48>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038bc:	2320      	movs	r3, #32
 80038be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038c0:	4313      	orrs	r3, r2
 80038c2:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <SPI_CloseTx_ISR+0x5c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	9201      	str	r2, [sp, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038d8:	0023      	movs	r3, r4
 80038da:	2201      	movs	r2, #1
 80038dc:	3351      	adds	r3, #81	; 0x51
 80038de:	701a      	strb	r2, [r3, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80038e2:	0020      	movs	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <SPI_CloseTx_ISR+0x80>
    HAL_SPI_ErrorCallback(hspi);
 80038e8:	f7ff ffc6 	bl	8003878 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80038ec:	bd13      	pop	{r0, r1, r4, pc}
    count--;
 80038ee:	9900      	ldr	r1, [sp, #0]
 80038f0:	3901      	subs	r1, #1
 80038f2:	9100      	str	r1, [sp, #0]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	4201      	tst	r1, r0
 80038f8:	d0cf      	beq.n	800389a <SPI_CloseTx_ISR+0x1e>
 80038fa:	e7d5      	b.n	80038a8 <SPI_CloseTx_ISR+0x2c>
    HAL_SPI_TxCpltCallback(hspi);
 80038fc:	f001 fe26 	bl	800554c <HAL_SPI_TxCpltCallback>
}
 8003900:	e7f4      	b.n	80038ec <SPI_CloseTx_ISR+0x70>
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000000 	.word	0x20000000
 8003908:	00005dc0 	.word	0x00005dc0

0800390c <SPI_TxISR_8BIT>:
{
 800390c:	b510      	push	{r4, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800390e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003910:	6802      	ldr	r2, [r0, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	7313      	strb	r3, [r2, #12]
  hspi->pTxBuffPtr++;
 8003916:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003918:	3301      	adds	r3, #1
 800391a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800391c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800391e:	3b01      	subs	r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003924:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <SPI_TxISR_8BIT+0x22>
    SPI_CloseTx_ISR(hspi);
 800392a:	f7ff ffa7 	bl	800387c <SPI_CloseTx_ISR>
}
 800392e:	bd10      	pop	{r4, pc}

08003930 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003930:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003932:	6802      	ldr	r2, [r0, #0]
 8003934:	8819      	ldrh	r1, [r3, #0]
{
 8003936:	b510      	push	{r4, lr}
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003938:	3302      	adds	r3, #2
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393a:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800393c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800393e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003940:	3b01      	subs	r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003946:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <SPI_TxISR_16BIT+0x20>
    SPI_CloseTx_ISR(hspi);
 800394c:	f7ff ff96 	bl	800387c <SPI_CloseTx_ISR>
}
 8003950:	bd10      	pop	{r4, pc}

08003952 <SPI_CloseRx_ISR>:
{
 8003952:	b513      	push	{r0, r1, r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003954:	2160      	movs	r1, #96	; 0x60
 8003956:	6802      	ldr	r2, [r0, #0]
{
 8003958:	0004      	movs	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800395a:	6853      	ldr	r3, [r2, #4]
 800395c:	438b      	bics	r3, r1
 800395e:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003960:	f7fe fd8c 	bl	800247c <HAL_GetTick>
 8003964:	2164      	movs	r1, #100	; 0x64
 8003966:	0002      	movs	r2, r0
 8003968:	0020      	movs	r0, r4
 800396a:	f7ff fc63 	bl	8003234 <SPI_EndRxTransaction>
 800396e:	2800      	cmp	r0, #0
 8003970:	d003      	beq.n	800397a <SPI_CloseRx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003972:	2320      	movs	r3, #32
 8003974:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003976:	4313      	orrs	r3, r2
 8003978:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397a:	68a3      	ldr	r3, [r4, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <SPI_CloseRx_ISR+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	9201      	str	r2, [sp, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800398e:	0023      	movs	r3, r4
 8003990:	2201      	movs	r2, #1
 8003992:	3351      	adds	r3, #81	; 0x51
 8003994:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003996:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_SPI_RxCpltCallback(hspi);
 8003998:	0020      	movs	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <SPI_CloseRx_ISR+0x52>
      HAL_SPI_RxCpltCallback(hspi);
 800399e:	f001 fdf5 	bl	800558c <HAL_SPI_RxCpltCallback>
}
 80039a2:	bd13      	pop	{r0, r1, r4, pc}
      HAL_SPI_ErrorCallback(hspi);
 80039a4:	f7ff ff68 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 80039a8:	e7fb      	b.n	80039a2 <SPI_CloseRx_ISR+0x50>

080039aa <SPI_RxISR_8BIT>:
{
 80039aa:	b510      	push	{r4, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80039ac:	6803      	ldr	r3, [r0, #0]
 80039ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039b0:	7b1b      	ldrb	r3, [r3, #12]
 80039b2:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr++;
 80039b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039b6:	3301      	adds	r3, #1
 80039b8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80039ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 80039c2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <SPI_RxISR_8BIT+0x22>
    SPI_CloseRx_ISR(hspi);
 80039c8:	f7ff ffc3 	bl	8003952 <SPI_CloseRx_ISR>
}
 80039cc:	bd10      	pop	{r4, pc}

080039ce <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80039ce:	6803      	ldr	r3, [r0, #0]
{
 80039d0:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039d6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d8:	3302      	adds	r3, #2
 80039da:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80039dc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 80039e4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <SPI_RxISR_16BIT+0x20>
    SPI_CloseRx_ISR(hspi);
 80039ea:	f7ff ffb2 	bl	8003952 <SPI_CloseRx_ISR>
}
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <SPI_CloseRxTx_ISR>:
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <SPI_CloseRxTx_ISR+0x98>)
{
 80039f2:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80039f4:	4925      	ldr	r1, [pc, #148]	; (8003a8c <SPI_CloseRxTx_ISR+0x9c>)
{
 80039f6:	0004      	movs	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f7fc fba3 	bl	8000144 <__udivsi3>
 80039fe:	2364      	movs	r3, #100	; 0x64
 8003a00:	4343      	muls	r3, r0
 8003a02:	9300      	str	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8003a04:	f7fe fd3a 	bl	800247c <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a0a:	2020      	movs	r0, #32
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	4381      	bics	r1, r0
 8003a12:	6059      	str	r1, [r3, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003a14:	381e      	subs	r0, #30
    if (count == 0U)
 8003a16:	9900      	ldr	r1, [sp, #0]
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	d125      	bne.n	8003a68 <SPI_CloseRxTx_ISR+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6563      	str	r3, [r4, #84]	; 0x54
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	0020      	movs	r0, r4
 8003a28:	f7ff fc2e 	bl	8003288 <SPI_EndRxTxTransaction>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d003      	beq.n	8003a38 <SPI_CloseRxTx_ISR+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a30:	2320      	movs	r3, #32
 8003a32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003a34:	4313      	orrs	r3, r2
 8003a36:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <SPI_CloseRxTx_ISR+0x5c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	9b01      	ldr	r3, [sp, #4]
 8003a4c:	0023      	movs	r3, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003a4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003a50:	3351      	adds	r3, #81	; 0x51
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d112      	bne.n	8003a7c <SPI_CloseRxTx_ISR+0x8c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003a56:	7819      	ldrb	r1, [r3, #0]
 8003a58:	3201      	adds	r2, #1
        HAL_SPI_RxCpltCallback(hspi);
 8003a5a:	0020      	movs	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	701a      	strb	r2, [r3, #0]
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003a5e:	2904      	cmp	r1, #4
 8003a60:	d109      	bne.n	8003a76 <SPI_CloseRxTx_ISR+0x86>
        HAL_SPI_RxCpltCallback(hspi);
 8003a62:	f001 fd93 	bl	800558c <HAL_SPI_RxCpltCallback>
}
 8003a66:	bd13      	pop	{r0, r1, r4, pc}
    count--;
 8003a68:	9900      	ldr	r1, [sp, #0]
 8003a6a:	3901      	subs	r1, #1
 8003a6c:	9100      	str	r1, [sp, #0]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	4201      	tst	r1, r0
 8003a72:	d0d0      	beq.n	8003a16 <SPI_CloseRxTx_ISR+0x26>
 8003a74:	e7d6      	b.n	8003a24 <SPI_CloseRxTx_ISR+0x34>
        HAL_SPI_TxRxCpltCallback(hspi);
 8003a76:	f001 fd85 	bl	8005584 <HAL_SPI_TxRxCpltCallback>
 8003a7a:	e7f4      	b.n	8003a66 <SPI_CloseRxTx_ISR+0x76>
      hspi->State = HAL_SPI_STATE_READY;
 8003a7c:	2201      	movs	r2, #1
      HAL_SPI_ErrorCallback(hspi);
 8003a7e:	0020      	movs	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 8003a80:	701a      	strb	r2, [r3, #0]
      HAL_SPI_ErrorCallback(hspi);
 8003a82:	f7ff fef9 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003a86:	e7ee      	b.n	8003a66 <SPI_CloseRxTx_ISR+0x76>
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	00005dc0 	.word	0x00005dc0

08003a90 <SPI_2linesTxISR_8BIT>:
{
 8003a90:	b510      	push	{r4, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a94:	6802      	ldr	r2, [r0, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	7313      	strb	r3, [r2, #12]
  hspi->pTxBuffPtr++;
 8003a9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8003aa0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003aa8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <SPI_2linesTxISR_8BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	6802      	ldr	r2, [r0, #0]
 8003ab2:	6853      	ldr	r3, [r2, #4]
 8003ab4:	438b      	bics	r3, r1
 8003ab6:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003ab8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <SPI_2linesTxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003abe:	f7ff ff97 	bl	80039f0 <SPI_CloseRxTx_ISR>
}
 8003ac2:	bd10      	pop	{r4, pc}

08003ac4 <SPI_2linesRxISR_8BIT>:
{
 8003ac4:	b510      	push	{r4, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003ac6:	6803      	ldr	r3, [r0, #0]
 8003ac8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003aca:	7b1b      	ldrb	r3, [r3, #12]
 8003acc:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr++;
 8003ace:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8003ad4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003adc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <SPI_2linesRxISR_8BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ae2:	2160      	movs	r1, #96	; 0x60
 8003ae4:	6802      	ldr	r2, [r0, #0]
 8003ae6:	6853      	ldr	r3, [r2, #4]
 8003ae8:	438b      	bics	r3, r1
 8003aea:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003aec:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003af2:	f7ff ff7d 	bl	80039f0 <SPI_CloseRxTx_ISR>
}
 8003af6:	bd10      	pop	{r4, pc}

08003af8 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003afa:	6802      	ldr	r2, [r0, #0]
 8003afc:	8819      	ldrh	r1, [r3, #0]
{
 8003afe:	b510      	push	{r4, lr}
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b00:	3302      	adds	r3, #2
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b02:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8003b06:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8003b0e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <SPI_2linesTxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	6853      	ldr	r3, [r2, #4]
 8003b18:	438b      	bics	r3, r1
 8003b1a:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003b1c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <SPI_2linesTxISR_16BIT+0x2e>
      SPI_CloseRxTx_ISR(hspi);
 8003b22:	f7ff ff65 	bl	80039f0 <SPI_CloseRxTx_ISR>
}
 8003b26:	bd10      	pop	{r4, pc}

08003b28 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b28:	6802      	ldr	r2, [r0, #0]
 8003b2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b2c:	68d1      	ldr	r1, [r2, #12]
{
 8003b2e:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b30:	8019      	strh	r1, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b32:	3302      	adds	r3, #2
 8003b34:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8003b36:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8003b3e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d108      	bne.n	8003b56 <SPI_2linesRxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	6853      	ldr	r3, [r2, #4]
 8003b48:	438b      	bics	r3, r1
 8003b4a:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003b4c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <SPI_2linesRxISR_16BIT+0x2e>
      SPI_CloseRxTx_ISR(hspi);
 8003b52:	f7ff ff4d 	bl	80039f0 <SPI_CloseRxTx_ISR>
}
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b58:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003b5c:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	6853      	ldr	r3, [r2, #4]
 8003b62:	438b      	bics	r3, r1
 8003b64:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b66:	2310      	movs	r3, #16
 8003b68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	0003      	movs	r3, r0
 8003b70:	2201      	movs	r2, #1
 8003b72:	3351      	adds	r3, #81	; 0x51
 8003b74:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8003b76:	f7ff fe7f 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <SPI_DMATransmitCplt>:
{
 8003b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b7e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b80:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003b82:	f7fe fc7b 	bl	800247c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	2520      	movs	r5, #32
 8003b8a:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8003b8c:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b8e:	422b      	tst	r3, r5
 8003b90:	d127      	bne.n	8003be2 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b92:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	43a9      	bics	r1, r5
 8003b9a:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	4381      	bics	r1, r0
 8003ba0:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ba2:	0020      	movs	r0, r4
 8003ba4:	2164      	movs	r1, #100	; 0x64
 8003ba6:	f7ff fb6f 	bl	8003288 <SPI_EndRxTxTransaction>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d002      	beq.n	8003bb4 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bb0:	431d      	orrs	r5, r3
 8003bb2:	6565      	str	r5, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	0023      	movs	r3, r4
 8003bce:	2201      	movs	r2, #1
 8003bd0:	3351      	adds	r3, #81	; 0x51
 8003bd2:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f7ff fe4c 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003be0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8003be2:	0020      	movs	r0, r4
 8003be4:	f001 fcb2 	bl	800554c <HAL_SPI_TxCpltCallback>
 8003be8:	e7fa      	b.n	8003be0 <SPI_DMATransmitCplt+0x64>

08003bea <SPI_DMAReceiveCplt>:
{
 8003bea:	b570      	push	{r4, r5, r6, lr}
 8003bec:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bee:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003bf0:	f7fe fc44 	bl	800247c <HAL_GetTick>
 8003bf4:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003bf6:	2020      	movs	r0, #32
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4203      	tst	r3, r0
 8003bfe:	d127      	bne.n	8003c50 <SPI_DMAReceiveCplt+0x66>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	4381      	bics	r1, r0
 8003c06:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c08:	68a1      	ldr	r1, [r4, #8]
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d11d      	bne.n	8003c4a <SPI_DMAReceiveCplt+0x60>
 8003c0e:	3105      	adds	r1, #5
 8003c10:	6860      	ldr	r0, [r4, #4]
 8003c12:	31ff      	adds	r1, #255	; 0xff
 8003c14:	4288      	cmp	r0, r1
 8003c16:	d118      	bne.n	8003c4a <SPI_DMAReceiveCplt+0x60>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c18:	2003      	movs	r0, #3
 8003c1a:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c1c:	4381      	bics	r1, r0
 8003c1e:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c20:	0020      	movs	r0, r4
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	f7ff fb06 	bl	8003234 <SPI_EndRxTransaction>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d001      	beq.n	8003c30 <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003c34:	0023      	movs	r3, r4
 8003c36:	2201      	movs	r2, #1
 8003c38:	3351      	adds	r3, #81	; 0x51
 8003c3a:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <SPI_DMAReceiveCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8003c42:	0020      	movs	r0, r4
 8003c44:	f7ff fe18 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	e7e5      	b.n	8003c1c <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8003c50:	0020      	movs	r0, r4
 8003c52:	f001 fc9b 	bl	800558c <HAL_SPI_RxCpltCallback>
 8003c56:	e7f7      	b.n	8003c48 <SPI_DMAReceiveCplt+0x5e>

08003c58 <SPI_DMATransmitReceiveCplt>:
{
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003c5e:	f7fe fc0d 	bl	800247c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	2520      	movs	r5, #32
 8003c66:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8003c68:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c6a:	422b      	tst	r3, r5
 8003c6c:	d11f      	bne.n	8003cae <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c6e:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c70:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c72:	684b      	ldr	r3, [r1, #4]
 8003c74:	43ab      	bics	r3, r5
 8003c76:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c78:	2164      	movs	r1, #100	; 0x64
 8003c7a:	f7ff fb05 	bl	8003288 <SPI_EndRxTxTransaction>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d002      	beq.n	8003c88 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c84:	431d      	orrs	r5, r3
 8003c86:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c88:	2103      	movs	r1, #3
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	6853      	ldr	r3, [r2, #4]
 8003c8e:	438b      	bics	r3, r1
 8003c90:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003c96:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003c98:	0023      	movs	r3, r4
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	3351      	adds	r3, #81	; 0x51
 8003c9e:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f7ff fde6 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8003cae:	0020      	movs	r0, r4
 8003cb0:	f001 fc68 	bl	8005584 <HAL_SPI_TxRxCpltCallback>
 8003cb4:	e7fa      	b.n	8003cac <SPI_DMATransmitReceiveCplt+0x54>
	...

08003cb8 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8003cb8:	6803      	ldr	r3, [r0, #0]
{
 8003cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbc:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003cbe:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003cc0:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cc2:	2501      	movs	r5, #1
 8003cc4:	0991      	lsrs	r1, r2, #6
 8003cc6:	000f      	movs	r7, r1
{
 8003cc8:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cca:	402f      	ands	r7, r5
 8003ccc:	4229      	tst	r1, r5
 8003cce:	d109      	bne.n	8003ce4 <HAL_SPI_IRQHandler+0x2c>
 8003cd0:	422a      	tst	r2, r5
 8003cd2:	d007      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cd4:	0986      	lsrs	r6, r0, #6
 8003cd6:	422e      	tst	r6, r5
 8003cd8:	d004      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0x2c>
    hspi->RxISR(hspi);
 8003cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hspi->TxISR(hspi);
 8003cdc:	0020      	movs	r0, r4
 8003cde:	4798      	blx	r3
}
 8003ce0:	b005      	add	sp, #20
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ce4:	2501      	movs	r5, #1
 8003ce6:	0796      	lsls	r6, r2, #30
 8003ce8:	d504      	bpl.n	8003cf4 <HAL_SPI_IRQHandler+0x3c>
 8003cea:	09c6      	lsrs	r6, r0, #7
 8003cec:	422e      	tst	r6, r5
 8003cee:	d001      	beq.n	8003cf4 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cf2:	e7f3      	b.n	8003cdc <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cf4:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf6:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cf8:	4331      	orrs	r1, r6
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	402a      	ands	r2, r5
 8003cfe:	4029      	ands	r1, r5
 8003d00:	4311      	orrs	r1, r2
 8003d02:	d0ed      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
 8003d04:	0941      	lsrs	r1, r0, #5
 8003d06:	4229      	tst	r1, r5
 8003d08:	d0ea      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d0a:	2f00      	cmp	r7, #0
 8003d0c:	d00f      	beq.n	8003d2e <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d0e:	0021      	movs	r1, r4
 8003d10:	3151      	adds	r1, #81	; 0x51
 8003d12:	7809      	ldrb	r1, [r1, #0]
 8003d14:	2903      	cmp	r1, #3
 8003d16:	d050      	beq.n	8003dba <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d18:	2104      	movs	r1, #4
 8003d1a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003d1c:	4329      	orrs	r1, r5
 8003d1e:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d20:	2100      	movs	r1, #0
 8003d22:	9100      	str	r1, [sp, #0]
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	9100      	str	r1, [sp, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	9100      	str	r1, [sp, #0]
 8003d2c:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d2e:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d30:	420e      	tst	r6, r1
 8003d32:	d00b      	beq.n	8003d4c <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d34:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8003d36:	4329      	orrs	r1, r5
 8003d38:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2540      	movs	r5, #64	; 0x40
 8003d3e:	9102      	str	r1, [sp, #8]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	9102      	str	r1, [sp, #8]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	43a9      	bics	r1, r5
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d50:	2208      	movs	r2, #8
 8003d52:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003d54:	430a      	orrs	r2, r1
 8003d56:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	9203      	str	r2, [sp, #12]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	9203      	str	r2, [sp, #12]
 8003d60:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	d0bb      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d68:	21e0      	movs	r1, #224	; 0xe0
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003d70:	0022      	movs	r2, r4
 8003d72:	39df      	subs	r1, #223	; 0xdf
 8003d74:	3251      	adds	r2, #81	; 0x51
 8003d76:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d78:	3102      	adds	r1, #2
 8003d7a:	4208      	tst	r0, r1
 8003d7c:	d025      	beq.n	8003dca <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d7e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003d80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d82:	438a      	bics	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_SPI_IRQHandler+0x11c>)
 8003d8c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d8e:	f7fe fc55 	bl	800263c <HAL_DMA_Abort_IT>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d09d      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_SPI_IRQHandler+0x11c>)
 8003da6:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003da8:	f7fe fc48 	bl	800263c <HAL_DMA_Abort_IT>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d097      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003db4:	4313      	orrs	r3, r2
 8003db6:	6563      	str	r3, [r4, #84]	; 0x54
 8003db8:	e792      	b.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	9201      	str	r2, [sp, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	9201      	str	r2, [sp, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	9b01      	ldr	r3, [sp, #4]
        return;
 8003dc8:	e78a      	b.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 8003dca:	0020      	movs	r0, r4
 8003dcc:	f7ff fd54 	bl	8003878 <HAL_SPI_ErrorCallback>
 8003dd0:	e786      	b.n	8003ce0 <HAL_SPI_IRQHandler+0x28>
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	08003dd9 	.word	0x08003dd9

08003dd8 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8003dd8:	2300      	movs	r3, #0
{
 8003dda:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ddc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003dde:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003de0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003de2:	f7ff fd49 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	2280      	movs	r2, #128	; 0x80
{
 8003dea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003dec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dee:	05d2      	lsls	r2, r2, #23
 8003df0:	4290      	cmp	r0, r2
 8003df2:	d002      	beq.n	8003dfa <TIM_Base_SetConfig+0x12>
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <TIM_Base_SetConfig+0x44>)
 8003df6:	42a0      	cmp	r0, r4
 8003df8:	d10c      	bne.n	8003e14 <TIM_Base_SetConfig+0x2c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfa:	2470      	movs	r4, #112	; 0x70
 8003dfc:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003dfe:	684c      	ldr	r4, [r1, #4]
 8003e00:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e02:	4290      	cmp	r0, r2
 8003e04:	d002      	beq.n	8003e0c <TIM_Base_SetConfig+0x24>
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <TIM_Base_SetConfig+0x44>)
 8003e08:	4290      	cmp	r0, r2
 8003e0a:	d103      	bne.n	8003e14 <TIM_Base_SetConfig+0x2c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <TIM_Base_SetConfig+0x48>)
 8003e0e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e10:	68ca      	ldr	r2, [r1, #12]
 8003e12:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	4393      	bics	r3, r2
 8003e18:	690a      	ldr	r2, [r1, #16]
 8003e1a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003e1c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1e:	688b      	ldr	r3, [r1, #8]
 8003e20:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e22:	680b      	ldr	r3, [r1, #0]
 8003e24:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e26:	2301      	movs	r3, #1
 8003e28:	6143      	str	r3, [r0, #20]
}
 8003e2a:	bd10      	pop	{r4, pc}
 8003e2c:	40010800 	.word	0x40010800
 8003e30:	fffffcff 	.word	0xfffffcff

08003e34 <HAL_TIM_Base_MspInit>:
}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_Base_Init>:
{
 8003e36:	b570      	push	{r4, r5, r6, lr}
 8003e38:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
  if (htim == NULL)
 8003e3c:	2c00      	cmp	r4, #0
 8003e3e:	d01d      	beq.n	8003e7c <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e40:	0025      	movs	r5, r4
 8003e42:	3539      	adds	r5, #57	; 0x39
 8003e44:	782b      	ldrb	r3, [r5, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003e50:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003e52:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003e54:	f7ff ffee 	bl	8003e34 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	1d21      	adds	r1, r4, #4
 8003e60:	f7ff ffc2 	bl	8003de8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	0022      	movs	r2, r4
 8003e66:	2301      	movs	r3, #1
  return HAL_OK;
 8003e68:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	323e      	adds	r2, #62	; 0x3e
 8003e6c:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	343d      	adds	r4, #61	; 0x3d
 8003e70:	3a04      	subs	r2, #4
 8003e72:	7013      	strb	r3, [r2, #0]
 8003e74:	7053      	strb	r3, [r2, #1]
 8003e76:	7093      	strb	r3, [r2, #2]
 8003e78:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	702b      	strb	r3, [r5, #0]
}
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e80:	0002      	movs	r2, r0
{
 8003e82:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003e84:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003e86:	3239      	adds	r2, #57	; 0x39
 8003e88:	7811      	ldrb	r1, [r2, #0]
 8003e8a:	4281      	cmp	r1, r0
 8003e8c:	d116      	bne.n	8003ebc <HAL_TIM_Base_Start_IT+0x3c>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8e:	2102      	movs	r1, #2
 8003e90:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	4302      	orrs	r2, r0
 8003e98:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	05d2      	lsls	r2, r2, #23
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d002      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x28>
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <HAL_TIM_Base_Start_IT+0x48>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10a      	bne.n	8003ebe <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea8:	2107      	movs	r1, #7
 8003eaa:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003eac:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eae:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	2a06      	cmp	r2, #6
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x3c>
      __HAL_TIM_ENABLE(htim);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4310      	orrs	r0, r2
 8003ec2:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	e7f9      	b.n	8003ebc <HAL_TIM_Base_Start_IT+0x3c>
 8003ec8:	40010800 	.word	0x40010800

08003ecc <HAL_TIM_OC_DelayElapsedCallback>:
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_IC_CaptureCallback>:
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_TIM_TriggerCallback>:
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	6803      	ldr	r3, [r0, #0]
{
 8003ed8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eda:	6919      	ldr	r1, [r3, #16]
{
 8003edc:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ede:	4211      	tst	r1, r2
 8003ee0:	d00d      	beq.n	8003efe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee2:	68d9      	ldr	r1, [r3, #12]
 8003ee4:	4211      	tst	r1, r2
 8003ee6:	d00a      	beq.n	8003efe <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee8:	3a05      	subs	r2, #5
 8003eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eec:	3204      	adds	r2, #4
 8003eee:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d05e      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	f7ff ffea 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	2300      	movs	r3, #0
 8003efc:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003efe:	2204      	movs	r2, #4
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	4211      	tst	r1, r2
 8003f06:	d010      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f08:	68d9      	ldr	r1, [r3, #12]
 8003f0a:	4211      	tst	r1, r2
 8003f0c:	d00d      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f0e:	3a09      	subs	r2, #9
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f12:	3207      	adds	r2, #7
 8003f14:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	23c0      	movs	r3, #192	; 0xc0
 8003f1a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f1e:	421a      	tst	r2, r3
 8003f20:	d04e      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	f7ff ffd4 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	2300      	movs	r3, #0
 8003f28:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	6919      	ldr	r1, [r3, #16]
 8003f30:	4211      	tst	r1, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f34:	68d9      	ldr	r1, [r3, #12]
 8003f36:	4211      	tst	r1, r2
 8003f38:	d00b      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3a:	3a11      	subs	r2, #17
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3e:	320d      	adds	r2, #13
 8003f40:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f42:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f46:	079b      	lsls	r3, r3, #30
 8003f48:	d040      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	f7ff ffc0 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f52:	2210      	movs	r2, #16
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	6919      	ldr	r1, [r3, #16]
 8003f58:	4211      	tst	r1, r2
 8003f5a:	d010      	beq.n	8003f7e <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5c:	68d9      	ldr	r1, [r3, #12]
 8003f5e:	4211      	tst	r1, r2
 8003f60:	d00d      	beq.n	8003f7e <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f62:	3a21      	subs	r2, #33	; 0x21
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	3219      	adds	r2, #25
 8003f68:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	23c0      	movs	r3, #192	; 0xc0
 8003f6e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003f70:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f72:	421a      	tst	r2, r3
 8003f74:	d030      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	f7ff ffaa 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	4211      	tst	r1, r2
 8003f86:	d007      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	4211      	tst	r1, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f8e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f90:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f92:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f94:	f7fd ffc4 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	4211      	tst	r1, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa2:	68d9      	ldr	r1, [r3, #12]
 8003fa4:	4211      	tst	r1, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa8:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8003faa:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fae:	f7ff ff90 	bl	8003ed2 <HAL_TIM_TriggerCallback>
}
 8003fb2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb4:	f7ff ff8a 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	0020      	movs	r0, r4
 8003fba:	f7ff ff89 	bl	8003ed0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fbe:	e79c      	b.n	8003efa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc0:	f7ff ff84 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	f7ff ff83 	bl	8003ed0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fca:	e7ac      	b.n	8003f26 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fcc:	f7ff ff7e 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f7ff ff7d 	bl	8003ed0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fd6:	e7ba      	b.n	8003f4e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd8:	f7ff ff78 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	0020      	movs	r0, r4
 8003fde:	f7ff ff77 	bl	8003ed0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fe2:	e7ca      	b.n	8003f7a <HAL_TIM_IRQHandler+0xa6>

08003fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	2201      	movs	r2, #1
 8003fec:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff0:	6801      	ldr	r1, [r0, #0]
 8003ff2:	4d12      	ldr	r5, [pc, #72]	; (800403c <UART_EndRxTransfer+0x58>)
 8003ff4:	680b      	ldr	r3, [r1, #0]
 8003ff6:	402b      	ands	r3, r5
 8003ff8:	600b      	str	r3, [r1, #0]
 8003ffa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	6801      	ldr	r1, [r0, #0]
 8004008:	688b      	ldr	r3, [r1, #8]
 800400a:	4393      	bics	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
 800400e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004012:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004014:	4293      	cmp	r3, r2
 8004016:	d10a      	bne.n	800402e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004018:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	2410      	movs	r4, #16
 8004022:	6802      	ldr	r2, [r0, #0]
 8004024:	6813      	ldr	r3, [r2, #0]
 8004026:	43a3      	bics	r3, r4
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402e:	2220      	movs	r2, #32
 8004030:	1d03      	adds	r3, r0, #4
 8004032:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	2300      	movs	r3, #0
 8004036:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004038:	6683      	str	r3, [r0, #104]	; 0x68
}
 800403a:	bd30      	pop	{r4, r5, pc}
 800403c:	fffffedf 	.word	0xfffffedf

08004040 <HAL_UART_TxCpltCallback>:
 8004040:	4770      	bx	lr

08004042 <HAL_UART_ErrorCallback>:
 8004042:	4770      	bx	lr

08004044 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004044:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004046:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004048:	1d22      	adds	r2, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800404a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800404c:	6fd1      	ldr	r1, [r2, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	6892      	ldr	r2, [r2, #8]
 8004052:	0612      	lsls	r2, r2, #24
 8004054:	d513      	bpl.n	800407e <UART_DMAError+0x3a>
 8004056:	2b21      	cmp	r3, #33	; 0x21
 8004058:	d111      	bne.n	800407e <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800405a:	0023      	movs	r3, r4
 800405c:	2200      	movs	r2, #0
 800405e:	3352      	adds	r3, #82	; 0x52
 8004060:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004062:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	2301      	movs	r3, #1
 8004068:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800406c:	25c0      	movs	r5, #192	; 0xc0
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	43ab      	bics	r3, r5
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 800407a:	2320      	movs	r3, #32
 800407c:	67e3      	str	r3, [r4, #124]	; 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	065b      	lsls	r3, r3, #25
 8004084:	d508      	bpl.n	8004098 <UART_DMAError+0x54>
 8004086:	2922      	cmp	r1, #34	; 0x22
 8004088:	d106      	bne.n	8004098 <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800408a:	0023      	movs	r3, r4
 800408c:	2200      	movs	r2, #0
 800408e:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8004090:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8004092:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8004094:	f7ff ffa6 	bl	8003fe4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004098:	0022      	movs	r2, r4
 800409a:	2310      	movs	r3, #16
 800409c:	3208      	adds	r2, #8
 800409e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a0:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040a2:	430b      	orrs	r3, r1
 80040a4:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80040a6:	f7ff ffcc 	bl	8004042 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040aa:	bd70      	pop	{r4, r5, r6, pc}

080040ac <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	0002      	movs	r2, r0
{
 80040b2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80040b4:	325a      	adds	r2, #90	; 0x5a
 80040b6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80040b8:	3a08      	subs	r2, #8
 80040ba:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040bc:	f7ff ffc1 	bl	8004042 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c0:	bd10      	pop	{r4, pc}

080040c2 <HAL_UARTEx_RxEventCallback>:
}
 80040c2:	4770      	bx	lr

080040c4 <HAL_UART_IRQHandler>:
{
 80040c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c6:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c8:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040ca:	4bab      	ldr	r3, [pc, #684]	; (8004378 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040cc:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ce:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d0:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 80040d2:	4219      	tst	r1, r3
 80040d4:	d10b      	bne.n	80040ee <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d6:	2320      	movs	r3, #32
 80040d8:	4219      	tst	r1, r3
 80040da:	d100      	bne.n	80040de <HAL_UART_IRQHandler+0x1a>
 80040dc:	e080      	b.n	80041e0 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040de:	421e      	tst	r6, r3
 80040e0:	d100      	bne.n	80040e4 <HAL_UART_IRQHandler+0x20>
 80040e2:	e07d      	b.n	80041e0 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 80040e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 80040e6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d16f      	bne.n	80041cc <HAL_UART_IRQHandler+0x108>
 80040ec:	e06f      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040ee:	2301      	movs	r3, #1
 80040f0:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040f2:	4aa2      	ldr	r2, [pc, #648]	; (800437c <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040f4:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040f6:	4032      	ands	r2, r6
 80040f8:	433a      	orrs	r2, r7
 80040fa:	d100      	bne.n	80040fe <HAL_UART_IRQHandler+0x3a>
 80040fc:	e070      	b.n	80041e0 <HAL_UART_IRQHandler+0x11c>
 80040fe:	0025      	movs	r5, r4
 8004100:	3508      	adds	r5, #8
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004102:	4219      	tst	r1, r3
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0x4e>
 8004106:	05f2      	lsls	r2, r6, #23
 8004108:	d503      	bpl.n	8004112 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800410a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800410e:	4313      	orrs	r3, r2
 8004110:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004112:	2302      	movs	r3, #2
 8004114:	4219      	tst	r1, r3
 8004116:	d006      	beq.n	8004126 <HAL_UART_IRQHandler+0x62>
 8004118:	2f00      	cmp	r7, #0
 800411a:	d004      	beq.n	8004126 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800411c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800411e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8004120:	18db      	adds	r3, r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004126:	2304      	movs	r3, #4
 8004128:	4219      	tst	r1, r3
 800412a:	d006      	beq.n	800413a <HAL_UART_IRQHandler+0x76>
 800412c:	2f00      	cmp	r7, #0
 800412e:	d004      	beq.n	800413a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004130:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004132:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8004134:	3b02      	subs	r3, #2
 8004136:	4313      	orrs	r3, r2
 8004138:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800413a:	2308      	movs	r3, #8
 800413c:	4219      	tst	r1, r3
 800413e:	d007      	beq.n	8004150 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004140:	2220      	movs	r2, #32
 8004142:	4032      	ands	r2, r6
 8004144:	433a      	orrs	r2, r7
 8004146:	d003      	beq.n	8004150 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004148:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800414a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800414c:	4313      	orrs	r3, r2
 800414e:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4219      	tst	r1, r3
 8004156:	d006      	beq.n	8004166 <HAL_UART_IRQHandler+0xa2>
 8004158:	0172      	lsls	r2, r6, #5
 800415a:	d504      	bpl.n	8004166 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800415e:	2320      	movs	r3, #32
 8004160:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8004162:	4313      	orrs	r3, r2
 8004164:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004166:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d030      	beq.n	80041ce <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800416c:	2320      	movs	r3, #32
 800416e:	4219      	tst	r1, r3
 8004170:	d006      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004172:	421e      	tst	r6, r3
 8004174:	d004      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8004176:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 800417c:	0020      	movs	r0, r4
 800417e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004180:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8004182:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004184:	2740      	movs	r7, #64	; 0x40
 8004186:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004188:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800418c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800418e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004190:	431e      	orrs	r6, r3
 8004192:	d021      	beq.n	80041d8 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8004194:	f7ff ff26 	bl	8003fe4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	423b      	tst	r3, r7
 800419e:	d017      	beq.n	80041d0 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	2301      	movs	r3, #1
 80041a6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	6893      	ldr	r3, [r2, #8]
 80041ae:	43bb      	bics	r3, r7
 80041b0:	6093      	str	r3, [r2, #8]
 80041b2:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80041b6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041bc:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_UART_IRQHandler+0x2bc>)
 80041be:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c0:	f7fe fa3c 	bl	800263c <HAL_DMA_Abort_IT>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80041ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80041cc:	4798      	blx	r3
}
 80041ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80041d0:	0020      	movs	r0, r4
 80041d2:	f7ff ff36 	bl	8004042 <HAL_UART_ErrorCallback>
 80041d6:	e7fa      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80041d8:	f7ff ff33 	bl	8004042 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	67ee      	str	r6, [r5, #124]	; 0x7c
 80041de:	e7f6      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d000      	beq.n	80041e8 <HAL_UART_IRQHandler+0x124>
 80041e6:	e09a      	b.n	800431e <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041e8:	2210      	movs	r2, #16
 80041ea:	4211      	tst	r1, r2
 80041ec:	d100      	bne.n	80041f0 <HAL_UART_IRQHandler+0x12c>
 80041ee:	e096      	b.n	800431e <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041f0:	4216      	tst	r6, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_UART_IRQHandler+0x132>
 80041f4:	e093      	b.n	800431e <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f6:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	6881      	ldr	r1, [r0, #8]
 80041fa:	2640      	movs	r6, #64	; 0x40
 80041fc:	000f      	movs	r7, r1
 80041fe:	4037      	ands	r7, r6
 8004200:	4231      	tst	r1, r6
 8004202:	d053      	beq.n	80042ac <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004204:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004206:	6808      	ldr	r0, [r1, #0]
 8004208:	6841      	ldr	r1, [r0, #4]
 800420a:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800420c:	2900      	cmp	r1, #0
 800420e:	d0de      	beq.n	80041ce <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004210:	0025      	movs	r5, r4
 8004212:	3558      	adds	r5, #88	; 0x58
 8004214:	882d      	ldrh	r5, [r5, #0]
 8004216:	428d      	cmp	r5, r1
 8004218:	d9d9      	bls.n	80041ce <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 800421a:	0025      	movs	r5, r4
 800421c:	355a      	adds	r5, #90	; 0x5a
 800421e:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004220:	6801      	ldr	r1, [r0, #0]
 8004222:	2020      	movs	r0, #32
 8004224:	000d      	movs	r5, r1
 8004226:	4005      	ands	r5, r0
 8004228:	9501      	str	r5, [sp, #4]
 800422a:	4201      	tst	r1, r0
 800422c:	d130      	bne.n	8004290 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004232:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004236:	6825      	ldr	r5, [r4, #0]
 8004238:	4a52      	ldr	r2, [pc, #328]	; (8004384 <HAL_UART_IRQHandler+0x2c0>)
 800423a:	6829      	ldr	r1, [r5, #0]
 800423c:	4011      	ands	r1, r2
 800423e:	6029      	str	r1, [r5, #0]
 8004240:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	68a9      	ldr	r1, [r5, #8]
 8004250:	4399      	bics	r1, r3
 8004252:	60a9      	str	r1, [r5, #8]
 8004254:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004260:	0021      	movs	r1, r4
 8004262:	c980      	ldmia	r1!, {r7}
 8004264:	68bd      	ldr	r5, [r7, #8]
 8004266:	43b5      	bics	r5, r6
 8004268:	60bd      	str	r5, [r7, #8]
 800426a:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8004270:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	2210      	movs	r2, #16
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	680b      	ldr	r3, [r1, #0]
 8004282:	4393      	bics	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
 8004286:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800428c:	f7fe f9b6 	bl	80025fc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004290:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004292:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004296:	0023      	movs	r3, r4
 8004298:	3258      	adds	r2, #88	; 0x58
 800429a:	335a      	adds	r3, #90	; 0x5a
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	8811      	ldrh	r1, [r2, #0]
 80042a0:	1ac9      	subs	r1, r1, r3
 80042a2:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042a4:	0020      	movs	r0, r4
 80042a6:	f7ff ff0c 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
 80042aa:	e790      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ac:	0025      	movs	r5, r4
 80042ae:	355a      	adds	r5, #90	; 0x5a
 80042b0:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 80042b2:	8829      	ldrh	r1, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b4:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 80042b6:	2900      	cmp	r1, #0
 80042b8:	d100      	bne.n	80042bc <HAL_UART_IRQHandler+0x1f8>
 80042ba:	e788      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	0021      	movs	r1, r4
 80042be:	3158      	adds	r1, #88	; 0x58
 80042c0:	8809      	ldrh	r1, [r1, #0]
 80042c2:	1a09      	subs	r1, r1, r0
 80042c4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80042c6:	2900      	cmp	r1, #0
 80042c8:	d100      	bne.n	80042cc <HAL_UART_IRQHandler+0x208>
 80042ca:	e780      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	6825      	ldr	r5, [r4, #0]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <HAL_UART_IRQHandler+0x2c4>)
 80042d8:	6828      	ldr	r0, [r5, #0]
 80042da:	4010      	ands	r0, r2
 80042dc:	6028      	str	r0, [r5, #0]
 80042de:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	0020      	movs	r0, r4
 80042ec:	c840      	ldmia	r0!, {r6}
 80042ee:	68b5      	ldr	r5, [r6, #8]
 80042f0:	439d      	bics	r5, r3
 80042f2:	60b5      	str	r5, [r6, #8]
 80042f4:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 80042f8:	2520      	movs	r5, #32
 80042fa:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80042fe:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004300:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	3232      	adds	r2, #50	; 0x32
 800430c:	6803      	ldr	r3, [r0, #0]
 800430e:	32ff      	adds	r2, #255	; 0xff
 8004310:	4393      	bics	r3, r2
 8004312:	6003      	str	r3, [r0, #0]
 8004314:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004318:	2302      	movs	r3, #2
 800431a:	6663      	str	r3, [r4, #100]	; 0x64
 800431c:	e7c2      	b.n	80042a4 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	035b      	lsls	r3, r3, #13
 8004322:	4219      	tst	r1, r3
 8004324:	d006      	beq.n	8004334 <HAL_UART_IRQHandler+0x270>
 8004326:	026a      	lsls	r2, r5, #9
 8004328:	d504      	bpl.n	8004334 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800432a:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800432c:	0020      	movs	r0, r4
 800432e:	f000 fb51 	bl	80049d4 <HAL_UARTEx_WakeupCallback>
    return;
 8004332:	e74c      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	4219      	tst	r1, r3
 8004338:	d003      	beq.n	8004342 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800433a:	421e      	tst	r6, r3
 800433c:	d001      	beq.n	8004342 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 800433e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004340:	e6d1      	b.n	80040e6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	4211      	tst	r1, r2
 8004346:	d100      	bne.n	800434a <HAL_UART_IRQHandler+0x286>
 8004348:	e741      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
 800434a:	4216      	tst	r6, r2
 800434c:	d100      	bne.n	8004350 <HAL_UART_IRQHandler+0x28c>
 800434e:	e73e      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004350:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004354:	2301      	movs	r3, #1
 8004356:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	680b      	ldr	r3, [r1, #0]
 800435e:	4393      	bics	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004366:	2320      	movs	r3, #32
 8004368:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800436a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800436e:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004370:	f7ff fe66 	bl	8004040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004374:	e72b      	b.n	80041ce <HAL_UART_IRQHandler+0x10a>
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	0000080f 	.word	0x0000080f
 800437c:	04000120 	.word	0x04000120
 8004380:	080040ad 	.word	0x080040ad
 8004384:	fffffeff 	.word	0xfffffeff
 8004388:	fffffedf 	.word	0xfffffedf

0800438c <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800438c:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004390:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004392:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800439a:	0003      	movs	r3, r0
 800439c:	3358      	adds	r3, #88	; 0x58
 800439e:	8819      	ldrh	r1, [r3, #0]
 80043a0:	0849      	lsrs	r1, r1, #1
 80043a2:	f7ff fe8e 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
}
 80043a6:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80043a8:	f001 f9e6 	bl	8005778 <HAL_UART_RxHalfCpltCallback>
}
 80043ac:	e7fb      	b.n	80043a6 <UART_DMARxHalfCplt+0x1a>
	...

080043b0 <UART_DMAReceiveCplt>:
{
 80043b0:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2220      	movs	r2, #32
 80043b6:	681b      	ldr	r3, [r3, #0]
{
 80043b8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80043ba:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80043be:	4011      	ands	r1, r2
 80043c0:	4213      	tst	r3, r2
 80043c2:	d134      	bne.n	800442e <UART_DMAReceiveCplt+0x7e>
    huart->RxXferCount = 0U;
 80043c4:	0003      	movs	r3, r0
 80043c6:	335a      	adds	r3, #90	; 0x5a
 80043c8:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	2301      	movs	r3, #1
 80043d0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d4:	6804      	ldr	r4, [r0, #0]
 80043d6:	4e1d      	ldr	r6, [pc, #116]	; (800444c <UART_DMAReceiveCplt+0x9c>)
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	4031      	ands	r1, r6
 80043dc:	6021      	str	r1, [r4, #0]
 80043de:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	6804      	ldr	r4, [r0, #0]
 80043ec:	68a1      	ldr	r1, [r4, #8]
 80043ee:	4399      	bics	r1, r3
 80043f0:	60a1      	str	r1, [r4, #8]
 80043f2:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	0003      	movs	r3, r0
 8004400:	cb10      	ldmia	r3!, {r4}
 8004402:	3642      	adds	r6, #66	; 0x42
 8004404:	68a1      	ldr	r1, [r4, #8]
 8004406:	36ff      	adds	r6, #255	; 0xff
 8004408:	43b1      	bics	r1, r6
 800440a:	60a1      	str	r1, [r4, #8]
 800440c:	f385 8810 	msr	PRIMASK, r5
    huart->RxState = HAL_UART_STATE_READY;
 8004410:	67da      	str	r2, [r3, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004412:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10a      	bne.n	800442e <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	2410      	movs	r4, #16
 8004422:	6802      	ldr	r2, [r0, #0]
 8004424:	6813      	ldr	r3, [r2, #0]
 8004426:	43a3      	bics	r3, r4
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442e:	2300      	movs	r3, #0
 8004430:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <UART_DMAReceiveCplt+0x94>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004438:	0003      	movs	r3, r0
 800443a:	3358      	adds	r3, #88	; 0x58
 800443c:	8819      	ldrh	r1, [r3, #0]
 800443e:	f7ff fe40 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
}
 8004442:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 8004444:	f001 f9b8 	bl	80057b8 <HAL_UART_RxCpltCallback>
}
 8004448:	e7fb      	b.n	8004442 <UART_DMAReceiveCplt+0x92>
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	fffffeff 	.word	0xfffffeff

08004450 <UART_SetConfig>:
{
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004454:	6925      	ldr	r5, [r4, #16]
 8004456:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004458:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800445a:	4329      	orrs	r1, r5
 800445c:	6965      	ldr	r5, [r4, #20]
 800445e:	69c3      	ldr	r3, [r0, #28]
 8004460:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004462:	6810      	ldr	r0, [r2, #0]
 8004464:	4d6a      	ldr	r5, [pc, #424]	; (8004610 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004466:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004468:	4028      	ands	r0, r5
 800446a:	4301      	orrs	r1, r0
 800446c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446e:	6851      	ldr	r1, [r2, #4]
 8004470:	4868      	ldr	r0, [pc, #416]	; (8004614 <UART_SetConfig+0x1c4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004472:	4d69      	ldr	r5, [pc, #420]	; (8004618 <UART_SetConfig+0x1c8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	4001      	ands	r1, r0
 8004476:	68e0      	ldr	r0, [r4, #12]
 8004478:	4301      	orrs	r1, r0
 800447a:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800447e:	42aa      	cmp	r2, r5
 8004480:	d001      	beq.n	8004486 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8004482:	6a21      	ldr	r1, [r4, #32]
 8004484:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004486:	6891      	ldr	r1, [r2, #8]
 8004488:	4e64      	ldr	r6, [pc, #400]	; (800461c <UART_SetConfig+0x1cc>)
 800448a:	4031      	ands	r1, r6
 800448c:	4301      	orrs	r1, r0
 800448e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004490:	4963      	ldr	r1, [pc, #396]	; (8004620 <UART_SetConfig+0x1d0>)
 8004492:	428a      	cmp	r2, r1
 8004494:	d113      	bne.n	80044be <UART_SetConfig+0x6e>
 8004496:	200c      	movs	r0, #12
 8004498:	4a62      	ldr	r2, [pc, #392]	; (8004624 <UART_SetConfig+0x1d4>)
 800449a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800449c:	4001      	ands	r1, r0
 800449e:	4862      	ldr	r0, [pc, #392]	; (8004628 <UART_SetConfig+0x1d8>)
 80044a0:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	0209      	lsls	r1, r1, #8
 80044a6:	428b      	cmp	r3, r1
 80044a8:	d000      	beq.n	80044ac <UART_SetConfig+0x5c>
 80044aa:	e07f      	b.n	80045ac <UART_SetConfig+0x15c>
    switch (clocksource)
 80044ac:	2808      	cmp	r0, #8
 80044ae:	d819      	bhi.n	80044e4 <UART_SetConfig+0x94>
 80044b0:	f7fb fe34 	bl	800011c <__gnu_thumb1_case_uqi>
 80044b4:	18595651 	.word	0x18595651
 80044b8:	18181879 	.word	0x18181879
 80044bc:	63          	.byte	0x63
 80044bd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044be:	42aa      	cmp	r2, r5
 80044c0:	d000      	beq.n	80044c4 <UART_SetConfig+0x74>
 80044c2:	e09e      	b.n	8004602 <UART_SetConfig+0x1b2>
 80044c4:	21c0      	movs	r1, #192	; 0xc0
 80044c6:	2080      	movs	r0, #128	; 0x80
 80044c8:	4a56      	ldr	r2, [pc, #344]	; (8004624 <UART_SetConfig+0x1d4>)
 80044ca:	0109      	lsls	r1, r1, #4
 80044cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80044ce:	0100      	lsls	r0, r0, #4
 80044d0:	400b      	ands	r3, r1
 80044d2:	4283      	cmp	r3, r0
 80044d4:	d016      	beq.n	8004504 <UART_SetConfig+0xb4>
 80044d6:	d807      	bhi.n	80044e8 <UART_SetConfig+0x98>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <UART_SetConfig+0xa2>
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	00d2      	lsls	r2, r2, #3
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d035      	beq.n	8004550 <UART_SetConfig+0x100>
    switch (clocksource)
 80044e4:	2001      	movs	r0, #1
 80044e6:	e009      	b.n	80044fc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d1fb      	bne.n	80044e4 <UART_SetConfig+0x94>
 80044ec:	2080      	movs	r0, #128	; 0x80
 80044ee:	0200      	lsls	r0, r0, #8
 80044f0:	e012      	b.n	8004518 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7fe fd41 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d10e      	bne.n	8004518 <UART_SetConfig+0xc8>
 80044fa:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004500:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	2310      	movs	r3, #16
 8004506:	6810      	ldr	r0, [r2, #0]
 8004508:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800450a:	4243      	negs	r3, r0
 800450c:	4158      	adcs	r0, r3
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <UART_SetConfig+0x1dc>)
 8004510:	4240      	negs	r0, r0
 8004512:	4018      	ands	r0, r3
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <UART_SetConfig+0x1e0>)
 8004516:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004518:	2203      	movs	r2, #3
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	435a      	muls	r2, r3
 800451e:	4282      	cmp	r2, r0
 8004520:	d8e0      	bhi.n	80044e4 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004522:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004524:	4282      	cmp	r2, r0
 8004526:	d3dd      	bcc.n	80044e4 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004528:	2700      	movs	r7, #0
 800452a:	0e02      	lsrs	r2, r0, #24
 800452c:	0201      	lsls	r1, r0, #8
 800452e:	085e      	lsrs	r6, r3, #1
 8004530:	1989      	adds	r1, r1, r6
 8004532:	417a      	adcs	r2, r7
 8004534:	0008      	movs	r0, r1
 8004536:	0011      	movs	r1, r2
 8004538:	001a      	movs	r2, r3
 800453a:	003b      	movs	r3, r7
 800453c:	f7fb fef0 	bl	8000320 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004540:	4b3c      	ldr	r3, [pc, #240]	; (8004634 <UART_SetConfig+0x1e4>)
 8004542:	18c2      	adds	r2, r0, r3
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <UART_SetConfig+0x1e8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004546:	429a      	cmp	r2, r3
 8004548:	d8cc      	bhi.n	80044e4 <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	60d8      	str	r0, [r3, #12]
 800454e:	e7d4      	b.n	80044fa <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8004550:	f7fe f9ae 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
        break;
 8004554:	e7cf      	b.n	80044f6 <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004556:	f7fe fd0f 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800455a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800455c:	d0cd      	beq.n	80044fa <UART_SetConfig+0xaa>
 800455e:	e00c      	b.n	800457a <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fe fd1a 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004564:	e7f9      	b.n	800455a <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004566:	2310      	movs	r3, #16
 8004568:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800456a:	4a31      	ldr	r2, [pc, #196]	; (8004630 <UART_SetConfig+0x1e0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800456c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800456e:	4243      	negs	r3, r0
 8004570:	4158      	adcs	r0, r3
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <UART_SetConfig+0x1dc>)
 8004574:	4240      	negs	r0, r0
 8004576:	4003      	ands	r3, r0
 8004578:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800457a:	0058      	lsls	r0, r3, #1
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	6861      	ldr	r1, [r4, #4]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	18c0      	adds	r0, r0, r3
 8004584:	f7fb fdde 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004588:	0002      	movs	r2, r0
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <UART_SetConfig+0x1ec>)
 800458c:	3a10      	subs	r2, #16
 800458e:	429a      	cmp	r2, r3
 8004590:	d8a8      	bhi.n	80044e4 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004592:	230f      	movs	r3, #15
 8004594:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004596:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004598:	439a      	bics	r2, r3
 800459a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800459c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	4318      	orrs	r0, r3
 80045a2:	60d0      	str	r0, [r2, #12]
 80045a4:	e7a9      	b.n	80044fa <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe f983 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 80045aa:	e7d6      	b.n	800455a <UART_SetConfig+0x10a>
    switch (clocksource)
 80045ac:	2808      	cmp	r0, #8
 80045ae:	d899      	bhi.n	80044e4 <UART_SetConfig+0x94>
 80045b0:	f7fb fdaa 	bl	8000108 <__gnu_thumb1_case_sqi>
 80045b4:	980d0a05 	.word	0x980d0a05
 80045b8:	98989821 	.word	0x98989821
 80045bc:	24          	.byte	0x24
 80045bd:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80045be:	f7fe fcdb 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d099      	beq.n	80044fa <UART_SetConfig+0xaa>
 80045c6:	e00c      	b.n	80045e2 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe fce6 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
        break;
 80045cc:	e7f9      	b.n	80045c2 <UART_SetConfig+0x172>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ce:	2310      	movs	r3, #16
 80045d0:	6810      	ldr	r0, [r2, #0]
 80045d2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045d4:	4243      	negs	r3, r0
 80045d6:	4158      	adcs	r0, r3
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <UART_SetConfig+0x1dc>)
 80045da:	4240      	negs	r0, r0
 80045dc:	4018      	ands	r0, r3
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <UART_SetConfig+0x1e0>)
 80045e0:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e2:	6863      	ldr	r3, [r4, #4]
 80045e4:	6861      	ldr	r1, [r4, #4]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	1818      	adds	r0, r3, r0
 80045ea:	f7fb fdab 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ee:	0002      	movs	r2, r0
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <UART_SetConfig+0x1ec>)
 80045f2:	3a10      	subs	r2, #16
 80045f4:	e7a7      	b.n	8004546 <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe f95b 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
        break;
 80045fa:	e7e2      	b.n	80045c2 <UART_SetConfig+0x172>
    switch (clocksource)
 80045fc:	2080      	movs	r0, #128	; 0x80
 80045fe:	0200      	lsls	r0, r0, #8
 8004600:	e7ef      	b.n	80045e2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	2001      	movs	r0, #1
 8004606:	0212      	lsls	r2, r2, #8
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <UART_SetConfig+0x1be>
 800460c:	e776      	b.n	80044fc <UART_SetConfig+0xac>
 800460e:	e769      	b.n	80044e4 <UART_SetConfig+0x94>
 8004610:	efff69f3 	.word	0xefff69f3
 8004614:	ffffcfff 	.word	0xffffcfff
 8004618:	40004800 	.word	0x40004800
 800461c:	fffff4ff 	.word	0xfffff4ff
 8004620:	40004400 	.word	0x40004400
 8004624:	40021000 	.word	0x40021000
 8004628:	08006ed1 	.word	0x08006ed1
 800462c:	00b71b00 	.word	0x00b71b00
 8004630:	003d0900 	.word	0x003d0900
 8004634:	fffffd00 	.word	0xfffffd00
 8004638:	000ffcff 	.word	0x000ffcff
 800463c:	0000ffef 	.word	0x0000ffef

08004640 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004640:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004642:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004644:	07da      	lsls	r2, r3, #31
 8004646:	d506      	bpl.n	8004656 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	4c28      	ldr	r4, [pc, #160]	; (80046ec <UART_AdvFeatureConfig+0xac>)
 800464c:	684a      	ldr	r2, [r1, #4]
 800464e:	4022      	ands	r2, r4
 8004650:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004652:	4322      	orrs	r2, r4
 8004654:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004656:	079a      	lsls	r2, r3, #30
 8004658:	d506      	bpl.n	8004668 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800465a:	6801      	ldr	r1, [r0, #0]
 800465c:	4c24      	ldr	r4, [pc, #144]	; (80046f0 <UART_AdvFeatureConfig+0xb0>)
 800465e:	684a      	ldr	r2, [r1, #4]
 8004660:	4022      	ands	r2, r4
 8004662:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004664:	4322      	orrs	r2, r4
 8004666:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004668:	075a      	lsls	r2, r3, #29
 800466a:	d506      	bpl.n	800467a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466c:	6801      	ldr	r1, [r0, #0]
 800466e:	4c21      	ldr	r4, [pc, #132]	; (80046f4 <UART_AdvFeatureConfig+0xb4>)
 8004670:	684a      	ldr	r2, [r1, #4]
 8004672:	4022      	ands	r2, r4
 8004674:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004676:	4322      	orrs	r2, r4
 8004678:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467a:	071a      	lsls	r2, r3, #28
 800467c:	d506      	bpl.n	800468c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800467e:	6801      	ldr	r1, [r0, #0]
 8004680:	4c1d      	ldr	r4, [pc, #116]	; (80046f8 <UART_AdvFeatureConfig+0xb8>)
 8004682:	684a      	ldr	r2, [r1, #4]
 8004684:	4022      	ands	r2, r4
 8004686:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004688:	4322      	orrs	r2, r4
 800468a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800468c:	06da      	lsls	r2, r3, #27
 800468e:	d506      	bpl.n	800469e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	6801      	ldr	r1, [r0, #0]
 8004692:	4c1a      	ldr	r4, [pc, #104]	; (80046fc <UART_AdvFeatureConfig+0xbc>)
 8004694:	688a      	ldr	r2, [r1, #8]
 8004696:	4022      	ands	r2, r4
 8004698:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800469a:	4322      	orrs	r2, r4
 800469c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800469e:	069a      	lsls	r2, r3, #26
 80046a0:	d506      	bpl.n	80046b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046a2:	6801      	ldr	r1, [r0, #0]
 80046a4:	4c16      	ldr	r4, [pc, #88]	; (8004700 <UART_AdvFeatureConfig+0xc0>)
 80046a6:	688a      	ldr	r2, [r1, #8]
 80046a8:	4022      	ands	r2, r4
 80046aa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80046ac:	4322      	orrs	r2, r4
 80046ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	065a      	lsls	r2, r3, #25
 80046b2:	d510      	bpl.n	80046d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b4:	6801      	ldr	r1, [r0, #0]
 80046b6:	4d13      	ldr	r5, [pc, #76]	; (8004704 <UART_AdvFeatureConfig+0xc4>)
 80046b8:	684a      	ldr	r2, [r1, #4]
 80046ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80046bc:	402a      	ands	r2, r5
 80046be:	4322      	orrs	r2, r4
 80046c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	0352      	lsls	r2, r2, #13
 80046c6:	4294      	cmp	r4, r2
 80046c8:	d105      	bne.n	80046d6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ca:	684a      	ldr	r2, [r1, #4]
 80046cc:	4c0e      	ldr	r4, [pc, #56]	; (8004708 <UART_AdvFeatureConfig+0xc8>)
 80046ce:	4022      	ands	r2, r4
 80046d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80046d2:	4322      	orrs	r2, r4
 80046d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	d506      	bpl.n	80046e8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	6802      	ldr	r2, [r0, #0]
 80046dc:	490b      	ldr	r1, [pc, #44]	; (800470c <UART_AdvFeatureConfig+0xcc>)
 80046de:	6853      	ldr	r3, [r2, #4]
 80046e0:	400b      	ands	r3, r1
 80046e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6053      	str	r3, [r2, #4]
}
 80046e8:	bd30      	pop	{r4, r5, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	fffdffff 	.word	0xfffdffff
 80046f0:	fffeffff 	.word	0xfffeffff
 80046f4:	fffbffff 	.word	0xfffbffff
 80046f8:	ffff7fff 	.word	0xffff7fff
 80046fc:	ffffefff 	.word	0xffffefff
 8004700:	ffffdfff 	.word	0xffffdfff
 8004704:	ffefffff 	.word	0xffefffff
 8004708:	ff9fffff 	.word	0xff9fffff
 800470c:	fff7ffff 	.word	0xfff7ffff

08004710 <UART_WaitOnFlagUntilTimeout>:
{
 8004710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004712:	0004      	movs	r4, r0
 8004714:	000d      	movs	r5, r1
 8004716:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004718:	2608      	movs	r6, #8
{
 800471a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	69d3      	ldr	r3, [r2, #28]
 8004720:	402b      	ands	r3, r5
 8004722:	1b5b      	subs	r3, r3, r5
 8004724:	4259      	negs	r1, r3
 8004726:	414b      	adcs	r3, r1
 8004728:	42bb      	cmp	r3, r7
 800472a:	d001      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 800472c:	2000      	movs	r0, #0
 800472e:	e021      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004730:	9b08      	ldr	r3, [sp, #32]
 8004732:	3301      	adds	r3, #1
 8004734:	d0f3      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fd fea1 	bl	800247c <HAL_GetTick>
 800473a:	9b00      	ldr	r3, [sp, #0]
 800473c:	1ac0      	subs	r0, r0, r3
 800473e:	9b08      	ldr	r3, [sp, #32]
 8004740:	4298      	cmp	r0, r3
 8004742:	d828      	bhi.n	8004796 <UART_WaitOnFlagUntilTimeout+0x86>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d026      	beq.n	8004796 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004748:	2104      	movs	r1, #4
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	420a      	tst	r2, r1
 8004750:	d0e4      	beq.n	800471c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	0011      	movs	r1, r2
 8004756:	4031      	ands	r1, r6
 8004758:	9101      	str	r1, [sp, #4]
 800475a:	4232      	tst	r2, r6
 800475c:	d00b      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 800475e:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004760:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8004762:	f7ff fc3f 	bl	8003fe4 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004766:	0023      	movs	r3, r4
 8004768:	3308      	adds	r3, #8
 800476a:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 800476c:	2300      	movs	r3, #0
           return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8004770:	3478      	adds	r4, #120	; 0x78
 8004772:	7023      	strb	r3, [r4, #0]
}
 8004774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	69d9      	ldr	r1, [r3, #28]
 800477a:	0112      	lsls	r2, r2, #4
 800477c:	4211      	tst	r1, r2
 800477e:	d0cd      	beq.n	800471c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004780:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004782:	0020      	movs	r0, r4
 8004784:	f7ff fc2e 	bl	8003fe4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004788:	0023      	movs	r3, r4
 800478a:	2220      	movs	r2, #32
 800478c:	3308      	adds	r3, #8
 800478e:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	3478      	adds	r4, #120	; 0x78
 8004794:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e7ec      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x64>
	...

0800479c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	0003      	movs	r3, r0
{
 800479e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	2500      	movs	r5, #0
{
 80047a2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	3308      	adds	r3, #8
 80047a6:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80047a8:	f7fd fe68 	bl	800247c <HAL_GetTick>
 80047ac:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ae:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80047b0:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3678      	adds	r6, #120	; 0x78
 80047b6:	071b      	lsls	r3, r3, #28
 80047b8:	d51b      	bpl.n	80047f2 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	4b26      	ldr	r3, [pc, #152]	; (8004858 <UART_CheckIdleState+0xbc>)
 80047be:	002a      	movs	r2, r5
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	0389      	lsls	r1, r1, #14
 80047c4:	0003      	movs	r3, r0
 80047c6:	0020      	movs	r0, r4
 80047c8:	f7ff ffa2 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80047cc:	42a8      	cmp	r0, r5
 80047ce:	d010      	beq.n	80047f2 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	2301      	movs	r3, #1
 80047d6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047da:	2080      	movs	r0, #128	; 0x80
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	4383      	bics	r3, r0
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80047e8:	2320      	movs	r3, #32
 80047ea:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80047ec:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 80047ee:	2003      	movs	r0, #3
}
 80047f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f2:	0025      	movs	r5, r4
 80047f4:	cd08      	ldmia	r5!, {r3}
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	075b      	lsls	r3, r3, #29
 80047fa:	d525      	bpl.n	8004848 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <UART_CheckIdleState+0xbc>)
 8004800:	2200      	movs	r2, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	0020      	movs	r0, r4
 8004806:	003b      	movs	r3, r7
 8004808:	03c9      	lsls	r1, r1, #15
 800480a:	f7ff ff81 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 800480e:	2800      	cmp	r0, #0
 8004810:	d01a      	beq.n	8004848 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004812:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	2201      	movs	r2, #1
 8004818:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481c:	6821      	ldr	r1, [r4, #0]
 800481e:	4f0f      	ldr	r7, [pc, #60]	; (800485c <UART_CheckIdleState+0xc0>)
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	403b      	ands	r3, r7
 8004824:	600b      	str	r3, [r1, #0]
 8004826:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	6821      	ldr	r1, [r4, #0]
 8004834:	688b      	ldr	r3, [r1, #8]
 8004836:	4393      	bics	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
 800483a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800483e:	2320      	movs	r3, #32
 8004840:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004842:	2300      	movs	r3, #0
 8004844:	7033      	strb	r3, [r6, #0]
 8004846:	e7d2      	b.n	80047ee <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800484a:	2320      	movs	r3, #32
 800484c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004852:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004854:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8004856:	e7cb      	b.n	80047f0 <UART_CheckIdleState+0x54>
 8004858:	01ffffff 	.word	0x01ffffff
 800485c:	fffffedf 	.word	0xfffffedf

08004860 <HAL_UART_Init>:
{
 8004860:	b510      	push	{r4, lr}
 8004862:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004866:	2001      	movs	r0, #1
}
 8004868:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004870:	0002      	movs	r2, r0
 8004872:	3278      	adds	r2, #120	; 0x78
 8004874:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004876:	f7fd fd0b 	bl	8002290 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800487a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800487c:	2101      	movs	r1, #1
 800487e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004880:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004882:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004884:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004886:	438b      	bics	r3, r1
 8004888:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800488a:	f7ff fde1 	bl	8004450 <UART_SetConfig>
 800488e:	2801      	cmp	r0, #1
 8004890:	d0e9      	beq.n	8004866 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004898:	0020      	movs	r0, r4
 800489a:	f7ff fed1 	bl	8004640 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	4907      	ldr	r1, [pc, #28]	; (80048c0 <HAL_UART_Init+0x60>)
 80048a2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80048a4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	438a      	bics	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048b2:	2201      	movs	r2, #1
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80048ba:	f7ff ff6f 	bl	800479c <UART_CheckIdleState>
 80048be:	e7d3      	b.n	8004868 <HAL_UART_Init+0x8>
 80048c0:	ffffb7ff 	.word	0xffffb7ff

080048c4 <UART_Start_Receive_DMA>:
{
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80048c8:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 80048cc:	3258      	adds	r2, #88	; 0x58
  huart->pRxBuffPtr = pData;
 80048ce:	6541      	str	r1, [r0, #84]	; 0x54
{
 80048d0:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80048d2:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d4:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d8:	1d05      	adds	r5, r0, #4
{
 80048da:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 80048dc:	6f40      	ldr	r0, [r0, #116]	; 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	3608      	adds	r6, #8
 80048e0:	67f2      	str	r2, [r6, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e2:	67e9      	str	r1, [r5, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80048e4:	4290      	cmp	r0, r2
 80048e6:	d013      	beq.n	8004910 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048e8:	491d      	ldr	r1, [pc, #116]	; (8004960 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80048ea:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048ec:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048ee:	491d      	ldr	r1, [pc, #116]	; (8004964 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80048f0:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048f2:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80048f4:	491c      	ldr	r1, [pc, #112]	; (8004968 <UART_Start_Receive_DMA+0xa4>)
 80048f6:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80048f8:	6821      	ldr	r1, [r4, #0]
 80048fa:	3124      	adds	r1, #36	; 0x24
 80048fc:	f7fd fe3e 	bl	800257c <HAL_DMA_Start_IT>
 8004900:	2800      	cmp	r0, #0
 8004902:	d005      	beq.n	8004910 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004904:	2310      	movs	r3, #16
      return HAL_ERROR;
 8004906:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004908:	67f3      	str	r3, [r6, #124]	; 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 800490a:	18db      	adds	r3, r3, r3
 800490c:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004916:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491a:	2301      	movs	r3, #1
 800491c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	33ff      	adds	r3, #255	; 0xff
 8004924:	6810      	ldr	r0, [r2, #0]
 8004926:	4303      	orrs	r3, r0
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	2301      	movs	r3, #1
 8004934:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	6821      	ldr	r1, [r4, #0]
 800493a:	688a      	ldr	r2, [r1, #8]
 800493c:	431a      	orrs	r2, r3
 800493e:	608a      	str	r2, [r1, #8]
 8004940:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	333f      	adds	r3, #63	; 0x3f
 8004950:	6890      	ldr	r0, [r2, #8]
 8004952:	4303      	orrs	r3, r0
 8004954:	6093      	str	r3, [r2, #8]
 8004956:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800495a:	2000      	movs	r0, #0
 800495c:	e7d7      	b.n	800490e <UART_Start_Receive_DMA+0x4a>
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	080043b1 	.word	0x080043b1
 8004964:	0800438d 	.word	0x0800438d
 8004968:	08004045 	.word	0x08004045

0800496c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800496c:	1d03      	adds	r3, r0, #4
{
 800496e:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004970:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004974:	2c20      	cmp	r4, #32
 8004976:	d128      	bne.n	80049ca <HAL_UART_Receive_DMA+0x5e>
      return HAL_ERROR;
 8004978:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 800497a:	2900      	cmp	r1, #0
 800497c:	d025      	beq.n	80049ca <HAL_UART_Receive_DMA+0x5e>
 800497e:	2a00      	cmp	r2, #0
 8004980:	d023      	beq.n	80049ca <HAL_UART_Receive_DMA+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	6884      	ldr	r4, [r0, #8]
 8004986:	015b      	lsls	r3, r3, #5
 8004988:	429c      	cmp	r4, r3
 800498a:	d105      	bne.n	8004998 <HAL_UART_Receive_DMA+0x2c>
 800498c:	6903      	ldr	r3, [r0, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_UART_Receive_DMA+0x2c>
      return HAL_ERROR;
 8004992:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004994:	4219      	tst	r1, r3
 8004996:	d118      	bne.n	80049ca <HAL_UART_Receive_DMA+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004998:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800499a:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <HAL_UART_Receive_DMA+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499c:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	d00f      	beq.n	80049c4 <HAL_UART_Receive_DMA+0x58>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	d50c      	bpl.n	80049c4 <HAL_UART_Receive_DMA+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049aa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	2301      	movs	r3, #1
 80049b0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	6804      	ldr	r4, [r0, #0]
 80049b8:	04db      	lsls	r3, r3, #19
 80049ba:	6826      	ldr	r6, [r4, #0]
 80049bc:	4333      	orrs	r3, r6
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049c4:	f7ff ff7e 	bl	80048c4 <UART_Start_Receive_DMA>
 80049c8:	0003      	movs	r3, r0
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	40004800 	.word	0x40004800

080049d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049d4:	4770      	bx	lr

080049d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049d6:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80049d8:	f000 faa2 	bl	8004f20 <vTaskStartScheduler>
  
  return osOK;
}
 80049dc:	2000      	movs	r0, #0
 80049de:	bd10      	pop	{r4, pc}

080049e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049e0:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d100      	bne.n	80049e8 <osDelay+0x8>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 fbba 	bl	8005160 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049ec:	2000      	movs	r0, #0
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f0:	0003      	movs	r3, r0
 80049f2:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049f4:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049fa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049fc:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049fe:	4252      	negs	r2, r2
 8004a00:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a02:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a04:	4770      	bx	lr

08004a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a0a:	4770      	bx	lr

08004a0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a0c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a0e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004a10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a12:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a18:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004a1a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004a1c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a1e:	3301      	adds	r3, #1
 8004a20:	6003      	str	r3, [r0, #0]
}
 8004a22:	4770      	bx	lr

08004a24 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a24:	0002      	movs	r2, r0
{
 8004a26:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a28:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a2a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8004a2c:	1c63      	adds	r3, r4, #1
 8004a2e:	d10a      	bne.n	8004a46 <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a30:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a36:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a38:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a3a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004a3c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004a3e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a40:	3301      	adds	r3, #1
 8004a42:	6003      	str	r3, [r0, #0]
}
 8004a44:	bd30      	pop	{r4, r5, pc}
 8004a46:	0013      	movs	r3, r2
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a48:	6852      	ldr	r2, [r2, #4]
 8004a4a:	6815      	ldr	r5, [r2, #0]
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d9fa      	bls.n	8004a46 <vListInsert+0x22>
 8004a50:	e7ef      	b.n	8004a32 <vListInsert+0xe>

08004a52 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a52:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a54:	6841      	ldr	r1, [r0, #4]
 8004a56:	6882      	ldr	r2, [r0, #8]
 8004a58:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a5a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	4281      	cmp	r1, r0
 8004a60:	d100      	bne.n	8004a64 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a64:	2200      	movs	r2, #0
 8004a66:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a6e:	6818      	ldr	r0, [r3, #0]
}
 8004a70:	4770      	bx	lr

08004a72 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a72:	b510      	push	{r4, lr}
 8004a74:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a76:	f000 fcdd 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a7a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004a7c:	f000 fce6 	bl	800544c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a80:	4260      	negs	r0, r4
 8004a82:	4160      	adcs	r0, r4

	return xReturn;
}
 8004a84:	bd10      	pop	{r4, pc}

08004a86 <prvUnlockQueue>:
{
 8004a86:	b570      	push	{r4, r5, r6, lr}
 8004a88:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 8004a8a:	0026      	movs	r6, r4
 8004a8c:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 8004a8e:	f000 fcd1 	bl	8005434 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004a92:	7835      	ldrb	r5, [r6, #0]
 8004a94:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	dc10      	bgt.n	8004abc <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 8004a9a:	23ff      	movs	r3, #255	; 0xff
 8004a9c:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 8004a9e:	0026      	movs	r6, r4
 8004aa0:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 8004aa2:	f000 fcd3 	bl	800544c <vPortExitCritical>
	taskENTER_CRITICAL();
 8004aa6:	f000 fcc5 	bl	8005434 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004aaa:	7835      	ldrb	r5, [r6, #0]
 8004aac:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	dc11      	bgt.n	8004ad6 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8004ab2:	23ff      	movs	r3, #255	; 0xff
 8004ab4:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 8004ab6:	f000 fcc9 	bl	800544c <vPortExitCritical>
}
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0eb      	beq.n	8004a9a <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac2:	0020      	movs	r0, r4
 8004ac4:	3024      	adds	r0, #36	; 0x24
 8004ac6:	f000 fbab 	bl	8005220 <xTaskRemoveFromEventList>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d001      	beq.n	8004ad2 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 8004ace:	f000 fc1f 	bl	8005310 <vTaskMissedYield>
 8004ad2:	3d01      	subs	r5, #1
 8004ad4:	e7de      	b.n	8004a94 <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ea      	beq.n	8004ab2 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004adc:	0020      	movs	r0, r4
 8004ade:	3010      	adds	r0, #16
 8004ae0:	f000 fb9e 	bl	8005220 <xTaskRemoveFromEventList>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d001      	beq.n	8004aec <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8004ae8:	f000 fc12 	bl	8005310 <vTaskMissedYield>
 8004aec:	3d01      	subs	r5, #1
 8004aee:	e7dd      	b.n	8004aac <prvUnlockQueue+0x26>

08004af0 <xQueueGenericReset>:
{
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	0004      	movs	r4, r0
 8004af4:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d101      	bne.n	8004afe <xQueueGenericReset+0xe>
 8004afa:	b672      	cpsid	i
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8004afe:	f000 fc99 	bl	8005434 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	434b      	muls	r3, r1
 8004b0a:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0c:	1a5b      	subs	r3, r3, r1
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b12:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b14:	60a0      	str	r0, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b16:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b18:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004b1a:	22ff      	movs	r2, #255	; 0xff
 8004b1c:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b1e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004b20:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8004b22:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 8004b24:	4285      	cmp	r5, r0
 8004b26:	d10e      	bne.n	8004b46 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	d007      	beq.n	8004b3e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b2e:	0020      	movs	r0, r4
 8004b30:	3010      	adds	r0, #16
 8004b32:	f000 fb75 	bl	8005220 <xTaskRemoveFromEventList>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d001      	beq.n	8004b3e <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 8004b3a:	f000 fc6f 	bl	800541c <vPortYield>
	taskEXIT_CRITICAL();
 8004b3e:	f000 fc85 	bl	800544c <vPortExitCritical>
}
 8004b42:	2001      	movs	r0, #1
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b46:	0020      	movs	r0, r4
 8004b48:	3010      	adds	r0, #16
 8004b4a:	f7ff ff51 	bl	80049f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b4e:	0020      	movs	r0, r4
 8004b50:	3024      	adds	r0, #36	; 0x24
 8004b52:	f7ff ff4d 	bl	80049f0 <vListInitialise>
 8004b56:	e7f2      	b.n	8004b3e <xQueueGenericReset+0x4e>

08004b58 <xQueueGenericCreateStatic>:
	{
 8004b58:	b513      	push	{r0, r1, r4, lr}
 8004b5a:	001c      	movs	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d101      	bne.n	8004b64 <xQueueGenericCreateStatic+0xc>
 8004b60:	b672      	cpsid	i
 8004b62:	e7fe      	b.n	8004b62 <xQueueGenericCreateStatic+0xa>
		configASSERT( pxStaticQueue != NULL );
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <xQueueGenericCreateStatic+0x14>
 8004b68:	b672      	cpsid	i
 8004b6a:	e7fe      	b.n	8004b6a <xQueueGenericCreateStatic+0x12>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6c:	2a00      	cmp	r2, #0
 8004b6e:	d003      	beq.n	8004b78 <xQueueGenericCreateStatic+0x20>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d105      	bne.n	8004b80 <xQueueGenericCreateStatic+0x28>
 8004b74:	b672      	cpsid	i
 8004b76:	e7fe      	b.n	8004b76 <xQueueGenericCreateStatic+0x1e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d001      	beq.n	8004b80 <xQueueGenericCreateStatic+0x28>
 8004b7c:	b672      	cpsid	i
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGenericCreateStatic+0x26>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b80:	2348      	movs	r3, #72	; 0x48
 8004b82:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b84:	9b01      	ldr	r3, [sp, #4]
 8004b86:	2b48      	cmp	r3, #72	; 0x48
 8004b88:	d001      	beq.n	8004b8e <xQueueGenericCreateStatic+0x36>
 8004b8a:	b672      	cpsid	i
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericCreateStatic+0x34>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b8e:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b90:	2900      	cmp	r1, #0
 8004b92:	d100      	bne.n	8004b96 <xQueueGenericCreateStatic+0x3e>
 8004b94:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004b96:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b98:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	f7ff ffa6 	bl	8004af0 <xQueueGenericReset>
	}
 8004ba4:	0020      	movs	r0, r4
 8004ba6:	bd16      	pop	{r1, r2, r4, pc}

08004ba8 <xQueueGiveFromISR>:
{
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	0004      	movs	r4, r0
 8004bac:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d101      	bne.n	8004bb6 <xQueueGiveFromISR+0xe>
 8004bb2:	b672      	cpsid	i
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGiveFromISR+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <xQueueGiveFromISR+0x18>
 8004bbc:	b672      	cpsid	i
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004bc0:	6803      	ldr	r3, [r0, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <xQueueGiveFromISR+0x28>
 8004bc6:	6883      	ldr	r3, [r0, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <xQueueGiveFromISR+0x28>
 8004bcc:	b672      	cpsid	i
 8004bce:	e7fe      	b.n	8004bce <xQueueGiveFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bd0:	f000 fc4a 	bl	8005468 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bd8:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 8004bda:	2700      	movs	r7, #0
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d916      	bls.n	8004c0e <xQueueGiveFromISR+0x66>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004be0:	0021      	movs	r1, r4
 8004be2:	3145      	adds	r1, #69	; 0x45
 8004be4:	780b      	ldrb	r3, [r1, #0]
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004be6:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004be8:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bea:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	d113      	bne.n	8004c18 <xQueueGiveFromISR+0x70>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf2:	42bb      	cmp	r3, r7
 8004bf4:	d101      	bne.n	8004bfa <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 8004bf6:	2701      	movs	r7, #1
 8004bf8:	e009      	b.n	8004c0e <xQueueGiveFromISR+0x66>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bfa:	0020      	movs	r0, r4
 8004bfc:	3024      	adds	r0, #36	; 0x24
 8004bfe:	f000 fb0f 	bl	8005220 <xTaskRemoveFromEventList>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0f7      	beq.n	8004bf6 <xQueueGiveFromISR+0x4e>
							if( pxHigherPriorityTaskWoken != NULL )
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	d0f5      	beq.n	8004bf6 <xQueueGiveFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c0a:	2701      	movs	r7, #1
 8004c0c:	602f      	str	r7, [r5, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004c0e:	0030      	movs	r0, r6
 8004c10:	f000 fc2e 	bl	8005470 <vClearInterruptMaskFromISR>
}
 8004c14:	0038      	movs	r0, r7
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c18:	3301      	adds	r3, #1
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	700b      	strb	r3, [r1, #0]
 8004c1e:	e7ea      	b.n	8004bf6 <xQueueGiveFromISR+0x4e>

08004c20 <xQueueSemaphoreTake>:
{
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	1e04      	subs	r4, r0, #0
 8004c26:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004c28:	d101      	bne.n	8004c2e <xQueueSemaphoreTake+0xe>
 8004c2a:	b672      	cpsid	i
 8004c2c:	e7fe      	b.n	8004c2c <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c2e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	d001      	beq.n	8004c38 <xQueueSemaphoreTake+0x18>
 8004c34:	b672      	cpsid	i
 8004c36:	e7fe      	b.n	8004c36 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c38:	f000 fb70 	bl	800531c <xTaskGetSchedulerState>
 8004c3c:	1e06      	subs	r6, r0, #0
 8004c3e:	d104      	bne.n	8004c4a <xQueueSemaphoreTake+0x2a>
 8004c40:	9b01      	ldr	r3, [sp, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <xQueueSemaphoreTake+0x2c>
 8004c46:	b672      	cpsid	i
 8004c48:	e7fe      	b.n	8004c48 <xQueueSemaphoreTake+0x28>
 8004c4a:	002e      	movs	r6, r5
 8004c4c:	2701      	movs	r7, #1
 8004c4e:	e03d      	b.n	8004ccc <xQueueSemaphoreTake+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c50:	9d01      	ldr	r5, [sp, #4]
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	d103      	bne.n	8004c5e <xQueueSemaphoreTake+0x3e>
					taskEXIT_CRITICAL();
 8004c56:	f000 fbf9 	bl	800544c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	e04b      	b.n	8004cf6 <xQueueSemaphoreTake+0xd6>
				else if( xEntryTimeSet == pdFALSE )
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d102      	bne.n	8004c68 <xQueueSemaphoreTake+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c62:	a802      	add	r0, sp, #8
 8004c64:	f000 fb18 	bl	8005298 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004c68:	f000 fbf0 	bl	800544c <vPortExitCritical>
		vTaskSuspendAll();
 8004c6c:	f000 f988 	bl	8004f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c70:	f000 fbe0 	bl	8005434 <vPortEnterCritical>
 8004c74:	0022      	movs	r2, r4
 8004c76:	3244      	adds	r2, #68	; 0x44
 8004c78:	7813      	ldrb	r3, [r2, #0]
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <xQueueSemaphoreTake+0x64>
 8004c80:	2300      	movs	r3, #0
 8004c82:	7013      	strb	r3, [r2, #0]
 8004c84:	0022      	movs	r2, r4
 8004c86:	3245      	adds	r2, #69	; 0x45
 8004c88:	7813      	ldrb	r3, [r2, #0]
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <xQueueSemaphoreTake+0x74>
 8004c90:	2300      	movs	r3, #0
 8004c92:	7013      	strb	r3, [r2, #0]
 8004c94:	f000 fbda 	bl	800544c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c98:	a901      	add	r1, sp, #4
 8004c9a:	a802      	add	r0, sp, #8
 8004c9c:	f000 fb08 	bl	80052b0 <xTaskCheckForTimeOut>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d130      	bne.n	8004d06 <xQueueSemaphoreTake+0xe6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	f7ff fee4 	bl	8004a72 <prvIsQueueEmpty>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d025      	beq.n	8004cfa <xQueueSemaphoreTake+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cae:	0020      	movs	r0, r4
 8004cb0:	9901      	ldr	r1, [sp, #4]
 8004cb2:	3024      	adds	r0, #36	; 0x24
 8004cb4:	f000 faa2 	bl	80051fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb8:	0020      	movs	r0, r4
 8004cba:	f7ff fee4 	bl	8004a86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cbe:	f000 f9e7 	bl	8005090 <xTaskResumeAll>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d101      	bne.n	8004cca <xQueueSemaphoreTake+0xaa>
					portYIELD_WITHIN_API();
 8004cc6:	f000 fba9 	bl	800541c <vPortYield>
 8004cca:	003e      	movs	r6, r7
		taskENTER_CRITICAL();
 8004ccc:	f000 fbb2 	bl	8005434 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0bc      	beq.n	8004c50 <xQueueSemaphoreTake+0x30>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <xQueueSemaphoreTake+0xd0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce0:	0020      	movs	r0, r4
 8004ce2:	3010      	adds	r0, #16
 8004ce4:	f000 fa9c 	bl	8005220 <xTaskRemoveFromEventList>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d001      	beq.n	8004cf0 <xQueueSemaphoreTake+0xd0>
						queueYIELD_IF_USING_PREEMPTION();
 8004cec:	f000 fb96 	bl	800541c <vPortYield>
				taskEXIT_CRITICAL();
 8004cf0:	f000 fbac 	bl	800544c <vPortExitCritical>
				return pdPASS;
 8004cf4:	2001      	movs	r0, #1
}
 8004cf6:	b005      	add	sp, #20
 8004cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004cfa:	0020      	movs	r0, r4
 8004cfc:	f7ff fec3 	bl	8004a86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d00:	f000 f9c6 	bl	8005090 <xTaskResumeAll>
 8004d04:	e7e1      	b.n	8004cca <xQueueSemaphoreTake+0xaa>
			prvUnlockQueue( pxQueue );
 8004d06:	0020      	movs	r0, r4
 8004d08:	f7ff febd 	bl	8004a86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d0c:	f000 f9c0 	bl	8005090 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d10:	0020      	movs	r0, r4
 8004d12:	f7ff feae 	bl	8004a72 <prvIsQueueEmpty>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0d7      	beq.n	8004cca <xQueueSemaphoreTake+0xaa>
 8004d1a:	e79e      	b.n	8004c5a <xQueueSemaphoreTake+0x3a>

08004d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d1c:	b510      	push	{r4, lr}

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d1e:	4a03      	ldr	r2, [pc, #12]	; (8004d2c <prvIdleTask+0x10>)
 8004d20:	6813      	ldr	r3, [r2, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d9fc      	bls.n	8004d20 <prvIdleTask+0x4>
			{
				taskYIELD();
 8004d26:	f000 fb79 	bl	800541c <vPortYield>
 8004d2a:	e7f8      	b.n	8004d1e <prvIdleTask+0x2>
 8004d2c:	200005dc 	.word	0x200005dc

08004d30 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d30:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <prvResetNextTaskUnblockTime+0x20>)
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <prvResetNextTaskUnblockTime+0x24>)
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d103      	bne.n	8004d44 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d40:	601a      	str	r2, [r3, #0]
	}
}
 8004d42:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	6852      	ldr	r2, [r2, #4]
 8004d4c:	e7f8      	b.n	8004d40 <prvResetNextTaskUnblockTime+0x10>
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	200005d4 	.word	0x200005d4
 8004d54:	200006a4 	.word	0x200006a4

08004d58 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	0004      	movs	r4, r0
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <prvAddCurrentTaskToDelayedList.constprop.0+0x44>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	4d10      	ldr	r5, [pc, #64]	; (8004da0 <prvAddCurrentTaskToDelayedList.constprop.0+0x48>)
const TickType_t xConstTickCount = xTickCount;
 8004d60:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d62:	6828      	ldr	r0, [r5, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8004d64:	1934      	adds	r4, r6, r4
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d66:	3004      	adds	r0, #4
 8004d68:	f7ff fe73 	bl	8004a52 <uxListRemove>

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d906      	bls.n	8004d82 <prvAddCurrentTaskToDelayedList.constprop.0+0x2a>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	6829      	ldr	r1, [r5, #0]
 8004d7a:	3104      	adds	r1, #4
 8004d7c:	f7ff fe52 	bl	8004a24 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <prvAddCurrentTaskToDelayedList.constprop.0+0x50>)
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	3104      	adds	r1, #4
 8004d8a:	f7ff fe4b 	bl	8004a24 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <prvAddCurrentTaskToDelayedList.constprop.0+0x54>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4294      	cmp	r4, r2
 8004d94:	d2f4      	bcs.n	8004d80 <prvAddCurrentTaskToDelayedList.constprop.0+0x28>
				xNextTaskUnblockTime = xTimeToWake;
 8004d96:	601c      	str	r4, [r3, #0]
}
 8004d98:	e7f2      	b.n	8004d80 <prvAddCurrentTaskToDelayedList.constprop.0+0x28>
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	200006c4 	.word	0x200006c4
 8004da0:	200005d0 	.word	0x200005d0
 8004da4:	200005d8 	.word	0x200005d8
 8004da8:	200005d4 	.word	0x200005d4
 8004dac:	200006a4 	.word	0x200006a4

08004db0 <xTaskCreateStatic>:
	{
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db2:	b085      	sub	sp, #20
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004db8:	0006      	movs	r6, r0
 8004dba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xTaskCreateStatic+0x14>
 8004dc0:	b672      	cpsid	i
 8004dc2:	e7fe      	b.n	8004dc2 <xTaskCreateStatic+0x12>
		configASSERT( pxTaskBuffer != NULL );
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d101      	bne.n	8004dcc <xTaskCreateStatic+0x1c>
 8004dc8:	b672      	cpsid	i
 8004dca:	e7fe      	b.n	8004dca <xTaskCreateStatic+0x1a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dcc:	204c      	movs	r0, #76	; 0x4c
 8004dce:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dd0:	9803      	ldr	r0, [sp, #12]
 8004dd2:	284c      	cmp	r0, #76	; 0x4c
 8004dd4:	d001      	beq.n	8004dda <xTaskCreateStatic+0x2a>
 8004dd6:	b672      	cpsid	i
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCreateStatic+0x28>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dda:	9803      	ldr	r0, [sp, #12]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ddc:	4844      	ldr	r0, [pc, #272]	; (8004ef0 <xTaskCreateStatic+0x140>)
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dde:	6323      	str	r3, [r4, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004de0:	1812      	adds	r2, r2, r0
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	189a      	adds	r2, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004de6:	2307      	movs	r3, #7
 8004de8:	439a      	bics	r2, r3
 8004dea:	9200      	str	r2, [sp, #0]
 8004dec:	0022      	movs	r2, r4
 8004dee:	3234      	adds	r2, #52	; 0x34
	if( pcName != NULL )
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d100      	bne.n	8004df6 <xTaskCreateStatic+0x46>
 8004df4:	e06f      	b.n	8004ed6 <xTaskCreateStatic+0x126>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df6:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004df8:	5cc8      	ldrb	r0, [r1, r3]
 8004dfa:	54d0      	strb	r0, [r2, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d002      	beq.n	8004e06 <xTaskCreateStatic+0x56>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e00:	3301      	adds	r3, #1
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d1f8      	bne.n	8004df8 <xTaskCreateStatic+0x48>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e06:	0023      	movs	r3, r4
 8004e08:	2200      	movs	r2, #0
 8004e0a:	3343      	adds	r3, #67	; 0x43
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004e10:	2d06      	cmp	r5, #6
 8004e12:	d900      	bls.n	8004e16 <xTaskCreateStatic+0x66>
 8004e14:	2506      	movs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e16:	1d27      	adds	r7, r4, #4
 8004e18:	0038      	movs	r0, r7
	pxNewTCB->uxPriority = uxPriority;
 8004e1a:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e1c:	f7ff fdf3 	bl	8004a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e20:	0020      	movs	r0, r4
 8004e22:	3018      	adds	r0, #24
 8004e24:	f7ff fdef 	bl	8004a06 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	2307      	movs	r3, #7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e2a:	0022      	movs	r2, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2c:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ulNotifiedValue = 0;
 8004e2e:	2300      	movs	r3, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e30:	3248      	adds	r2, #72	; 0x48
		pxNewTCB->ulNotifiedValue = 0;
 8004e32:	6463      	str	r3, [r4, #68]	; 0x44
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e34:	0031      	movs	r1, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e36:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e38:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e3a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e3c:	9800      	ldr	r0, [sp, #0]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e3e:	7013      	strb	r3, [r2, #0]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e40:	9a01      	ldr	r2, [sp, #4]
 8004e42:	f000 faa7 	bl	8005394 <pxPortInitialiseStack>
 8004e46:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 8004e48:	f000 faf4 	bl	8005434 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <xTaskCreateStatic+0x144>)
		if( pxCurrentTCB == NULL )
 8004e4e:	4d2a      	ldr	r5, [pc, #168]	; (8004ef8 <xTaskCreateStatic+0x148>)
		uxCurrentNumberOfTasks++;
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	3201      	adds	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004e56:	682e      	ldr	r6, [r5, #0]
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d13e      	bne.n	8004eda <xTaskCreateStatic+0x12a>
			pxCurrentTCB = pxNewTCB;
 8004e5c:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d117      	bne.n	8004e94 <xTaskCreateStatic+0xe4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e64:	2014      	movs	r0, #20
 8004e66:	4370      	muls	r0, r6
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <xTaskCreateStatic+0x14c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e6a:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e6c:	1818      	adds	r0, r3, r0
 8004e6e:	f7ff fdbf 	bl	80049f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e72:	2e07      	cmp	r6, #7
 8004e74:	d1f6      	bne.n	8004e64 <xTaskCreateStatic+0xb4>
	vListInitialise( &xDelayedTaskList1 );
 8004e76:	4e22      	ldr	r6, [pc, #136]	; (8004f00 <xTaskCreateStatic+0x150>)
 8004e78:	0030      	movs	r0, r6
 8004e7a:	f7ff fdb9 	bl	80049f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e7e:	4821      	ldr	r0, [pc, #132]	; (8004f04 <xTaskCreateStatic+0x154>)
 8004e80:	f7ff fdb6 	bl	80049f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e84:	4820      	ldr	r0, [pc, #128]	; (8004f08 <xTaskCreateStatic+0x158>)
 8004e86:	f7ff fdb3 	bl	80049f0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <xTaskCreateStatic+0x15c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <xTaskCreateStatic+0x154>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e8e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e90:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <xTaskCreateStatic+0x160>)
 8004e92:	601a      	str	r2, [r3, #0]
		uxTaskNumber++;
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <xTaskCreateStatic+0x164>)
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <xTaskCreateStatic+0x168>)
 8004e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ea0:	6811      	ldr	r1, [r2, #0]
 8004ea2:	428b      	cmp	r3, r1
 8004ea4:	d900      	bls.n	8004ea8 <xTaskCreateStatic+0xf8>
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	2014      	movs	r0, #20
 8004eaa:	4358      	muls	r0, r3
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <xTaskCreateStatic+0x14c>)
 8004eae:	0039      	movs	r1, r7
 8004eb0:	1818      	adds	r0, r3, r0
 8004eb2:	f7ff fdab 	bl	8004a0c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004eb6:	f000 fac9 	bl	800544c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <xTaskCreateStatic+0x16c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <xTaskCreateStatic+0x120>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ec2:	682b      	ldr	r3, [r5, #0]
 8004ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d201      	bcs.n	8004ed0 <xTaskCreateStatic+0x120>
			taskYIELD_IF_USING_PREEMPTION();
 8004ecc:	f000 faa6 	bl	800541c <vPortYield>
	}
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	b005      	add	sp, #20
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ed6:	7011      	strb	r1, [r2, #0]
 8004ed8:	e799      	b.n	8004e0e <xTaskCreateStatic+0x5e>
			if( xSchedulerRunning == pdFALSE )
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <xTaskCreateStatic+0x16c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1d8      	bne.n	8004e94 <xTaskCreateStatic+0xe4>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3d3      	bcc.n	8004e94 <xTaskCreateStatic+0xe4>
					pxCurrentTCB = pxNewTCB;
 8004eec:	602c      	str	r4, [r5, #0]
 8004eee:	e7d1      	b.n	8004e94 <xTaskCreateStatic+0xe4>
 8004ef0:	3fffffff 	.word	0x3fffffff
 8004ef4:	20000668 	.word	0x20000668
 8004ef8:	200005d0 	.word	0x200005d0
 8004efc:	200005dc 	.word	0x200005dc
 8004f00:	2000067c 	.word	0x2000067c
 8004f04:	20000690 	.word	0x20000690
 8004f08:	200006ac 	.word	0x200006ac
 8004f0c:	200005d4 	.word	0x200005d4
 8004f10:	200005d8 	.word	0x200005d8
 8004f14:	20000674 	.word	0x20000674
 8004f18:	20000678 	.word	0x20000678
 8004f1c:	200006c0 	.word	0x200006c0

08004f20 <vTaskStartScheduler>:
{
 8004f20:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f22:	2400      	movs	r4, #0
{
 8004f24:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f26:	aa07      	add	r2, sp, #28
 8004f28:	a906      	add	r1, sp, #24
 8004f2a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f2c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f2e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f30:	f7fc fef8 	bl	8001d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f34:	9b05      	ldr	r3, [sp, #20]
 8004f36:	9a07      	ldr	r2, [sp, #28]
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	9b06      	ldr	r3, [sp, #24]
 8004f3c:	490b      	ldr	r1, [pc, #44]	; (8004f6c <vTaskStartScheduler+0x4c>)
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	480b      	ldr	r0, [pc, #44]	; (8004f70 <vTaskStartScheduler+0x50>)
 8004f42:	0023      	movs	r3, r4
 8004f44:	9400      	str	r4, [sp, #0]
 8004f46:	f7ff ff33 	bl	8004db0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004f4a:	42a0      	cmp	r0, r4
 8004f4c:	d00b      	beq.n	8004f66 <vTaskStartScheduler+0x46>
		portDISABLE_INTERRUPTS();
 8004f4e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f50:	2201      	movs	r2, #1
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <vTaskStartScheduler+0x54>)
 8004f54:	4252      	negs	r2, r2
 8004f56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <vTaskStartScheduler+0x58>)
 8004f5a:	3202      	adds	r2, #2
 8004f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <vTaskStartScheduler+0x5c>)
 8004f60:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004f62:	f000 fa29 	bl	80053b8 <xPortStartScheduler>
}
 8004f66:	b008      	add	sp, #32
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	08006ede 	.word	0x08006ede
 8004f70:	08004d1d 	.word	0x08004d1d
 8004f74:	200006a4 	.word	0x200006a4
 8004f78:	200006c0 	.word	0x200006c0
 8004f7c:	200006c4 	.word	0x200006c4

08004f80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004f80:	4a02      	ldr	r2, [pc, #8]	; (8004f8c <vTaskSuspendAll+0xc>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	6013      	str	r3, [r2, #0]
}
 8004f88:	4770      	bx	lr
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	20000670 	.word	0x20000670

08004f90 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <xTaskIncrementTick+0xd4>)
{
 8004f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d15e      	bne.n	8005058 <xTaskIncrementTick+0xc8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <xTaskIncrementTick+0xd8>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	3201      	adds	r2, #1
 8004fa0:	9200      	str	r2, [sp, #0]
		xTickCount = xConstTickCount;
 8004fa2:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d111      	bne.n	8004fcc <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <xTaskIncrementTick+0xdc>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d001      	beq.n	8004fb6 <xTaskIncrementTick+0x26>
 8004fb2:	b672      	cpsid	i
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskIncrementTick+0x24>
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	; (8005070 <xTaskIncrementTick+0xe0>)
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	6810      	ldr	r0, [r2, #0]
 8004fbc:	6018      	str	r0, [r3, #0]
 8004fbe:	6011      	str	r1, [r2, #0]
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <xTaskIncrementTick+0xe4>)
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	f7ff feb2 	bl	8004d30 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fcc:	4e2a      	ldr	r6, [pc, #168]	; (8005078 <xTaskIncrementTick+0xe8>)
 8004fce:	9a00      	ldr	r2, [sp, #0]
 8004fd0:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004fd2:	2400      	movs	r4, #0
 8004fd4:	4f29      	ldr	r7, [pc, #164]	; (800507c <xTaskIncrementTick+0xec>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d935      	bls.n	8005046 <xTaskIncrementTick+0xb6>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	2314      	movs	r3, #20
 8004fe0:	4353      	muls	r3, r2
 8004fe2:	4a27      	ldr	r2, [pc, #156]	; (8005080 <xTaskIncrementTick+0xf0>)
 8004fe4:	58d3      	ldr	r3, [r2, r3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d900      	bls.n	8004fec <xTaskIncrementTick+0x5c>
				xSwitchRequired = pdTRUE;
 8004fea:	2401      	movs	r4, #1
		if( xYieldPending != pdFALSE )
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <xTaskIncrementTick+0xf4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d000      	beq.n	8004ff6 <xTaskIncrementTick+0x66>
			xSwitchRequired = pdTRUE;
 8004ff4:	2401      	movs	r4, #1
}
 8004ff6:	0020      	movs	r0, r4
 8004ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffa:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 8004ffc:	9a00      	ldr	r2, [sp, #0]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005002:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8005004:	429a      	cmp	r2, r3
 8005006:	d325      	bcc.n	8005054 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005008:	1d2b      	adds	r3, r5, #4
 800500a:	0018      	movs	r0, r3
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f7ff fd20 	bl	8004a52 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005012:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <xTaskIncrementTick+0x90>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005018:	0028      	movs	r0, r5
 800501a:	3018      	adds	r0, #24
 800501c:	f7ff fd19 	bl	8004a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <xTaskIncrementTick+0xf8>)
 8005022:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4290      	cmp	r0, r2
 8005028:	d900      	bls.n	800502c <xTaskIncrementTick+0x9c>
 800502a:	6018      	str	r0, [r3, #0]
 800502c:	2314      	movs	r3, #20
 800502e:	4358      	muls	r0, r3
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <xTaskIncrementTick+0xf0>)
 8005032:	1d29      	adds	r1, r5, #4
 8005034:	1818      	adds	r0, r3, r0
 8005036:	f7ff fce9 	bl	8004a0c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	429a      	cmp	r2, r3
 8005042:	d300      	bcc.n	8005046 <xTaskIncrementTick+0xb6>
							xSwitchRequired = pdTRUE;
 8005044:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <xTaskIncrementTick+0xdc>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	2a00      	cmp	r2, #0
 800504e:	d1d4      	bne.n	8004ffa <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005050:	2301      	movs	r3, #1
 8005052:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 8005054:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005056:	e7c0      	b.n	8004fda <xTaskIncrementTick+0x4a>
		++uxPendedTicks;
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <xTaskIncrementTick+0xfc>)
BaseType_t xSwitchRequired = pdFALSE;
 800505a:	2400      	movs	r4, #0
		++uxPendedTicks;
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e7c3      	b.n	8004fec <xTaskIncrementTick+0x5c>
 8005064:	20000670 	.word	0x20000670
 8005068:	200006c4 	.word	0x200006c4
 800506c:	200005d4 	.word	0x200005d4
 8005070:	200005d8 	.word	0x200005d8
 8005074:	200006a8 	.word	0x200006a8
 8005078:	200006a4 	.word	0x200006a4
 800507c:	200005d0 	.word	0x200005d0
 8005080:	200005dc 	.word	0x200005dc
 8005084:	200006c8 	.word	0x200006c8
 8005088:	20000678 	.word	0x20000678
 800508c:	2000066c 	.word	0x2000066c

08005090 <xTaskResumeAll>:
{
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8005092:	4c2b      	ldr	r4, [pc, #172]	; (8005140 <xTaskResumeAll+0xb0>)
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <xTaskResumeAll+0xe>
 800509a:	b672      	cpsid	i
 800509c:	e7fe      	b.n	800509c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800509e:	f000 f9c9 	bl	8005434 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a8:	6824      	ldr	r4, [r4, #0]
 80050aa:	2c00      	cmp	r4, #0
 80050ac:	d004      	beq.n	80050b8 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 80050ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80050b0:	f000 f9cc 	bl	800544c <vPortExitCritical>
}
 80050b4:	0020      	movs	r0, r4
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050b8:	4b22      	ldr	r3, [pc, #136]	; (8005144 <xTaskResumeAll+0xb4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f6      	beq.n	80050ae <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 80050c0:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 80050c2:	2701      	movs	r7, #1
 80050c4:	e01d      	b.n	8005102 <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ca:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050cc:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ce:	3018      	adds	r0, #24
 80050d0:	f7ff fcbf 	bl	8004a52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d4:	0028      	movs	r0, r5
 80050d6:	f7ff fcbc 	bl	8004a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <xTaskResumeAll+0xb8>)
 80050dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4290      	cmp	r0, r2
 80050e2:	d900      	bls.n	80050e6 <xTaskResumeAll+0x56>
 80050e4:	6018      	str	r0, [r3, #0]
 80050e6:	4370      	muls	r0, r6
 80050e8:	4b18      	ldr	r3, [pc, #96]	; (800514c <xTaskResumeAll+0xbc>)
 80050ea:	0029      	movs	r1, r5
 80050ec:	18c0      	adds	r0, r0, r3
 80050ee:	f7ff fc8d 	bl	8004a0c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <xTaskResumeAll+0xc0>)
 80050f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d301      	bcc.n	8005102 <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <xTaskResumeAll+0xc4>)
 8005100:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <xTaskResumeAll+0xc8>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2a00      	cmp	r2, #0
 8005108:	d1dd      	bne.n	80050c6 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 800510a:	2c00      	cmp	r4, #0
 800510c:	d001      	beq.n	8005112 <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 800510e:	f7ff fe0f 	bl	8004d30 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005112:	4d12      	ldr	r5, [pc, #72]	; (800515c <xTaskResumeAll+0xcc>)
 8005114:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005116:	2c00      	cmp	r4, #0
 8005118:	d00a      	beq.n	8005130 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800511a:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 800511c:	f7ff ff38 	bl	8004f90 <xTaskIncrementTick>
 8005120:	2800      	cmp	r0, #0
 8005122:	d001      	beq.n	8005128 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <xTaskResumeAll+0xc4>)
 8005126:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8005128:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800512a:	2c00      	cmp	r4, #0
 800512c:	d1f6      	bne.n	800511c <xTaskResumeAll+0x8c>
						uxPendedTicks = 0;
 800512e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005130:	4b08      	ldr	r3, [pc, #32]	; (8005154 <xTaskResumeAll+0xc4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ba      	beq.n	80050ae <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8005138:	f000 f970 	bl	800541c <vPortYield>
						xAlreadyYielded = pdTRUE;
 800513c:	2401      	movs	r4, #1
 800513e:	e7b7      	b.n	80050b0 <xTaskResumeAll+0x20>
 8005140:	20000670 	.word	0x20000670
 8005144:	20000668 	.word	0x20000668
 8005148:	20000678 	.word	0x20000678
 800514c:	200005dc 	.word	0x200005dc
 8005150:	200005d0 	.word	0x200005d0
 8005154:	200006c8 	.word	0x200006c8
 8005158:	200006ac 	.word	0x200006ac
 800515c:	2000066c 	.word	0x2000066c

08005160 <vTaskDelay>:
	{
 8005160:	b510      	push	{r4, lr}
 8005162:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005164:	d102      	bne.n	800516c <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8005166:	f000 f959 	bl	800541c <vPortYield>
	}
 800516a:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <vTaskDelay+0x2c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <vTaskDelay+0x18>
 8005174:	b672      	cpsid	i
 8005176:	e7fe      	b.n	8005176 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8005178:	f7ff ff02 	bl	8004f80 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800517c:	0020      	movs	r0, r4
 800517e:	f7ff fdeb 	bl	8004d58 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 8005182:	f7ff ff85 	bl	8005090 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005186:	2800      	cmp	r0, #0
 8005188:	d0ed      	beq.n	8005166 <vTaskDelay+0x6>
 800518a:	e7ee      	b.n	800516a <vTaskDelay+0xa>
 800518c:	20000670 	.word	0x20000670

08005190 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005190:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <vTaskSwitchContext+0x58>)
{
 8005192:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <vTaskSwitchContext+0x5c>)
 8005198:	2a00      	cmp	r2, #0
 800519a:	d002      	beq.n	80051a2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a2:	2514      	movs	r5, #20
 80051a4:	4812      	ldr	r0, [pc, #72]	; (80051f0 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 80051a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a8:	6802      	ldr	r2, [r0, #0]
 80051aa:	4912      	ldr	r1, [pc, #72]	; (80051f4 <vTaskSwitchContext+0x64>)
 80051ac:	002b      	movs	r3, r5
 80051ae:	4353      	muls	r3, r2
 80051b0:	585c      	ldr	r4, [r3, r1]
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	d012      	beq.n	80051dc <vTaskSwitchContext+0x4c>
 80051b6:	18cc      	adds	r4, r1, r3
 80051b8:	6865      	ldr	r5, [r4, #4]
 80051ba:	3308      	adds	r3, #8
 80051bc:	686d      	ldr	r5, [r5, #4]
 80051be:	185b      	adds	r3, r3, r1
 80051c0:	6065      	str	r5, [r4, #4]
 80051c2:	429d      	cmp	r5, r3
 80051c4:	d101      	bne.n	80051ca <vTaskSwitchContext+0x3a>
 80051c6:	686b      	ldr	r3, [r5, #4]
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	2314      	movs	r3, #20
 80051cc:	4353      	muls	r3, r2
 80051ce:	18c9      	adds	r1, r1, r3
 80051d0:	684b      	ldr	r3, [r1, #4]
 80051d2:	68d9      	ldr	r1, [r3, #12]
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <vTaskSwitchContext+0x68>)
 80051d6:	6019      	str	r1, [r3, #0]
 80051d8:	6002      	str	r2, [r0, #0]
}
 80051da:	e7e1      	b.n	80051a0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d101      	bne.n	80051e4 <vTaskSwitchContext+0x54>
 80051e0:	b672      	cpsid	i
 80051e2:	e7fe      	b.n	80051e2 <vTaskSwitchContext+0x52>
 80051e4:	3a01      	subs	r2, #1
 80051e6:	e7e1      	b.n	80051ac <vTaskSwitchContext+0x1c>
 80051e8:	20000670 	.word	0x20000670
 80051ec:	200006c8 	.word	0x200006c8
 80051f0:	20000678 	.word	0x20000678
 80051f4:	200005dc 	.word	0x200005dc
 80051f8:	200005d0 	.word	0x200005d0

080051fc <vTaskPlaceOnEventList>:
{
 80051fc:	b510      	push	{r4, lr}
 80051fe:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8005200:	2800      	cmp	r0, #0
 8005202:	d101      	bne.n	8005208 <vTaskPlaceOnEventList+0xc>
 8005204:	b672      	cpsid	i
 8005206:	e7fe      	b.n	8005206 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <vTaskPlaceOnEventList+0x20>)
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	3118      	adds	r1, #24
 800520e:	f7ff fc09 	bl	8004a24 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005212:	0020      	movs	r0, r4
 8005214:	f7ff fda0 	bl	8004d58 <prvAddCurrentTaskToDelayedList.constprop.0>
}
 8005218:	bd10      	pop	{r4, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200005d0 	.word	0x200005d0

08005220 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005220:	68c3      	ldr	r3, [r0, #12]
{
 8005222:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005224:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005226:	2c00      	cmp	r4, #0
 8005228:	d101      	bne.n	800522e <xTaskRemoveFromEventList+0xe>
 800522a:	b672      	cpsid	i
 800522c:	e7fe      	b.n	800522c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800522e:	0025      	movs	r5, r4
 8005230:	3518      	adds	r5, #24
 8005232:	0028      	movs	r0, r5
 8005234:	f7ff fc0d 	bl	8004a52 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <xTaskRemoveFromEventList+0x60>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11b      	bne.n	8005278 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005240:	1d25      	adds	r5, r4, #4
 8005242:	0028      	movs	r0, r5
 8005244:	f7ff fc05 	bl	8004a52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005248:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <xTaskRemoveFromEventList+0x64>)
 800524a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	428b      	cmp	r3, r1
 8005250:	d900      	bls.n	8005254 <xTaskRemoveFromEventList+0x34>
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	2014      	movs	r0, #20
 8005256:	0029      	movs	r1, r5
 8005258:	4358      	muls	r0, r3
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <xTaskRemoveFromEventList+0x68>)
 800525c:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800525e:	f7ff fbd5 	bl	8004a0c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <xTaskRemoveFromEventList+0x6c>)
 8005264:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005266:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8005268:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <xTaskRemoveFromEventList+0x70>)
 8005272:	3001      	adds	r0, #1
 8005274:	6018      	str	r0, [r3, #0]
}
 8005276:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005278:	0029      	movs	r1, r5
 800527a:	4806      	ldr	r0, [pc, #24]	; (8005294 <xTaskRemoveFromEventList+0x74>)
 800527c:	e7ef      	b.n	800525e <xTaskRemoveFromEventList+0x3e>
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	20000670 	.word	0x20000670
 8005284:	20000678 	.word	0x20000678
 8005288:	200005dc 	.word	0x200005dc
 800528c:	200005d0 	.word	0x200005d0
 8005290:	200006c8 	.word	0x200006c8
 8005294:	200006ac 	.word	0x200006ac

08005298 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <vTaskInternalSetTimeOutState+0x10>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <vTaskInternalSetTimeOutState+0x14>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6043      	str	r3, [r0, #4]
}
 80052a4:	4770      	bx	lr
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	200006a8 	.word	0x200006a8
 80052ac:	200006c4 	.word	0x200006c4

080052b0 <xTaskCheckForTimeOut>:
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	0005      	movs	r5, r0
 80052b4:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d101      	bne.n	80052be <xTaskCheckForTimeOut+0xe>
 80052ba:	b672      	cpsid	i
 80052bc:	e7fe      	b.n	80052bc <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 80052be:	2900      	cmp	r1, #0
 80052c0:	d101      	bne.n	80052c6 <xTaskCheckForTimeOut+0x16>
 80052c2:	b672      	cpsid	i
 80052c4:	e7fe      	b.n	80052c4 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 80052c6:	f000 f8b5 	bl	8005434 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <xTaskCheckForTimeOut+0x58>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052cc:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80052ce:	6819      	ldr	r1, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <xTaskCheckForTimeOut+0x5c>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052d2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4298      	cmp	r0, r3
 80052d8:	d002      	beq.n	80052e0 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 80052da:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052dc:	428a      	cmp	r2, r1
 80052de:	d90a      	bls.n	80052f6 <xTaskCheckForTimeOut+0x46>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052e0:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052e2:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052e4:	4283      	cmp	r3, r0
 80052e6:	d90a      	bls.n	80052fe <xTaskCheckForTimeOut+0x4e>
			*pxTicksToWait -= xElapsedTime;
 80052e8:	1a5b      	subs	r3, r3, r1
 80052ea:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052ec:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80052ee:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052f0:	f7ff ffd2 	bl	8005298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052f4:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80052f6:	f000 f8a9 	bl	800544c <vPortExitCritical>
}
 80052fa:	0030      	movs	r0, r6
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80052fe:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005300:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	e7f7      	b.n	80052f6 <xTaskCheckForTimeOut+0x46>
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	200006c4 	.word	0x200006c4
 800530c:	200006a8 	.word	0x200006a8

08005310 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005310:	2201      	movs	r2, #1
 8005312:	4b01      	ldr	r3, [pc, #4]	; (8005318 <vTaskMissedYield+0x8>)
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	4770      	bx	lr
 8005318:	200006c8 	.word	0x200006c8

0800531c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800531e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005326:	4b04      	ldr	r3, [pc, #16]	; (8005338 <xTaskGetSchedulerState+0x1c>)
 8005328:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800532a:	4243      	negs	r3, r0
 800532c:	4158      	adcs	r0, r3
 800532e:	0040      	lsls	r0, r0, #1
	}
 8005330:	4770      	bx	lr
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	200006c0 	.word	0x200006c0
 8005338:	20000670 	.word	0x20000670

0800533c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800533c:	2300      	movs	r3, #0
{
 800533e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8005340:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <prvTaskExitError+0x20>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	d001      	beq.n	800534e <prvTaskExitError+0x12>
 800534a:	b672      	cpsid	i
 800534c:	e7fe      	b.n	800534c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800534e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0fc      	beq.n	8005350 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005356:	b002      	add	sp, #8
 8005358:	4770      	bx	lr
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	2000000c 	.word	0x2000000c

08005360 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005360:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <pxCurrentTCBConst2>)
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	3020      	adds	r0, #32
 8005368:	f380 8809 	msr	PSP, r0
 800536c:	2002      	movs	r0, #2
 800536e:	f380 8814 	msr	CONTROL, r0
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005378:	46ae      	mov	lr, r5
 800537a:	bc08      	pop	{r3}
 800537c:	bc04      	pop	{r2}
 800537e:	b662      	cpsie	i
 8005380:	4718      	bx	r3
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46c0      	nop			; (mov r8, r8)
 800538e:	46c0      	nop			; (mov r8, r8)

08005390 <pxCurrentTCBConst2>:
 8005390:	200005d0 	.word	0x200005d0

08005394 <pxPortInitialiseStack>:
{
 8005394:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005396:	2480      	movs	r4, #128	; 0x80
 8005398:	1f03      	subs	r3, r0, #4
 800539a:	0464      	lsls	r4, r4, #17
 800539c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800539e:	3b04      	subs	r3, #4
 80053a0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053a2:	4903      	ldr	r1, [pc, #12]	; (80053b0 <pxPortInitialiseStack+0x1c>)
 80053a4:	3b04      	subs	r3, #4
 80053a6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053a8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 80053aa:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	bd10      	pop	{r4, pc}
 80053b0:	0800533d 	.word	0x0800533d

080053b4 <SVC_Handler>:
}
 80053b4:	4770      	bx	lr
	...

080053b8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80053b8:	22ff      	movs	r2, #255	; 0xff
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <xPortStartScheduler+0x4c>)
 80053bc:	0412      	lsls	r2, r2, #16
 80053be:	6819      	ldr	r1, [r3, #0]
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80053c6:	22ff      	movs	r2, #255	; 0xff
 80053c8:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80053ca:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80053cc:	0612      	lsls	r2, r2, #24
 80053ce:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053d0:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80053d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 80053d4:	4d0c      	ldr	r5, [pc, #48]	; (8005408 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 80053d8:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80053da:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <xPortStartScheduler+0x58>)
 80053de:	0089      	lsls	r1, r1, #2
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	f7fa feaf 	bl	8000144 <__udivsi3>
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <xPortStartScheduler+0x5c>)
 80053e8:	3801      	subs	r0, #1
 80053ea:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80053ec:	2307      	movs	r3, #7
 80053ee:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <xPortStartScheduler+0x60>)
 80053f2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 80053f4:	f7ff ffb4 	bl	8005360 <vPortStartFirstTask>
	vTaskSwitchContext();
 80053f8:	f7ff feca 	bl	8005190 <vTaskSwitchContext>
	prvTaskExitError();
 80053fc:	f7ff ff9e 	bl	800533c <prvTaskExitError>
}
 8005400:	0020      	movs	r0, r4
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	e000ed20 	.word	0xe000ed20
 8005408:	e000e010 	.word	0xe000e010
 800540c:	e000e018 	.word	0xe000e018
 8005410:	20000000 	.word	0x20000000
 8005414:	e000e014 	.word	0xe000e014
 8005418:	2000000c 	.word	0x2000000c

0800541c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800541c:	2280      	movs	r2, #128	; 0x80
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <vPortYield+0x14>)
 8005420:	0552      	lsls	r2, r2, #21
 8005422:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005424:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005428:	f3bf 8f6f 	isb	sy
}
 800542c:	4770      	bx	lr
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8005434:	b672      	cpsid	i
    uxCriticalNesting++;
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <vPortEnterCritical+0x14>)
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800543e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005442:	f3bf 8f6f 	isb	sy
}
 8005446:	4770      	bx	lr
 8005448:	2000000c 	.word	0x2000000c

0800544c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800544c:	4a05      	ldr	r2, [pc, #20]	; (8005464 <vPortExitCritical+0x18>)
 800544e:	6813      	ldr	r3, [r2, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <vPortExitCritical+0xc>
 8005454:	b672      	cpsid	i
 8005456:	e7fe      	b.n	8005456 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8005458:	3b01      	subs	r3, #1
 800545a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800545c:	2b00      	cmp	r3, #0
 800545e:	d100      	bne.n	8005462 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8005460:	b662      	cpsie	i
}
 8005462:	4770      	bx	lr
 8005464:	2000000c 	.word	0x2000000c

08005468 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8005468:	f3ef 8010 	mrs	r0, PRIMASK
 800546c:	b672      	cpsid	i
 800546e:	4770      	bx	lr

08005470 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8005470:	f380 8810 	msr	PRIMASK, r0
 8005474:	4770      	bx	lr
	...

08005480 <PendSV_Handler>:
	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <pxCurrentTCBConst>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	3820      	subs	r0, #32
 800548a:	6010      	str	r0, [r2, #0]
 800548c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800548e:	4644      	mov	r4, r8
 8005490:	464d      	mov	r5, r9
 8005492:	4656      	mov	r6, sl
 8005494:	465f      	mov	r7, fp
 8005496:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005498:	b508      	push	{r3, lr}
 800549a:	b672      	cpsid	i
 800549c:	f7ff fe78 	bl	8005190 <vTaskSwitchContext>
 80054a0:	b662      	cpsie	i
 80054a2:	bc0c      	pop	{r2, r3}
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	6808      	ldr	r0, [r1, #0]
 80054a8:	3010      	adds	r0, #16
 80054aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054ac:	46a0      	mov	r8, r4
 80054ae:	46a9      	mov	r9, r5
 80054b0:	46b2      	mov	sl, r6
 80054b2:	46bb      	mov	fp, r7
 80054b4:	f380 8809 	msr	PSP, r0
 80054b8:	3820      	subs	r0, #32
 80054ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054bc:	4718      	bx	r3
 80054be:	46c0      	nop			; (mov r8, r8)

080054c0 <pxCurrentTCBConst>:
 80054c0:	200005d0 	.word	0x200005d0

080054c4 <SysTick_Handler>:
{
 80054c4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80054c6:	f7ff ffcf 	bl	8005468 <ulSetInterruptMaskFromISR>
 80054ca:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80054cc:	f7ff fd60 	bl	8004f90 <xTaskIncrementTick>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d003      	beq.n	80054dc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <SysTick_Handler+0x20>)
 80054d8:	0552      	lsls	r2, r2, #21
 80054da:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80054dc:	0020      	movs	r0, r4
 80054de:	f7ff ffc7 	bl	8005470 <vClearInterruptMaskFromISR>
}
 80054e2:	bd10      	pop	{r4, pc}
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <gnss_thread>:
}


static gnss_context_t gnss_decoder = {0};

void gnss_thread(void * arg) {
 80054e8:	e7fe      	b.n	80054e8 <gnss_thread>
	...

080054ec <init>:
#define GNSS_PRIO	(5)

static TaskHandle_t radio_handle = NULL;
static TaskHandle_t gnss_handle = NULL;

void init(void) {
 80054ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}


	spi_init();
 80054ee:	f000 f851 	bl	8005594 <spi_init>

	uart_init();
 80054f2:	f000 f981 	bl	80057f8 <uart_init>


	INIT_THREAD_CREATE(radio_handle, radio, radio_thread, NULL, RADIO_SZ, RADIO_PRIO);
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <init+0x40>)
 80054f8:	2480      	movs	r4, #128	; 0x80
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <init+0x44>)
 80054fe:	0064      	lsls	r4, r4, #1
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	2306      	movs	r3, #6
 8005504:	0022      	movs	r2, r4
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	490a      	ldr	r1, [pc, #40]	; (8005534 <init+0x48>)
 800550a:	2300      	movs	r3, #0
 800550c:	480a      	ldr	r0, [pc, #40]	; (8005538 <init+0x4c>)
 800550e:	f7ff fc4f 	bl	8004db0 <xTaskCreateStatic>

	INIT_THREAD_CREATE(gnss_handle, gnss, gnss_thread, NULL, GNSS_SZ, GNSS_PRIO);
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <init+0x50>)
 8005514:	0022      	movs	r2, r4
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <init+0x54>)
 800551a:	490a      	ldr	r1, [pc, #40]	; (8005544 <init+0x58>)
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2305      	movs	r3, #5
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <init+0x5c>)
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	f7ff fc43 	bl	8004db0 <xTaskCreateStatic>

}
 800552a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800552c:	20000b18 	.word	0x20000b18
 8005530:	20000b64 	.word	0x20000b64
 8005534:	08006ee3 	.word	0x08006ee3
 8005538:	08005b79 	.word	0x08005b79
 800553c:	200006cc 	.word	0x200006cc
 8005540:	20000718 	.word	0x20000718
 8005544:	08006ee9 	.word	0x08006ee9
 8005548:	080054e9 	.word	0x080054e9

0800554c <HAL_SPI_TxCpltCallback>:
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800554c:	2300      	movs	r3, #0
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800554e:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005550:	9301      	str	r3, [sp, #4]

	if(hspi->Instance == hspi1.Instance) {
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_SPI_TxCpltCallback+0x2c>)
 8005554:	6802      	ldr	r2, [r0, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d10b      	bne.n	8005574 <HAL_SPI_TxCpltCallback+0x28>
		xSemaphoreGiveFromISR(spi_sem, &xHigherPriorityTaskWoken);
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <HAL_SPI_TxCpltCallback+0x30>)
 800555e:	a901      	add	r1, sp, #4
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f7ff fb21 	bl	8004ba8 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005566:	9b01      	ldr	r3, [sp, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_SPI_TxCpltCallback+0x28>
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_SPI_TxCpltCallback+0x34>)
 8005570:	0552      	lsls	r2, r2, #21
 8005572:	601a      	str	r2, [r3, #0]

}
 8005574:	bd07      	pop	{r0, r1, r2, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	20000390 	.word	0x20000390
 800557c:	2000106c 	.word	0x2000106c
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <HAL_SPI_TxRxCpltCallback>:
 8005584:	b510      	push	{r4, lr}
 8005586:	f7ff ffe1 	bl	800554c <HAL_SPI_TxCpltCallback>
 800558a:	bd10      	pop	{r4, pc}

0800558c <HAL_SPI_RxCpltCallback>:
 800558c:	b510      	push	{r4, lr}
 800558e:	f7ff ffdd 	bl	800554c <HAL_SPI_TxCpltCallback>
 8005592:	bd10      	pop	{r4, pc}

08005594 <spi_init>:

}



void spi_init() {
 8005594:	b507      	push	{r0, r1, r2, lr}
	spi_sem = xSemaphoreCreateBinaryStatic(&spi_sem_buffer);
 8005596:	2303      	movs	r3, #3
 8005598:	2200      	movs	r2, #0
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	0011      	movs	r1, r2
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <spi_init+0x24>)
 80055a0:	2001      	movs	r0, #1
 80055a2:	f7ff fad9 	bl	8004b58 <xQueueGenericCreateStatic>
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <spi_init+0x28>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80055a8:	2201      	movs	r2, #1
	spi_sem = xSemaphoreCreateBinaryStatic(&spi_sem_buffer);
 80055aa:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80055ac:	20a0      	movs	r0, #160	; 0xa0
 80055ae:	2110      	movs	r1, #16
 80055b0:	05c0      	lsls	r0, r0, #23
 80055b2:	f7fd f96b 	bl	800288c <HAL_GPIO_WritePin>
}
 80055b6:	bd07      	pop	{r0, r1, r2, pc}
 80055b8:	20001070 	.word	0x20001070
 80055bc:	2000106c 	.word	0x2000106c

080055c0 <spi_write_reg>:

error_t spi_write_reg(uint8_t addr, uint8_t data) {
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	0005      	movs	r5, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80055c4:	20a0      	movs	r0, #160	; 0xa0
error_t spi_write_reg(uint8_t addr, uint8_t data) {
 80055c6:	000c      	movs	r4, r1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80055c8:	2200      	movs	r2, #0
 80055ca:	2110      	movs	r1, #16
 80055cc:	05c0      	lsls	r0, r0, #23
 80055ce:	f7fd f95d 	bl	800288c <HAL_GPIO_WritePin>
	static uint8_t tx_data[2];
	tx_data[0] = addr | 0x80; //write mode
 80055d2:	2080      	movs	r0, #128	; 0x80
 80055d4:	490f      	ldr	r1, [pc, #60]	; (8005614 <spi_write_reg+0x54>)
 80055d6:	4240      	negs	r0, r0
 80055d8:	4328      	orrs	r0, r5
	tx_data[1] = data;
	HAL_SPI_Transmit_IT(&hspi1, tx_data, 2);
 80055da:	2202      	movs	r2, #2
	tx_data[0] = addr | 0x80; //write mode
 80055dc:	7008      	strb	r0, [r1, #0]
	tx_data[1] = data;
 80055de:	704c      	strb	r4, [r1, #1]
	HAL_SPI_Transmit_IT(&hspi1, tx_data, 2);
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <spi_write_reg+0x58>)
 80055e2:	f7fd fedf 	bl	80033a4 <HAL_SPI_Transmit_IT>
	//wait for done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <spi_write_reg+0x5c>)
 80055e8:	210a      	movs	r1, #10
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	f7ff fb18 	bl	8004c20 <xQueueSemaphoreTake>
 80055f0:	0002      	movs	r2, r0
 80055f2:	2801      	cmp	r0, #1
 80055f4:	d106      	bne.n	8005604 <spi_write_reg+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80055f6:	20a0      	movs	r0, #160	; 0xa0
 80055f8:	2110      	movs	r1, #16
 80055fa:	05c0      	lsls	r0, r0, #23
 80055fc:	f7fd f946 	bl	800288c <HAL_GPIO_WritePin>
		return e_success;
 8005600:	2000      	movs	r0, #0
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
}
 8005602:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005604:	20a0      	movs	r0, #160	; 0xa0
 8005606:	2201      	movs	r2, #1
 8005608:	05c0      	lsls	r0, r0, #23
 800560a:	2110      	movs	r1, #16
 800560c:	f7fd f93e 	bl	800288c <HAL_GPIO_WritePin>
		return e_failure;
 8005610:	2001      	movs	r0, #1
 8005612:	e7f6      	b.n	8005602 <spi_write_reg+0x42>
 8005614:	200010b8 	.word	0x200010b8
 8005618:	20000390 	.word	0x20000390
 800561c:	2000106c 	.word	0x2000106c

08005620 <spi_read_reg>:


error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8005620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005622:	466b      	mov	r3, sp
 8005624:	71d8      	strb	r0, [r3, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005626:	20a0      	movs	r0, #160	; 0xa0
 8005628:	2200      	movs	r2, #0
 800562a:	05c0      	lsls	r0, r0, #23
error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 800562c:	000c      	movs	r4, r1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800562e:	2110      	movs	r1, #16
error_t spi_read_reg(uint8_t addr, uint8_t * data) {
 8005630:	1ddd      	adds	r5, r3, #7
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005632:	f7fd f92b 	bl	800288c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, &addr, 1);
 8005636:	4e14      	ldr	r6, [pc, #80]	; (8005688 <spi_read_reg+0x68>)
 8005638:	2201      	movs	r2, #1
 800563a:	0029      	movs	r1, r5
 800563c:	0030      	movs	r0, r6
 800563e:	f7fd feb1 	bl	80033a4 <HAL_SPI_Transmit_IT>
	//wait for tx done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8005642:	4d12      	ldr	r5, [pc, #72]	; (800568c <spi_read_reg+0x6c>)
 8005644:	210a      	movs	r1, #10
 8005646:	6828      	ldr	r0, [r5, #0]
 8005648:	f7ff faea 	bl	8004c20 <xQueueSemaphoreTake>
 800564c:	0002      	movs	r2, r0
 800564e:	2801      	cmp	r0, #1
 8005650:	d10a      	bne.n	8005668 <spi_read_reg+0x48>
		HAL_SPI_Receive_IT(&hspi1, data, 1);
 8005652:	0021      	movs	r1, r4
 8005654:	0030      	movs	r0, r6
 8005656:	f7fd ff45 	bl	80034e4 <HAL_SPI_Receive_IT>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
	//wait for rx done
	if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 800565a:	210a      	movs	r1, #10
 800565c:	6828      	ldr	r0, [r5, #0]
 800565e:	f7ff fadf 	bl	8004c20 <xQueueSemaphoreTake>
 8005662:	0002      	movs	r2, r0
 8005664:	2801      	cmp	r0, #1
 8005666:	d007      	beq.n	8005678 <spi_read_reg+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005668:	20a0      	movs	r0, #160	; 0xa0
 800566a:	2201      	movs	r2, #1
 800566c:	05c0      	lsls	r0, r0, #23
 800566e:	2110      	movs	r1, #16
 8005670:	f7fd f90c 	bl	800288c <HAL_GPIO_WritePin>
		return e_failure;
 8005674:	2001      	movs	r0, #1
		return e_success;
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		return e_failure;
	}
}
 8005676:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005678:	20a0      	movs	r0, #160	; 0xa0
 800567a:	2110      	movs	r1, #16
 800567c:	05c0      	lsls	r0, r0, #23
 800567e:	f7fd f905 	bl	800288c <HAL_GPIO_WritePin>
		return e_success;
 8005682:	2000      	movs	r0, #0
 8005684:	e7f7      	b.n	8005676 <spi_read_reg+0x56>
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	20000390 	.word	0x20000390
 800568c:	2000106c 	.word	0x2000106c

08005690 <spi_write_reg_burst>:

/*
 * Max data size 4 bytes
 */
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8005690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005692:	0006      	movs	r6, r0
	if(len <= MAX_SPI_PACKET) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005694:	20a0      	movs	r0, #160	; 0xa0
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8005696:	000d      	movs	r5, r1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005698:	05c0      	lsls	r0, r0, #23
 800569a:	2110      	movs	r1, #16
error_t spi_write_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 800569c:	0014      	movs	r4, r2
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800569e:	2200      	movs	r2, #0
 80056a0:	f7fd f8f4 	bl	800288c <HAL_GPIO_WritePin>
		uint8_t wr_addr = addr | 0x80; //write mode
 80056a4:	2080      	movs	r0, #128	; 0x80
 80056a6:	466b      	mov	r3, sp
		HAL_SPI_Transmit_IT(&hspi1, &wr_addr, 1);
 80056a8:	4f15      	ldr	r7, [pc, #84]	; (8005700 <spi_write_reg_burst+0x70>)
		uint8_t wr_addr = addr | 0x80; //write mode
 80056aa:	4240      	negs	r0, r0
 80056ac:	1dd9      	adds	r1, r3, #7
 80056ae:	4330      	orrs	r0, r6
 80056b0:	7008      	strb	r0, [r1, #0]
		HAL_SPI_Transmit_IT(&hspi1, &wr_addr, 1);
 80056b2:	2201      	movs	r2, #1
 80056b4:	0038      	movs	r0, r7
 80056b6:	f7fd fe75 	bl	80033a4 <HAL_SPI_Transmit_IT>
		//wait for tx addr done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 80056ba:	4e12      	ldr	r6, [pc, #72]	; (8005704 <spi_write_reg_burst+0x74>)
 80056bc:	210a      	movs	r1, #10
 80056be:	6830      	ldr	r0, [r6, #0]
 80056c0:	f7ff faae 	bl	8004c20 <xQueueSemaphoreTake>
 80056c4:	2801      	cmp	r0, #1
 80056c6:	d10b      	bne.n	80056e0 <spi_write_reg_burst+0x50>
			HAL_SPI_Transmit_DMA(&hspi1, data, len);
 80056c8:	b2a2      	uxth	r2, r4
 80056ca:	0029      	movs	r1, r5
 80056cc:	0038      	movs	r0, r7
 80056ce:	f7fd ff67 	bl	80035a0 <HAL_SPI_Transmit_DMA>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
			return e_failure;
		}
		//wait for done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 80056d2:	210a      	movs	r1, #10
 80056d4:	6830      	ldr	r0, [r6, #0]
 80056d6:	f7ff faa3 	bl	8004c20 <xQueueSemaphoreTake>
 80056da:	0002      	movs	r2, r0
 80056dc:	2801      	cmp	r0, #1
 80056de:	d007      	beq.n	80056f0 <spi_write_reg_burst+0x60>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80056e0:	20a0      	movs	r0, #160	; 0xa0
 80056e2:	2201      	movs	r2, #1
 80056e4:	05c0      	lsls	r0, r0, #23
 80056e6:	2110      	movs	r1, #16
 80056e8:	f7fd f8d0 	bl	800288c <HAL_GPIO_WritePin>
			return e_failure;
 80056ec:	2001      	movs	r0, #1
			return e_failure;
		}
	} else {
		return e_failure;
	}
}
 80056ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80056f0:	20a0      	movs	r0, #160	; 0xa0
 80056f2:	2110      	movs	r1, #16
 80056f4:	05c0      	lsls	r0, r0, #23
 80056f6:	f7fd f8c9 	bl	800288c <HAL_GPIO_WritePin>
			return e_success;
 80056fa:	2000      	movs	r0, #0
 80056fc:	e7f7      	b.n	80056ee <spi_write_reg_burst+0x5e>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	20000390 	.word	0x20000390
 8005704:	2000106c 	.word	0x2000106c

08005708 <spi_read_reg_burst>:


error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8005708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800570a:	466b      	mov	r3, sp
 800570c:	71d8      	strb	r0, [r3, #7]
	if(len <= MAX_SPI_PACKET) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800570e:	20a0      	movs	r0, #160	; 0xa0
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8005710:	000d      	movs	r5, r1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005712:	05c0      	lsls	r0, r0, #23
 8005714:	2110      	movs	r1, #16
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 8005716:	0014      	movs	r4, r2
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005718:	2200      	movs	r2, #0
error_t spi_read_reg_burst(uint8_t addr, uint8_t * data, uint8_t len) {
 800571a:	1dde      	adds	r6, r3, #7
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800571c:	f7fd f8b6 	bl	800288c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, &addr, 1);
 8005720:	4f13      	ldr	r7, [pc, #76]	; (8005770 <spi_read_reg_burst+0x68>)
 8005722:	0031      	movs	r1, r6
 8005724:	2201      	movs	r2, #1
 8005726:	0038      	movs	r0, r7
 8005728:	f7fd fe3c 	bl	80033a4 <HAL_SPI_Transmit_IT>
		//wait for tx done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 800572c:	4e11      	ldr	r6, [pc, #68]	; (8005774 <spi_read_reg_burst+0x6c>)
 800572e:	210a      	movs	r1, #10
 8005730:	6830      	ldr	r0, [r6, #0]
 8005732:	f7ff fa75 	bl	8004c20 <xQueueSemaphoreTake>
 8005736:	2801      	cmp	r0, #1
 8005738:	d10b      	bne.n	8005752 <spi_read_reg_burst+0x4a>
			HAL_SPI_Receive_DMA(&hspi1, data, len);
 800573a:	b2a2      	uxth	r2, r4
 800573c:	0029      	movs	r1, r5
 800573e:	0038      	movs	r0, r7
 8005740:	f7fe f812 	bl	8003768 <HAL_SPI_Receive_DMA>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
			return e_failure;
		}
		//wait for rx done
		if(xSemaphoreTake( spi_sem, ( TickType_t ) 10 ) == pdTRUE ) {
 8005744:	210a      	movs	r1, #10
 8005746:	6830      	ldr	r0, [r6, #0]
 8005748:	f7ff fa6a 	bl	8004c20 <xQueueSemaphoreTake>
 800574c:	0002      	movs	r2, r0
 800574e:	2801      	cmp	r0, #1
 8005750:	d007      	beq.n	8005762 <spi_read_reg_burst+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005752:	20a0      	movs	r0, #160	; 0xa0
 8005754:	2201      	movs	r2, #1
 8005756:	05c0      	lsls	r0, r0, #23
 8005758:	2110      	movs	r1, #16
 800575a:	f7fd f897 	bl	800288c <HAL_GPIO_WritePin>
			return e_failure;
 800575e:	2001      	movs	r0, #1
			return e_failure;
		}
	} else {
		return e_failure;
	}
}
 8005760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005762:	20a0      	movs	r0, #160	; 0xa0
 8005764:	2110      	movs	r1, #16
 8005766:	05c0      	lsls	r0, r0, #23
 8005768:	f7fd f890 	bl	800288c <HAL_GPIO_WritePin>
			return e_success;
 800576c:	2000      	movs	r0, #0
 800576e:	e7f7      	b.n	8005760 <spi_read_reg_burst+0x58>
 8005770:	20000390 	.word	0x20000390
 8005774:	2000106c 	.word	0x2000106c

08005778 <HAL_UART_RxHalfCpltCallback>:




void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005778:	2300      	movs	r3, #0
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800577a:	b507      	push	{r0, r1, r2, lr}
	if(huart->Instance == huart2.Instance) {
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_UART_RxHalfCpltCallback+0x30>)
 800577e:	6801      	ldr	r1, [r0, #0]
 8005780:	6812      	ldr	r2, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005782:	9301      	str	r3, [sp, #4]
	if(huart->Instance == huart2.Instance) {
 8005784:	4291      	cmp	r1, r2
 8005786:	d10d      	bne.n	80057a4 <HAL_UART_RxHalfCpltCallback+0x2c>
		rx_offset = 0;
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <HAL_UART_RxHalfCpltCallback+0x34>)
		xSemaphoreGiveFromISR(uart_sem, &xHigherPriorityTaskWoken);
 800578a:	a901      	add	r1, sp, #4
		rx_offset = 0;
 800578c:	7013      	strb	r3, [r2, #0]
		xSemaphoreGiveFromISR(uart_sem, &xHigherPriorityTaskWoken);
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <HAL_UART_RxHalfCpltCallback+0x38>)
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	f7ff fa09 	bl	8004ba8 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005796:	9b01      	ldr	r3, [sp, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_UART_RxHalfCpltCallback+0x2c>
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_UART_RxHalfCpltCallback+0x3c>)
 80057a0:	0552      	lsls	r2, r2, #21
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bd07      	pop	{r0, r1, r2, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	20000544 	.word	0x20000544
 80057ac:	20001068 	.word	0x20001068
 80057b0:	200010bc 	.word	0x200010bc
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80057b8:	2300      	movs	r3, #0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80057ba:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80057bc:	9301      	str	r3, [sp, #4]
	if(huart->Instance == huart2.Instance) {
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_UART_RxCpltCallback+0x30>)
 80057c0:	6802      	ldr	r2, [r0, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10e      	bne.n	80057e6 <HAL_UART_RxCpltCallback+0x2e>
		rx_offset = UART_PING_PONG_SIZE/2;
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <HAL_UART_RxCpltCallback+0x34>)
		xSemaphoreGiveFromISR(uart_sem, &xHigherPriorityTaskWoken);
 80057cc:	a901      	add	r1, sp, #4
		rx_offset = UART_PING_PONG_SIZE/2;
 80057ce:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR(uart_sem, &xHigherPriorityTaskWoken);
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_UART_RxCpltCallback+0x38>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	f7ff f9e8 	bl	8004ba8 <xQueueGiveFromISR>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80057d8:	9b01      	ldr	r3, [sp, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_UART_RxCpltCallback+0x2e>
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_UART_RxCpltCallback+0x3c>)
 80057e2:	0552      	lsls	r2, r2, #21
 80057e4:	601a      	str	r2, [r3, #0]
}
 80057e6:	bd07      	pop	{r0, r1, r2, pc}
 80057e8:	20000544 	.word	0x20000544
 80057ec:	20001068 	.word	0x20001068
 80057f0:	200010bc 	.word	0x200010bc
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <uart_init>:
	*buffer = rx_buffer + rx_offset;
	return UART_PING_PONG_SIZE/2;
}


void uart_init(void) {
 80057f8:	b507      	push	{r0, r1, r2, lr}
	uart_sem = xSemaphoreCreateBinaryStatic(&uart_sem_buffer);
 80057fa:	2303      	movs	r3, #3
 80057fc:	2200      	movs	r2, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	0011      	movs	r1, r2
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <uart_init+0x24>)
 8005804:	2001      	movs	r0, #1
 8005806:	f7ff f9a7 	bl	8004b58 <xQueueGenericCreateStatic>

	//DMA is configured circular
	HAL_UART_Receive_DMA(&huart2, rx_buffer, UART_PING_PONG_SIZE);
 800580a:	2280      	movs	r2, #128	; 0x80
	uart_sem = xSemaphoreCreateBinaryStatic(&uart_sem_buffer);
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <uart_init+0x28>)
	HAL_UART_Receive_DMA(&huart2, rx_buffer, UART_PING_PONG_SIZE);
 800580e:	4905      	ldr	r1, [pc, #20]	; (8005824 <uart_init+0x2c>)
	uart_sem = xSemaphoreCreateBinaryStatic(&uart_sem_buffer);
 8005810:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, rx_buffer, UART_PING_PONG_SIZE);
 8005812:	0052      	lsls	r2, r2, #1
 8005814:	4804      	ldr	r0, [pc, #16]	; (8005828 <uart_init+0x30>)
 8005816:	f7ff f8a9 	bl	800496c <HAL_UART_Receive_DMA>


}
 800581a:	bd07      	pop	{r0, r1, r2, pc}
 800581c:	200010c0 	.word	0x200010c0
 8005820:	200010bc 	.word	0x200010bc
 8005824:	20000f68 	.word	0x20000f68
 8005828:	20000544 	.word	0x20000544

0800582c <HAL_GPIO_EXTI_Callback>:

static void (*radio_cb)(void) = NULL;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if(GPIO_Pin == GPIO_PIN_8) {
 800582c:	2380      	movs	r3, #128	; 0x80
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800582e:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_8) {
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4298      	cmp	r0, r3
 8005834:	d104      	bne.n	8005840 <HAL_GPIO_EXTI_Callback+0x14>
		if(radio_cb) {
 8005836:	4b03      	ldr	r3, [pc, #12]	; (8005844 <HAL_GPIO_EXTI_Callback+0x18>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d000      	beq.n	8005840 <HAL_GPIO_EXTI_Callback+0x14>
			radio_cb();
 800583e:	4798      	blx	r3
		}
	}
}
 8005840:	bd10      	pop	{r4, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	20000f64 	.word	0x20000f64

08005848 <port_register_radio_cb>:


void port_register_radio_cb(void (*cb)(void)) {
	radio_cb = cb;
 8005848:	4b01      	ldr	r3, [pc, #4]	; (8005850 <port_register_radio_cb+0x8>)
 800584a:	6018      	str	r0, [r3, #0]
}
 800584c:	4770      	bx	lr
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	20000f64 	.word	0x20000f64

08005854 <radio_isr_handler>:
}



void radio_isr_handler(void) {
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005854:	2300      	movs	r3, #0
void radio_isr_handler(void) {
 8005856:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005858:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR(radio_isr_sem, &xHigherPriorityTaskWoken);
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <radio_isr_handler+0x20>)
 800585c:	a901      	add	r1, sp, #4
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	f7ff f9a2 	bl	8004ba8 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005864:	9b01      	ldr	r3, [sp, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <radio_isr_handler+0x1e>
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	4b02      	ldr	r3, [pc, #8]	; (8005878 <radio_isr_handler+0x24>)
 800586e:	0552      	lsls	r2, r2, #21
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	bd07      	pop	{r0, r1, r2, pc}
 8005874:	20001108 	.word	0x20001108
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <radio_set_idle>:
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 800587c:	2101      	movs	r1, #1
void radio_set_idle() {
 800587e:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 8005880:	0008      	movs	r0, r1
 8005882:	f7ff fe9d 	bl	80055c0 <spi_write_reg>
}
 8005886:	bd10      	pop	{r4, pc}

08005888 <radio_set_rx>:
void radio_set_rx() {
 8005888:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 800588a:	2105      	movs	r1, #5
 800588c:	2001      	movs	r0, #1
 800588e:	f7ff fe97 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8005892:	2100      	movs	r1, #0
 8005894:	2040      	movs	r0, #64	; 0x40
 8005896:	f7ff fe93 	bl	80055c0 <spi_write_reg>
}
 800589a:	bd10      	pop	{r4, pc}

0800589c <radio_set_tx>:
void radio_set_tx() {
 800589c:	b510      	push	{r4, lr}
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 800589e:	2103      	movs	r1, #3
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7ff fe8d 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	0008      	movs	r0, r1
 80058aa:	f7ff fe89 	bl	80055c0 <spi_write_reg>
}
 80058ae:	bd10      	pop	{r4, pc}

080058b0 <radio_set_tx_power>:
void radio_set_tx_power(int8_t power) {
 80058b0:	b510      	push	{r4, lr}
 80058b2:	0004      	movs	r4, r0
	if (power > 20)
 80058b4:	2814      	cmp	r0, #20
 80058b6:	dc12      	bgt.n	80058de <radio_set_tx_power+0x2e>
	if (power < 2)
 80058b8:	2801      	cmp	r0, #1
 80058ba:	dd12      	ble.n	80058e2 <radio_set_tx_power+0x32>
	if (power > 17)
 80058bc:	2811      	cmp	r0, #17
 80058be:	dd11      	ble.n	80058e4 <radio_set_tx_power+0x34>
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 80058c0:	2107      	movs	r1, #7
 80058c2:	204d      	movs	r0, #77	; 0x4d
 80058c4:	f7ff fe7c 	bl	80055c0 <spi_write_reg>
	    power -= 3;
 80058c8:	3c03      	subs	r4, #3
 80058ca:	b264      	sxtb	r4, r4
	spi_write_reg(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	3c02      	subs	r4, #2
 80058d0:	4249      	negs	r1, r1
 80058d2:	4321      	orrs	r1, r4
 80058d4:	b2c9      	uxtb	r1, r1
 80058d6:	2009      	movs	r0, #9
 80058d8:	f7ff fe72 	bl	80055c0 <spi_write_reg>
}
 80058dc:	bd10      	pop	{r4, pc}
	    power = 20;
 80058de:	2414      	movs	r4, #20
 80058e0:	e7ee      	b.n	80058c0 <radio_set_tx_power+0x10>
	    power = 2;
 80058e2:	2402      	movs	r4, #2
		spi_write_reg(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 80058e4:	2104      	movs	r1, #4
 80058e6:	204d      	movs	r0, #77	; 0x4d
 80058e8:	f7ff fe6a 	bl	80055c0 <spi_write_reg>
 80058ec:	e7ee      	b.n	80058cc <radio_set_tx_power+0x1c>
	...

080058f0 <radio_set_frequency>:
void radio_set_frequency(float freq) {
 80058f0:	b510      	push	{r4, lr}
	uint32_t frf = (freq * 1000000.0) / RH_RF95_FSTEP;
 80058f2:	f7fc f8a1 	bl	8001a38 <__aeabi_f2d>
 80058f6:	2200      	movs	r2, #0
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <radio_set_frequency+0x3c>)
 80058fa:	f7fb fa69 	bl	8000dd0 <__aeabi_dmul>
 80058fe:	2200      	movs	r2, #0
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <radio_set_frequency+0x40>)
 8005902:	f7fa fe63 	bl	80005cc <__aeabi_ddiv>
 8005906:	f7fa fd59 	bl	80003bc <__aeabi_d2uiz>
 800590a:	0004      	movs	r4, r0
	spi_write_reg(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 800590c:	0c01      	lsrs	r1, r0, #16
 800590e:	b2c9      	uxtb	r1, r1
 8005910:	2006      	movs	r0, #6
 8005912:	f7ff fe55 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 8005916:	0a21      	lsrs	r1, r4, #8
 8005918:	b2c9      	uxtb	r1, r1
 800591a:	2007      	movs	r0, #7
 800591c:	f7ff fe50 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 8005920:	b2e1      	uxtb	r1, r4
 8005922:	2008      	movs	r0, #8
 8005924:	f7ff fe4c 	bl	80055c0 <spi_write_reg>
}
 8005928:	bd10      	pop	{r4, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	412e8480 	.word	0x412e8480
 8005930:	404e8480 	.word	0x404e8480

08005934 <radio_set_preamble_len>:
void radio_set_preamble_len(uint16_t bytes) {
 8005934:	b510      	push	{r4, lr}
 8005936:	0004      	movs	r4, r0
	spi_write_reg(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 8005938:	0a01      	lsrs	r1, r0, #8
 800593a:	2020      	movs	r0, #32
 800593c:	f7ff fe40 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 8005940:	b2e1      	uxtb	r1, r4
 8005942:	2021      	movs	r0, #33	; 0x21
 8005944:	f7ff fe3c 	bl	80055c0 <spi_write_reg>
}
 8005948:	bd10      	pop	{r4, pc}

0800594a <radio_set_modem_params>:
void radio_set_modem_params(radio_config_t cfg) {
 800594a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch(cfg.cr) {
 800594c:	2102      	movs	r1, #2
void radio_set_modem_params(radio_config_t cfg) {
 800594e:	0a03      	lsrs	r3, r0, #8
 8005950:	9001      	str	r0, [sp, #4]
	switch(cfg.cr) {
 8005952:	b2d8      	uxtb	r0, r3
 8005954:	1e43      	subs	r3, r0, #1
void radio_set_modem_params(radio_config_t cfg) {
 8005956:	aa01      	add	r2, sp, #4
 8005958:	428b      	cmp	r3, r1
 800595a:	d802      	bhi.n	8005962 <radio_set_modem_params+0x18>
 800595c:	3001      	adds	r0, #1
 800595e:	0041      	lsls	r1, r0, #1
 8005960:	b2c9      	uxtb	r1, r1
	switch(cfg.bw) {
 8005962:	7810      	ldrb	r0, [r2, #0]
 8005964:	2809      	cmp	r0, #9
 8005966:	d82b      	bhi.n	80059c0 <radio_set_modem_params+0x76>
 8005968:	f7fa fbd8 	bl	800011c <__gnu_thumb1_case_uqi>
 800596c:	1e1c0507 	.word	0x1e1c0507
 8005970:	2a242220 	.word	0x2a242220
 8005974:	2826      	.short	0x2826
		reg_1d |= RH_RF95_BW_10_4KHZ;
 8005976:	2310      	movs	r3, #16
		reg_1d |= RH_RF95_BW_125KHZ;
 8005978:	4319      	orrs	r1, r3
	switch(cfg.sf) {
 800597a:	7893      	ldrb	r3, [r2, #2]
 800597c:	2460      	movs	r4, #96	; 0x60
 800597e:	1fda      	subs	r2, r3, #7
 8005980:	2a05      	cmp	r2, #5
 8005982:	d801      	bhi.n	8005988 <radio_set_modem_params+0x3e>
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	b2dc      	uxtb	r4, r3
	spi_write_reg(RH_RF95_REG_1D_MODEM_CONFIG1, reg_1d);
 8005988:	201d      	movs	r0, #29
 800598a:	f7ff fe19 	bl	80055c0 <spi_write_reg>
	reg_1e |= RH_RF95_PAYLOAD_CRC_ON;
 800598e:	2504      	movs	r5, #4
	spi_write_reg(RH_RF95_REG_1E_MODEM_CONFIG2, reg_1e);
 8005990:	0021      	movs	r1, r4
 8005992:	201e      	movs	r0, #30
 8005994:	4329      	orrs	r1, r5
 8005996:	f7ff fe13 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_26_MODEM_CONFIG3, reg_26);
 800599a:	0029      	movs	r1, r5
 800599c:	2026      	movs	r0, #38	; 0x26
 800599e:	f7ff fe0f 	bl	80055c0 <spi_write_reg>
}
 80059a2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		reg_1d |= RH_RF95_BW_15_6KHZ;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e7e7      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_20_8KHZ;
 80059a8:	2330      	movs	r3, #48	; 0x30
 80059aa:	e7e5      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_31_25KHZ;
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	e7e3      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_41_7KHZ;
 80059b0:	2350      	movs	r3, #80	; 0x50
 80059b2:	e7e1      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_62_5KHZ;
 80059b4:	2360      	movs	r3, #96	; 0x60
 80059b6:	e7df      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_250KHZ;
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	e7dd      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_500KHZ;
 80059bc:	2390      	movs	r3, #144	; 0x90
 80059be:	e7db      	b.n	8005978 <radio_set_modem_params+0x2e>
		reg_1d |= RH_RF95_BW_125KHZ;
 80059c0:	2370      	movs	r3, #112	; 0x70
 80059c2:	e7d9      	b.n	8005978 <radio_set_modem_params+0x2e>

080059c4 <radio_init>:
error_t radio_init() {
 80059c4:	b530      	push	{r4, r5, lr}
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 80059c6:	2200      	movs	r2, #0
 80059c8:	2503      	movs	r5, #3
error_t radio_init() {
 80059ca:	b085      	sub	sp, #20
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 80059cc:	0011      	movs	r1, r2
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <radio_init+0x84>)
 80059d0:	2001      	movs	r0, #1
 80059d2:	9500      	str	r5, [sp, #0]
 80059d4:	f7ff f8c0 	bl	8004b58 <xQueueGenericCreateStatic>
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 80059d8:	240b      	movs	r4, #11
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <radio_init+0x88>)
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 80059dc:	446c      	add	r4, sp
	radio_isr_sem = xSemaphoreCreateBinaryStatic(&radio_isr_sem_buffer);
 80059de:	6018      	str	r0, [r3, #0]
	port_register_radio_cb(radio_isr_handler);
 80059e0:	481b      	ldr	r0, [pc, #108]	; (8005a50 <radio_init+0x8c>)
 80059e2:	f7ff ff31 	bl	8005848 <port_register_radio_cb>
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7ff fde9 	bl	80055c0 <spi_write_reg>
	osDelay(10);
 80059ee:	200a      	movs	r0, #10
 80059f0:	f7fe fff6 	bl	80049e0 <osDelay>
	spi_read_reg(RH_RF95_REG_01_OP_MODE, &data);
 80059f4:	0021      	movs	r1, r4
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7ff fe12 	bl	8005620 <spi_read_reg>
	if(data != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE)) {
 80059fc:	7823      	ldrb	r3, [r4, #0]
		return e_failure; // No device present?
 80059fe:	2401      	movs	r4, #1
	if(data != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE)) {
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d11e      	bne.n	8005a42 <radio_init+0x7e>
	spi_write_reg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 8005a04:	2100      	movs	r1, #0
 8005a06:	200e      	movs	r0, #14
 8005a08:	f7ff fdda 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	200f      	movs	r0, #15
 8005a10:	f7ff fdd6 	bl	80055c0 <spi_write_reg>
	spi_write_reg(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 8005a14:	0021      	movs	r1, r4
 8005a16:	0020      	movs	r0, r4
 8005a18:	f7ff fdd2 	bl	80055c0 <spi_write_reg>
	radio_config_t cfg = {
 8005a1c:	2207      	movs	r2, #7
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	18a4      	adds	r4, r4, r2
 8005a22:	709c      	strb	r4, [r3, #2]
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	705d      	strb	r5, [r3, #1]
	radio_set_modem_params(cfg);
 8005a28:	9803      	ldr	r0, [sp, #12]
 8005a2a:	f7ff ff8e 	bl	800594a <radio_set_modem_params>
	radio_set_preamble_len(8);
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f7ff ff80 	bl	8005934 <radio_set_preamble_len>
	radio_set_frequency(868);
 8005a34:	4807      	ldr	r0, [pc, #28]	; (8005a54 <radio_init+0x90>)
 8005a36:	f7ff ff5b 	bl	80058f0 <radio_set_frequency>
	radio_set_tx_power(13);
 8005a3a:	200d      	movs	r0, #13
 8005a3c:	f7ff ff38 	bl	80058b0 <radio_set_tx_power>
 8005a40:	2400      	movs	r4, #0
}
 8005a42:	0020      	movs	r0, r4
 8005a44:	b005      	add	sp, #20
 8005a46:	bd30      	pop	{r4, r5, pc}
 8005a48:	2000110c 	.word	0x2000110c
 8005a4c:	20001108 	.word	0x20001108
 8005a50:	08005855 	.word	0x08005855
 8005a54:	44590000 	.word	0x44590000

08005a58 <radio_transmit>:
error_t radio_transmit(uint8_t * data, uint16_t len) {
 8005a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a5a:	0005      	movs	r5, r0
 8005a5c:	000c      	movs	r4, r1
		return e_failure;
 8005a5e:	2601      	movs	r6, #1
	if (len > MAX_PACKET_LEN) {
 8005a60:	29ff      	cmp	r1, #255	; 0xff
 8005a62:	d822      	bhi.n	8005aaa <radio_transmit+0x52>
	spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 8005a64:	2100      	movs	r1, #0
	spi_write_reg_burst(RH_RF95_REG_00_FIFO, data, len);
 8005a66:	b2e4      	uxtb	r4, r4
	spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 8005a68:	200d      	movs	r0, #13
 8005a6a:	f7ff fda9 	bl	80055c0 <spi_write_reg>
	spi_write_reg_burst(RH_RF95_REG_00_FIFO, data, len);
 8005a6e:	0022      	movs	r2, r4
 8005a70:	0029      	movs	r1, r5
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7ff fe0c 	bl	8005690 <spi_write_reg_burst>
	spi_write_reg(RH_RF95_REG_22_PAYLOAD_LENGTH, len);
 8005a78:	0021      	movs	r1, r4
 8005a7a:	2022      	movs	r0, #34	; 0x22
 8005a7c:	f7ff fda0 	bl	80055c0 <spi_write_reg>
	radio_set_tx();
 8005a80:	f7ff ff0c 	bl	800589c <radio_set_tx>
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) 0xffff ) == pdTRUE ) {
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <radio_transmit+0x58>)
 8005a86:	490b      	ldr	r1, [pc, #44]	; (8005ab4 <radio_transmit+0x5c>)
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	f7ff f8c9 	bl	8004c20 <xQueueSemaphoreTake>
	return e_success;
 8005a8e:	2600      	movs	r6, #0
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) 0xffff ) == pdTRUE ) {
 8005a90:	2801      	cmp	r0, #1
 8005a92:	d10a      	bne.n	8005aaa <radio_transmit+0x52>
		spi_read_reg(RH_RF95_REG_12_IRQ_FLAGS, &irq_flags);
 8005a94:	466b      	mov	r3, sp
 8005a96:	3011      	adds	r0, #17
 8005a98:	1dd9      	adds	r1, r3, #7
 8005a9a:	f7ff fdc1 	bl	8005620 <spi_read_reg>
		spi_write_reg(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 8005a9e:	21ff      	movs	r1, #255	; 0xff
 8005aa0:	2012      	movs	r0, #18
 8005aa2:	f7ff fd8d 	bl	80055c0 <spi_write_reg>
		radio_set_idle();
 8005aa6:	f7ff fee9 	bl	800587c <radio_set_idle>
}
 8005aaa:	0030      	movs	r0, r6
 8005aac:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20001108 	.word	0x20001108
 8005ab4:	0000ffff 	.word	0x0000ffff

08005ab8 <radio_receive>:
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 8005ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*plen > MAX_PACKET_LEN) {
 8005aba:	880b      	ldrh	r3, [r1, #0]
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 8005abc:	b085      	sub	sp, #20
 8005abe:	000e      	movs	r6, r1
 8005ac0:	0015      	movs	r5, r2
		return e_failure;
 8005ac2:	2401      	movs	r4, #1
error_t radio_receive(uint8_t * data, uint16_t * plen, uint16_t timeout) {
 8005ac4:	9001      	str	r0, [sp, #4]
	if (*plen > MAX_PACKET_LEN) {
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	d83b      	bhi.n	8005b42 <radio_receive+0x8a>
	radio_set_rx();
 8005aca:	f7ff fedd 	bl	8005888 <radio_set_rx>
	if(xSemaphoreTake( radio_isr_sem, ( TickType_t ) timeout ) == pdTRUE ) {
 8005ace:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <radio_receive+0x98>)
 8005ad0:	0029      	movs	r1, r5
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	f7ff f8a4 	bl	8004c20 <xQueueSemaphoreTake>
 8005ad8:	0005      	movs	r5, r0
 8005ada:	42a0      	cmp	r0, r4
 8005adc:	d134      	bne.n	8005b48 <radio_receive+0x90>
		spi_read_reg(RH_RF95_REG_12_IRQ_FLAGS, &irq_flags);
 8005ade:	ab02      	add	r3, sp, #8
 8005ae0:	1d5c      	adds	r4, r3, #5
 8005ae2:	0021      	movs	r1, r4
 8005ae4:	2012      	movs	r0, #18
 8005ae6:	f7ff fd9b 	bl	8005620 <spi_read_reg>
		spi_write_reg(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 8005aea:	21ff      	movs	r1, #255	; 0xff
 8005aec:	2012      	movs	r0, #18
 8005aee:	f7ff fd67 	bl	80055c0 <spi_write_reg>
		if((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))) {
 8005af2:	7823      	ldrb	r3, [r4, #0]
 8005af4:	225f      	movs	r2, #95	; 0x5f
 8005af6:	001c      	movs	r4, r3
 8005af8:	4394      	bics	r4, r2
 8005afa:	d003      	beq.n	8005b04 <radio_receive+0x4c>
	radio_set_idle();
 8005afc:	f7ff febe 	bl	800587c <radio_set_idle>
	return e_failure;
 8005b00:	002c      	movs	r4, r5
 8005b02:	e01e      	b.n	8005b42 <radio_receive+0x8a>
		} else if(irq_flags & RH_RF95_RX_DONE) {
 8005b04:	065b      	lsls	r3, r3, #25
 8005b06:	d5f9      	bpl.n	8005afc <radio_receive+0x44>
			spi_read_reg(RH_RF95_REG_13_RX_NB_BYTES, &packet_len);
 8005b08:	ab02      	add	r3, sp, #8
 8005b0a:	1d99      	adds	r1, r3, #6
 8005b0c:	2013      	movs	r0, #19
 8005b0e:	f7ff fd87 	bl	8005620 <spi_read_reg>
			spi_read_reg(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR, &current_fifo_address);
 8005b12:	ab02      	add	r3, sp, #8
 8005b14:	1ddf      	adds	r7, r3, #7
 8005b16:	0039      	movs	r1, r7
 8005b18:	2010      	movs	r0, #16
 8005b1a:	f7ff fd81 	bl	8005620 <spi_read_reg>
			spi_write_reg(RH_RF95_REG_0D_FIFO_ADDR_PTR, current_fifo_address);
 8005b1e:	200d      	movs	r0, #13
 8005b20:	7839      	ldrb	r1, [r7, #0]
 8005b22:	f7ff fd4d 	bl	80055c0 <spi_write_reg>
			if(packet_len > *plen) {
 8005b26:	ab02      	add	r3, sp, #8
 8005b28:	799a      	ldrb	r2, [r3, #6]
 8005b2a:	8833      	ldrh	r3, [r6, #0]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d3e5      	bcc.n	8005afc <radio_receive+0x44>
			spi_read_reg_burst(RH_RF95_REG_00_FIFO, data, packet_len);
 8005b30:	0020      	movs	r0, r4
 8005b32:	9901      	ldr	r1, [sp, #4]
 8005b34:	f7ff fde8 	bl	8005708 <spi_read_reg_burst>
			*plen = packet_len;
 8005b38:	ab02      	add	r3, sp, #8
 8005b3a:	799b      	ldrb	r3, [r3, #6]
 8005b3c:	8033      	strh	r3, [r6, #0]
			radio_set_idle();
 8005b3e:	f7ff fe9d 	bl	800587c <radio_set_idle>
}
 8005b42:	0020      	movs	r0, r4
 8005b44:	b005      	add	sp, #20
 8005b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_set_idle();
 8005b48:	f7ff fe98 	bl	800587c <radio_set_idle>
		return e_timeout;
 8005b4c:	2402      	movs	r4, #2
 8005b4e:	e7f8      	b.n	8005b42 <radio_receive+0x8a>
 8005b50:	20001108 	.word	0x20001108

08005b54 <radio_store_packet>:
} tracker_data = {0};



void radio_store_packet(uint32_t packet_id) {
	tracker_data.packet_list[tracker_data.packet_pointer++] = packet_id; //store packet in database
 8005b54:	21cc      	movs	r1, #204	; 0xcc
 8005b56:	4a07      	ldr	r2, [pc, #28]	; (8005b74 <radio_store_packet+0x20>)
 8005b58:	0049      	lsls	r1, r1, #1
 8005b5a:	5853      	ldr	r3, [r2, r1]
void radio_store_packet(uint32_t packet_id) {
 8005b5c:	b510      	push	{r4, lr}
	tracker_data.packet_list[tracker_data.packet_pointer++] = packet_id; //store packet in database
 8005b5e:	1c5c      	adds	r4, r3, #1
 8005b60:	3302      	adds	r3, #2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	5054      	str	r4, [r2, r1]
 8005b66:	50d0      	str	r0, [r2, r3]
	if(tracker_data.packet_pointer >= PACKET_HISTORY) {
 8005b68:	2c63      	cmp	r4, #99	; 0x63
 8005b6a:	d901      	bls.n	8005b70 <radio_store_packet+0x1c>
		tracker_data.packet_pointer = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	5053      	str	r3, [r2, r1]
	}
}
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20001178 	.word	0x20001178

08005b78 <radio_thread>:



void radio_thread(void * arg) {
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7a:	b085      	sub	sp, #20


	radio_init();
 8005b7c:	f7ff ff22 	bl	80059c4 <radio_init>

	//read hardware board ID
	tracker_data.tracker_id = GPIOB->IDR | 0x0F;
 8005b80:	200f      	movs	r0, #15
 8005b82:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <radio_thread+0xb0>)
 8005b84:	4e29      	ldr	r6, [pc, #164]	; (8005c2c <radio_thread+0xb4>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	4318      	orrs	r0, r3
 8005b8a:	b2c0      	uxtb	r0, r0
 8005b8c:	7030      	strb	r0, [r6, #0]

	srand(tracker_data.tracker_id);
 8005b8e:	f000 f88d 	bl	8005cac <srand>
		static radio_packet_t tx_packet = {
				.callsign = CALLSIGN,
				.hop_count = 0
		};

		tx_packet.packet_id = tracker_data.tracker_id | tracker_data.packet_count++ << 8;
 8005b92:	6870      	ldr	r0, [r6, #4]
 8005b94:	7832      	ldrb	r2, [r6, #0]
 8005b96:	4c26      	ldr	r4, [pc, #152]	; (8005c30 <radio_thread+0xb8>)
 8005b98:	1c41      	adds	r1, r0, #1
 8005b9a:	0200      	lsls	r0, r0, #8
 8005b9c:	4310      	orrs	r0, r2
 8005b9e:	6060      	str	r0, [r4, #4]
 8005ba0:	6071      	str	r1, [r6, #4]

		radio_store_packet(tx_packet.packet_id);
 8005ba2:	f7ff ffd7 	bl	8005b54 <radio_store_packet>

		radio_transmit((uint8_t *) &tx_packet, sizeof(radio_packet_t));
 8005ba6:	2124      	movs	r1, #36	; 0x24
 8005ba8:	0020      	movs	r0, r4
 8005baa:	f7ff ff55 	bl	8005a58 <radio_transmit>

		 //timer between 2 and 5 minutes
		int32_t rx_timer = (int64_t)rand()*18000 / RAND_MAX + 12000;
 8005bae:	f000 f8ad 	bl	8005d0c <rand>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <radio_thread+0xbc>)
 8005bb6:	17c1      	asrs	r1, r0, #31
 8005bb8:	f7fa fbd2 	bl	8000360 <__aeabi_lmul>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <radio_thread+0xc0>)
 8005bc0:	f7fa fb8a 	bl	80002d8 <__aeabi_ldivmod>
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <radio_thread+0xc4>)
 8005bc6:	18c4      	adds	r4, r0, r3
		while(rx_timer > 0) {
 8005bc8:	2c00      	cmp	r4, #0
 8005bca:	dde2      	ble.n	8005b92 <radio_thread+0x1a>
			uint32_t time = HAL_GetTick();
 8005bcc:	f7fc fc56 	bl	800247c <HAL_GetTick>
			static radio_packet_t rx_packet;
			uint16_t size = sizeof(radio_packet_t);
 8005bd0:	ab02      	add	r3, sp, #8
 8005bd2:	1d99      	adds	r1, r3, #6
 8005bd4:	2324      	movs	r3, #36	; 0x24
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 8005bd6:	4d1a      	ldr	r5, [pc, #104]	; (8005c40 <radio_thread+0xc8>)
			uint32_t time = HAL_GetTick();
 8005bd8:	9001      	str	r0, [sp, #4]
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 8005bda:	b2a2      	uxth	r2, r4
 8005bdc:	0028      	movs	r0, r5
			uint16_t size = sizeof(radio_packet_t);
 8005bde:	800b      	strh	r3, [r1, #0]
			if(radio_receive((uint8_t *)&rx_packet, &size, rx_timer) == e_success) {
 8005be0:	f7ff ff6a 	bl	8005ab8 <radio_receive>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d118      	bne.n	8005c1a <radio_thread+0xa2>
				//packet received
				if(rx_packet.callsign == CALLSIGN) {
 8005be8:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <radio_thread+0xcc>)
 8005bea:	682a      	ldr	r2, [r5, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d114      	bne.n	8005c1a <radio_thread+0xa2>
 8005bf0:	0037      	movs	r7, r6
					//valid packet

					//check if packet is known
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 8005bf2:	9000      	str	r0, [sp, #0]
						if(rx_packet.packet_id == tracker_data.packet_list[i]) {
 8005bf4:	6868      	ldr	r0, [r5, #4]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4298      	cmp	r0, r3
 8005bfa:	d00e      	beq.n	8005c1a <radio_thread+0xa2>
							//known packet -> discard
							break;
						} else {
							//unknown packet -> repeat
							rx_packet.hop_count += 1;
 8005bfc:	7a2b      	ldrb	r3, [r5, #8]
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 8005bfe:	3704      	adds	r7, #4
							rx_packet.hop_count += 1;
 8005c00:	3301      	adds	r3, #1
 8005c02:	722b      	strb	r3, [r5, #8]
							radio_store_packet(rx_packet.packet_id);
 8005c04:	f7ff ffa6 	bl	8005b54 <radio_store_packet>
							radio_transmit((uint8_t *)&rx_packet, sizeof(radio_packet_t));
 8005c08:	2124      	movs	r1, #36	; 0x24
 8005c0a:	0028      	movs	r0, r5
 8005c0c:	f7ff ff24 	bl	8005a58 <radio_transmit>
					for (uint32_t i = 0; i < PACKET_HISTORY; i++) {
 8005c10:	9b00      	ldr	r3, [sp, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2b64      	cmp	r3, #100	; 0x64
 8005c18:	d1ec      	bne.n	8005bf4 <radio_thread+0x7c>
					}
				}
			} else {
				//some other condition (stray packet, timeout, error)
			}
			time = HAL_GetTick() - time;
 8005c1a:	f7fc fc2f 	bl	800247c <HAL_GetTick>
			rx_timer -= time;
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	18e4      	adds	r4, r4, r3
 8005c22:	1a24      	subs	r4, r4, r0
 8005c24:	e7d0      	b.n	8005bc8 <radio_thread+0x50>
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	50000400 	.word	0x50000400
 8005c2c:	20001178 	.word	0x20001178
 8005c30:	20000010 	.word	0x20000010
 8005c34:	00004650 	.word	0x00004650
 8005c38:	7fffffff 	.word	0x7fffffff
 8005c3c:	00002ee0 	.word	0x00002ee0
 8005c40:	20001154 	.word	0x20001154
 8005c44:	47424652 	.word	0x47424652

08005c48 <__errno>:
 8005c48:	4b01      	ldr	r3, [pc, #4]	; (8005c50 <__errno+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	20000034 	.word	0x20000034

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	2600      	movs	r6, #0
 8005c58:	4d0c      	ldr	r5, [pc, #48]	; (8005c8c <__libc_init_array+0x38>)
 8005c5a:	4c0d      	ldr	r4, [pc, #52]	; (8005c90 <__libc_init_array+0x3c>)
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	2600      	movs	r6, #0
 8005c66:	f001 f8d7 	bl	8006e18 <_init>
 8005c6a:	4d0a      	ldr	r5, [pc, #40]	; (8005c94 <__libc_init_array+0x40>)
 8005c6c:	4c0a      	ldr	r4, [pc, #40]	; (8005c98 <__libc_init_array+0x44>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	00b3      	lsls	r3, r6, #2
 8005c7a:	58eb      	ldr	r3, [r5, r3]
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	00b3      	lsls	r3, r6, #2
 8005c84:	58eb      	ldr	r3, [r5, r3]
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	08007040 	.word	0x08007040
 8005c90:	08007040 	.word	0x08007040
 8005c94:	08007040 	.word	0x08007040
 8005c98:	08007044 	.word	0x08007044

08005c9c <memset>:
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	1882      	adds	r2, r0, r2
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	7019      	strb	r1, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <srand>:
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <srand+0x48>)
 8005cae:	b570      	push	{r4, r5, r6, lr}
 8005cb0:	681d      	ldr	r5, [r3, #0]
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <srand+0x3c>
 8005cba:	2018      	movs	r0, #24
 8005cbc:	f000 f892 	bl	8005de4 <malloc>
 8005cc0:	1e02      	subs	r2, r0, #0
 8005cc2:	63a8      	str	r0, [r5, #56]	; 0x38
 8005cc4:	d104      	bne.n	8005cd0 <srand+0x24>
 8005cc6:	2142      	movs	r1, #66	; 0x42
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <srand+0x4c>)
 8005cca:	480c      	ldr	r0, [pc, #48]	; (8005cfc <srand+0x50>)
 8005ccc:	f000 f85c 	bl	8005d88 <__assert_func>
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <srand+0x54>)
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <srand+0x58>)
 8005cd8:	6043      	str	r3, [r0, #4]
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <srand+0x5c>)
 8005cdc:	6083      	str	r3, [r0, #8]
 8005cde:	230b      	movs	r3, #11
 8005ce0:	8183      	strh	r3, [r0, #12]
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	6110      	str	r0, [r2, #16]
 8005ce6:	6151      	str	r1, [r2, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005cec:	611c      	str	r4, [r3, #16]
 8005cee:	615a      	str	r2, [r3, #20]
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20000034 	.word	0x20000034
 8005cf8:	08006ef4 	.word	0x08006ef4
 8005cfc:	08006f0b 	.word	0x08006f0b
 8005d00:	abcd330e 	.word	0xabcd330e
 8005d04:	e66d1234 	.word	0xe66d1234
 8005d08:	0005deec 	.word	0x0005deec

08005d0c <rand>:
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <rand+0x5c>)
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	681c      	ldr	r4, [r3, #0]
 8005d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <rand+0x3a>
 8005d18:	2018      	movs	r0, #24
 8005d1a:	f000 f863 	bl	8005de4 <malloc>
 8005d1e:	1e02      	subs	r2, r0, #0
 8005d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8005d22:	d104      	bne.n	8005d2e <rand+0x22>
 8005d24:	214e      	movs	r1, #78	; 0x4e
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <rand+0x60>)
 8005d28:	4811      	ldr	r0, [pc, #68]	; (8005d70 <rand+0x64>)
 8005d2a:	f000 f82d 	bl	8005d88 <__assert_func>
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <rand+0x68>)
 8005d30:	2100      	movs	r1, #0
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <rand+0x6c>)
 8005d36:	6043      	str	r3, [r0, #4]
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <rand+0x70>)
 8005d3a:	6083      	str	r3, [r0, #8]
 8005d3c:	230b      	movs	r3, #11
 8005d3e:	8183      	strh	r3, [r0, #12]
 8005d40:	2001      	movs	r0, #1
 8005d42:	6110      	str	r0, [r2, #16]
 8005d44:	6151      	str	r1, [r2, #20]
 8005d46:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005d48:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <rand+0x74>)
 8005d4a:	6920      	ldr	r0, [r4, #16]
 8005d4c:	6961      	ldr	r1, [r4, #20]
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <rand+0x78>)
 8005d50:	f7fa fb06 	bl	8000360 <__aeabi_lmul>
 8005d54:	2201      	movs	r2, #1
 8005d56:	2300      	movs	r3, #0
 8005d58:	1880      	adds	r0, r0, r2
 8005d5a:	4159      	adcs	r1, r3
 8005d5c:	6120      	str	r0, [r4, #16]
 8005d5e:	6161      	str	r1, [r4, #20]
 8005d60:	0048      	lsls	r0, r1, #1
 8005d62:	0840      	lsrs	r0, r0, #1
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000034 	.word	0x20000034
 8005d6c:	08006ef4 	.word	0x08006ef4
 8005d70:	08006f0b 	.word	0x08006f0b
 8005d74:	abcd330e 	.word	0xabcd330e
 8005d78:	e66d1234 	.word	0xe66d1234
 8005d7c:	0005deec 	.word	0x0005deec
 8005d80:	4c957f2d 	.word	0x4c957f2d
 8005d84:	5851f42d 	.word	0x5851f42d

08005d88 <__assert_func>:
 8005d88:	b530      	push	{r4, r5, lr}
 8005d8a:	0014      	movs	r4, r2
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <__assert_func+0x2c>)
 8005d90:	0005      	movs	r5, r0
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b085      	sub	sp, #20
 8005d96:	68d8      	ldr	r0, [r3, #12]
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <__assert_func+0x30>)
 8005d9a:	2c00      	cmp	r4, #0
 8005d9c:	d101      	bne.n	8005da2 <__assert_func+0x1a>
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <__assert_func+0x34>)
 8005da0:	001c      	movs	r4, r3
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	9100      	str	r1, [sp, #0]
 8005da6:	002b      	movs	r3, r5
 8005da8:	4905      	ldr	r1, [pc, #20]	; (8005dc0 <__assert_func+0x38>)
 8005daa:	9402      	str	r4, [sp, #8]
 8005dac:	f000 f80a 	bl	8005dc4 <fiprintf>
 8005db0:	f000 fcc8 	bl	8006744 <abort>
 8005db4:	20000034 	.word	0x20000034
 8005db8:	08006f66 	.word	0x08006f66
 8005dbc:	08006fa1 	.word	0x08006fa1
 8005dc0:	08006f73 	.word	0x08006f73

08005dc4 <fiprintf>:
 8005dc4:	b40e      	push	{r1, r2, r3}
 8005dc6:	b503      	push	{r0, r1, lr}
 8005dc8:	0001      	movs	r1, r0
 8005dca:	ab03      	add	r3, sp, #12
 8005dcc:	4804      	ldr	r0, [pc, #16]	; (8005de0 <fiprintf+0x1c>)
 8005dce:	cb04      	ldmia	r3!, {r2}
 8005dd0:	6800      	ldr	r0, [r0, #0]
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f000 f91a 	bl	800600c <_vfiprintf_r>
 8005dd8:	b002      	add	sp, #8
 8005dda:	bc08      	pop	{r3}
 8005ddc:	b003      	add	sp, #12
 8005dde:	4718      	bx	r3
 8005de0:	20000034 	.word	0x20000034

08005de4 <malloc>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <malloc+0x10>)
 8005de8:	0001      	movs	r1, r0
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	f000 f870 	bl	8005ed0 <_malloc_r>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20000034 	.word	0x20000034

08005df8 <_free_r>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	0005      	movs	r5, r0
 8005dfc:	2900      	cmp	r1, #0
 8005dfe:	d010      	beq.n	8005e22 <_free_r+0x2a>
 8005e00:	1f0c      	subs	r4, r1, #4
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da00      	bge.n	8005e0a <_free_r+0x12>
 8005e08:	18e4      	adds	r4, r4, r3
 8005e0a:	0028      	movs	r0, r5
 8005e0c:	f000 feec 	bl	8006be8 <__malloc_lock>
 8005e10:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <_free_r+0x90>)
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <_free_r+0x2c>
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	6014      	str	r4, [r2, #0]
 8005e1c:	0028      	movs	r0, r5
 8005e1e:	f000 feeb 	bl	8006bf8 <__malloc_unlock>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d908      	bls.n	8005e3a <_free_r+0x42>
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	1860      	adds	r0, r4, r1
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	d1f3      	bne.n	8005e18 <_free_r+0x20>
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	1841      	adds	r1, r0, r1
 8005e36:	6021      	str	r1, [r4, #0]
 8005e38:	e7ee      	b.n	8005e18 <_free_r+0x20>
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <_free_r+0x4e>
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	d9f9      	bls.n	8005e3a <_free_r+0x42>
 8005e46:	6811      	ldr	r1, [r2, #0]
 8005e48:	1850      	adds	r0, r2, r1
 8005e4a:	42a0      	cmp	r0, r4
 8005e4c:	d10b      	bne.n	8005e66 <_free_r+0x6e>
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	1809      	adds	r1, r1, r0
 8005e52:	1850      	adds	r0, r2, r1
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	4283      	cmp	r3, r0
 8005e58:	d1e0      	bne.n	8005e1c <_free_r+0x24>
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	1841      	adds	r1, r0, r1
 8005e60:	6011      	str	r1, [r2, #0]
 8005e62:	6053      	str	r3, [r2, #4]
 8005e64:	e7da      	b.n	8005e1c <_free_r+0x24>
 8005e66:	42a0      	cmp	r0, r4
 8005e68:	d902      	bls.n	8005e70 <_free_r+0x78>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	602b      	str	r3, [r5, #0]
 8005e6e:	e7d5      	b.n	8005e1c <_free_r+0x24>
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	1860      	adds	r0, r4, r1
 8005e74:	4283      	cmp	r3, r0
 8005e76:	d103      	bne.n	8005e80 <_free_r+0x88>
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	1841      	adds	r1, r0, r1
 8005e7e:	6021      	str	r1, [r4, #0]
 8005e80:	6063      	str	r3, [r4, #4]
 8005e82:	6054      	str	r4, [r2, #4]
 8005e84:	e7ca      	b.n	8005e1c <_free_r+0x24>
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	20001314 	.word	0x20001314

08005e8c <sbrk_aligned>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4e0f      	ldr	r6, [pc, #60]	; (8005ecc <sbrk_aligned+0x40>)
 8005e90:	000d      	movs	r5, r1
 8005e92:	6831      	ldr	r1, [r6, #0]
 8005e94:	0004      	movs	r4, r0
 8005e96:	2900      	cmp	r1, #0
 8005e98:	d102      	bne.n	8005ea0 <sbrk_aligned+0x14>
 8005e9a:	f000 fb73 	bl	8006584 <_sbrk_r>
 8005e9e:	6030      	str	r0, [r6, #0]
 8005ea0:	0029      	movs	r1, r5
 8005ea2:	0020      	movs	r0, r4
 8005ea4:	f000 fb6e 	bl	8006584 <_sbrk_r>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d00a      	beq.n	8005ec2 <sbrk_aligned+0x36>
 8005eac:	2303      	movs	r3, #3
 8005eae:	1cc5      	adds	r5, r0, #3
 8005eb0:	439d      	bics	r5, r3
 8005eb2:	42a8      	cmp	r0, r5
 8005eb4:	d007      	beq.n	8005ec6 <sbrk_aligned+0x3a>
 8005eb6:	1a29      	subs	r1, r5, r0
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f000 fb63 	bl	8006584 <_sbrk_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d101      	bne.n	8005ec6 <sbrk_aligned+0x3a>
 8005ec2:	2501      	movs	r5, #1
 8005ec4:	426d      	negs	r5, r5
 8005ec6:	0028      	movs	r0, r5
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	20001318 	.word	0x20001318

08005ed0 <_malloc_r>:
 8005ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	1ccb      	adds	r3, r1, #3
 8005ed6:	4393      	bics	r3, r2
 8005ed8:	3308      	adds	r3, #8
 8005eda:	0006      	movs	r6, r0
 8005edc:	001f      	movs	r7, r3
 8005ede:	2b0c      	cmp	r3, #12
 8005ee0:	d232      	bcs.n	8005f48 <_malloc_r+0x78>
 8005ee2:	270c      	movs	r7, #12
 8005ee4:	42b9      	cmp	r1, r7
 8005ee6:	d831      	bhi.n	8005f4c <_malloc_r+0x7c>
 8005ee8:	0030      	movs	r0, r6
 8005eea:	f000 fe7d 	bl	8006be8 <__malloc_lock>
 8005eee:	4d32      	ldr	r5, [pc, #200]	; (8005fb8 <_malloc_r+0xe8>)
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	001c      	movs	r4, r3
 8005ef4:	2c00      	cmp	r4, #0
 8005ef6:	d12e      	bne.n	8005f56 <_malloc_r+0x86>
 8005ef8:	0039      	movs	r1, r7
 8005efa:	0030      	movs	r0, r6
 8005efc:	f7ff ffc6 	bl	8005e8c <sbrk_aligned>
 8005f00:	0004      	movs	r4, r0
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	d11e      	bne.n	8005f44 <_malloc_r+0x74>
 8005f06:	682c      	ldr	r4, [r5, #0]
 8005f08:	0025      	movs	r5, r4
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	d14a      	bne.n	8005fa4 <_malloc_r+0xd4>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0029      	movs	r1, r5
 8005f12:	18e3      	adds	r3, r4, r3
 8005f14:	0030      	movs	r0, r6
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	f000 fb34 	bl	8006584 <_sbrk_r>
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	d143      	bne.n	8005faa <_malloc_r+0xda>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	3703      	adds	r7, #3
 8005f26:	1aff      	subs	r7, r7, r3
 8005f28:	2303      	movs	r3, #3
 8005f2a:	439f      	bics	r7, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	2f0c      	cmp	r7, #12
 8005f30:	d200      	bcs.n	8005f34 <_malloc_r+0x64>
 8005f32:	270c      	movs	r7, #12
 8005f34:	0039      	movs	r1, r7
 8005f36:	0030      	movs	r0, r6
 8005f38:	f7ff ffa8 	bl	8005e8c <sbrk_aligned>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d034      	beq.n	8005faa <_malloc_r+0xda>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	19df      	adds	r7, r3, r7
 8005f44:	6027      	str	r7, [r4, #0]
 8005f46:	e013      	b.n	8005f70 <_malloc_r+0xa0>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dacb      	bge.n	8005ee4 <_malloc_r+0x14>
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	2500      	movs	r5, #0
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	0028      	movs	r0, r5
 8005f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	1bd1      	subs	r1, r2, r7
 8005f5a:	d420      	bmi.n	8005f9e <_malloc_r+0xce>
 8005f5c:	290b      	cmp	r1, #11
 8005f5e:	d917      	bls.n	8005f90 <_malloc_r+0xc0>
 8005f60:	19e2      	adds	r2, r4, r7
 8005f62:	6027      	str	r7, [r4, #0]
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d111      	bne.n	8005f8c <_malloc_r+0xbc>
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	6053      	str	r3, [r2, #4]
 8005f70:	0030      	movs	r0, r6
 8005f72:	0025      	movs	r5, r4
 8005f74:	f000 fe40 	bl	8006bf8 <__malloc_unlock>
 8005f78:	2207      	movs	r2, #7
 8005f7a:	350b      	adds	r5, #11
 8005f7c:	1d23      	adds	r3, r4, #4
 8005f7e:	4395      	bics	r5, r2
 8005f80:	1aea      	subs	r2, r5, r3
 8005f82:	429d      	cmp	r5, r3
 8005f84:	d0e5      	beq.n	8005f52 <_malloc_r+0x82>
 8005f86:	1b5b      	subs	r3, r3, r5
 8005f88:	50a3      	str	r3, [r4, r2]
 8005f8a:	e7e2      	b.n	8005f52 <_malloc_r+0x82>
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	e7ec      	b.n	8005f6a <_malloc_r+0x9a>
 8005f90:	6862      	ldr	r2, [r4, #4]
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d101      	bne.n	8005f9a <_malloc_r+0xca>
 8005f96:	602a      	str	r2, [r5, #0]
 8005f98:	e7ea      	b.n	8005f70 <_malloc_r+0xa0>
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	e7e8      	b.n	8005f70 <_malloc_r+0xa0>
 8005f9e:	0023      	movs	r3, r4
 8005fa0:	6864      	ldr	r4, [r4, #4]
 8005fa2:	e7a7      	b.n	8005ef4 <_malloc_r+0x24>
 8005fa4:	002c      	movs	r4, r5
 8005fa6:	686d      	ldr	r5, [r5, #4]
 8005fa8:	e7af      	b.n	8005f0a <_malloc_r+0x3a>
 8005faa:	230c      	movs	r3, #12
 8005fac:	0030      	movs	r0, r6
 8005fae:	6033      	str	r3, [r6, #0]
 8005fb0:	f000 fe22 	bl	8006bf8 <__malloc_unlock>
 8005fb4:	e7cd      	b.n	8005f52 <_malloc_r+0x82>
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	20001314 	.word	0x20001314

08005fbc <__sfputc_r>:
 8005fbc:	6893      	ldr	r3, [r2, #8]
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	6093      	str	r3, [r2, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da04      	bge.n	8005fd2 <__sfputc_r+0x16>
 8005fc8:	6994      	ldr	r4, [r2, #24]
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	db07      	blt.n	8005fde <__sfputc_r+0x22>
 8005fce:	290a      	cmp	r1, #10
 8005fd0:	d005      	beq.n	8005fde <__sfputc_r+0x22>
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	1c58      	adds	r0, r3, #1
 8005fd6:	6010      	str	r0, [r2, #0]
 8005fd8:	7019      	strb	r1, [r3, #0]
 8005fda:	0008      	movs	r0, r1
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	f000 fae3 	bl	80065a8 <__swbuf_r>
 8005fe2:	0001      	movs	r1, r0
 8005fe4:	e7f9      	b.n	8005fda <__sfputc_r+0x1e>

08005fe6 <__sfputs_r>:
 8005fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe8:	0006      	movs	r6, r0
 8005fea:	000f      	movs	r7, r1
 8005fec:	0014      	movs	r4, r2
 8005fee:	18d5      	adds	r5, r2, r3
 8005ff0:	42ac      	cmp	r4, r5
 8005ff2:	d101      	bne.n	8005ff8 <__sfputs_r+0x12>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e007      	b.n	8006008 <__sfputs_r+0x22>
 8005ff8:	7821      	ldrb	r1, [r4, #0]
 8005ffa:	003a      	movs	r2, r7
 8005ffc:	0030      	movs	r0, r6
 8005ffe:	f7ff ffdd 	bl	8005fbc <__sfputc_r>
 8006002:	3401      	adds	r4, #1
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d1f3      	bne.n	8005ff0 <__sfputs_r+0xa>
 8006008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800600c <_vfiprintf_r>:
 800600c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600e:	b0a1      	sub	sp, #132	; 0x84
 8006010:	0006      	movs	r6, r0
 8006012:	000c      	movs	r4, r1
 8006014:	001f      	movs	r7, r3
 8006016:	9203      	str	r2, [sp, #12]
 8006018:	2800      	cmp	r0, #0
 800601a:	d004      	beq.n	8006026 <_vfiprintf_r+0x1a>
 800601c:	6983      	ldr	r3, [r0, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <_vfiprintf_r+0x1a>
 8006022:	f000 fcc5 	bl	80069b0 <__sinit>
 8006026:	4b8e      	ldr	r3, [pc, #568]	; (8006260 <_vfiprintf_r+0x254>)
 8006028:	429c      	cmp	r4, r3
 800602a:	d11c      	bne.n	8006066 <_vfiprintf_r+0x5a>
 800602c:	6874      	ldr	r4, [r6, #4]
 800602e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d405      	bmi.n	8006040 <_vfiprintf_r+0x34>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	059b      	lsls	r3, r3, #22
 8006038:	d402      	bmi.n	8006040 <_vfiprintf_r+0x34>
 800603a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800603c:	f000 fd59 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	071b      	lsls	r3, r3, #28
 8006044:	d502      	bpl.n	800604c <_vfiprintf_r+0x40>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11d      	bne.n	8006088 <_vfiprintf_r+0x7c>
 800604c:	0021      	movs	r1, r4
 800604e:	0030      	movs	r0, r6
 8006050:	f000 fb00 	bl	8006654 <__swsetup_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	d017      	beq.n	8006088 <_vfiprintf_r+0x7c>
 8006058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800605a:	07db      	lsls	r3, r3, #31
 800605c:	d50d      	bpl.n	800607a <_vfiprintf_r+0x6e>
 800605e:	2001      	movs	r0, #1
 8006060:	4240      	negs	r0, r0
 8006062:	b021      	add	sp, #132	; 0x84
 8006064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006066:	4b7f      	ldr	r3, [pc, #508]	; (8006264 <_vfiprintf_r+0x258>)
 8006068:	429c      	cmp	r4, r3
 800606a:	d101      	bne.n	8006070 <_vfiprintf_r+0x64>
 800606c:	68b4      	ldr	r4, [r6, #8]
 800606e:	e7de      	b.n	800602e <_vfiprintf_r+0x22>
 8006070:	4b7d      	ldr	r3, [pc, #500]	; (8006268 <_vfiprintf_r+0x25c>)
 8006072:	429c      	cmp	r4, r3
 8006074:	d1db      	bne.n	800602e <_vfiprintf_r+0x22>
 8006076:	68f4      	ldr	r4, [r6, #12]
 8006078:	e7d9      	b.n	800602e <_vfiprintf_r+0x22>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	059b      	lsls	r3, r3, #22
 800607e:	d4ee      	bmi.n	800605e <_vfiprintf_r+0x52>
 8006080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006082:	f000 fd37 	bl	8006af4 <__retarget_lock_release_recursive>
 8006086:	e7ea      	b.n	800605e <_vfiprintf_r+0x52>
 8006088:	2300      	movs	r3, #0
 800608a:	ad08      	add	r5, sp, #32
 800608c:	616b      	str	r3, [r5, #20]
 800608e:	3320      	adds	r3, #32
 8006090:	766b      	strb	r3, [r5, #25]
 8006092:	3310      	adds	r3, #16
 8006094:	76ab      	strb	r3, [r5, #26]
 8006096:	9707      	str	r7, [sp, #28]
 8006098:	9f03      	ldr	r7, [sp, #12]
 800609a:	783b      	ldrb	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <_vfiprintf_r+0x98>
 80060a0:	2b25      	cmp	r3, #37	; 0x25
 80060a2:	d14e      	bne.n	8006142 <_vfiprintf_r+0x136>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	1afb      	subs	r3, r7, r3
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	429f      	cmp	r7, r3
 80060ae:	d00d      	beq.n	80060cc <_vfiprintf_r+0xc0>
 80060b0:	9b05      	ldr	r3, [sp, #20]
 80060b2:	0021      	movs	r1, r4
 80060b4:	0030      	movs	r0, r6
 80060b6:	9a03      	ldr	r2, [sp, #12]
 80060b8:	f7ff ff95 	bl	8005fe6 <__sfputs_r>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d100      	bne.n	80060c2 <_vfiprintf_r+0xb6>
 80060c0:	e0b5      	b.n	800622e <_vfiprintf_r+0x222>
 80060c2:	696a      	ldr	r2, [r5, #20]
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	4694      	mov	ip, r2
 80060c8:	4463      	add	r3, ip
 80060ca:	616b      	str	r3, [r5, #20]
 80060cc:	783b      	ldrb	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d100      	bne.n	80060d4 <_vfiprintf_r+0xc8>
 80060d2:	e0ac      	b.n	800622e <_vfiprintf_r+0x222>
 80060d4:	2201      	movs	r2, #1
 80060d6:	1c7b      	adds	r3, r7, #1
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	2300      	movs	r3, #0
 80060dc:	4252      	negs	r2, r2
 80060de:	606a      	str	r2, [r5, #4]
 80060e0:	a904      	add	r1, sp, #16
 80060e2:	3254      	adds	r2, #84	; 0x54
 80060e4:	1852      	adds	r2, r2, r1
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	60eb      	str	r3, [r5, #12]
 80060ea:	60ab      	str	r3, [r5, #8]
 80060ec:	7013      	strb	r3, [r2, #0]
 80060ee:	65ab      	str	r3, [r5, #88]	; 0x58
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	2205      	movs	r2, #5
 80060f4:	7819      	ldrb	r1, [r3, #0]
 80060f6:	485d      	ldr	r0, [pc, #372]	; (800626c <_vfiprintf_r+0x260>)
 80060f8:	f000 fd6a 	bl	8006bd0 <memchr>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	1c5f      	adds	r7, r3, #1
 8006100:	2800      	cmp	r0, #0
 8006102:	d120      	bne.n	8006146 <_vfiprintf_r+0x13a>
 8006104:	682a      	ldr	r2, [r5, #0]
 8006106:	06d3      	lsls	r3, r2, #27
 8006108:	d504      	bpl.n	8006114 <_vfiprintf_r+0x108>
 800610a:	2353      	movs	r3, #83	; 0x53
 800610c:	a904      	add	r1, sp, #16
 800610e:	185b      	adds	r3, r3, r1
 8006110:	2120      	movs	r1, #32
 8006112:	7019      	strb	r1, [r3, #0]
 8006114:	0713      	lsls	r3, r2, #28
 8006116:	d504      	bpl.n	8006122 <_vfiprintf_r+0x116>
 8006118:	2353      	movs	r3, #83	; 0x53
 800611a:	a904      	add	r1, sp, #16
 800611c:	185b      	adds	r3, r3, r1
 800611e:	212b      	movs	r1, #43	; 0x2b
 8006120:	7019      	strb	r1, [r3, #0]
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b2a      	cmp	r3, #42	; 0x2a
 8006128:	d016      	beq.n	8006158 <_vfiprintf_r+0x14c>
 800612a:	2100      	movs	r1, #0
 800612c:	68eb      	ldr	r3, [r5, #12]
 800612e:	9f03      	ldr	r7, [sp, #12]
 8006130:	783a      	ldrb	r2, [r7, #0]
 8006132:	1c78      	adds	r0, r7, #1
 8006134:	3a30      	subs	r2, #48	; 0x30
 8006136:	4684      	mov	ip, r0
 8006138:	2a09      	cmp	r2, #9
 800613a:	d94f      	bls.n	80061dc <_vfiprintf_r+0x1d0>
 800613c:	2900      	cmp	r1, #0
 800613e:	d111      	bne.n	8006164 <_vfiprintf_r+0x158>
 8006140:	e017      	b.n	8006172 <_vfiprintf_r+0x166>
 8006142:	3701      	adds	r7, #1
 8006144:	e7a9      	b.n	800609a <_vfiprintf_r+0x8e>
 8006146:	4b49      	ldr	r3, [pc, #292]	; (800626c <_vfiprintf_r+0x260>)
 8006148:	682a      	ldr	r2, [r5, #0]
 800614a:	1ac0      	subs	r0, r0, r3
 800614c:	2301      	movs	r3, #1
 800614e:	4083      	lsls	r3, r0
 8006150:	4313      	orrs	r3, r2
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	9703      	str	r7, [sp, #12]
 8006156:	e7cb      	b.n	80060f0 <_vfiprintf_r+0xe4>
 8006158:	9b07      	ldr	r3, [sp, #28]
 800615a:	1d19      	adds	r1, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9107      	str	r1, [sp, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db01      	blt.n	8006168 <_vfiprintf_r+0x15c>
 8006164:	930b      	str	r3, [sp, #44]	; 0x2c
 8006166:	e004      	b.n	8006172 <_vfiprintf_r+0x166>
 8006168:	425b      	negs	r3, r3
 800616a:	60eb      	str	r3, [r5, #12]
 800616c:	2302      	movs	r3, #2
 800616e:	4313      	orrs	r3, r2
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	783b      	ldrb	r3, [r7, #0]
 8006174:	2b2e      	cmp	r3, #46	; 0x2e
 8006176:	d10a      	bne.n	800618e <_vfiprintf_r+0x182>
 8006178:	787b      	ldrb	r3, [r7, #1]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d137      	bne.n	80061ee <_vfiprintf_r+0x1e2>
 800617e:	9b07      	ldr	r3, [sp, #28]
 8006180:	3702      	adds	r7, #2
 8006182:	1d1a      	adds	r2, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9207      	str	r2, [sp, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	db2d      	blt.n	80061e8 <_vfiprintf_r+0x1dc>
 800618c:	9309      	str	r3, [sp, #36]	; 0x24
 800618e:	2203      	movs	r2, #3
 8006190:	7839      	ldrb	r1, [r7, #0]
 8006192:	4837      	ldr	r0, [pc, #220]	; (8006270 <_vfiprintf_r+0x264>)
 8006194:	f000 fd1c 	bl	8006bd0 <memchr>
 8006198:	2800      	cmp	r0, #0
 800619a:	d007      	beq.n	80061ac <_vfiprintf_r+0x1a0>
 800619c:	4b34      	ldr	r3, [pc, #208]	; (8006270 <_vfiprintf_r+0x264>)
 800619e:	682a      	ldr	r2, [r5, #0]
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	4083      	lsls	r3, r0
 80061a6:	4313      	orrs	r3, r2
 80061a8:	3701      	adds	r7, #1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	7839      	ldrb	r1, [r7, #0]
 80061ae:	1c7b      	adds	r3, r7, #1
 80061b0:	2206      	movs	r2, #6
 80061b2:	4830      	ldr	r0, [pc, #192]	; (8006274 <_vfiprintf_r+0x268>)
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	7629      	strb	r1, [r5, #24]
 80061b8:	f000 fd0a 	bl	8006bd0 <memchr>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d045      	beq.n	800624c <_vfiprintf_r+0x240>
 80061c0:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <_vfiprintf_r+0x26c>)
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d127      	bne.n	8006216 <_vfiprintf_r+0x20a>
 80061c6:	2207      	movs	r2, #7
 80061c8:	9b07      	ldr	r3, [sp, #28]
 80061ca:	3307      	adds	r3, #7
 80061cc:	4393      	bics	r3, r2
 80061ce:	3308      	adds	r3, #8
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	696b      	ldr	r3, [r5, #20]
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	616b      	str	r3, [r5, #20]
 80061da:	e75d      	b.n	8006098 <_vfiprintf_r+0x8c>
 80061dc:	210a      	movs	r1, #10
 80061de:	434b      	muls	r3, r1
 80061e0:	4667      	mov	r7, ip
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	3909      	subs	r1, #9
 80061e6:	e7a3      	b.n	8006130 <_vfiprintf_r+0x124>
 80061e8:	2301      	movs	r3, #1
 80061ea:	425b      	negs	r3, r3
 80061ec:	e7ce      	b.n	800618c <_vfiprintf_r+0x180>
 80061ee:	2300      	movs	r3, #0
 80061f0:	001a      	movs	r2, r3
 80061f2:	3701      	adds	r7, #1
 80061f4:	606b      	str	r3, [r5, #4]
 80061f6:	7839      	ldrb	r1, [r7, #0]
 80061f8:	1c78      	adds	r0, r7, #1
 80061fa:	3930      	subs	r1, #48	; 0x30
 80061fc:	4684      	mov	ip, r0
 80061fe:	2909      	cmp	r1, #9
 8006200:	d903      	bls.n	800620a <_vfiprintf_r+0x1fe>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c3      	beq.n	800618e <_vfiprintf_r+0x182>
 8006206:	9209      	str	r2, [sp, #36]	; 0x24
 8006208:	e7c1      	b.n	800618e <_vfiprintf_r+0x182>
 800620a:	230a      	movs	r3, #10
 800620c:	435a      	muls	r2, r3
 800620e:	4667      	mov	r7, ip
 8006210:	1852      	adds	r2, r2, r1
 8006212:	3b09      	subs	r3, #9
 8006214:	e7ef      	b.n	80061f6 <_vfiprintf_r+0x1ea>
 8006216:	ab07      	add	r3, sp, #28
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	0022      	movs	r2, r4
 800621c:	0029      	movs	r1, r5
 800621e:	0030      	movs	r0, r6
 8006220:	4b16      	ldr	r3, [pc, #88]	; (800627c <_vfiprintf_r+0x270>)
 8006222:	e000      	b.n	8006226 <_vfiprintf_r+0x21a>
 8006224:	bf00      	nop
 8006226:	9004      	str	r0, [sp, #16]
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	3301      	adds	r3, #1
 800622c:	d1d1      	bne.n	80061d2 <_vfiprintf_r+0x1c6>
 800622e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d405      	bmi.n	8006240 <_vfiprintf_r+0x234>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	059b      	lsls	r3, r3, #22
 8006238:	d402      	bmi.n	8006240 <_vfiprintf_r+0x234>
 800623a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623c:	f000 fc5a 	bl	8006af4 <__retarget_lock_release_recursive>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	065b      	lsls	r3, r3, #25
 8006244:	d500      	bpl.n	8006248 <_vfiprintf_r+0x23c>
 8006246:	e70a      	b.n	800605e <_vfiprintf_r+0x52>
 8006248:	980d      	ldr	r0, [sp, #52]	; 0x34
 800624a:	e70a      	b.n	8006062 <_vfiprintf_r+0x56>
 800624c:	ab07      	add	r3, sp, #28
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	0022      	movs	r2, r4
 8006252:	0029      	movs	r1, r5
 8006254:	0030      	movs	r0, r6
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <_vfiprintf_r+0x270>)
 8006258:	f000 f882 	bl	8006360 <_printf_i>
 800625c:	e7e3      	b.n	8006226 <_vfiprintf_r+0x21a>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	08006ff8 	.word	0x08006ff8
 8006264:	08007018 	.word	0x08007018
 8006268:	08006fd8 	.word	0x08006fd8
 800626c:	08006fa2 	.word	0x08006fa2
 8006270:	08006fa8 	.word	0x08006fa8
 8006274:	08006fac 	.word	0x08006fac
 8006278:	00000000 	.word	0x00000000
 800627c:	08005fe7 	.word	0x08005fe7

08006280 <_printf_common>:
 8006280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006282:	0015      	movs	r5, r2
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	688a      	ldr	r2, [r1, #8]
 8006288:	690b      	ldr	r3, [r1, #16]
 800628a:	000c      	movs	r4, r1
 800628c:	9000      	str	r0, [sp, #0]
 800628e:	4293      	cmp	r3, r2
 8006290:	da00      	bge.n	8006294 <_printf_common+0x14>
 8006292:	0013      	movs	r3, r2
 8006294:	0022      	movs	r2, r4
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	3243      	adds	r2, #67	; 0x43
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	2a00      	cmp	r2, #0
 800629e:	d001      	beq.n	80062a4 <_printf_common+0x24>
 80062a0:	3301      	adds	r3, #1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	069b      	lsls	r3, r3, #26
 80062a8:	d502      	bpl.n	80062b0 <_printf_common+0x30>
 80062aa:	682b      	ldr	r3, [r5, #0]
 80062ac:	3302      	adds	r3, #2
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	2306      	movs	r3, #6
 80062b4:	0017      	movs	r7, r2
 80062b6:	401f      	ands	r7, r3
 80062b8:	421a      	tst	r2, r3
 80062ba:	d027      	beq.n	800630c <_printf_common+0x8c>
 80062bc:	0023      	movs	r3, r4
 80062be:	3343      	adds	r3, #67	; 0x43
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	4193      	sbcs	r3, r2
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	0692      	lsls	r2, r2, #26
 80062ca:	d430      	bmi.n	800632e <_printf_common+0xae>
 80062cc:	0022      	movs	r2, r4
 80062ce:	9901      	ldr	r1, [sp, #4]
 80062d0:	9800      	ldr	r0, [sp, #0]
 80062d2:	9e08      	ldr	r6, [sp, #32]
 80062d4:	3243      	adds	r2, #67	; 0x43
 80062d6:	47b0      	blx	r6
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d025      	beq.n	8006328 <_printf_common+0xa8>
 80062dc:	2306      	movs	r3, #6
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	682a      	ldr	r2, [r5, #0]
 80062e2:	68e1      	ldr	r1, [r4, #12]
 80062e4:	2500      	movs	r5, #0
 80062e6:	4003      	ands	r3, r0
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d103      	bne.n	80062f4 <_printf_common+0x74>
 80062ec:	1a8d      	subs	r5, r1, r2
 80062ee:	43eb      	mvns	r3, r5
 80062f0:	17db      	asrs	r3, r3, #31
 80062f2:	401d      	ands	r5, r3
 80062f4:	68a3      	ldr	r3, [r4, #8]
 80062f6:	6922      	ldr	r2, [r4, #16]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	dd01      	ble.n	8006300 <_printf_common+0x80>
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	18ed      	adds	r5, r5, r3
 8006300:	2700      	movs	r7, #0
 8006302:	42bd      	cmp	r5, r7
 8006304:	d120      	bne.n	8006348 <_printf_common+0xc8>
 8006306:	2000      	movs	r0, #0
 8006308:	e010      	b.n	800632c <_printf_common+0xac>
 800630a:	3701      	adds	r7, #1
 800630c:	68e3      	ldr	r3, [r4, #12]
 800630e:	682a      	ldr	r2, [r5, #0]
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	42bb      	cmp	r3, r7
 8006314:	ddd2      	ble.n	80062bc <_printf_common+0x3c>
 8006316:	0022      	movs	r2, r4
 8006318:	2301      	movs	r3, #1
 800631a:	9901      	ldr	r1, [sp, #4]
 800631c:	9800      	ldr	r0, [sp, #0]
 800631e:	9e08      	ldr	r6, [sp, #32]
 8006320:	3219      	adds	r2, #25
 8006322:	47b0      	blx	r6
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d1f0      	bne.n	800630a <_printf_common+0x8a>
 8006328:	2001      	movs	r0, #1
 800632a:	4240      	negs	r0, r0
 800632c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800632e:	2030      	movs	r0, #48	; 0x30
 8006330:	18e1      	adds	r1, r4, r3
 8006332:	3143      	adds	r1, #67	; 0x43
 8006334:	7008      	strb	r0, [r1, #0]
 8006336:	0021      	movs	r1, r4
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	3145      	adds	r1, #69	; 0x45
 800633c:	7809      	ldrb	r1, [r1, #0]
 800633e:	18a2      	adds	r2, r4, r2
 8006340:	3243      	adds	r2, #67	; 0x43
 8006342:	3302      	adds	r3, #2
 8006344:	7011      	strb	r1, [r2, #0]
 8006346:	e7c1      	b.n	80062cc <_printf_common+0x4c>
 8006348:	0022      	movs	r2, r4
 800634a:	2301      	movs	r3, #1
 800634c:	9901      	ldr	r1, [sp, #4]
 800634e:	9800      	ldr	r0, [sp, #0]
 8006350:	9e08      	ldr	r6, [sp, #32]
 8006352:	321a      	adds	r2, #26
 8006354:	47b0      	blx	r6
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d0e6      	beq.n	8006328 <_printf_common+0xa8>
 800635a:	3701      	adds	r7, #1
 800635c:	e7d1      	b.n	8006302 <_printf_common+0x82>
	...

08006360 <_printf_i>:
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	b08b      	sub	sp, #44	; 0x2c
 8006364:	9206      	str	r2, [sp, #24]
 8006366:	000a      	movs	r2, r1
 8006368:	3243      	adds	r2, #67	; 0x43
 800636a:	9307      	str	r3, [sp, #28]
 800636c:	9005      	str	r0, [sp, #20]
 800636e:	9204      	str	r2, [sp, #16]
 8006370:	7e0a      	ldrb	r2, [r1, #24]
 8006372:	000c      	movs	r4, r1
 8006374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006376:	2a78      	cmp	r2, #120	; 0x78
 8006378:	d807      	bhi.n	800638a <_printf_i+0x2a>
 800637a:	2a62      	cmp	r2, #98	; 0x62
 800637c:	d809      	bhi.n	8006392 <_printf_i+0x32>
 800637e:	2a00      	cmp	r2, #0
 8006380:	d100      	bne.n	8006384 <_printf_i+0x24>
 8006382:	e0c1      	b.n	8006508 <_printf_i+0x1a8>
 8006384:	2a58      	cmp	r2, #88	; 0x58
 8006386:	d100      	bne.n	800638a <_printf_i+0x2a>
 8006388:	e08c      	b.n	80064a4 <_printf_i+0x144>
 800638a:	0026      	movs	r6, r4
 800638c:	3642      	adds	r6, #66	; 0x42
 800638e:	7032      	strb	r2, [r6, #0]
 8006390:	e022      	b.n	80063d8 <_printf_i+0x78>
 8006392:	0010      	movs	r0, r2
 8006394:	3863      	subs	r0, #99	; 0x63
 8006396:	2815      	cmp	r0, #21
 8006398:	d8f7      	bhi.n	800638a <_printf_i+0x2a>
 800639a:	f7f9 fec9 	bl	8000130 <__gnu_thumb1_case_shi>
 800639e:	0016      	.short	0x0016
 80063a0:	fff6001f 	.word	0xfff6001f
 80063a4:	fff6fff6 	.word	0xfff6fff6
 80063a8:	001ffff6 	.word	0x001ffff6
 80063ac:	fff6fff6 	.word	0xfff6fff6
 80063b0:	fff6fff6 	.word	0xfff6fff6
 80063b4:	003600a8 	.word	0x003600a8
 80063b8:	fff6009a 	.word	0xfff6009a
 80063bc:	00b9fff6 	.word	0x00b9fff6
 80063c0:	0036fff6 	.word	0x0036fff6
 80063c4:	fff6fff6 	.word	0xfff6fff6
 80063c8:	009e      	.short	0x009e
 80063ca:	0026      	movs	r6, r4
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	3642      	adds	r6, #66	; 0x42
 80063d0:	1d11      	adds	r1, r2, #4
 80063d2:	6019      	str	r1, [r3, #0]
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	7033      	strb	r3, [r6, #0]
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a7      	b.n	800652c <_printf_i+0x1cc>
 80063dc:	6808      	ldr	r0, [r1, #0]
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	1d0a      	adds	r2, r1, #4
 80063e2:	0605      	lsls	r5, r0, #24
 80063e4:	d50b      	bpl.n	80063fe <_printf_i+0x9e>
 80063e6:	680d      	ldr	r5, [r1, #0]
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	da03      	bge.n	80063f6 <_printf_i+0x96>
 80063ee:	232d      	movs	r3, #45	; 0x2d
 80063f0:	9a04      	ldr	r2, [sp, #16]
 80063f2:	426d      	negs	r5, r5
 80063f4:	7013      	strb	r3, [r2, #0]
 80063f6:	4b61      	ldr	r3, [pc, #388]	; (800657c <_printf_i+0x21c>)
 80063f8:	270a      	movs	r7, #10
 80063fa:	9303      	str	r3, [sp, #12]
 80063fc:	e01b      	b.n	8006436 <_printf_i+0xd6>
 80063fe:	680d      	ldr	r5, [r1, #0]
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	0641      	lsls	r1, r0, #25
 8006404:	d5f1      	bpl.n	80063ea <_printf_i+0x8a>
 8006406:	b22d      	sxth	r5, r5
 8006408:	e7ef      	b.n	80063ea <_printf_i+0x8a>
 800640a:	680d      	ldr	r5, [r1, #0]
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	1d08      	adds	r0, r1, #4
 8006410:	6018      	str	r0, [r3, #0]
 8006412:	062e      	lsls	r6, r5, #24
 8006414:	d501      	bpl.n	800641a <_printf_i+0xba>
 8006416:	680d      	ldr	r5, [r1, #0]
 8006418:	e003      	b.n	8006422 <_printf_i+0xc2>
 800641a:	066d      	lsls	r5, r5, #25
 800641c:	d5fb      	bpl.n	8006416 <_printf_i+0xb6>
 800641e:	680d      	ldr	r5, [r1, #0]
 8006420:	b2ad      	uxth	r5, r5
 8006422:	4b56      	ldr	r3, [pc, #344]	; (800657c <_printf_i+0x21c>)
 8006424:	2708      	movs	r7, #8
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	2a6f      	cmp	r2, #111	; 0x6f
 800642a:	d000      	beq.n	800642e <_printf_i+0xce>
 800642c:	3702      	adds	r7, #2
 800642e:	0023      	movs	r3, r4
 8006430:	2200      	movs	r2, #0
 8006432:	3343      	adds	r3, #67	; 0x43
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	60a3      	str	r3, [r4, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	db03      	blt.n	8006446 <_printf_i+0xe6>
 800643e:	2204      	movs	r2, #4
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	4391      	bics	r1, r2
 8006444:	6021      	str	r1, [r4, #0]
 8006446:	2d00      	cmp	r5, #0
 8006448:	d102      	bne.n	8006450 <_printf_i+0xf0>
 800644a:	9e04      	ldr	r6, [sp, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <_printf_i+0x10a>
 8006450:	9e04      	ldr	r6, [sp, #16]
 8006452:	0028      	movs	r0, r5
 8006454:	0039      	movs	r1, r7
 8006456:	f7f9 fefb 	bl	8000250 <__aeabi_uidivmod>
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	3e01      	subs	r6, #1
 800645e:	5c5b      	ldrb	r3, [r3, r1]
 8006460:	7033      	strb	r3, [r6, #0]
 8006462:	002b      	movs	r3, r5
 8006464:	0005      	movs	r5, r0
 8006466:	429f      	cmp	r7, r3
 8006468:	d9f3      	bls.n	8006452 <_printf_i+0xf2>
 800646a:	2f08      	cmp	r7, #8
 800646c:	d109      	bne.n	8006482 <_printf_i+0x122>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	07db      	lsls	r3, r3, #31
 8006472:	d506      	bpl.n	8006482 <_printf_i+0x122>
 8006474:	6863      	ldr	r3, [r4, #4]
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	4293      	cmp	r3, r2
 800647a:	dc02      	bgt.n	8006482 <_printf_i+0x122>
 800647c:	2330      	movs	r3, #48	; 0x30
 800647e:	3e01      	subs	r6, #1
 8006480:	7033      	strb	r3, [r6, #0]
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	1b9b      	subs	r3, r3, r6
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	9b07      	ldr	r3, [sp, #28]
 800648a:	0021      	movs	r1, r4
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	9805      	ldr	r0, [sp, #20]
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	aa09      	add	r2, sp, #36	; 0x24
 8006494:	f7ff fef4 	bl	8006280 <_printf_common>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d14c      	bne.n	8006536 <_printf_i+0x1d6>
 800649c:	2001      	movs	r0, #1
 800649e:	4240      	negs	r0, r0
 80064a0:	b00b      	add	sp, #44	; 0x2c
 80064a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a4:	3145      	adds	r1, #69	; 0x45
 80064a6:	700a      	strb	r2, [r1, #0]
 80064a8:	4a34      	ldr	r2, [pc, #208]	; (800657c <_printf_i+0x21c>)
 80064aa:	9203      	str	r2, [sp, #12]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	ca20      	ldmia	r2!, {r5}
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	0608      	lsls	r0, r1, #24
 80064b6:	d516      	bpl.n	80064e6 <_printf_i+0x186>
 80064b8:	07cb      	lsls	r3, r1, #31
 80064ba:	d502      	bpl.n	80064c2 <_printf_i+0x162>
 80064bc:	2320      	movs	r3, #32
 80064be:	4319      	orrs	r1, r3
 80064c0:	6021      	str	r1, [r4, #0]
 80064c2:	2710      	movs	r7, #16
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	d1b2      	bne.n	800642e <_printf_i+0xce>
 80064c8:	2320      	movs	r3, #32
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	439a      	bics	r2, r3
 80064ce:	6022      	str	r2, [r4, #0]
 80064d0:	e7ad      	b.n	800642e <_printf_i+0xce>
 80064d2:	2220      	movs	r2, #32
 80064d4:	6809      	ldr	r1, [r1, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	6022      	str	r2, [r4, #0]
 80064da:	0022      	movs	r2, r4
 80064dc:	2178      	movs	r1, #120	; 0x78
 80064de:	3245      	adds	r2, #69	; 0x45
 80064e0:	7011      	strb	r1, [r2, #0]
 80064e2:	4a27      	ldr	r2, [pc, #156]	; (8006580 <_printf_i+0x220>)
 80064e4:	e7e1      	b.n	80064aa <_printf_i+0x14a>
 80064e6:	0648      	lsls	r0, r1, #25
 80064e8:	d5e6      	bpl.n	80064b8 <_printf_i+0x158>
 80064ea:	b2ad      	uxth	r5, r5
 80064ec:	e7e4      	b.n	80064b8 <_printf_i+0x158>
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	680d      	ldr	r5, [r1, #0]
 80064f2:	1d10      	adds	r0, r2, #4
 80064f4:	6949      	ldr	r1, [r1, #20]
 80064f6:	6018      	str	r0, [r3, #0]
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	062e      	lsls	r6, r5, #24
 80064fc:	d501      	bpl.n	8006502 <_printf_i+0x1a2>
 80064fe:	6019      	str	r1, [r3, #0]
 8006500:	e002      	b.n	8006508 <_printf_i+0x1a8>
 8006502:	066d      	lsls	r5, r5, #25
 8006504:	d5fb      	bpl.n	80064fe <_printf_i+0x19e>
 8006506:	8019      	strh	r1, [r3, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	9e04      	ldr	r6, [sp, #16]
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	e7bb      	b.n	8006488 <_printf_i+0x128>
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	1d11      	adds	r1, r2, #4
 8006514:	6019      	str	r1, [r3, #0]
 8006516:	6816      	ldr	r6, [r2, #0]
 8006518:	2100      	movs	r1, #0
 800651a:	0030      	movs	r0, r6
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	f000 fb57 	bl	8006bd0 <memchr>
 8006522:	2800      	cmp	r0, #0
 8006524:	d001      	beq.n	800652a <_printf_i+0x1ca>
 8006526:	1b80      	subs	r0, r0, r6
 8006528:	6060      	str	r0, [r4, #4]
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	2300      	movs	r3, #0
 8006530:	9a04      	ldr	r2, [sp, #16]
 8006532:	7013      	strb	r3, [r2, #0]
 8006534:	e7a8      	b.n	8006488 <_printf_i+0x128>
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	0032      	movs	r2, r6
 800653a:	9906      	ldr	r1, [sp, #24]
 800653c:	9805      	ldr	r0, [sp, #20]
 800653e:	9d07      	ldr	r5, [sp, #28]
 8006540:	47a8      	blx	r5
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d0aa      	beq.n	800649c <_printf_i+0x13c>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	079b      	lsls	r3, r3, #30
 800654a:	d415      	bmi.n	8006578 <_printf_i+0x218>
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	68e0      	ldr	r0, [r4, #12]
 8006550:	4298      	cmp	r0, r3
 8006552:	daa5      	bge.n	80064a0 <_printf_i+0x140>
 8006554:	0018      	movs	r0, r3
 8006556:	e7a3      	b.n	80064a0 <_printf_i+0x140>
 8006558:	0022      	movs	r2, r4
 800655a:	2301      	movs	r3, #1
 800655c:	9906      	ldr	r1, [sp, #24]
 800655e:	9805      	ldr	r0, [sp, #20]
 8006560:	9e07      	ldr	r6, [sp, #28]
 8006562:	3219      	adds	r2, #25
 8006564:	47b0      	blx	r6
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d098      	beq.n	800649c <_printf_i+0x13c>
 800656a:	3501      	adds	r5, #1
 800656c:	68e3      	ldr	r3, [r4, #12]
 800656e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	42ab      	cmp	r3, r5
 8006574:	dcf0      	bgt.n	8006558 <_printf_i+0x1f8>
 8006576:	e7e9      	b.n	800654c <_printf_i+0x1ec>
 8006578:	2500      	movs	r5, #0
 800657a:	e7f7      	b.n	800656c <_printf_i+0x20c>
 800657c:	08006fb3 	.word	0x08006fb3
 8006580:	08006fc4 	.word	0x08006fc4

08006584 <_sbrk_r>:
 8006584:	2300      	movs	r3, #0
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_sbrk_r+0x20>)
 800658a:	0004      	movs	r4, r0
 800658c:	0008      	movs	r0, r1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f7fb fe22 	bl	80021d8 <_sbrk>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d103      	bne.n	80065a0 <_sbrk_r+0x1c>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d000      	beq.n	80065a0 <_sbrk_r+0x1c>
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	20001320 	.word	0x20001320

080065a8 <__swbuf_r>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	0005      	movs	r5, r0
 80065ac:	000e      	movs	r6, r1
 80065ae:	0014      	movs	r4, r2
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d004      	beq.n	80065be <__swbuf_r+0x16>
 80065b4:	6983      	ldr	r3, [r0, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <__swbuf_r+0x16>
 80065ba:	f000 f9f9 	bl	80069b0 <__sinit>
 80065be:	4b22      	ldr	r3, [pc, #136]	; (8006648 <__swbuf_r+0xa0>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d12e      	bne.n	8006622 <__swbuf_r+0x7a>
 80065c4:	686c      	ldr	r4, [r5, #4]
 80065c6:	69a3      	ldr	r3, [r4, #24]
 80065c8:	60a3      	str	r3, [r4, #8]
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	071b      	lsls	r3, r3, #28
 80065ce:	d532      	bpl.n	8006636 <__swbuf_r+0x8e>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d02f      	beq.n	8006636 <__swbuf_r+0x8e>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	b2f7      	uxtb	r7, r6
 80065dc:	1a98      	subs	r0, r3, r2
 80065de:	6963      	ldr	r3, [r4, #20]
 80065e0:	b2f6      	uxtb	r6, r6
 80065e2:	4283      	cmp	r3, r0
 80065e4:	dc05      	bgt.n	80065f2 <__swbuf_r+0x4a>
 80065e6:	0021      	movs	r1, r4
 80065e8:	0028      	movs	r0, r5
 80065ea:	f000 f93f 	bl	800686c <_fflush_r>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d127      	bne.n	8006642 <__swbuf_r+0x9a>
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	3001      	adds	r0, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	60a3      	str	r3, [r4, #8]
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	6022      	str	r2, [r4, #0]
 8006600:	701f      	strb	r7, [r3, #0]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	4283      	cmp	r3, r0
 8006606:	d004      	beq.n	8006612 <__swbuf_r+0x6a>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d507      	bpl.n	800661e <__swbuf_r+0x76>
 800660e:	2e0a      	cmp	r6, #10
 8006610:	d105      	bne.n	800661e <__swbuf_r+0x76>
 8006612:	0021      	movs	r1, r4
 8006614:	0028      	movs	r0, r5
 8006616:	f000 f929 	bl	800686c <_fflush_r>
 800661a:	2800      	cmp	r0, #0
 800661c:	d111      	bne.n	8006642 <__swbuf_r+0x9a>
 800661e:	0030      	movs	r0, r6
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <__swbuf_r+0xa4>)
 8006624:	429c      	cmp	r4, r3
 8006626:	d101      	bne.n	800662c <__swbuf_r+0x84>
 8006628:	68ac      	ldr	r4, [r5, #8]
 800662a:	e7cc      	b.n	80065c6 <__swbuf_r+0x1e>
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <__swbuf_r+0xa8>)
 800662e:	429c      	cmp	r4, r3
 8006630:	d1c9      	bne.n	80065c6 <__swbuf_r+0x1e>
 8006632:	68ec      	ldr	r4, [r5, #12]
 8006634:	e7c7      	b.n	80065c6 <__swbuf_r+0x1e>
 8006636:	0021      	movs	r1, r4
 8006638:	0028      	movs	r0, r5
 800663a:	f000 f80b 	bl	8006654 <__swsetup_r>
 800663e:	2800      	cmp	r0, #0
 8006640:	d0c9      	beq.n	80065d6 <__swbuf_r+0x2e>
 8006642:	2601      	movs	r6, #1
 8006644:	4276      	negs	r6, r6
 8006646:	e7ea      	b.n	800661e <__swbuf_r+0x76>
 8006648:	08006ff8 	.word	0x08006ff8
 800664c:	08007018 	.word	0x08007018
 8006650:	08006fd8 	.word	0x08006fd8

08006654 <__swsetup_r>:
 8006654:	4b37      	ldr	r3, [pc, #220]	; (8006734 <__swsetup_r+0xe0>)
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	681d      	ldr	r5, [r3, #0]
 800665a:	0006      	movs	r6, r0
 800665c:	000c      	movs	r4, r1
 800665e:	2d00      	cmp	r5, #0
 8006660:	d005      	beq.n	800666e <__swsetup_r+0x1a>
 8006662:	69ab      	ldr	r3, [r5, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <__swsetup_r+0x1a>
 8006668:	0028      	movs	r0, r5
 800666a:	f000 f9a1 	bl	80069b0 <__sinit>
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <__swsetup_r+0xe4>)
 8006670:	429c      	cmp	r4, r3
 8006672:	d10f      	bne.n	8006694 <__swsetup_r+0x40>
 8006674:	686c      	ldr	r4, [r5, #4]
 8006676:	230c      	movs	r3, #12
 8006678:	5ee2      	ldrsh	r2, [r4, r3]
 800667a:	b293      	uxth	r3, r2
 800667c:	0711      	lsls	r1, r2, #28
 800667e:	d42d      	bmi.n	80066dc <__swsetup_r+0x88>
 8006680:	06d9      	lsls	r1, r3, #27
 8006682:	d411      	bmi.n	80066a8 <__swsetup_r+0x54>
 8006684:	2309      	movs	r3, #9
 8006686:	2001      	movs	r0, #1
 8006688:	6033      	str	r3, [r6, #0]
 800668a:	3337      	adds	r3, #55	; 0x37
 800668c:	4313      	orrs	r3, r2
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	4240      	negs	r0, r0
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	4b29      	ldr	r3, [pc, #164]	; (800673c <__swsetup_r+0xe8>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d101      	bne.n	800669e <__swsetup_r+0x4a>
 800669a:	68ac      	ldr	r4, [r5, #8]
 800669c:	e7eb      	b.n	8006676 <__swsetup_r+0x22>
 800669e:	4b28      	ldr	r3, [pc, #160]	; (8006740 <__swsetup_r+0xec>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d1e8      	bne.n	8006676 <__swsetup_r+0x22>
 80066a4:	68ec      	ldr	r4, [r5, #12]
 80066a6:	e7e6      	b.n	8006676 <__swsetup_r+0x22>
 80066a8:	075b      	lsls	r3, r3, #29
 80066aa:	d513      	bpl.n	80066d4 <__swsetup_r+0x80>
 80066ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d008      	beq.n	80066c4 <__swsetup_r+0x70>
 80066b2:	0023      	movs	r3, r4
 80066b4:	3344      	adds	r3, #68	; 0x44
 80066b6:	4299      	cmp	r1, r3
 80066b8:	d002      	beq.n	80066c0 <__swsetup_r+0x6c>
 80066ba:	0030      	movs	r0, r6
 80066bc:	f7ff fb9c 	bl	8005df8 <_free_r>
 80066c0:	2300      	movs	r3, #0
 80066c2:	6363      	str	r3, [r4, #52]	; 0x34
 80066c4:	2224      	movs	r2, #36	; 0x24
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	4393      	bics	r3, r2
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	2300      	movs	r3, #0
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	2308      	movs	r3, #8
 80066d6:	89a2      	ldrh	r2, [r4, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <__swsetup_r+0xa6>
 80066e2:	21a0      	movs	r1, #160	; 0xa0
 80066e4:	2280      	movs	r2, #128	; 0x80
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	0089      	lsls	r1, r1, #2
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	400b      	ands	r3, r1
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <__swsetup_r+0xa6>
 80066f2:	0021      	movs	r1, r4
 80066f4:	0030      	movs	r0, r6
 80066f6:	f000 fa27 	bl	8006b48 <__smakebuf_r>
 80066fa:	220c      	movs	r2, #12
 80066fc:	5ea3      	ldrsh	r3, [r4, r2]
 80066fe:	2001      	movs	r0, #1
 8006700:	001a      	movs	r2, r3
 8006702:	b299      	uxth	r1, r3
 8006704:	4002      	ands	r2, r0
 8006706:	4203      	tst	r3, r0
 8006708:	d00f      	beq.n	800672a <__swsetup_r+0xd6>
 800670a:	2200      	movs	r2, #0
 800670c:	60a2      	str	r2, [r4, #8]
 800670e:	6962      	ldr	r2, [r4, #20]
 8006710:	4252      	negs	r2, r2
 8006712:	61a2      	str	r2, [r4, #24]
 8006714:	2000      	movs	r0, #0
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	4282      	cmp	r2, r0
 800671a:	d1ba      	bne.n	8006692 <__swsetup_r+0x3e>
 800671c:	060a      	lsls	r2, r1, #24
 800671e:	d5b8      	bpl.n	8006692 <__swsetup_r+0x3e>
 8006720:	2240      	movs	r2, #64	; 0x40
 8006722:	4313      	orrs	r3, r2
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	3801      	subs	r0, #1
 8006728:	e7b3      	b.n	8006692 <__swsetup_r+0x3e>
 800672a:	0788      	lsls	r0, r1, #30
 800672c:	d400      	bmi.n	8006730 <__swsetup_r+0xdc>
 800672e:	6962      	ldr	r2, [r4, #20]
 8006730:	60a2      	str	r2, [r4, #8]
 8006732:	e7ef      	b.n	8006714 <__swsetup_r+0xc0>
 8006734:	20000034 	.word	0x20000034
 8006738:	08006ff8 	.word	0x08006ff8
 800673c:	08007018 	.word	0x08007018
 8006740:	08006fd8 	.word	0x08006fd8

08006744 <abort>:
 8006744:	2006      	movs	r0, #6
 8006746:	b510      	push	{r4, lr}
 8006748:	f000 fa88 	bl	8006c5c <raise>
 800674c:	2001      	movs	r0, #1
 800674e:	f7fb fd17 	bl	8002180 <_exit>
	...

08006754 <__sflush_r>:
 8006754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006756:	898b      	ldrh	r3, [r1, #12]
 8006758:	0005      	movs	r5, r0
 800675a:	000c      	movs	r4, r1
 800675c:	071a      	lsls	r2, r3, #28
 800675e:	d45f      	bmi.n	8006820 <__sflush_r+0xcc>
 8006760:	684a      	ldr	r2, [r1, #4]
 8006762:	2a00      	cmp	r2, #0
 8006764:	dc04      	bgt.n	8006770 <__sflush_r+0x1c>
 8006766:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006768:	2a00      	cmp	r2, #0
 800676a:	dc01      	bgt.n	8006770 <__sflush_r+0x1c>
 800676c:	2000      	movs	r0, #0
 800676e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006770:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006772:	2f00      	cmp	r7, #0
 8006774:	d0fa      	beq.n	800676c <__sflush_r+0x18>
 8006776:	2200      	movs	r2, #0
 8006778:	2180      	movs	r1, #128	; 0x80
 800677a:	682e      	ldr	r6, [r5, #0]
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	001a      	movs	r2, r3
 8006780:	0149      	lsls	r1, r1, #5
 8006782:	400a      	ands	r2, r1
 8006784:	420b      	tst	r3, r1
 8006786:	d034      	beq.n	80067f2 <__sflush_r+0x9e>
 8006788:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	075b      	lsls	r3, r3, #29
 800678e:	d506      	bpl.n	800679e <__sflush_r+0x4a>
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	1ac0      	subs	r0, r0, r3
 8006794:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <__sflush_r+0x4a>
 800679a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800679c:	1ac0      	subs	r0, r0, r3
 800679e:	0002      	movs	r2, r0
 80067a0:	6a21      	ldr	r1, [r4, #32]
 80067a2:	2300      	movs	r3, #0
 80067a4:	0028      	movs	r0, r5
 80067a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80067a8:	47b8      	blx	r7
 80067aa:	89a1      	ldrh	r1, [r4, #12]
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d106      	bne.n	80067be <__sflush_r+0x6a>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	2b1d      	cmp	r3, #29
 80067b4:	d831      	bhi.n	800681a <__sflush_r+0xc6>
 80067b6:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <__sflush_r+0x114>)
 80067b8:	40da      	lsrs	r2, r3
 80067ba:	07d3      	lsls	r3, r2, #31
 80067bc:	d52d      	bpl.n	800681a <__sflush_r+0xc6>
 80067be:	2300      	movs	r3, #0
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	04cb      	lsls	r3, r1, #19
 80067c8:	d505      	bpl.n	80067d6 <__sflush_r+0x82>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d102      	bne.n	80067d4 <__sflush_r+0x80>
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d100      	bne.n	80067d6 <__sflush_r+0x82>
 80067d4:	6560      	str	r0, [r4, #84]	; 0x54
 80067d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d8:	602e      	str	r6, [r5, #0]
 80067da:	2900      	cmp	r1, #0
 80067dc:	d0c6      	beq.n	800676c <__sflush_r+0x18>
 80067de:	0023      	movs	r3, r4
 80067e0:	3344      	adds	r3, #68	; 0x44
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d002      	beq.n	80067ec <__sflush_r+0x98>
 80067e6:	0028      	movs	r0, r5
 80067e8:	f7ff fb06 	bl	8005df8 <_free_r>
 80067ec:	2000      	movs	r0, #0
 80067ee:	6360      	str	r0, [r4, #52]	; 0x34
 80067f0:	e7bd      	b.n	800676e <__sflush_r+0x1a>
 80067f2:	2301      	movs	r3, #1
 80067f4:	0028      	movs	r0, r5
 80067f6:	6a21      	ldr	r1, [r4, #32]
 80067f8:	47b8      	blx	r7
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d1c5      	bne.n	800678a <__sflush_r+0x36>
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0c2      	beq.n	800678a <__sflush_r+0x36>
 8006804:	2b1d      	cmp	r3, #29
 8006806:	d001      	beq.n	800680c <__sflush_r+0xb8>
 8006808:	2b16      	cmp	r3, #22
 800680a:	d101      	bne.n	8006810 <__sflush_r+0xbc>
 800680c:	602e      	str	r6, [r5, #0]
 800680e:	e7ad      	b.n	800676c <__sflush_r+0x18>
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	89a2      	ldrh	r2, [r4, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	e7a9      	b.n	800676e <__sflush_r+0x1a>
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	430b      	orrs	r3, r1
 800681e:	e7fa      	b.n	8006816 <__sflush_r+0xc2>
 8006820:	690f      	ldr	r7, [r1, #16]
 8006822:	2f00      	cmp	r7, #0
 8006824:	d0a2      	beq.n	800676c <__sflush_r+0x18>
 8006826:	680a      	ldr	r2, [r1, #0]
 8006828:	600f      	str	r7, [r1, #0]
 800682a:	1bd2      	subs	r2, r2, r7
 800682c:	9201      	str	r2, [sp, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	079b      	lsls	r3, r3, #30
 8006832:	d100      	bne.n	8006836 <__sflush_r+0xe2>
 8006834:	694a      	ldr	r2, [r1, #20]
 8006836:	60a2      	str	r2, [r4, #8]
 8006838:	9b01      	ldr	r3, [sp, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dc00      	bgt.n	8006840 <__sflush_r+0xec>
 800683e:	e795      	b.n	800676c <__sflush_r+0x18>
 8006840:	003a      	movs	r2, r7
 8006842:	0028      	movs	r0, r5
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	6a21      	ldr	r1, [r4, #32]
 8006848:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800684a:	47b0      	blx	r6
 800684c:	2800      	cmp	r0, #0
 800684e:	dc06      	bgt.n	800685e <__sflush_r+0x10a>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	2001      	movs	r0, #1
 8006854:	89a2      	ldrh	r2, [r4, #12]
 8006856:	4240      	negs	r0, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	e787      	b.n	800676e <__sflush_r+0x1a>
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	183f      	adds	r7, r7, r0
 8006862:	1a1b      	subs	r3, r3, r0
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	e7e7      	b.n	8006838 <__sflush_r+0xe4>
 8006868:	20400001 	.word	0x20400001

0800686c <_fflush_r>:
 800686c:	690b      	ldr	r3, [r1, #16]
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	0005      	movs	r5, r0
 8006872:	000c      	movs	r4, r1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <_fflush_r+0x12>
 8006878:	2500      	movs	r5, #0
 800687a:	0028      	movs	r0, r5
 800687c:	bd70      	pop	{r4, r5, r6, pc}
 800687e:	2800      	cmp	r0, #0
 8006880:	d004      	beq.n	800688c <_fflush_r+0x20>
 8006882:	6983      	ldr	r3, [r0, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <_fflush_r+0x20>
 8006888:	f000 f892 	bl	80069b0 <__sinit>
 800688c:	4b14      	ldr	r3, [pc, #80]	; (80068e0 <_fflush_r+0x74>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d11b      	bne.n	80068ca <_fflush_r+0x5e>
 8006892:	686c      	ldr	r4, [r5, #4]
 8006894:	220c      	movs	r2, #12
 8006896:	5ea3      	ldrsh	r3, [r4, r2]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ed      	beq.n	8006878 <_fflush_r+0xc>
 800689c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800689e:	07d2      	lsls	r2, r2, #31
 80068a0:	d404      	bmi.n	80068ac <_fflush_r+0x40>
 80068a2:	059b      	lsls	r3, r3, #22
 80068a4:	d402      	bmi.n	80068ac <_fflush_r+0x40>
 80068a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a8:	f000 f923 	bl	8006af2 <__retarget_lock_acquire_recursive>
 80068ac:	0028      	movs	r0, r5
 80068ae:	0021      	movs	r1, r4
 80068b0:	f7ff ff50 	bl	8006754 <__sflush_r>
 80068b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068b6:	0005      	movs	r5, r0
 80068b8:	07db      	lsls	r3, r3, #31
 80068ba:	d4de      	bmi.n	800687a <_fflush_r+0xe>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	059b      	lsls	r3, r3, #22
 80068c0:	d4db      	bmi.n	800687a <_fflush_r+0xe>
 80068c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068c4:	f000 f916 	bl	8006af4 <__retarget_lock_release_recursive>
 80068c8:	e7d7      	b.n	800687a <_fflush_r+0xe>
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <_fflush_r+0x78>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	d101      	bne.n	80068d4 <_fflush_r+0x68>
 80068d0:	68ac      	ldr	r4, [r5, #8]
 80068d2:	e7df      	b.n	8006894 <_fflush_r+0x28>
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <_fflush_r+0x7c>)
 80068d6:	429c      	cmp	r4, r3
 80068d8:	d1dc      	bne.n	8006894 <_fflush_r+0x28>
 80068da:	68ec      	ldr	r4, [r5, #12]
 80068dc:	e7da      	b.n	8006894 <_fflush_r+0x28>
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	08006ff8 	.word	0x08006ff8
 80068e4:	08007018 	.word	0x08007018
 80068e8:	08006fd8 	.word	0x08006fd8

080068ec <std>:
 80068ec:	2300      	movs	r3, #0
 80068ee:	b510      	push	{r4, lr}
 80068f0:	0004      	movs	r4, r0
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	6043      	str	r3, [r0, #4]
 80068f6:	6083      	str	r3, [r0, #8]
 80068f8:	8181      	strh	r1, [r0, #12]
 80068fa:	6643      	str	r3, [r0, #100]	; 0x64
 80068fc:	0019      	movs	r1, r3
 80068fe:	81c2      	strh	r2, [r0, #14]
 8006900:	6103      	str	r3, [r0, #16]
 8006902:	6143      	str	r3, [r0, #20]
 8006904:	6183      	str	r3, [r0, #24]
 8006906:	2208      	movs	r2, #8
 8006908:	305c      	adds	r0, #92	; 0x5c
 800690a:	f7ff f9c7 	bl	8005c9c <memset>
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <std+0x38>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	6263      	str	r3, [r4, #36]	; 0x24
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <std+0x3c>)
 8006916:	62a3      	str	r3, [r4, #40]	; 0x28
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <std+0x40>)
 800691a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <std+0x44>)
 800691e:	6323      	str	r3, [r4, #48]	; 0x30
 8006920:	bd10      	pop	{r4, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	08006c9d 	.word	0x08006c9d
 8006928:	08006cc5 	.word	0x08006cc5
 800692c:	08006cfd 	.word	0x08006cfd
 8006930:	08006d29 	.word	0x08006d29

08006934 <_cleanup_r>:
 8006934:	b510      	push	{r4, lr}
 8006936:	4902      	ldr	r1, [pc, #8]	; (8006940 <_cleanup_r+0xc>)
 8006938:	f000 f8ba 	bl	8006ab0 <_fwalk_reent>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	0800686d 	.word	0x0800686d

08006944 <__sfmoreglue>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	2568      	movs	r5, #104	; 0x68
 8006948:	1e4a      	subs	r2, r1, #1
 800694a:	4355      	muls	r5, r2
 800694c:	000e      	movs	r6, r1
 800694e:	0029      	movs	r1, r5
 8006950:	3174      	adds	r1, #116	; 0x74
 8006952:	f7ff fabd 	bl	8005ed0 <_malloc_r>
 8006956:	1e04      	subs	r4, r0, #0
 8006958:	d008      	beq.n	800696c <__sfmoreglue+0x28>
 800695a:	2100      	movs	r1, #0
 800695c:	002a      	movs	r2, r5
 800695e:	6001      	str	r1, [r0, #0]
 8006960:	6046      	str	r6, [r0, #4]
 8006962:	300c      	adds	r0, #12
 8006964:	60a0      	str	r0, [r4, #8]
 8006966:	3268      	adds	r2, #104	; 0x68
 8006968:	f7ff f998 	bl	8005c9c <memset>
 800696c:	0020      	movs	r0, r4
 800696e:	bd70      	pop	{r4, r5, r6, pc}

08006970 <__sfp_lock_acquire>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4802      	ldr	r0, [pc, #8]	; (800697c <__sfp_lock_acquire+0xc>)
 8006974:	f000 f8bd 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	2000131d 	.word	0x2000131d

08006980 <__sfp_lock_release>:
 8006980:	b510      	push	{r4, lr}
 8006982:	4802      	ldr	r0, [pc, #8]	; (800698c <__sfp_lock_release+0xc>)
 8006984:	f000 f8b6 	bl	8006af4 <__retarget_lock_release_recursive>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	2000131d 	.word	0x2000131d

08006990 <__sinit_lock_acquire>:
 8006990:	b510      	push	{r4, lr}
 8006992:	4802      	ldr	r0, [pc, #8]	; (800699c <__sinit_lock_acquire+0xc>)
 8006994:	f000 f8ad 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	2000131e 	.word	0x2000131e

080069a0 <__sinit_lock_release>:
 80069a0:	b510      	push	{r4, lr}
 80069a2:	4802      	ldr	r0, [pc, #8]	; (80069ac <__sinit_lock_release+0xc>)
 80069a4:	f000 f8a6 	bl	8006af4 <__retarget_lock_release_recursive>
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	2000131e 	.word	0x2000131e

080069b0 <__sinit>:
 80069b0:	b513      	push	{r0, r1, r4, lr}
 80069b2:	0004      	movs	r4, r0
 80069b4:	f7ff ffec 	bl	8006990 <__sinit_lock_acquire>
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <__sinit+0x14>
 80069be:	f7ff ffef 	bl	80069a0 <__sinit_lock_release>
 80069c2:	bd13      	pop	{r0, r1, r4, pc}
 80069c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80069c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80069c8:	6523      	str	r3, [r4, #80]	; 0x50
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <__sinit+0x68>)
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <__sinit+0x6c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d101      	bne.n	80069dc <__sinit+0x2c>
 80069d8:	2301      	movs	r3, #1
 80069da:	61a3      	str	r3, [r4, #24]
 80069dc:	0020      	movs	r0, r4
 80069de:	f000 f81f 	bl	8006a20 <__sfp>
 80069e2:	6060      	str	r0, [r4, #4]
 80069e4:	0020      	movs	r0, r4
 80069e6:	f000 f81b 	bl	8006a20 <__sfp>
 80069ea:	60a0      	str	r0, [r4, #8]
 80069ec:	0020      	movs	r0, r4
 80069ee:	f000 f817 	bl	8006a20 <__sfp>
 80069f2:	2200      	movs	r2, #0
 80069f4:	2104      	movs	r1, #4
 80069f6:	60e0      	str	r0, [r4, #12]
 80069f8:	6860      	ldr	r0, [r4, #4]
 80069fa:	f7ff ff77 	bl	80068ec <std>
 80069fe:	2201      	movs	r2, #1
 8006a00:	2109      	movs	r1, #9
 8006a02:	68a0      	ldr	r0, [r4, #8]
 8006a04:	f7ff ff72 	bl	80068ec <std>
 8006a08:	2202      	movs	r2, #2
 8006a0a:	2112      	movs	r1, #18
 8006a0c:	68e0      	ldr	r0, [r4, #12]
 8006a0e:	f7ff ff6d 	bl	80068ec <std>
 8006a12:	2301      	movs	r3, #1
 8006a14:	61a3      	str	r3, [r4, #24]
 8006a16:	e7d2      	b.n	80069be <__sinit+0xe>
 8006a18:	08006ef0 	.word	0x08006ef0
 8006a1c:	08006935 	.word	0x08006935

08006a20 <__sfp>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	0007      	movs	r7, r0
 8006a24:	f7ff ffa4 	bl	8006970 <__sfp_lock_acquire>
 8006a28:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <__sfp+0x88>)
 8006a2a:	681e      	ldr	r6, [r3, #0]
 8006a2c:	69b3      	ldr	r3, [r6, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <__sfp+0x18>
 8006a32:	0030      	movs	r0, r6
 8006a34:	f7ff ffbc 	bl	80069b0 <__sinit>
 8006a38:	3648      	adds	r6, #72	; 0x48
 8006a3a:	68b4      	ldr	r4, [r6, #8]
 8006a3c:	6873      	ldr	r3, [r6, #4]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	d504      	bpl.n	8006a4c <__sfp+0x2c>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d022      	beq.n	8006a8e <__sfp+0x6e>
 8006a48:	6836      	ldr	r6, [r6, #0]
 8006a4a:	e7f6      	b.n	8006a3a <__sfp+0x1a>
 8006a4c:	220c      	movs	r2, #12
 8006a4e:	5ea5      	ldrsh	r5, [r4, r2]
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	d11a      	bne.n	8006a8a <__sfp+0x6a>
 8006a54:	0020      	movs	r0, r4
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <__sfp+0x8c>)
 8006a58:	3058      	adds	r0, #88	; 0x58
 8006a5a:	60e3      	str	r3, [r4, #12]
 8006a5c:	6665      	str	r5, [r4, #100]	; 0x64
 8006a5e:	f000 f847 	bl	8006af0 <__retarget_lock_init_recursive>
 8006a62:	f7ff ff8d 	bl	8006980 <__sfp_lock_release>
 8006a66:	0020      	movs	r0, r4
 8006a68:	2208      	movs	r2, #8
 8006a6a:	0029      	movs	r1, r5
 8006a6c:	6025      	str	r5, [r4, #0]
 8006a6e:	60a5      	str	r5, [r4, #8]
 8006a70:	6065      	str	r5, [r4, #4]
 8006a72:	6125      	str	r5, [r4, #16]
 8006a74:	6165      	str	r5, [r4, #20]
 8006a76:	61a5      	str	r5, [r4, #24]
 8006a78:	305c      	adds	r0, #92	; 0x5c
 8006a7a:	f7ff f90f 	bl	8005c9c <memset>
 8006a7e:	6365      	str	r5, [r4, #52]	; 0x34
 8006a80:	63a5      	str	r5, [r4, #56]	; 0x38
 8006a82:	64a5      	str	r5, [r4, #72]	; 0x48
 8006a84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006a86:	0020      	movs	r0, r4
 8006a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8a:	3468      	adds	r4, #104	; 0x68
 8006a8c:	e7d7      	b.n	8006a3e <__sfp+0x1e>
 8006a8e:	2104      	movs	r1, #4
 8006a90:	0038      	movs	r0, r7
 8006a92:	f7ff ff57 	bl	8006944 <__sfmoreglue>
 8006a96:	1e04      	subs	r4, r0, #0
 8006a98:	6030      	str	r0, [r6, #0]
 8006a9a:	d1d5      	bne.n	8006a48 <__sfp+0x28>
 8006a9c:	f7ff ff70 	bl	8006980 <__sfp_lock_release>
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	e7ef      	b.n	8006a86 <__sfp+0x66>
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	08006ef0 	.word	0x08006ef0
 8006aac:	ffff0001 	.word	0xffff0001

08006ab0 <_fwalk_reent>:
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	0004      	movs	r4, r0
 8006ab4:	0006      	movs	r6, r0
 8006ab6:	2700      	movs	r7, #0
 8006ab8:	9101      	str	r1, [sp, #4]
 8006aba:	3448      	adds	r4, #72	; 0x48
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	68a5      	ldr	r5, [r4, #8]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	d504      	bpl.n	8006ad4 <_fwalk_reent+0x24>
 8006aca:	6824      	ldr	r4, [r4, #0]
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	d1f5      	bne.n	8006abc <_fwalk_reent+0xc>
 8006ad0:	0038      	movs	r0, r7
 8006ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ad4:	89ab      	ldrh	r3, [r5, #12]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d908      	bls.n	8006aec <_fwalk_reent+0x3c>
 8006ada:	220e      	movs	r2, #14
 8006adc:	5eab      	ldrsh	r3, [r5, r2]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	d004      	beq.n	8006aec <_fwalk_reent+0x3c>
 8006ae2:	0029      	movs	r1, r5
 8006ae4:	0030      	movs	r0, r6
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	4798      	blx	r3
 8006aea:	4307      	orrs	r7, r0
 8006aec:	3568      	adds	r5, #104	; 0x68
 8006aee:	e7e8      	b.n	8006ac2 <_fwalk_reent+0x12>

08006af0 <__retarget_lock_init_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_acquire_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_release_recursive>:
 8006af4:	4770      	bx	lr
	...

08006af8 <__swhatbuf_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	000e      	movs	r6, r1
 8006afc:	001d      	movs	r5, r3
 8006afe:	230e      	movs	r3, #14
 8006b00:	5ec9      	ldrsh	r1, [r1, r3]
 8006b02:	0014      	movs	r4, r2
 8006b04:	b096      	sub	sp, #88	; 0x58
 8006b06:	2900      	cmp	r1, #0
 8006b08:	da08      	bge.n	8006b1c <__swhatbuf_r+0x24>
 8006b0a:	220c      	movs	r2, #12
 8006b0c:	5eb3      	ldrsh	r3, [r6, r2]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	602a      	str	r2, [r5, #0]
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	d411      	bmi.n	8006b3a <__swhatbuf_r+0x42>
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	e00f      	b.n	8006b3c <__swhatbuf_r+0x44>
 8006b1c:	466a      	mov	r2, sp
 8006b1e:	f000 f92f 	bl	8006d80 <_fstat_r>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	dbf1      	blt.n	8006b0a <__swhatbuf_r+0x12>
 8006b26:	23f0      	movs	r3, #240	; 0xf0
 8006b28:	9901      	ldr	r1, [sp, #4]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	4019      	ands	r1, r3
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <__swhatbuf_r+0x4c>)
 8006b30:	18c9      	adds	r1, r1, r3
 8006b32:	424b      	negs	r3, r1
 8006b34:	4159      	adcs	r1, r3
 8006b36:	6029      	str	r1, [r5, #0]
 8006b38:	e7ed      	b.n	8006b16 <__swhatbuf_r+0x1e>
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	b016      	add	sp, #88	; 0x58
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	ffffe000 	.word	0xffffe000

08006b48 <__smakebuf_r>:
 8006b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4a:	2602      	movs	r6, #2
 8006b4c:	898b      	ldrh	r3, [r1, #12]
 8006b4e:	0005      	movs	r5, r0
 8006b50:	000c      	movs	r4, r1
 8006b52:	4233      	tst	r3, r6
 8006b54:	d006      	beq.n	8006b64 <__smakebuf_r+0x1c>
 8006b56:	0023      	movs	r3, r4
 8006b58:	3347      	adds	r3, #71	; 0x47
 8006b5a:	6023      	str	r3, [r4, #0]
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	2301      	movs	r3, #1
 8006b60:	6163      	str	r3, [r4, #20]
 8006b62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006b64:	466a      	mov	r2, sp
 8006b66:	ab01      	add	r3, sp, #4
 8006b68:	f7ff ffc6 	bl	8006af8 <__swhatbuf_r>
 8006b6c:	9900      	ldr	r1, [sp, #0]
 8006b6e:	0007      	movs	r7, r0
 8006b70:	0028      	movs	r0, r5
 8006b72:	f7ff f9ad 	bl	8005ed0 <_malloc_r>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d108      	bne.n	8006b8c <__smakebuf_r+0x44>
 8006b7a:	220c      	movs	r2, #12
 8006b7c:	5ea3      	ldrsh	r3, [r4, r2]
 8006b7e:	059a      	lsls	r2, r3, #22
 8006b80:	d4ef      	bmi.n	8006b62 <__smakebuf_r+0x1a>
 8006b82:	2203      	movs	r2, #3
 8006b84:	4393      	bics	r3, r2
 8006b86:	431e      	orrs	r6, r3
 8006b88:	81a6      	strh	r6, [r4, #12]
 8006b8a:	e7e4      	b.n	8006b56 <__smakebuf_r+0xe>
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <__smakebuf_r+0x84>)
 8006b8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	89a2      	ldrh	r2, [r4, #12]
 8006b94:	6020      	str	r0, [r4, #0]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	9b00      	ldr	r3, [sp, #0]
 8006b9c:	6120      	str	r0, [r4, #16]
 8006b9e:	6163      	str	r3, [r4, #20]
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <__smakebuf_r+0x7a>
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	230e      	movs	r3, #14
 8006baa:	5ee1      	ldrsh	r1, [r4, r3]
 8006bac:	f000 f8fa 	bl	8006da4 <_isatty_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d006      	beq.n	8006bc2 <__smakebuf_r+0x7a>
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	4393      	bics	r3, r2
 8006bba:	001a      	movs	r2, r3
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	89a0      	ldrh	r0, [r4, #12]
 8006bc4:	4307      	orrs	r7, r0
 8006bc6:	81a7      	strh	r7, [r4, #12]
 8006bc8:	e7cb      	b.n	8006b62 <__smakebuf_r+0x1a>
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	08006935 	.word	0x08006935

08006bd0 <memchr>:
 8006bd0:	b2c9      	uxtb	r1, r1
 8006bd2:	1882      	adds	r2, r0, r2
 8006bd4:	4290      	cmp	r0, r2
 8006bd6:	d101      	bne.n	8006bdc <memchr+0xc>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4770      	bx	lr
 8006bdc:	7803      	ldrb	r3, [r0, #0]
 8006bde:	428b      	cmp	r3, r1
 8006be0:	d0fb      	beq.n	8006bda <memchr+0xa>
 8006be2:	3001      	adds	r0, #1
 8006be4:	e7f6      	b.n	8006bd4 <memchr+0x4>
	...

08006be8 <__malloc_lock>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4802      	ldr	r0, [pc, #8]	; (8006bf4 <__malloc_lock+0xc>)
 8006bec:	f7ff ff81 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	2000131c 	.word	0x2000131c

08006bf8 <__malloc_unlock>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4802      	ldr	r0, [pc, #8]	; (8006c04 <__malloc_unlock+0xc>)
 8006bfc:	f7ff ff7a 	bl	8006af4 <__retarget_lock_release_recursive>
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	2000131c 	.word	0x2000131c

08006c08 <_raise_r>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	0004      	movs	r4, r0
 8006c0c:	000d      	movs	r5, r1
 8006c0e:	291f      	cmp	r1, #31
 8006c10:	d904      	bls.n	8006c1c <_raise_r+0x14>
 8006c12:	2316      	movs	r3, #22
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	2001      	movs	r0, #1
 8006c18:	4240      	negs	r0, r0
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <_raise_r+0x24>
 8006c22:	008a      	lsls	r2, r1, #2
 8006c24:	189b      	adds	r3, r3, r2
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d108      	bne.n	8006c3e <_raise_r+0x36>
 8006c2c:	0020      	movs	r0, r4
 8006c2e:	f000 f831 	bl	8006c94 <_getpid_r>
 8006c32:	002a      	movs	r2, r5
 8006c34:	0001      	movs	r1, r0
 8006c36:	0020      	movs	r0, r4
 8006c38:	f000 f81a 	bl	8006c70 <_kill_r>
 8006c3c:	e7ed      	b.n	8006c1a <_raise_r+0x12>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	d0ea      	beq.n	8006c1a <_raise_r+0x12>
 8006c44:	1c51      	adds	r1, r2, #1
 8006c46:	d103      	bne.n	8006c50 <_raise_r+0x48>
 8006c48:	2316      	movs	r3, #22
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	e7e4      	b.n	8006c1a <_raise_r+0x12>
 8006c50:	2400      	movs	r4, #0
 8006c52:	0028      	movs	r0, r5
 8006c54:	601c      	str	r4, [r3, #0]
 8006c56:	4790      	blx	r2
 8006c58:	0020      	movs	r0, r4
 8006c5a:	e7de      	b.n	8006c1a <_raise_r+0x12>

08006c5c <raise>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <raise+0x10>)
 8006c60:	0001      	movs	r1, r0
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	f7ff ffd0 	bl	8006c08 <_raise_r>
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	20000034 	.word	0x20000034

08006c70 <_kill_r>:
 8006c70:	2300      	movs	r3, #0
 8006c72:	b570      	push	{r4, r5, r6, lr}
 8006c74:	4d06      	ldr	r5, [pc, #24]	; (8006c90 <_kill_r+0x20>)
 8006c76:	0004      	movs	r4, r0
 8006c78:	0008      	movs	r0, r1
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	f7fb fa77 	bl	8002170 <_kill>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d103      	bne.n	8006c8e <_kill_r+0x1e>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d000      	beq.n	8006c8e <_kill_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	20001320 	.word	0x20001320

08006c94 <_getpid_r>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	f7fb fa69 	bl	800216c <_getpid>
 8006c9a:	bd10      	pop	{r4, pc}

08006c9c <__sread>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	000c      	movs	r4, r1
 8006ca0:	250e      	movs	r5, #14
 8006ca2:	5f49      	ldrsh	r1, [r1, r5]
 8006ca4:	f000 f8a4 	bl	8006df0 <_read_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	db03      	blt.n	8006cb4 <__sread+0x18>
 8006cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cae:	181b      	adds	r3, r3, r0
 8006cb0:	6563      	str	r3, [r4, #84]	; 0x54
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	4a02      	ldr	r2, [pc, #8]	; (8006cc0 <__sread+0x24>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	e7f9      	b.n	8006cb2 <__sread+0x16>
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	ffffefff 	.word	0xffffefff

08006cc4 <__swrite>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	001f      	movs	r7, r3
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	0005      	movs	r5, r0
 8006ccc:	000c      	movs	r4, r1
 8006cce:	0016      	movs	r6, r2
 8006cd0:	05db      	lsls	r3, r3, #23
 8006cd2:	d505      	bpl.n	8006ce0 <__swrite+0x1c>
 8006cd4:	230e      	movs	r3, #14
 8006cd6:	5ec9      	ldrsh	r1, [r1, r3]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2302      	movs	r3, #2
 8006cdc:	f000 f874 	bl	8006dc8 <_lseek_r>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <__swrite+0x34>)
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	0032      	movs	r2, r6
 8006cec:	230e      	movs	r3, #14
 8006cee:	5ee1      	ldrsh	r1, [r4, r3]
 8006cf0:	003b      	movs	r3, r7
 8006cf2:	f000 f81f 	bl	8006d34 <_write_r>
 8006cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf8:	ffffefff 	.word	0xffffefff

08006cfc <__sseek>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	000c      	movs	r4, r1
 8006d00:	250e      	movs	r5, #14
 8006d02:	5f49      	ldrsh	r1, [r1, r5]
 8006d04:	f000 f860 	bl	8006dc8 <_lseek_r>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	1c42      	adds	r2, r0, #1
 8006d0c:	d103      	bne.n	8006d16 <__sseek+0x1a>
 8006d0e:	4a05      	ldr	r2, [pc, #20]	; (8006d24 <__sseek+0x28>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	0152      	lsls	r2, r2, #5
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d20:	e7f8      	b.n	8006d14 <__sseek+0x18>
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	ffffefff 	.word	0xffffefff

08006d28 <__sclose>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	230e      	movs	r3, #14
 8006d2c:	5ec9      	ldrsh	r1, [r1, r3]
 8006d2e:	f000 f815 	bl	8006d5c <_close_r>
 8006d32:	bd10      	pop	{r4, pc}

08006d34 <_write_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	0004      	movs	r4, r0
 8006d38:	0008      	movs	r0, r1
 8006d3a:	0011      	movs	r1, r2
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d05      	ldr	r5, [pc, #20]	; (8006d58 <_write_r+0x24>)
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7fb fa2f 	bl	80021a6 <_write>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d103      	bne.n	8006d54 <_write_r+0x20>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d000      	beq.n	8006d54 <_write_r+0x20>
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	20001320 	.word	0x20001320

08006d5c <_close_r>:
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	b570      	push	{r4, r5, r6, lr}
 8006d60:	4d06      	ldr	r5, [pc, #24]	; (8006d7c <_close_r+0x20>)
 8006d62:	0004      	movs	r4, r0
 8006d64:	0008      	movs	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7fb fa2a 	bl	80021c0 <_close>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d103      	bne.n	8006d78 <_close_r+0x1c>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d000      	beq.n	8006d78 <_close_r+0x1c>
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	bd70      	pop	{r4, r5, r6, pc}
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	20001320 	.word	0x20001320

08006d80 <_fstat_r>:
 8006d80:	2300      	movs	r3, #0
 8006d82:	b570      	push	{r4, r5, r6, lr}
 8006d84:	4d06      	ldr	r5, [pc, #24]	; (8006da0 <_fstat_r+0x20>)
 8006d86:	0004      	movs	r4, r0
 8006d88:	0008      	movs	r0, r1
 8006d8a:	0011      	movs	r1, r2
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	f7fb fa1a 	bl	80021c6 <_fstat>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d103      	bne.n	8006d9e <_fstat_r+0x1e>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d000      	beq.n	8006d9e <_fstat_r+0x1e>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	20001320 	.word	0x20001320

08006da4 <_isatty_r>:
 8006da4:	2300      	movs	r3, #0
 8006da6:	b570      	push	{r4, r5, r6, lr}
 8006da8:	4d06      	ldr	r5, [pc, #24]	; (8006dc4 <_isatty_r+0x20>)
 8006daa:	0004      	movs	r4, r0
 8006dac:	0008      	movs	r0, r1
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	f7fb fa0e 	bl	80021d0 <_isatty>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d103      	bne.n	8006dc0 <_isatty_r+0x1c>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d000      	beq.n	8006dc0 <_isatty_r+0x1c>
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	20001320 	.word	0x20001320

08006dc8 <_lseek_r>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	0004      	movs	r4, r0
 8006dcc:	0008      	movs	r0, r1
 8006dce:	0011      	movs	r1, r2
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4d05      	ldr	r5, [pc, #20]	; (8006dec <_lseek_r+0x24>)
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7fb f9fc 	bl	80021d4 <_lseek>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d103      	bne.n	8006de8 <_lseek_r+0x20>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d000      	beq.n	8006de8 <_lseek_r+0x20>
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	20001320 	.word	0x20001320

08006df0 <_read_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	0004      	movs	r4, r0
 8006df4:	0008      	movs	r0, r1
 8006df6:	0011      	movs	r1, r2
 8006df8:	001a      	movs	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4d05      	ldr	r5, [pc, #20]	; (8006e14 <_read_r+0x24>)
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	f7fb f9c4 	bl	800218c <_read>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d103      	bne.n	8006e10 <_read_r+0x20>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d000      	beq.n	8006e10 <_read_r+0x20>
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	20001320 	.word	0x20001320

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
